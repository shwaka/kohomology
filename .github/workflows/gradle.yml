# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Test

on:
  push:
    branches: [ main ]
    paths: [ 'kohomology/**', 'profile/**', '.github/workflows/gradle.yml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'kohomology/**', 'profile/**', '.github/workflows/gradle.yml' ]
  workflow_dispatch:

jobs:
  build-jvm:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: kohomology
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-jvm-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-jvm-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Download dependencies # Not necessary, but useful to make the log clean
        run: ./gradlew dependencies --configuration jvmTestRuntimeClasspath --stacktrace
      - name: Compile with Gradle
        run: ./gradlew compileKotlinJvm
      - name: Test with Gradle
        run: ./gradlew jvmTest -Dkococo.debug
      - name: Jacoco Test Report
        run: ./gradlew jacocoTestReport
      - name: Upload to codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }} # "token not required for public repositories" らしい…？
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN}
      - name: Check with ktlint
        run: ./gradlew kc # This will run ktlintCheck for ALL projects (see build.gradle.kts)

  benchmark:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-jvm-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-jvm-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install kohomology to MavenLocal
        run: ./gradlew publishToMavenLocal
        working-directory: kohomology
      - name: Run benchmark
        run: ./gradlew benchmark
        working-directory: profile
      - name: Format benchmark result
        run: ./gradlew formatBenchmarkResult
        working-directory: profile
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: customSmallerIsBetter
          output-file-path: profile/build/kohomology/benchmark/output.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          gh-pages-branch: benchmark-data

  generate-site:
    runs-on: ubuntu-latest
    env:
      BENCHMARK_DATA_DIR: benchmark-data
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-jvm-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-jvm-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download dependencies # Not necessary, but useful to make the log clean
        run: |
          ./gradlew dependencies --configuration nativeCompileKlibraries --stacktrace
          ./gradlew dependencies --configuration dokkaHtmlRuntime --stacktrace
        working-directory: kohomology
      - name: Generate documentation by dokka
        run: ./gradlew dokkaHtml
        working-directory: kohomology
      - name: Compute coverage
        run: ./gradlew dokkacovWriteJson
        working-directory: kohomology
      - name: Checkout benchmark-data branch as a subdirectory
        uses: actions/checkout@v2
        with:
          path: ${{ env.BENCHMARK_DATA_DIR }}
          ref: benchmark-data
      - name: Build site
        run: |
          mkdir site
          cp -r kohomology/build/dokka/html site/dokka
          cp -r $BENCHMARK_DATA_DIR/dev/bench site/benchmark
      - name: Upload
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
