(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[237],{7826:(e,n,t)=>{"use strict";t.d(n,{C:()=>u});var o=t(1287),a=t(6464),r=t(7294);const i={};function l(e){let{href:n,linkTitle:t,...o}=e;return r.createElement("div",{className:i.MyCodeBlock},null!==n&&r.createElement("a",{href:n,target:"_blank",rel:"noreferrer"},null!==t?t:n),r.createElement(a.Z,o,o.children))}const s="error_c9xe";function m(e){const n=e.map((e=>function(e){if(""===e)return 1/0;const n=new RegExp("^ *"),t=e.match(n);if(null===t)throw new Error("This can't happen");return t[0].length}(e))),t=Math.min(...n);return e.map((e=>e.substring(t)))}function c(e,n){return!0===n?new RegExp(`// \\\\${e}`):new RegExp(`// \\\\${e}{${n}}`)}function p(e,n){if(void 0===n)return{text:e};const t=c("begin",n),o=c("end",n);return function(e,n,t){const o=e.findIndex((e=>e.match(n))),a=e.findIndex((e=>e.match(t)));return-1===o||-1===a?null:{text:m(e.slice(o+1,a)).join("\n"),begin:o+2,end:a}}(e.split("\n"),t,o)}const g=t(5284);function h(e){return e.startsWith("./")?e:"./"+e}const d=new Map(g.keys().map((e=>[h(e),g(e).default])));function u(e){const n=`${o.g}/website/sample/src/main/kotlin/${e.path}`,t=d.get(h(e.path));if(void 0===t)return r.createElement("div",null,`Invalid path: ${e.path}`);const a=p(t,e.restrict);if(null===a)return r.createElement("div",{className:e.className},r.createElement("div",{className:s},"ERROR: ",r.createElement("code",null,e.restrict)," is not found in ",r.createElement("a",{href:n},n)));const i=function(e){return"begin"in e}(a)?`${n}#L${a.begin}-L${a.end}`:n;return r.createElement("div",{className:e.className},r.createElement(l,{className:"language-kotlin",href:i,linkTitle:e.path},a.text))}},1287:(e,n,t)=>{"use strict";t.d(n,{g:()=>o});const o="https://github.com/shwaka/kohomology/blob/main"},6728:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>x});var o=t(9960),a=t(2263),r=t(6464),i=t(8842),l=t(6010),s=t(7294),m=t(7462);const c="features_xdhU",p=[{title:"Compute cohomology efficiently",description:s.createElement(s.Fragment,null,"Kohomology can compute the cohomology of a Sullivan algebra. Since it can be done with ",s.createElement(o.Z,{href:"https://en.wikipedia.org/wiki/Sparse_matrix"},"sparse matrices"),", we can compute complicated examples.")},{title:"DGA morphisms",description:s.createElement(s.Fragment,null,"Kohomology can also compute DGA morphisms, especially from Sullivan algebras. Derivations on Sullivan algebras are also supported.")},{title:"Kotlin multiplatform library",description:s.createElement(s.Fragment,null,"Kohomology is a ",s.createElement(o.Z,{href:"https://kotlinlang.org/"},"Kotlin")," ",s.createElement(o.Z,{href:"https://kotlinlang.org/docs/multiplatform.html"},"multiplatform")," library. You can use it in any Kotlin program. There is also an online ",s.createElement(o.Z,{href:"./calculator"},"Calculator")," powered by ",s.createElement(o.Z,{href:"https://kotlinlang.org/docs/js-overview.html"},"Kotlin/JS"),".")}];function g(e){let{title:n,description:t}=e;return s.createElement("div",{className:(0,l.Z)("col col--4")},s.createElement("div",{className:"text--center padding-horiz--md"},s.createElement("h3",null,n),s.createElement("p",null,t)))}function h(){return s.createElement("section",{className:c},s.createElement("div",{className:"container"},s.createElement("div",{className:"row"},p.map(((e,n)=>s.createElement(g,(0,m.Z)({key:n},e)))))))}var d=t(7826);const u="heroBanner_qdFl",f="buttons_AeoN",b="exampleColumnContainer_lTjZ",y="exampleColumn_aMtc";function v(){const{siteConfig:e}=(0,a.Z)();return s.createElement("header",{className:(0,l.Z)("hero hero--primary",u)},s.createElement("div",{className:"container"},s.createElement("h1",{className:"hero__title"},e.title),s.createElement("p",{className:"hero__subtitle"},e.tagline),s.createElement("div",{className:f},s.createElement(o.Z,{className:"button button--secondary button--lg",to:"/docs/intro"},"Documentation"))))}function x(){const{siteConfig:e}=(0,a.Z)();return s.createElement(i.Z,{title:`${e.title}`,description:"A library to compute the cohomology of Sullivan algebras"},s.createElement(v,null),s.createElement("main",null,s.createElement(h,null),s.createElement("div",{className:b},s.createElement(d.C,{path:"TopPageExample.kt",restrict:!0,className:(0,l.Z)("col col--4",y)}),s.createElement("div",{className:(0,l.Z)("col col--4",y)},"This code prints:",s.createElement(r.Z,null,"H^0 = Q[[1]]\nH^1 = Q[]\nH^2 = Q[[a], [b]]\nH^3 = Q[]\nH^4 = Q[]\nH^5 = Q[[- ay + bx], [- az + by]]\nH^6 = Q[]\nH^7 = Q[[- a^2z + aby]]\nH^8 = Q[]\nH^9 = Q[]")))))}},9589:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra(matrixSpace, sphereIndeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra(matrixSpace, sphereProductIndeterminateList) { (a1, _, a2, _) ->\n        listOf(zeroGVector, a1.pow(2), zeroGVector, a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},9798:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{sphere}\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n    // \\end{sphere}\n\n    // \\begin{freeLoopSpace}\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.generatorList\n    // \\end{freeLoopSpace}\n\n    // \\begin{computation}\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{computation}\n\n    // \\begin{freeLoopSpaceWithMultiDegree}\n    val freeLoopSpaceWithMultiDegree = FreeLoopSpace.withShiftDegree(sphere)\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{freeLoopSpaceWithMultiDegree}\n}\n'},2303:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        listOf(zeroGVector, x.pow(2), zeroGVector, a.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},7663:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\nimport com.github.shwaka.kohomology.util.ShowShift\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        listOf(zeroGVector, zeroGVector, a.pow(2), a * b, b.pow(2))\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX, showShift = ShowShift.BAR)\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n", showShift = ShowShift.BAR)\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},4742:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the constructor of FreeDGAlgebra.\n    // The last argument is a function\n    // which receives list of generators and returns the list of the values of the differential.\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        // zeroGVector is a special element that represents zero in any degree.\n        val dx = zeroGVector\n        // x.pow(2) represents x^2\n        val dy = x.pow(2)\n        listOf(dx, dy)\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},2632:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        val da = zeroGVector // da = 0\n        val db = zeroGVector // db = 0\n        val dx = a.pow(2) // dx = a^2\n        val dy = a * b // dy = ab\n        val dz = b.pow(2) // dz = b^2\n        listOf(da, db, dx, dy, dz)\n    }\n    for (degree in 0 until 10) {\n        val basis = freeDGAlgebra.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},5284:(e,n,t)=>{var o={"./DGAlgebraMap.kt":9589,"./FreeLoopSpace.kt":9798,"./MultiDegree.kt":2303,"./PrintTex.kt":7663,"./SphereModel.kt":4742,"./TopPageExample.kt":2632};function a(e){var n=r(e);return t(n)}function r(e){if(!t.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=r,e.exports=a,a.id=5284}}]);