(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[663],{7826:(e,a,n)=>{"use strict";n.d(a,{C:()=>k});var t=n(1287),s=n(6464),r=n(7294);const m={};function o(e){let{href:a,linkTitle:n,...t}=e;return r.createElement("div",{className:m.MyCodeBlock},null!==a&&r.createElement("a",{href:a,target:"_blank",rel:"noreferrer"},null!==n?n:a),r.createElement(s.Z,t,t.children))}const p="error_c9xe";function i(e){const a=e.map((e=>function(e){if(""===e)return 1/0;const a=new RegExp("^ *"),n=e.match(a);if(null===n)throw new Error("This can't happen");return n[0].length}(e))),n=Math.min(...a);return e.map((e=>e.substring(n)))}function l(e,a){return!0===a?new RegExp(`// \\\\${e}`):new RegExp(`// \\\\${e}{${a}}`)}function c(e,a){if(void 0===a)return{text:e};const n=l("begin",a),t=l("end",a);return function(e,a,n){const t=e.findIndex((e=>e.match(a))),s=e.findIndex((e=>e.match(n)));return-1===t||-1===s?null:{text:i(e.slice(t+1,s)).join("\n"),begin:t+2,end:s}}(e.split("\n"),n,t)}const h=n(5284);function g(e){return e.startsWith("./")?e:"./"+e}const d=new Map(h.keys().map((e=>[g(e),h(e).default])));function k(e){const a=`${t.g}/website/sample/src/main/kotlin/${e.path}`,n=d.get(g(e.path));if(void 0===n)return r.createElement("div",null,`Invalid path: ${e.path}`);const s=c(n,e.restrict);if(null===s)return r.createElement("div",{className:e.className},r.createElement("div",{className:p},"ERROR: ",r.createElement("code",null,e.restrict)," is not found in ",r.createElement("a",{href:a},a)));const m=function(e){return"begin"in e}(s)?`${a}#L${s.begin}-L${s.end}`:a;return r.createElement("div",{className:e.className},r.createElement(o,{className:"language-kotlin",href:m,linkTitle:e.path},s.text))}},5740:(e,a,n)=>{"use strict";n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>m,metadata:()=>p,toc:()=>l});var t=n(7462),s=(n(7294),n(3905)),r=n(7826);const m={title:"Cohomology of Sullivan algebras",sidebar_position:3},o=void 0,p={unversionedId:"sullivan-algebra",id:"sullivan-algebra",title:"Cohomology of Sullivan algebras",description:"In this section, we explain a way to compute cohomology of a Sullivan algebra.",source:"@site/docs/sullivan-algebra.mdx",sourceDirName:".",slug:"/sullivan-algebra",permalink:"/kohomology/docs/sullivan-algebra",draft:!1,editUrl:"https://github.com/shwaka/kohomology/edit/main/website/docs/sullivan-algebra.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Cohomology of Sullivan algebras",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Quick start",permalink:"/kohomology/docs/quick-start"},next:{title:"Cohomology of free loop space",permalink:"/kohomology/docs/free-loop-space"}},i={},l=[{value:"Define a Sullivan algebra",id:"define-a-sullivan-algebra",level:2},{value:"Compute cohomology",id:"compute-cohomology",level:2},{value:"DGA operations",id:"dga-operations",level:2}],c={toc:l};function h(e){let{components:a,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this section, we explain a way to compute cohomology of a Sullivan algebra."),(0,s.kt)("h2",{id:"define-a-sullivan-algebra"},"Define a Sullivan algebra"),(0,s.kt)("p",null,"Consider the minimal Sullivan model of the ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))))),"-dimensional sphere.\nExplicitly it is written as ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u039b"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"y"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(\\Lambda(x, y), d)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u039b"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\nwhere the degrees are given by ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"deg"),(0,s.kt)("mo",{parentName:"mrow"},"\u2061"),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\deg{x}=2n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mop"},"de",(0,s.kt)("span",{parentName:"span",style:{marginRight:"0.01389em"}},"g")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"deg"),(0,s.kt)("mo",{parentName:"mrow"},"\u2061"),(0,s.kt)("mi",{parentName:"mrow"},"y"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"4"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\deg{y}=4n-1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mop"},"de",(0,s.kt)("span",{parentName:"span",style:{marginRight:"0.01389em"}},"g")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"4"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),", and\nthe differential is given by ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"dx=0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0")))))," and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"y"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"x"),(0,s.kt)("mn",{parentName:"msup"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"dy=x^2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))))))),".\nYou can define it as follows:"),(0,s.kt)(r.C,{path:"SphereModel.kt",restrict:"def",mdxType:"ImportKotlin"}),(0,s.kt)("p",null,"Note that ",(0,s.kt)("inlineCode",{parentName:"p"},"FreeDGAlgebra")," is the class for Sullivan algebras.\nIt is because, ignoring differentials, Sullivan algebras are free as commutative graded algebras."),(0,s.kt)("h2",{id:"compute-cohomology"},"Compute cohomology"),(0,s.kt)("p",null,"The cohomology of a ",(0,s.kt)("inlineCode",{parentName:"p"},"FreeDGAlgebra")," can be accessed from the member ",(0,s.kt)("inlineCode",{parentName:"p"},"cohomology"),"."),(0,s.kt)(r.C,{path:"SphereModel.kt",restrict:"cohomology",mdxType:"ImportKotlin"}),(0,s.kt)("h2",{id:"dga-operations"},"DGA operations"),(0,s.kt)("p",null,"DGA operations (e.g. sum, multiplication, differential) can be applied within ",(0,s.kt)("inlineCode",{parentName:"p"},"context.run"),"."),(0,s.kt)(r.C,{path:"SphereModel.kt",restrict:"context",mdxType:"ImportKotlin"}))}h.isMDXComponent=!0},9589:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra(matrixSpace, sphereIndeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra(matrixSpace, sphereProductIndeterminateList) { (a1, _, a2, _) ->\n        listOf(zeroGVector, a1.pow(2), zeroGVector, a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},9798:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.generatorList\n\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end\n}\n'},2303:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        listOf(zeroGVector, x.pow(2), zeroGVector, a.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},7663:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\nimport com.github.shwaka.kohomology.util.ShowShift\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        listOf(zeroGVector, zeroGVector, a.pow(2), a * b, b.pow(2))\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX, showShift = ShowShift.BAR)\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n", showShift = ShowShift.BAR)\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},4742:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the constructor of FreeDGAlgebra.\n    // The last argument is a function\n    // which receives list of generators and returns the list of the values of the differential.\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        // zeroGVector is a special element that represents zero in any degree.\n        val dx = zeroGVector\n        // x.pow(2) represents x^2\n        val dy = x.pow(2)\n        listOf(dx, dy)\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},2632:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        val da = zeroGVector // da = 0\n        val db = zeroGVector // db = 0\n        val dx = a.pow(2) // dx = a^2\n        val dy = a * b // dy = ab\n        val dz = b.pow(2) // dz = b^2\n        listOf(da, db, dx, dy, dz)\n    }\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},5284:(e,a,n)=>{var t={"./DGAlgebraMap.kt":9589,"./FreeLoopSpace.kt":9798,"./MultiDegree.kt":2303,"./PrintTex.kt":7663,"./SphereModel.kt":4742,"./TopPageExample.kt":2632};function s(e){var a=r(e);return n(a)}function r(e){if(!n.o(t,e)){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}return t[e]}s.keys=function(){return Object.keys(t)},s.resolve=r,e.exports=s,s.id=5284}}]);