(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[544],{16:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        mapOf(\n            y to x.pow(2),\n            b to a.pow(2),\n        )\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},1918:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, sphereIndeterminateList) { (x, y) ->\n        mapOf(y to x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra.fromMap(matrixSpace, sphereProductIndeterminateList) { (a1, b1, a2, b2) ->\n        mapOf(b1 to a1.pow(2), b2 to a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},1987:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{sphere}\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (x, y) ->\n        mapOf(y to x.pow(2)) // dx = 0, dy = x^2\n    }\n    // \\end{sphere}\n\n    // \\begin{freeLoopSpace}\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.generatorList\n    // \\end{freeLoopSpace}\n\n    // \\begin{computation}\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{computation}\n\n    // \\begin{freeLoopSpaceWithMultiDegree}\n    val freeLoopSpaceWithMultiDegree = FreeLoopSpace.withShiftDegree(sphere)\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{freeLoopSpaceWithMultiDegree}\n}\n'},4075:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        mapOf(\n            // da = 0\n            // db = 0\n            x to a.pow(2), // dx = a^2\n            y to a * b,    // dy = ab\n            z to b.pow(2), // dz = b^2\n        )\n    }\n    for (degree in 0 until 10) {\n        val basis = freeDGAlgebra.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},4658:(e,n,a)=>{var s={"./DGAlgebraMap.kt":1918,"./FreeLoopSpace.kt":1987,"./MultiDegree.kt":16,"./PrintTex.kt":8481,"./SphereModel.kt":8255,"./TopPageExample.kt":4075};function t(e){var n=r(e);return a(n)}function r(e){if(!a.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}t.keys=function(){return Object.keys(s)},t.resolve=r,e.exports=t,t.id=4658},5996:(e,n,a)=>{"use strict";a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sullivan-algebra","title":"Cohomology of Sullivan algebras","description":"In this section, we explain a way to compute cohomology of a Sullivan algebra.","source":"@site/docs/sullivan-algebra.mdx","sourceDirName":".","slug":"/sullivan-algebra","permalink":"/kohomology/docs/sullivan-algebra","draft":false,"unlisted":false,"editUrl":"https://github.com/shwaka/kohomology/edit/main/website/docs/sullivan-algebra.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Cohomology of Sullivan algebras","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Quick start","permalink":"/kohomology/docs/quick-start"},"next":{"title":"Cohomology of free loop space","permalink":"/kohomology/docs/free-loop-space"}}');var t=a(4848),r=a(8453),i=a(8916);const o={title:"Cohomology of Sullivan algebras",sidebar_position:3},l=void 0,m={},c=[{value:"Define a Sullivan algebra",id:"define-a-sullivan-algebra",level:2},{value:"Compute cohomology",id:"compute-cohomology",level:2},{value:"DGA operations",id:"dga-operations",level:2}];function h(e){const n={annotation:"annotation",code:"code",h2:"h2",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",semantics:"semantics",span:"span",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In this section, we explain a way to compute cohomology of a Sullivan algebra."}),"\n",(0,t.jsx)(n.h2,{id:"define-a-sullivan-algebra",children:"Define a Sullivan algebra"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the minimal Sullivan model of the ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mn,{children:"2"}),(0,t.jsx)(n.mi,{children:"n"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"2n"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"2"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-dimensional sphere.\nExplicitly it is written as ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsx)(n.mi,{mathvariant:"normal",children:"\u039b"}),(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsx)(n.mi,{children:"x"}),(0,t.jsx)(n.mo,{separator:"true",children:","}),(0,t.jsx)(n.mi,{children:"y"}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"}),(0,t.jsx)(n.mo,{separator:"true",children:","}),(0,t.jsx)(n.mi,{children:"d"}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"(\\Lambda(x, y), d)"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsx)(n.span,{className:"mord",children:"\u039b"}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,t.jsx)(n.span,{className:"mpunct",children:","}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,t.jsx)(n.span,{className:"mclose",children:")"}),(0,t.jsx)(n.span,{className:"mpunct",children:","}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"\nwhere the degrees are given by ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"deg"}),(0,t.jsx)(n.mo,{children:"\u2061"}),(0,t.jsx)(n.mi,{children:"x"}),(0,t.jsx)(n.mo,{children:"="}),(0,t.jsx)(n.mn,{children:"2"}),(0,t.jsx)(n.mi,{children:"n"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\deg{x}=2n"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,t.jsxs)(n.span,{className:"mop",children:["de",(0,t.jsx)(n.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(n.span,{className:"mord",children:(0,t.jsx)(n.span,{className:"mord mathnormal",children:"x"})}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"="}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"2"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})]})]})," and ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"deg"}),(0,t.jsx)(n.mo,{children:"\u2061"}),(0,t.jsx)(n.mi,{children:"y"}),(0,t.jsx)(n.mo,{children:"="}),(0,t.jsx)(n.mn,{children:"4"}),(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\deg{y}=4n-1"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,t.jsxs)(n.span,{className:"mop",children:["de",(0,t.jsx)(n.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(n.span,{className:"mord",children:(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"})}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"="}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord",children:"4"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"})]})]})]}),", and\nthe differential is given by ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"d"}),(0,t.jsx)(n.mi,{children:"x"}),(0,t.jsx)(n.mo,{children:"="}),(0,t.jsx)(n.mn,{children:"0"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"dx=0"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"="}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"0"})]})]})]})," and ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"d"}),(0,t.jsx)(n.mi,{children:"y"}),(0,t.jsx)(n.mo,{children:"="}),(0,t.jsxs)(n.msup,{children:[(0,t.jsx)(n.mi,{children:"x"}),(0,t.jsx)(n.mn,{children:"2"})]})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"dy=x^2"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"="}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,t.jsxs)(n.span,{className:"mord",children:[(0,t.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,t.jsx)(n.span,{className:"msupsub",children:(0,t.jsx)(n.span,{className:"vlist-t",children:(0,t.jsx)(n.span,{className:"vlist-r",children:(0,t.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(n.span,{className:"mord mtight",children:"2"})})]})})})})})]})]})]})]}),".\nYou can define it as follows:"]}),"\n",(0,t.jsx)(i.F,{path:"SphereModel.kt",restrict:"def"}),"\n",(0,t.jsxs)(n.p,{children:["Note that ",(0,t.jsx)(n.code,{children:"FreeDGAlgebra"})," is the class for Sullivan algebras.\nIt is because, ignoring differentials, Sullivan algebras are free as commutative graded algebras."]}),"\n",(0,t.jsx)(n.h2,{id:"compute-cohomology",children:"Compute cohomology"}),"\n",(0,t.jsxs)(n.p,{children:["The cohomology of a ",(0,t.jsx)(n.code,{children:"FreeDGAlgebra"})," can be accessed from the member ",(0,t.jsx)(n.code,{children:"cohomology"}),"."]}),"\n",(0,t.jsx)(i.F,{path:"SphereModel.kt",restrict:"cohomology"}),"\n",(0,t.jsx)(n.h2,{id:"dga-operations",children:"DGA operations"}),"\n",(0,t.jsxs)(n.p,{children:["DGA operations (e.g. sum, multiplication, differential) can be applied within ",(0,t.jsx)(n.code,{children:"context.run"}),"."]}),"\n",(0,t.jsx)(i.F,{path:"SphereModel.kt",restrict:"context"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8255:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the function FreeDGAlgebra.fromMap.\n    // The last argument is a function\n    // which receives the list of generators and returns the map representing the differential.\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (x, y) ->\n        mapOf(\n            y to x.pow(2),    // x.pow(2) represents x^2\n        )\n        // If you want, you can write dx = 0 explicitly in the code\n        // by using zeroGVector, a special element that represents zero in any degree.\n        // mapOf(\n        //     x to zeroGVector,\n        //     y to x.pow(2),\n        // )\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},8481:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>s});const s='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.CopiedNamePrintConfig\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.model.ShowShift\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        mapOf(\n            x to a.pow(2),\n            y to a * b,\n            z to b.pow(2),\n        )\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX) {\n        register(CopiedNamePrintConfig(ShowShift.BAR))\n    }\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n") {\n        register(CopiedNamePrintConfig(ShowShift.BAR))\n    }\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},8916:(e,n,a)=>{"use strict";a.d(n,{F:()=>x});var s=a(9981),t=a(1969);a(6540);const r={};var i=a(4848);function o(e){let{href:n,linkTitle:a,...s}=e;return(0,i.jsxs)("div",{className:r.MyCodeBlock,children:[null!==n&&(0,i.jsx)("a",{href:n,target:"_blank",rel:"noreferrer",children:null!==a?a:n}),(0,i.jsx)(t.A,{...s,children:s.children})]})}const l={error:"error_c9xe"};function m(e){const n=e.map((e=>function(e){if(""===e)return 1/0;const n=new RegExp("^ *"),a=e.match(n);if(null===a)throw new Error("This can't happen");return a[0].length}(e))),a=Math.min(...n);return e.map((e=>e.substring(a)))}function c(e,n){return!0===n?new RegExp(`// \\\\${e}`):new RegExp(`// \\\\${e}{${n}}`)}function h(e,n){if(void 0===n)return{text:e};const a=c("begin",n),s=c("end",n);return function(e,n,a){const s=e.findIndex((e=>e.match(n))),t=e.findIndex((e=>e.match(a)));return-1===s||-1===t?null:{text:m(e.slice(s+1,t)).join("\n"),begin:s+2,end:t}}(e.split("\n"),a,s)}const p=a(4658);function d(e){return e.startsWith("./")?e:"./"+e}const g=new Map(p.keys().map((e=>[d(e),p(e).default])));function x(e){const n=`${s._}/website/sample/src/main/kotlin/${e.path}`,a=g.get(d(e.path));if(void 0===a)return(0,i.jsx)("div",{children:`Invalid path: ${e.path}`});const t=h(a,e.restrict);if(null===t)return(0,i.jsx)("div",{className:e.className,children:(0,i.jsxs)("div",{className:l.error,children:["ERROR: ",(0,i.jsx)("code",{children:e.restrict})," is not found in ",(0,i.jsx)("a",{href:n,children:n})]})});const r=function(e){return"begin"in e}(t)?`${n}#L${t.begin}-L${t.end}`:n;return(0,i.jsx)("div",{className:e.className,children:(0,i.jsx)(o,{className:"language-kotlin",href:r,linkTitle:e.path,children:t.text})})}},9981:(e,n,a)=>{"use strict";a.d(n,{_:()=>s});const s="https://github.com/shwaka/kohomology/blob/main"}}]);