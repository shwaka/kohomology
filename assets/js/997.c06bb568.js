(()=>{"use strict";__webpack_require__.gca=function(t){return t={}[t]||t,__webpack_require__.p+__webpack_require__.u(t)};class t extends Error{constructor(t,e=`Unsupported type: ${t}`){super(e)}}class e{constructor({postWorkerOutput:t,updateState:e}){this.value=0,this.postWorkerOutput=t,this.updateState=e,this.workerFunc={}}onWorkerInput(t){this.value+=t.value,this.updateState("value",this.value);var e,s;const u={command:"printMessages",messages:[(e="success",s=`value=${this.value}`,{messageType:e,strings:[{stringType:"text",content:s}],plainString:s,options:[{text:s,label:"Copy this line"}]})]};this.postWorkerOutput(u)}}const s=self,u=function(e,s){const u=s({postWorkerOutput:t=>{e({type:"output",value:t})},updateState:(...t)=>{const s=t[0],u=t[1];e({type:"updateState",key:s,value:u})}});return{onmessage:s=>{const r=s.data;switch(r.type){case"input":return void u.onWorkerInput(r.value);case"callFunc":return void(t=>{const s=u.workerFunc[t.key](...t.args),r={type:"funcResult",key:t.key,result:s,id:t.id};e(r)})(r);default:throw new t(r,"onmessage is not exhaustive!")}}}}(s.postMessage.bind(s),(({postWorkerOutput:t,updateState:s})=>{const u=new e({postWorkerOutput:t,updateState:s});return{onWorkerInput:u.onWorkerInput.bind(u),workerFunc:u.workerFunc}}));onmessage=u.onmessage})();