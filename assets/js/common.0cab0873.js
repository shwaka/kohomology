(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[592],{3905:(e,n,t)=>{"use strict";t.d(n,{Zo:()=>p,kt:()=>u});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return t?o.createElement(g,i(i({ref:n},p),{},{components:t})):o.createElement(g,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},254:(e,n,t)=>{"use strict";t.d(n,{Z:()=>T});var o=t(3117),r=t(7294),a=t(6010);const i={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]};var l={Prism:t(1205).default,theme:i};function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(){return c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},c.apply(this,arguments)}var p=/\r\n|\r|\n/,m=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},d=function(e,n){var t=e.length;return t>0&&e[t-1]===n?e:e.concat(n)},u=function(e,n){var t=e.plain,o=Object.create(null),r=e.styles.reduce((function(e,t){var o=t.languages,r=t.style;return o&&!o.includes(n)||t.types.forEach((function(n){var t=c({},e[n],r);e[n]=t})),e}),o);return r.root=t,r.plain=c({},t,{backgroundColor:null}),r};function g(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===n.indexOf(o)&&(t[o]=e[o]);return t}const h=function(e){function n(){for(var n=this,t=[],o=arguments.length;o--;)t[o]=arguments[o];e.apply(this,t),s(this,"getThemeDict",(function(e){if(void 0!==n.themeDict&&e.theme===n.prevTheme&&e.language===n.prevLanguage)return n.themeDict;n.prevTheme=e.theme,n.prevLanguage=e.language;var t=e.theme?u(e.theme,e.language):void 0;return n.themeDict=t})),s(this,"getLineProps",(function(e){var t=e.key,o=e.className,r=e.style,a=c({},g(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=n.getThemeDict(n.props);return void 0!==i&&(a.style=i.plain),void 0!==r&&(a.style=void 0!==a.style?c({},a.style,r):r),void 0!==t&&(a.key=t),o&&(a.className+=" "+o),a})),s(this,"getStyleForToken",(function(e){var t=e.types,o=e.empty,r=t.length,a=n.getThemeDict(n.props);if(void 0!==a){if(1===r&&"plain"===t[0])return o?{display:"inline-block"}:void 0;if(1===r&&!o)return a[t[0]];var i=o?{display:"inline-block"}:{},l=t.map((function(e){return a[e]}));return Object.assign.apply(Object,[i].concat(l))}})),s(this,"getTokenProps",(function(e){var t=e.key,o=e.className,r=e.style,a=e.token,i=c({},g(e,["key","className","style","token"]),{className:"token "+a.types.join(" "),children:a.content,style:n.getStyleForToken(a),key:void 0});return void 0!==r&&(i.style=void 0!==i.style?c({},i.style,r):r),void 0!==t&&(i.key=t),o&&(i.className+=" "+o),i})),s(this,"tokenize",(function(e,n,t,o){var r={code:n,grammar:t,language:o,tokens:[]};e.hooks.run("before-tokenize",r);var a=r.tokens=e.tokenize(r.code,r.grammar,r.language);return e.hooks.run("after-tokenize",r),a}))}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.render=function(){var e=this.props,n=e.Prism,t=e.language,o=e.code,r=e.children,a=this.getThemeDict(this.props),i=n.languages[t];return r({tokens:function(e){for(var n=[[]],t=[e],o=[0],r=[e.length],a=0,i=0,l=[],s=[l];i>-1;){for(;(a=o[i]++)<r[i];){var c=void 0,u=n[i],g=t[i][a];if("string"==typeof g?(u=i>0?u:["plain"],c=g):(u=d(u,g.type),g.alias&&(u=d(u,g.alias)),c=g.content),"string"==typeof c){var h=c.split(p),y=h.length;l.push({types:u,content:h[0]});for(var f=1;f<y;f++)m(l),s.push(l=[]),l.push({types:u,content:h[f]})}else i++,n.push(u),t.push(c),o.push(0),r.push(c.length)}i--,n.pop(),t.pop(),o.pop(),r.pop()}return m(l),s}(void 0!==i?this.tokenize(n,o,i,t):[o]),className:"prism-code language-"+t,style:void 0!==a?a.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},n}(r.Component);var y=t(5199);var f=t(5999);const b="copyButton_eDfN",v="copyButtonCopied_ljy5",k="copyButtonIcons_W9eQ",x="copyButtonIcon_XEyF",w="copyButtonSuccessIcon_i9w9";function S(e){let{code:n}=e;const[t,o]=(0,r.useState)(!1),i=(0,r.useRef)(void 0),l=(0,r.useCallback)((()=>{!function(e,n){let{target:t=document.body}=void 0===n?{}:n;const o=document.createElement("textarea"),r=document.activeElement;o.value=e,o.setAttribute("readonly",""),o.style.contain="strict",o.style.position="absolute",o.style.left="-9999px",o.style.fontSize="12pt";const a=document.getSelection();let i=!1;a.rangeCount>0&&(i=a.getRangeAt(0)),t.append(o),o.select(),o.selectionStart=0,o.selectionEnd=e.length;let l=!1;try{l=document.execCommand("copy")}catch{}o.remove(),i&&(a.removeAllRanges(),a.addRange(i)),r&&r.focus()}(n),o(!0),i.current=window.setTimeout((()=>{o(!1)}),1e3)}),[n]);return(0,r.useEffect)((()=>()=>window.clearTimeout(i.current)),[]),r.createElement("button",{type:"button","aria-label":t?(0,f.I)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,f.I)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,f.I)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,a.Z)(b,"clean-btn",t&&v),onClick:l},r.createElement("span",{className:k,"aria-hidden":"true"},r.createElement("svg",{className:x,viewBox:"0 0 24 24"},r.createElement("path",{d:"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"})),r.createElement("svg",{className:w,viewBox:"0 0 24 24"},r.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))))}const O="codeBlockContainer_I0IT",L="codeBlockContent_wNvx",E="codeBlockTitle_BvAR",D="codeBlock_jd64",I="codeBlockStandalone_csWH",A="codeBlockLines_mRuA";function T(e){var n;let{children:t,className:i="",metastring:s,title:c,language:p}=e;const{prism:m}=(0,y.LU)(),[d,u]=(0,r.useState)(!1);(0,r.useEffect)((()=>{u(!0)}),[]);const g=(0,y.bc)(s)||c,f=(0,y.pJ)();if(r.Children.toArray(t).some((e=>(0,r.isValidElement)(e))))return r.createElement(h,(0,o.Z)({},l,{key:String(d),theme:f,code:"",language:"text"}),(e=>{let{className:n,style:o}=e;return r.createElement("pre",{tabIndex:0,className:(0,a.Z)(n,I,"thin-scrollbar",O,i,y.kM.common.codeBlock),style:o},r.createElement("code",{className:A},t))}));const b=Array.isArray(t)?t.join(""):t,v=null!=(n=null!=p?p:(0,y.Vo)(i))?n:m.defaultLanguage,{highlightLines:k,code:x}=(0,y.nZ)(b,s,v);return r.createElement(h,(0,o.Z)({},l,{key:String(d),theme:f,code:x,language:null!=v?v:"text"}),(e=>{let{className:n,style:t,tokens:l,getLineProps:s,getTokenProps:c}=e;return r.createElement("div",{className:(0,a.Z)(O,i,{["language-"+v]:v&&!i.includes("language-"+v)},y.kM.common.codeBlock)},g&&r.createElement("div",{style:t,className:E},g),r.createElement("div",{className:L,style:t},r.createElement("pre",{tabIndex:0,className:(0,a.Z)(n,D,"thin-scrollbar")},r.createElement("code",{className:A},l.map(((e,n)=>{1===e.length&&"\n"===e[0].content&&(e[0].content="");const t=s({line:e,key:n});return k.includes(n)&&(t.className+=" docusaurus-highlight-code-line"),r.createElement("span",(0,o.Z)({key:n},t),e.map(((e,n)=>r.createElement("span",(0,o.Z)({key:n},c({token:e,key:n}))))),r.createElement("br",null))})))),r.createElement(S,{code:x})))}))}},7534:(e,n,t)=>{"use strict";t.d(n,{C:()=>h});var o=t(1287),r=t(254),a=t(7294);const i={};function l(e){let{href:n,linkTitle:t,...o}=e;return a.createElement("div",{className:i.MyCodeBlock},null!==n&&a.createElement("a",{href:n,target:"_blank",rel:"noreferrer"},null!==t?t:n),a.createElement(r.Z,o,o.children))}const s="error_c9xe";function c(e){const n=e.map((e=>function(e){if(""===e)return 1/0;const n=new RegExp("^ *"),t=e.match(n);if(null===t)throw new Error("This can't happen");return t[0].length}(e))),t=Math.min(...n);return e.map((e=>e.substring(t)))}function p(e,n){return!0===n?new RegExp("// \\\\"+e):new RegExp("// \\\\"+e+"{"+n+"}")}function m(e,n){if(void 0===n)return{text:e};const t=p("begin",n),o=p("end",n);return function(e,n,t){const o=e.findIndex((e=>e.match(n))),r=e.findIndex((e=>e.match(t)));return-1===o||-1===r?null:{text:c(e.slice(o+1,r)).join("\n"),begin:o+2,end:r}}(e.split("\n"),t,o)}const d=t(5284);function u(e){return e.startsWith("./")?e:"./"+e}const g=new Map(d.keys().map((e=>[u(e),d(e).default])));function h(e){const n=o.g+"/website/sample/src/main/kotlin/"+e.path,t=g.get(u(e.path));if(void 0===t)return a.createElement("div",null,"Invalid path: "+e.path);const r=m(t,e.restrict);if(null===r)return a.createElement("div",{className:e.className},a.createElement("div",{className:s},"ERROR: ",a.createElement("code",null,e.restrict)," is not found in ",a.createElement("a",{href:n},n)));const i=function(e){return"begin"in e}(r)?n+"#L"+r.begin+"-L"+r.end:n;return a.createElement("div",{className:e.className},a.createElement(l,{className:"language-kotlin",href:i,linkTitle:e.path},r.text))}},1287:(e,n,t)=>{"use strict";t.d(n,{g:()=>o});const o="https://github.com/shwaka/kohomology/blob/main"},9589:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra(matrixSpace, sphereIndeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra(matrixSpace, sphereProductIndeterminateList) { (a1, _, a2, _) ->\n        listOf(zeroGVector, a1.pow(2), zeroGVector, a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.gAlgebra.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.gAlgebra.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology()(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology()(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},9798:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.gAlgebra.generatorList\n\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end\n}\n'},2303:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        listOf(zeroGVector, x.pow(2), zeroGVector, a.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},7663:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\nimport com.github.shwaka.kohomology.util.ShowShift\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        listOf(zeroGVector, zeroGVector, a.pow(2), a * b, b.pow(2))\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX, showShift = ShowShift.BAR)\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n", showShift = ShowShift.BAR)\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},4742:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the constructor of FreeDGAlgebra.\n    // The last argument is a function\n    // which receives list of generators and returns the list of the values of the differential.\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        // zeroGVector is a special element that represents zero in any degree.\n        val dx = zeroGVector\n        // x.pow(2) represents x^2\n        val dy = x.pow(2)\n        listOf(dx, dy)\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.gAlgebra.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},2632:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});const o='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        val da = zeroGVector // da = 0\n        val db = zeroGVector // db = 0\n        val dx = a.pow(2) // dx = a^2\n        val dy = a * b // dy = ab\n        val dz = b.pow(2) // dz = b^2\n        listOf(da, db, dx, dy, dz)\n    }\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},5284:(e,n,t)=>{var o={"./DGAlgebraMap.kt":9589,"./FreeLoopSpace.kt":9798,"./MultiDegree.kt":2303,"./PrintTex.kt":7663,"./SphereModel.kt":4742,"./TopPageExample.kt":2632};function r(e){var n=a(e);return t(n)}function a(e){if(!t.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=a,e.exports=r,r.id=5284}}]);