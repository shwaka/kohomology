(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[648],{7826:(e,n,a)=>{"use strict";a.d(n,{C:()=>h});var t=a(1287),r=a(6464),o=a(7294);const i={};function l(e){let{href:n,linkTitle:a,...t}=e;return o.createElement("div",{className:i.MyCodeBlock},null!==n&&o.createElement("a",{href:n,target:"_blank",rel:"noreferrer"},null!==a?a:n),o.createElement(r.Z,t,t.children))}const s="error_c9xe";function p(e){const n=e.map((e=>function(e){if(""===e)return 1/0;const n=new RegExp("^ *"),a=e.match(n);if(null===a)throw new Error("This can't happen");return a[0].length}(e))),a=Math.min(...n);return e.map((e=>e.substring(a)))}function c(e,n){return!0===n?new RegExp(`// \\\\${e}`):new RegExp(`// \\\\${e}{${n}}`)}function m(e,n){if(void 0===n)return{text:e};const a=c("begin",n),t=c("end",n);return function(e,n,a){const t=e.findIndex((e=>e.match(n))),r=e.findIndex((e=>e.match(a)));return-1===t||-1===r?null:{text:p(e.slice(t+1,r)).join("\n"),begin:t+2,end:r}}(e.split("\n"),a,t)}const d=a(5284);function b(e){return e.startsWith("./")?e:"./"+e}const g=new Map(d.keys().map((e=>[b(e),d(e).default])));function h(e){const n=`${t.g}/website/sample/src/main/kotlin/${e.path}`,a=g.get(b(e.path));if(void 0===a)return o.createElement("div",null,`Invalid path: ${e.path}`);const r=m(a,e.restrict);if(null===r)return o.createElement("div",{className:e.className},o.createElement("div",{className:s},"ERROR: ",o.createElement("code",null,e.restrict)," is not found in ",o.createElement("a",{href:n},n)));const i=function(e){return"begin"in e}(r)?`${n}#L${r.begin}-L${r.end}`:n;return o.createElement("div",{className:e.className},o.createElement(l,{className:"language-kotlin",href:i,linkTitle:e.path},r.text))}},1287:(e,n,a)=>{"use strict";a.d(n,{g:()=>t});const t="https://github.com/shwaka/kohomology/blob/main"},7186:(e,n,a)=>{"use strict";a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var t=a(7462),r=(a(7294),a(3905)),o=a(6464),i=a(7826);const l={title:"Print LaTeX code",sidebar_position:10},s=void 0,p={unversionedId:"print-latex",id:"print-latex",title:"Print LaTeX code",description:"Why LaTeX?",source:"@site/docs/print-latex.mdx",sourceDirName:".",slug:"/print-latex",permalink:"/kohomology/docs/print-latex",draft:!1,editUrl:"https://github.com/shwaka/kohomology/edit/main/website/docs/print-latex.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Print LaTeX code",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"MultiDegree",permalink:"/kohomology/docs/multi-degree"},next:{title:"Comparison with other tools",permalink:"/kohomology/docs/comparison"}},c={},m=[{value:"Why LaTeX?",id:"why-latex",level:2},{value:"Print LaTeX code",id:"print-latex-code",level:2},{value:"Print very long line",id:"print-very-long-line",level:2}],d={toc:m};function b(e){let{components:n,...l}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"why-latex"},"Why LaTeX?"),(0,r.kt)("p",null,"Consider the following Sullivan model of a ",(0,r.kt)("a",{parentName:"p",href:"./free-loop-space"},"free loop space"),"."),(0,r.kt)(i.C,{path:"PrintTex.kt",restrict:"def",mdxType:"ImportKotlin"}),(0,r.kt)("p",null,"Now you can compute and print the basis of the cohomology by"),(0,r.kt)(i.C,{path:"PrintTex.kt",restrict:"plain",mdxType:"ImportKotlin"}),(0,r.kt)("p",null,"and this prints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"H^0(LX) = Q[[1]]\nH^1(LX) = Q[[sa], [sb]]\nH^2(LX) = Q[[a], [b], [sasb]]\nH^3(LX) = Q[[asb], [sasx], [2 sasy + sbsx], [1/2 sasz + sbsy], [sbsz]]\nH^4(LX) = Q[[1/2 asx + xsa], [asy - 1/2 bsx + xsb], [1/2 bsx + ysa], [1/2 asz + ysb], [-1/2 asz + bsy + zsa], [1/2 bsz + zsb], [sasbsx], [sasbsy], [sasbsz]]\n")),(0,r.kt)("p",null,"But this output is not very readable since"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sasb")," can be confused with the product of indeterminates ",(0,r.kt)("inlineCode",{parentName:"li"},"s"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"a"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"b"),"."),(0,r.kt)("li",{parentName:"ul"},"Fractions such as ",(0,r.kt)("inlineCode",{parentName:"li"},"1/2")," are hard to read.")),(0,r.kt)("h2",{id:"print-latex-code"},"Print LaTeX code"),(0,r.kt)("p",null,"By using ",(0,r.kt)("inlineCode",{parentName:"p"},"Printer"),", you can print a LaTeX code:"),(0,r.kt)(i.C,{path:"PrintTex.kt",restrict:"tex",mdxType:"ImportKotlin"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-latex"},"H^{0}(LX) &= \\Q[[1]] \\\\\nH^{1}(LX) &= \\Q[[\\bar{a}], [\\bar{b}]] \\\\\nH^{2}(LX) &= \\Q[[{a}], [{b}], [\\bar{a}\\bar{b}]] \\\\\nH^{3}(LX) &= \\Q[[{a}\\bar{b}], [\\bar{a}\\bar{x}], [2 \\bar{a}\\bar{y} + \\bar{b}\\bar{x}], [\\frac{1}{2} \\bar{a}\\bar{z} + \\bar{b}\\bar{y}], [\\bar{b}\\bar{z}]] \\\\\nH^{4}(LX) &= \\Q[[\\frac{1}{2} {a}\\bar{x} + {x}\\bar{a}], [{a}\\bar{y} - \\frac{1}{2} {b}\\bar{x} + {x}\\bar{b}], [\\frac{1}{2} {b}\\bar{x} + {y}\\bar{a}], [\\frac{1}{2} {a}\\bar{z} + {y}\\bar{b}], [-\\frac{1}{2} {a}\\bar{z} + {b}\\bar{y} + {z}\\bar{a}], [\\frac{1}{2} {b}\\bar{z} + {z}\\bar{b}], [\\bar{a}\\bar{b}\\bar{x}], [\\bar{a}\\bar{b}\\bar{y}], [\\bar{a}\\bar{b}\\bar{z}]] \\\\\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full LaTeX source code"),(0,r.kt)(o.Z,{language:"latex",mdxType:"CodeBlock"},"\\documentclass{jsarticle}\n\\newcommand{\\Q}{\\mathbb Q}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\begin{document}\n\\begin{align*}\n  H^{0}(LX) &= \\Q[[1]] \\\\\n  H^{1}(LX) &= \\Q[[\\bar{a}], [\\bar{b}]] \\\\\n  H^{2}(LX) &= \\Q[[{a}], [{b}], [\\bar{a}\\bar{b}]] \\\\\n  H^{3}(LX) &= \\Q[[{a}\\bar{b}], [\\bar{a}\\bar{x}], [2 \\bar{a}\\bar{y} + \\bar{b}\\bar{x}], [\\frac{1}{2} \\bar{a}\\bar{z} + \\bar{b}\\bar{y}], [\\bar{b}\\bar{z}]] \\\\\n  H^{4}(LX) &= \\Q[[\\frac{1}{2} {a}\\bar{x} + {x}\\bar{a}], [{a}\\bar{y} - \\frac{1}{2} {b}\\bar{x} + {x}\\bar{b}], [\\frac{1}{2} {b}\\bar{x} + {y}\\bar{a}], [\\frac{1}{2} {a}\\bar{z} + {y}\\bar{b}], [-\\frac{1}{2} {a}\\bar{z} + {b}\\bar{y} + {z}\\bar{a}], [\\frac{1}{2} {b}\\bar{z} + {z}\\bar{b}], [\\bar{a}\\bar{b}\\bar{x}], [\\bar{a}\\bar{b}\\bar{y}], [\\bar{a}\\bar{b}\\bar{z}]] \\\\\n\\end{align*}\n\\end{document}")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"print-latex",src:a(8668).Z,width:"1454",height:"293"})),(0,r.kt)("h2",{id:"print-very-long-line"},"Print very long line"),(0,r.kt)("p",null,"Together with the LaTeX package ",(0,r.kt)("a",{parentName:"p",href:"https://ctan.org/pkg/autobreak?lang=en"},"autobreak"),", line breaks can be added automatically.\nIn the environment ",(0,r.kt)("inlineCode",{parentName:"p"},"autobreak"),",\nline breaks in the LaTeX source code are considered\nas possible candidates for line breaks in the output PDF file.\nSo ",(0,r.kt)("inlineCode",{parentName:"p"},'beforeSign = "\\n"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'joinToString(",\\n")')," in the following code give such candidates."),(0,r.kt)(i.C,{path:"PrintTex.kt",restrict:"long",mdxType:"ImportKotlin"}),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full LaTeX source code"),(0,r.kt)(o.Z,{language:"latex",mdxType:"CodeBlock"},"\\documentclass{jsarticle}\n\\newcommand{\\Q}{\\mathbb Q}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{autobreak}\n\\begin{document}\n\\begin{align*}\n  \\begin{autobreak}\n    H^{0}(LX) = \\Q[\n    [1]]\n  \\end{autobreak}\\\\\n  \\begin{autobreak}\n    H^{1}(LX) = \\Q[\n    [\\bar{a}],\n    [\\bar{b}]]\n  \\end{autobreak}\\\\\n  \\begin{autobreak}\n    H^{2}(LX) = \\Q[\n    [{a}],\n    [{b}],\n    [\\bar{a}\\bar{b}]]\n  \\end{autobreak}\\\\\n  % ...\n\\end{align*}\n\\end{document}")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"print-latex",src:a(5453).Z,width:"1331",height:"867"})))}b.isMDXComponent=!0},9589:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra(matrixSpace, sphereIndeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra(matrixSpace, sphereProductIndeterminateList) { (a1, _, a2, _) ->\n        listOf(zeroGVector, a1.pow(2), zeroGVector, a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},9798:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{sphere}\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n    // \\end{sphere}\n\n    // \\begin{freeLoopSpace}\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.generatorList\n    // \\end{freeLoopSpace}\n\n    // \\begin{computation}\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{computation}\n\n    // \\begin{freeLoopSpaceWithMultiDegree}\n    val freeLoopSpaceWithMultiDegree = FreeLoopSpace.withShiftDegree(sphere)\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{freeLoopSpaceWithMultiDegree}\n}\n'},2303:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        listOf(zeroGVector, x.pow(2), zeroGVector, a.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},7663:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\nimport com.github.shwaka.kohomology.util.ShowShift\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        listOf(zeroGVector, zeroGVector, a.pow(2), a * b, b.pow(2))\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX, showShift = ShowShift.BAR)\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n", showShift = ShowShift.BAR)\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},4742:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the constructor of FreeDGAlgebra.\n    // The last argument is a function\n    // which receives list of generators and returns the list of the values of the differential.\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        // zeroGVector is a special element that represents zero in any degree.\n        val dx = zeroGVector\n        // x.pow(2) represents x^2\n        val dy = x.pow(2)\n        listOf(dx, dy)\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},2632:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});const t='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        val da = zeroGVector // da = 0\n        val db = zeroGVector // db = 0\n        val dx = a.pow(2) // dx = a^2\n        val dy = a * b // dy = ab\n        val dz = b.pow(2) // dz = b^2\n        listOf(da, db, dx, dy, dz)\n    }\n    for (degree in 0 until 10) {\n        val basis = freeDGAlgebra.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},5453:(e,n,a)=>{"use strict";a.d(n,{Z:()=>t});const t=a.p+"assets/images/print-latex-long-3d0e53556c06a2480e8b408b7fcf9149.png"},8668:(e,n,a)=>{"use strict";a.d(n,{Z:()=>t});const t=a.p+"assets/images/print-latex-db830218d75bb05deca353970a0419a3.png"},5284:(e,n,a)=>{var t={"./DGAlgebraMap.kt":9589,"./FreeLoopSpace.kt":9798,"./MultiDegree.kt":2303,"./PrintTex.kt":7663,"./SphereModel.kt":4742,"./TopPageExample.kt":2632};function r(e){var n=o(e);return a(n)}function o(e){if(!a.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}r.keys=function(){return Object.keys(t)},r.resolve=o,e.exports=r,r.id=5284}}]);