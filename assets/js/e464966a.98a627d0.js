(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68],{56:(e,n,a)=>{"use strict";a.d(n,{A:()=>r});const r=a.p+"assets/images/print-latex-long-3d0e53556c06a2480e8b408b7fcf9149.png"},1059:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the function FreeDGAlgebra.fromMap.\n    // The last argument is a function\n    // which receives the list of generators and returns the map representing the differential.\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (x, y) ->\n        mapOf(\n            y to x.pow(2),    // x.pow(2) represents x^2\n        )\n        // If you want, you can write dx = 0 explicitly in the code\n        // by using zeroGVector, a special element that represents zero in any degree.\n        // mapOf(\n        //     x to zeroGVector,\n        //     y to x.pow(2),\n        // )\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},1615:(e,n,a)=>{var r={"./DGAlgebraMap.kt":7410,"./FreeLoopSpace.kt":2343,"./MultiDegree.kt":1860,"./PrintTex.kt":9461,"./SphereModel.kt":1059,"./TopPageExample.kt":7119};function t(e){var n=o(e);return a(n)}function o(e){if(!a.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}t.keys=function(){return Object.keys(r)},t.resolve=o,e.exports=t,t.id=1615},1860:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.dg.degree.DegreeIndeterminate\nimport com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{degree}\n    val sphereDim = 2\n    val degreeGroup = MultiDegreeGroup(\n        listOf(\n            DegreeIndeterminate("n", sphereDim / 2),\n            DegreeIndeterminate("m", sphereDim / 2),\n        )\n    )\n    val (n, m) = degreeGroup.generatorList\n    // \\end{degree}\n\n    // \\begin{model}\n    val indeterminateList = degreeGroup.context.run {\n        listOf(\n            Indeterminate("x", 2 * n),\n            Indeterminate("y", 4 * n - 1),\n            Indeterminate("a", 2 * m),\n            Indeterminate("b", 4 * m - 1),\n        )\n    }\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, degreeGroup, indeterminateList) { (x, y, a, b) ->\n        mapOf(\n            y to x.pow(2),\n            b to a.pow(2),\n        )\n    }\n    // \\end{model}\n\n    // \\begin{cohomology}\n    degreeGroup.context.run {\n        println(sphere.cohomology.getBasis(0))\n        println(sphere.cohomology.getBasis(2 * n))\n        println(sphere.cohomology.getBasis(2 * m))\n        println(sphere.cohomology.getBasisForAugmentedDegree(sphereDim))\n    }\n    // \\end{cohomology}\n}\n'},2343:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{sphere}\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (x, y) ->\n        mapOf(y to x.pow(2)) // dx = 0, dy = x^2\n    }\n    // \\end{sphere}\n\n    // \\begin{freeLoopSpace}\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.generatorList\n    // \\end{freeLoopSpace}\n\n    // \\begin{computation}\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{computation}\n\n    // \\begin{freeLoopSpaceWithMultiDegree}\n    val freeLoopSpaceWithMultiDegree = FreeLoopSpace.withShiftDegree(sphere)\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end{freeLoopSpaceWithMultiDegree}\n}\n'},3616:(e,n,a)=>{"use strict";a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"print-latex","title":"Print LaTeX code","description":"Why LaTeX?","source":"@site/docs/print-latex.mdx","sourceDirName":".","slug":"/print-latex","permalink":"/kohomology/docs/print-latex","draft":false,"unlisted":false,"editUrl":"https://github.com/shwaka/kohomology/edit/main/website/docs/print-latex.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Print LaTeX code","sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"MultiDegree","permalink":"/kohomology/docs/multi-degree"},"next":{"title":"Comparison with other tools","permalink":"/kohomology/docs/comparison"}}');var t=a(4848),o=a(8453),i=a(1969),s=a(8916);const l={title:"Print LaTeX code",sidebar_position:10},c=void 0,p={},d=[{value:"Why LaTeX?",id:"why-latex",level:2},{value:"Print LaTeX code",id:"print-latex-code",level:2},{value:"Print very long line",id:"print-very-long-line",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"why-latex",children:"Why LaTeX?"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the following Sullivan model of a ",(0,t.jsx)(n.a,{href:"./free-loop-space",children:"free loop space"}),"."]}),"\n",(0,t.jsx)(s.F,{path:"PrintTex.kt",restrict:"def"}),"\n",(0,t.jsx)(n.p,{children:"Now you can compute and print the basis of the cohomology by"}),"\n",(0,t.jsx)(s.F,{path:"PrintTex.kt",restrict:"plain"}),"\n",(0,t.jsx)(n.p,{children:"and this prints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"H^0(LX) = Q[[1]]\nH^1(LX) = Q[[sa], [sb]]\nH^2(LX) = Q[[a], [b], [sasb]]\nH^3(LX) = Q[[asb], [sasx], [2 sasy + sbsx], [1/2 sasz + sbsy], [sbsz]]\nH^4(LX) = Q[[1/2 asx + xsa], [asy - 1/2 bsx + xsb], [1/2 bsx + ysa], [1/2 asz + ysb], [-1/2 asz + bsy + zsa], [1/2 bsz + zsb], [sasbsx], [sasbsy], [sasbsz]]\n"})}),"\n",(0,t.jsx)(n.p,{children:"But this output is not very readable since"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sasb"})," can be confused with the product of indeterminates ",(0,t.jsx)(n.code,{children:"s"}),", ",(0,t.jsx)(n.code,{children:"a"}),", ",(0,t.jsx)(n.code,{children:"s"})," and ",(0,t.jsx)(n.code,{children:"b"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Fractions such as ",(0,t.jsx)(n.code,{children:"1/2"})," are hard to read."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"print-latex-code",children:"Print LaTeX code"}),"\n",(0,t.jsxs)(n.p,{children:["By using ",(0,t.jsx)(n.code,{children:"Printer"}),", you can print a LaTeX code:"]}),"\n",(0,t.jsx)(s.F,{path:"PrintTex.kt",restrict:"tex"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-latex",children:"H^{0}(LX) &= \\Q[[1]] \\\\\nH^{1}(LX) &= \\Q[[\\bar{a}], [\\bar{b}]] \\\\\nH^{2}(LX) &= \\Q[[{a}], [{b}], [\\bar{a}\\bar{b}]] \\\\\nH^{3}(LX) &= \\Q[[{a}\\bar{b}], [\\bar{a}\\bar{x}], [2 \\bar{a}\\bar{y} + \\bar{b}\\bar{x}], [\\frac{1}{2} \\bar{a}\\bar{z} + \\bar{b}\\bar{y}], [\\bar{b}\\bar{z}]] \\\\\nH^{4}(LX) &= \\Q[[\\frac{1}{2} {a}\\bar{x} + {x}\\bar{a}], [{a}\\bar{y} - \\frac{1}{2} {b}\\bar{x} + {x}\\bar{b}], [\\frac{1}{2} {b}\\bar{x} + {y}\\bar{a}], [\\frac{1}{2} {a}\\bar{z} + {y}\\bar{b}], [-\\frac{1}{2} {a}\\bar{z} + {b}\\bar{y} + {z}\\bar{a}], [\\frac{1}{2} {b}\\bar{z} + {z}\\bar{b}], [\\bar{a}\\bar{b}\\bar{x}], [\\bar{a}\\bar{b}\\bar{y}], [\\bar{a}\\bar{b}\\bar{z}]] \\\\\n"})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Full LaTeX source code"}),(0,t.jsx)(i.A,{language:"latex",children:"\\documentclass{jsarticle}\n\\newcommand{\\Q}{\\mathbb Q}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\begin{document}\n\\begin{align*}\nH^{0}(LX) &= \\Q[[1]] \\\\\nH^{1}(LX) &= \\Q[[\\bar{a}], [\\bar{b}]] \\\\\nH^{2}(LX) &= \\Q[[{a}], [{b}], [\\bar{a}\\bar{b}]] \\\\\nH^{3}(LX) &= \\Q[[{a}\\bar{b}], [\\bar{a}\\bar{x}], [2 \\bar{a}\\bar{y} + \\bar{b}\\bar{x}], [\\frac{1}{2} \\bar{a}\\bar{z} + \\bar{b}\\bar{y}], [\\bar{b}\\bar{z}]] \\\\\nH^{4}(LX) &= \\Q[[\\frac{1}{2} {a}\\bar{x} + {x}\\bar{a}], [{a}\\bar{y} - \\frac{1}{2} {b}\\bar{x} + {x}\\bar{b}], [\\frac{1}{2} {b}\\bar{x} + {y}\\bar{a}], [\\frac{1}{2} {a}\\bar{z} + {y}\\bar{b}], [-\\frac{1}{2} {a}\\bar{z} + {b}\\bar{y} + {z}\\bar{a}], [\\frac{1}{2} {b}\\bar{z} + {z}\\bar{b}], [\\bar{a}\\bar{b}\\bar{x}], [\\bar{a}\\bar{b}\\bar{y}], [\\bar{a}\\bar{b}\\bar{z}]] \\\\\n\\end{align*}\n\\end{document}"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"print-latex",src:a(5163).A+"",width:"1454",height:"293"})}),"\n",(0,t.jsx)(n.h2,{id:"print-very-long-line",children:"Print very long line"}),"\n",(0,t.jsxs)(n.p,{children:["Together with the LaTeX package ",(0,t.jsx)(n.a,{href:"https://ctan.org/pkg/autobreak?lang=en",children:"autobreak"}),", line breaks can be added automatically.\nIn the environment ",(0,t.jsx)(n.code,{children:"autobreak"}),",\nline breaks in the LaTeX source code are considered\nas possible candidates for line breaks in the output PDF file.\nSo ",(0,t.jsx)(n.code,{children:'beforeSign = "\\n"'})," and ",(0,t.jsx)(n.code,{children:'joinToString(",\\n")'})," in the following code give such candidates."]}),"\n",(0,t.jsx)(s.F,{path:"PrintTex.kt",restrict:"long"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Full LaTeX source code"}),(0,t.jsx)(i.A,{language:"latex",children:"\\documentclass{jsarticle}\n\\newcommand{\\Q}{\\mathbb Q}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{autobreak}\n\\begin{document}\n\\begin{align*}\n\\begin{autobreak}\n  H^{0}(LX) = \\Q[\n  [1]]\n\\end{autobreak}\\\\\n\\begin{autobreak}\n  H^{1}(LX) = \\Q[\n  [\\bar{a}],\n  [\\bar{b}]]\n\\end{autobreak}\\\\\n\\begin{autobreak}\n  H^{2}(LX) = \\Q[\n  [{a}],\n  [{b}],\n  [\\bar{a}\\bar{b}]]\n\\end{autobreak}\\\\\n% ...\n\\end{align*}\n\\end{document}"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"print-latex",src:a(56).A+"",width:"1331",height:"867"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},5163:(e,n,a)=>{"use strict";a.d(n,{A:()=>r});const r=a.p+"assets/images/print-latex-db830218d75bb05deca353970a0419a3.png"},7119:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        mapOf(\n            // da = 0\n            // db = 0\n            x to a.pow(2), // dx = a^2\n            y to a * b,    // dy = ab\n            z to b.pow(2), // dz = b^2\n        )\n    }\n    for (degree in 0 until 10) {\n        val basis = freeDGAlgebra.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'},7410:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra.fromMap(matrixSpace, sphereIndeterminateList) { (x, y) ->\n        mapOf(y to x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra.fromMap(matrixSpace, sphereProductIndeterminateList) { (a1, b1, a2, b2) ->\n        mapOf(b1 to a1.pow(2), b2 to a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},8916:(e,n,a)=>{"use strict";a.d(n,{F:()=>g});var r=a(9981),t=a(1969);a(6540);const o={};var i=a(4848);function s(e){let{href:n,linkTitle:a,...r}=e;return(0,i.jsxs)("div",{className:o.MyCodeBlock,children:[null!==n&&(0,i.jsx)("a",{href:n,target:"_blank",rel:"noreferrer",children:null!==a?a:n}),(0,i.jsx)(t.A,{...r,children:r.children})]})}const l={error:"error_c9xe"};function c(e){const n=e.map((e=>function(e){if(""===e)return 1/0;const n=new RegExp("^ *"),a=e.match(n);if(null===a)throw new Error("This can't happen");return a[0].length}(e))),a=Math.min(...n);return e.map((e=>e.substring(a)))}function p(e,n){return!0===n?new RegExp(`// \\\\${e}`):new RegExp(`// \\\\${e}{${n}}`)}function d(e,n){if(void 0===n)return{text:e};const a=p("begin",n),r=p("end",n);return function(e,n,a){const r=e.findIndex((e=>e.match(n))),t=e.findIndex((e=>e.match(a)));return-1===r||-1===t?null:{text:c(e.slice(r+1,t)).join("\n"),begin:r+2,end:t}}(e.split("\n"),a,r)}const m=a(1615);function h(e){return e.startsWith("./")?e:"./"+e}const b=new Map(m.keys().map((e=>[h(e),m(e).default])));function g(e){const n=`${r._}/website/sample/src/main/kotlin/${e.path}`,a=b.get(h(e.path));if(void 0===a)return(0,i.jsx)("div",{children:`Invalid path: ${e.path}`});const t=d(a,e.restrict);if(null===t)return(0,i.jsx)("div",{className:e.className,children:(0,i.jsxs)("div",{className:l.error,children:["ERROR: ",(0,i.jsx)("code",{children:e.restrict})," is not found in ",(0,i.jsx)("a",{href:n,children:n})]})});const o=function(e){return"begin"in e}(t)?`${n}#L${t.begin}-L${t.end}`:n;return(0,i.jsx)("div",{className:e.className,children:(0,i.jsx)(s,{className:"language-kotlin",href:o,linkTitle:e.path,children:t.text})})}},9461:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const r='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.CopiedNamePrintConfig\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.model.ShowShift\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra.fromMap(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        mapOf(\n            x to a.pow(2),\n            y to a * b,\n            z to b.pow(2),\n        )\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX) {\n        register(CopiedNamePrintConfig(ShowShift.BAR))\n    }\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n") {\n        register(CopiedNamePrintConfig(ShowShift.BAR))\n    }\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},9981:(e,n,a)=>{"use strict";a.d(n,{_:()=>r});const r="https://github.com/shwaka/kohomology/blob/main"}}]);