(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[316],{6333:function(e,n,o){var t={"./DGAlgebraMap.kt":4758,"./FreeLoopSpace.kt":3632,"./PrintTex.kt":6229,"./SphereModel.kt":5125,"./TopPageExample.kt":7219};function a(e){var n=r(e);return o(n)}function r(e){if(!o.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}a.keys=function(){return Object.keys(t)},a.resolve=r,e.exports=a,a.id=6333},2829:function(e,n,o){"use strict";o.d(n,{C:function(){return f}});var t=o(102),a=o(254),r=o(7294),i={},l=["href","linkTitle"];function s(e){var n=e.href,o=e.linkTitle,s=(0,t.Z)(e,l);return r.createElement("div",{className:i.MyCodeBlock},null!==n&&r.createElement("a",{href:n,target:"_blank",rel:"noreferrer"},null!==o?o:n),r.createElement(a.Z,s,s.children))}var p="error_c9xe";function c(e){var n=e.map((function(e){return function(e){if(""===e)return 1/0;var n=new RegExp("^ *"),o=e.match(n);if(null===o)throw new Error("This can't happen");return o[0].length}(e)})),o=Math.min.apply(Math,n);return e.map((function(e){return e.substring(o)}))}function m(e,n){return!0===n?new RegExp("// \\\\"+e):new RegExp("// \\\\"+e+"{"+n+"}")}function h(e,n){if(void 0===n)return{text:e};var o=m("begin",n),t=m("end",n);return function(e,n,o){var t=e.findIndex((function(e){return e.match(n)})),a=e.findIndex((function(e){return e.match(o)}));return-1===t||-1===a?null:{text:c(e.slice(t+1,a)).join("\n"),begin:t+2,end:a}}(e.split("\n"),o,t)}var d=o(6333);function g(e){return e.startsWith("./")?e:"./"+e}var u=new Map(d.keys().map((function(e){return[g(e),d(e).default]})));function f(e){var n="https://github.com/shwaka/kohomology/blob/main/sample/src/main/kotlin/"+e.path,o=u.get(g(e.path));if(void 0===o)return r.createElement("div",null,"Invalid path: "+e.path);var t=h(o,e.restrict);if(null===t)return r.createElement("div",{className:e.className},r.createElement("div",{className:p},"ERROR: ",r.createElement("code",null,e.restrict)," is not found in ",r.createElement("a",{href:n},n)));var a=function(e){return"begin"in e}(t)?n+"#L"+t.begin+"-L"+t.end:n;return r.createElement("div",{className:e.className},r.createElement(s,{className:"language-kotlin",href:a,linkTitle:e.path},t.text))}},9149:function(e,n,o){"use strict";o.r(n),o.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return h}});var t=o(3117),a=o(102),r=(o(7294),o(3905)),i=o(2829),l=["components"],s={title:"Cohomology of free loop space",sidebar_position:4},p=void 0,c={unversionedId:"free-loop-space",id:"free-loop-space",title:"Cohomology of free loop space",description:"Here is an example script computing the cohomology of",source:"@site/docs/free-loop-space.mdx",sourceDirName:".",slug:"/free-loop-space",permalink:"/kohomology/docs/free-loop-space",editUrl:"https://github.com/shwaka/kohomology/edit/main/website/docs/free-loop-space.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Cohomology of free loop space",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cohomology of Sullivan algebras",permalink:"/kohomology/docs/sullivan-algebra"},next:{title:"DGA map",permalink:"/kohomology/docs/dga-map"}},m={},h=[],d={toc:h};function g(e){var n=e.components,o=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here is an example script computing the cohomology of\nthe free loop space of the even dimensional sphere."),(0,r.kt)("p",null,"By using a Sullivan model ",(0,r.kt)("inlineCode",{parentName:"p"},"sphere")," of the sphere,\nthe model of the free loop space is obtained by ",(0,r.kt)("inlineCode",{parentName:"p"},"FreeLoopSpace(sphere)"),".\nIt is just a special example of ",(0,r.kt)("inlineCode",{parentName:"p"},"FreeDGAlgebra"),",\nwe can apply any computation methods to it. (See the ",(0,r.kt)("a",{parentName:"p",href:"/kohomology/docs/sullivan-algebra"},"previous page")," for details.)"),(0,r.kt)(i.C,{path:"FreeLoopSpace.kt",restrict:!0,mdxType:"ImportKotlin"}))}g.isMDXComponent=!0},4758:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{model}\n    val n = 1\n    val matrixSpace = SparseMatrixSpaceOverRational\n\n    // define a Sullivan model of the 4n-sphere\n    val sphereIndeterminateList = listOf(\n        Indeterminate("x", 4 * n),\n        Indeterminate("y", 8 * n - 1),\n    )\n    val sphere = FreeDGAlgebra(matrixSpace, sphereIndeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2))\n    }\n\n    // define a Sullivan model of the product of two 2n-spheres\n    val sphereProductIndeterminateList = listOf(\n        Indeterminate("a1", 2 * n),\n        Indeterminate("b1", 4 * n - 1),\n        Indeterminate("a2", 2 * n),\n        Indeterminate("b2", 4 * n - 1),\n    )\n    val sphereProduct = FreeDGAlgebra(matrixSpace, sphereProductIndeterminateList) { (a1, _, a2, _) ->\n        listOf(zeroGVector, a1.pow(2), zeroGVector, a2.pow(2))\n    }\n    // \\end{model}\n\n    // \\begin{dgaMap}\n    val (x, y) = sphere.gAlgebra.generatorList\n    val (a1, b1, a2, b2) = sphereProduct.gAlgebra.generatorList\n    val valueList = sphereProduct.context.run {\n        listOf(a1 * a2, a1.pow(2) * b2)\n    }\n    val f = sphere.getDGAlgebraMap(sphereProduct, valueList)\n    sphere.context.run {\n        // This \'context\' is necessary for pow(2) and cohomologyClass()\n        println(f(x)) // a1a2\n        println(f(x.pow(2))) // a1^2a2^2\n        println(f.inducedMapOnCohomology()(x.cohomologyClass())) // [a1a2]\n        println(f.inducedMapOnCohomology()(x.pow(2).cohomologyClass())) // 0\n    }\n    // \\end{dgaMap}\n}\n'},3632:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    // Define the Sullivan model of the 4-sphere.\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n\n    // Define the Sullivan model of the free loop space.\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, y, sx, sy) = freeLoopSpace.gAlgebra.generatorList\n\n    // Assert that d(sy) and -2*x*sx are the same.\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    // Compute cohomology of the free loop space.\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // \\end\n}\n'},6229:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\nimport com.github.shwaka.kohomology.util.PrintType\nimport com.github.shwaka.kohomology.util.Printer\nimport com.github.shwaka.kohomology.util.ShowShift\n\nfun main() {\n    // \\begin{def}\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val freeDGAlgebra = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        listOf(zeroGVector, zeroGVector, a.pow(2), a * b, b.pow(2))\n    }\n    val freeLoopSpace = FreeLoopSpace(freeDGAlgebra)\n    // \\end{def}\n\n    println("----- plain output -----")\n    // \\begin{plain}\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^$degree(LX) = Q$basis")\n    }\n    // \\end{plain}\n\n    println("----- tex output -----")\n    // \\begin{tex}\n    val p = Printer(printType = PrintType.TEX, showShift = ShowShift.BAR)\n    for (degree in 0..4) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        println("H^{$degree}(LX) &= \\\\Q${basis.map { v -> p(v) }} \\\\\\\\")\n    }\n    // \\end{tex}\n\n    println("----- long tex output -----")\n    // \\begin{long}\n    val p2 = Printer(printType = PrintType.TEX, beforeSign = "\\n", showShift = ShowShift.BAR)\n    for (degree in 0..6) {\n        val basis = freeLoopSpace.cohomology.getBasis(degree)\n        val basisString = basis.joinToString(",\\n") { v -> p2(v) }\n        println("\\\\begin{autobreak}\\nH^{$degree}(LX) = \\\\Q[\\n${basisString}]\\n\\\\end{autobreak}\\\\\\\\")\n    }\n    // \\end{long}\n}\n'},5125:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin{def}\n    val n = 2\n    // Declare an indeterminate (generator) for the free commutative graded algebra \u039b(x,y)\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1),\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    // Sullivan algebra can be defined by using the constructor of FreeDGAlgebra.\n    // The last argument is a function\n    // which receives list of generators and returns the list of the values of the differential.\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        // zeroGVector is a special element that represents zero in any degree.\n        val dx = zeroGVector\n        // x.pow(2) represents x^2\n        val dy = x.pow(2)\n        listOf(dx, dy)\n    }\n    // \\end{def}\n\n    // \\begin{cohomology}\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // \\end{cohomology}\n\n    // \\begin{context}\n    val (x, y) = sphere.gAlgebra.generatorList\n\n    // You can\'t write DGA operations here.\n\n    sphere.context.run {\n        // You can write DGA operations in "context.run"\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // \\end{context}\n}\n'},7219:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverRational\n\nfun main() {\n    // \\begin\n    val indeterminateList = listOf(\n        Indeterminate("a", 2),\n        Indeterminate("b", 2),\n        Indeterminate("x", 3),\n        Indeterminate("y", 3),\n        Indeterminate("z", 3)\n    )\n    val matrixSpace = SparseMatrixSpaceOverRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (a, b, x, y, z) ->\n        val da = zeroGVector // da = 0\n        val db = zeroGVector // db = 0\n        val dx = a.pow(2) // dx = a^2\n        val dy = a * b // dy = ab\n        val dz = b.pow(2) // dz = b^2\n        listOf(da, db, dx, dy, dz)\n    }\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology.getBasis(degree)\n        println("H^$degree = Q$basis")\n    }\n    // \\end\n}\n'}}]);