(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[316],{6333:function(e,n,o){var t={"./FreeLoopSpace.kt":3632,"./SphereModel.kt":5125};function r(e){var n=a(e);return o(n)}function a(e){if(!o.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}r.keys=function(){return Object.keys(t)},r.resolve=a,e.exports=r,r.id=6333},2829:function(e,n,o){"use strict";o.d(n,{C:function(){return d}});var t=o(102),r=o(254),a=o(7294),i={},l=["href","linkTitle"];function s(e){var n=e.href,o=e.linkTitle,s=(0,t.Z)(e,l);return a.createElement("div",{className:i.MyCodeBlock},null!==n&&a.createElement("a",{href:n,target:"_blank",rel:"noreferrer"},null!==o?o:n),a.createElement(r.Z,s,s.children))}var c="error_c9xe";function p(e){var n=e.map((function(e){return function(e){if(""===e)return 1/0;var n=new RegExp("^ *"),o=e.match(n);if(null===o)throw new Error("This can't happen");return o[0].length}(e)})),o=Math.min.apply(Math,n);return e.map((function(e){return e.substring(o)}))}function m(e,n){return!0===n?new RegExp("// "+e):new RegExp("// "+e+" +"+n)}var u=o(6333);function h(e){return e.startsWith("./")?e:"./"+e}var f=new Map(u.keys().map((function(e){return[h(e),u(e).default]})));function d(e){var n="https://github.com/shwaka/kohomology/blob/main/sample/src/main/kotlin/"+e.path,o=f.get(h(e.path));if(void 0===o)return a.createElement("div",null,"Invalid path: "+e.path);var t=function(e,n){if(void 0===n)return e;var o=m("start",n),t=m("end",n),r=function(e,n,o){var t=e.findIndex((function(e){return e.match(n)})),r=e.findIndex((function(e){return e.match(o)}));return-1===t||-1===r?null:e.slice(t+1,r)}(e.split("\n"),o,t);return null===r?null:p(r).join("\n")}(o,e.restrict);return null===t?a.createElement("div",{className:c},"ERROR: ",a.createElement("code",null,e.restrict)," is not found in ",a.createElement("a",{href:n},n)):a.createElement("div",null,a.createElement(s,{className:"language-kotlin",href:n,linkTitle:e.path},t))}},9149:function(e,n,o){"use strict";o.r(n),o.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var t=o(3117),r=o(102),a=(o(7294),o(3905)),i=o(2829),l=["components"],s={title:"Cohomology of free loop space",sidebar_position:4},c=void 0,p={unversionedId:"free-loop-space",id:"free-loop-space",title:"Cohomology of free loop space",description:"Here is an example script computing the cohomology of",source:"@site/docs/free-loop-space.mdx",sourceDirName:".",slug:"/free-loop-space",permalink:"/kohomology/docs/free-loop-space",editUrl:"https://github.com/shwaka/kohomology/edit/main/website/docs/free-loop-space.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Cohomology of free loop space",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cohomology of Sullivan algebras",permalink:"/kohomology/docs/sullivan-algebra"},next:{title:"Overview of classes",permalink:"/kohomology/docs/overview-of-classes"}},m={},u=[],h={toc:u};function f(e){var n=e.components,o=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},h,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Here is an example script computing the cohomology of\nthe free loop space of the even dimensional sphere."),(0,a.kt)(i.C,{path:"FreeLoopSpace.kt",mdxType:"ImportKotlin"}))}f.isMDXComponent=!0},3632:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.model.FreeLoopSpace\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverBigRational\n\nfun main() {\n    // start\n    val sphereDim = 4\n    val indeterminateList = listOf(\n        Indeterminate("x", sphereDim),\n        Indeterminate("y", sphereDim * 2 - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverBigRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, y) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n\n    val freeLoopSpace = FreeLoopSpace(sphere)\n    val (x, _, sx, sy) = freeLoopSpace.gAlgebra.generatorList\n\n    freeLoopSpace.context.run {\n        println("dsy = ${d(sy)} = ${-2 * x * sx}")\n    }\n\n    for (degree in 0 until 25) {\n        val basis = freeLoopSpace.cohomology[degree].getBasis()\n        println("H^$degree(LS^$sphereDim) = Q$basis")\n    }\n    // end\n}\n'},5125:function(e,n,o){"use strict";o.r(n),n.default='package com.github.shwaka.kohomology.sample\n\nimport com.github.shwaka.kohomology.free.FreeDGAlgebra\nimport com.github.shwaka.kohomology.free.monoid.Indeterminate\nimport com.github.shwaka.kohomology.specific.SparseMatrixSpaceOverBigRational\n\nfun main() {\n    // start def\n    val n = 2\n    val indeterminateList = listOf(\n        Indeterminate("x", 2 * n),\n        Indeterminate("y", 4 * n - 1)\n    )\n    val matrixSpace = SparseMatrixSpaceOverBigRational\n    val sphere = FreeDGAlgebra(matrixSpace, indeterminateList) { (x, _) ->\n        listOf(zeroGVector, x.pow(2)) // dx = 0, dy = x^2\n    }\n    // end def\n\n    // start cohomology\n    for (degree in 0 until 10) {\n        val basis = sphere.cohomology[degree].getBasis()\n        println("H^$degree(S^${2 * n}) = Q$basis")\n    }\n    // end cohomology\n\n    // start context\n    val (x, y) = sphere.gAlgebra.generatorList\n\n    sphere.context.run {\n        // Operations in a DGA can be applied within \'context.run\'\n        println("d(x * y) = ${d(x * y)}")\n        println(d(x).isZero())\n        println(x.cohomologyClass())\n        println(x.pow(2).cohomologyClass())\n    }\n    // end context\n}\n'}}]);