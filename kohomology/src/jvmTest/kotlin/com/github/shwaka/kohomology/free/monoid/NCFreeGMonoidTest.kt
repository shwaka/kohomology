package com.github.shwaka.kohomology.free.monoid

import com.github.shwaka.kohomology.dg.Boundedness
import com.github.shwaka.kohomology.forAll
import io.kotest.assertions.throwables.shouldNotThrowAny
import io.kotest.core.spec.style.FreeSpec
import io.kotest.matchers.booleans.shouldBeFalse
import io.kotest.matchers.booleans.shouldBeTrue
import io.kotest.matchers.shouldBe

class NCFreeGMonoidTest : FreeSpec({
    tags(gMonoidTag)

    "empty indeterminate list should be allowed" {
        shouldNotThrowAny {
            NCFreeGMonoid<StringIndeterminateName>(emptyList())
        }
    }

    "isCommutative should be true if the number of indeterminate is at most 1" {
        (0..10).forAll { n ->
            val indeterminateList = (0 until n).map {
                Indeterminate("x$n", 2)
            }
            val monoid = NCFreeGMonoid(indeterminateList)
            if (n <= 1) {
                monoid.isCommutative.shouldBeTrue()
            } else {
                monoid.isCommutative.shouldBeFalse()
            }
        }
    }

    "should be bounded below and above by 0 if indeterminate list is empty" {
        val monoid = NCFreeGMonoid<StringIndeterminateName>(emptyList())
        monoid.boundedness shouldBe Boundedness(upperBound = 0, lowerBound = 0)
    }

    "should be bounded below if generated by positive degrees" {
        val indeterminateList = listOf(
            Indeterminate("x", 2),
            Indeterminate("y", 3),
        )
        val monoid = NCFreeGMonoid(indeterminateList)
        monoid.boundedness shouldBe Boundedness(upperBound = null, lowerBound = 0)
    }

    "should be bounded only below even if generated by positive odd degrees" {
        val indeterminateList = listOf(
            Indeterminate("y", 3),
        )
        val monoid = NCFreeGMonoid(indeterminateList)
        monoid.boundedness shouldBe Boundedness(upperBound = null, lowerBound = 0)
    }

    "should be bounded above if generated by negative degrees" {
        val indeterminateList = listOf(
            Indeterminate("x", -2),
            Indeterminate("y", -3),
        )
        val monoid = NCFreeGMonoid(indeterminateList)
        monoid.boundedness shouldBe Boundedness(upperBound = 0, lowerBound = null)
    }

    "should be bounded only above even if generated by negative odd degrees" {
        val indeterminateList = listOf(
            Indeterminate("y", -3),
        )
        val monoid = NCFreeGMonoid(indeterminateList)
        monoid.boundedness shouldBe Boundedness(upperBound = 0, lowerBound = null)
    }
})
