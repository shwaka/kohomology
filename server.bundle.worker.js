/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 851:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72), __webpack_require__(639), __webpack_require__(474), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin, kotlin_com_github_h0tk3y_betterParse_better_parse, kotlin_com_github_shwaka_parautil_parautil_parallel, kotlin_com_ionspin_kotlin_bignum) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var objectMeta = kotlin_kotlin.$_$.g6;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var classMeta = kotlin_kotlin.$_$.o5;
  var interfaceMeta = kotlin_kotlin.$_$.v5;
  var lazy = kotlin_kotlin.$_$.y7;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var KProperty1 = kotlin_kotlin.$_$.p6;
  var getPropertyCallableRef = kotlin_kotlin.$_$.s5;
  var equals = kotlin_kotlin.$_$.q5;
  var toString = kotlin_kotlin.$_$.i6;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.y;
  var parseToEnd = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.h;
  var Exception_init_$Create$ = kotlin_kotlin.$_$.a1;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.z7;
  var joinToString$default = kotlin_kotlin.$_$.h;
  var trimIndent = kotlin_kotlin.$_$.d7;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.u;
  var Pair = kotlin_kotlin.$_$.n7;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.g3;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.n;
  var Collection = kotlin_kotlin.$_$.x2;
  var isInterface = kotlin_kotlin.$_$.x5;
  var toList = kotlin_kotlin.$_$.x4;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var hashCode = kotlin_kotlin.$_$.u5;
  var NotImplementedError = kotlin_kotlin.$_$.m7;
  var flatten = kotlin_kotlin.$_$.z3;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.m1;
  var any = kotlin_kotlin.$_$.d3;
  var listOf = kotlin_kotlin.$_$.h4;
  var toList_0 = kotlin_kotlin.$_$.w4;
  var plus = kotlin_kotlin.$_$.n4;
  var get_indices = kotlin_kotlin.$_$.b4;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.o;
  var contentEquals = kotlin_kotlin.$_$.i3;
  var contentHashCode = kotlin_kotlin.$_$.j3;
  var emptyList = kotlin_kotlin.$_$.u3;
  var get_indices_0 = kotlin_kotlin.$_$.d4;
  var sum = kotlin_kotlin.$_$.s4;
  var toIntArray = kotlin_kotlin.$_$.v4;
  var getStringHashCode = kotlin_kotlin.$_$.t5;
  var Token = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.k;
  var charSequenceGet = kotlin_kotlin.$_$.l5;
  var get_category = kotlin_kotlin.$_$.r6;
  var charSequenceLength = kotlin_kotlin.$_$.m5;
  var toInt = kotlin_kotlin.$_$.a7;
  var TokenMatch = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.j;
  var Tuple2 = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.o;
  var Grammar = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.g;
  var literalToken$default = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.p;
  var use = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.f;
  var or = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.d;
  var skip = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.e;
  var parser = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.i;
  var listOf_0 = kotlin_kotlin.$_$.i4;
  var AndCombinator = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.a;
  var map = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.c;
  var SeparatedCombinator = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.b;
  var KProperty0 = kotlin_kotlin.$_$.o6;
  var Regex_init_$Create$ = kotlin_kotlin.$_$.w;
  var RuntimeException = kotlin_kotlin.$_$.o7;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.k1;
  var captureStack = kotlin_kotlin.$_$.i5;
  var until = kotlin_kotlin.$_$.n6;
  var zip = kotlin_kotlin.$_$.d5;
  var checkIndexOverflow = kotlin_kotlin.$_$.f3;
  var Grouping = kotlin_kotlin.$_$.y2;
  var eachCount = kotlin_kotlin.$_$.t3;
  var distinct = kotlin_kotlin.$_$.r3;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.i1;
  var pmap = kotlin_com_github_shwaka_parautil_parautil_parallel.$_$.b;
  var toList_1 = kotlin_kotlin.$_$.y4;
  var sorted = kotlin_kotlin.$_$.r4;
  var sortedWith = kotlin_kotlin.$_$.q4;
  var withIndex = kotlin_kotlin.$_$.c5;
  var toMap = kotlin_kotlin.$_$.z4;
  var Comparator = kotlin_kotlin.$_$.h7;
  var compareValues = kotlin_kotlin.$_$.e5;
  var slice = kotlin_kotlin.$_$.o4;
  var count = kotlin_kotlin.$_$.q3;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f1;
  var to = kotlin_kotlin.$_$.b8;
  var mapOf = kotlin_kotlin.$_$.k4;
  var pmapIndexedNotNull = kotlin_com_github_shwaka_parautil_parautil_parallel.$_$.a;
  var mapCapacity = kotlin_kotlin.$_$.j4;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.t;
  var filterNotNull = kotlin_kotlin.$_$.w3;
  var toMutableMap = kotlin_kotlin.$_$.a5;
  var emptyMap = kotlin_kotlin.$_$.v3;
  var plus_0 = kotlin_kotlin.$_$.m4;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.g1;
  var first = kotlin_kotlin.$_$.y3;
  var last = kotlin_kotlin.$_$.g4;
  var dropLast = kotlin_kotlin.$_$.s3;
  var takeLast = kotlin_kotlin.$_$.t4;
  var take = kotlin_kotlin.$_$.u4;
  var BigInteger_init_$Create$ = kotlin_com_ionspin_kotlin_bignum.$_$.a;
  var Companion_getInstance = kotlin_com_ionspin_kotlin_bignum.$_$.b;
  var removePrefix = kotlin_kotlin.$_$.w6;
  var Char = kotlin_kotlin.$_$.f7;
  var getKClass = kotlin_kotlin.$_$.b;
  var CharCategory_LOWERCASE_LETTER_getInstance = kotlin_kotlin.$_$.e;
  var CharCategory_UPPERCASE_LETTER_getInstance = kotlin_kotlin.$_$.g;
  var CharCategory_OTHER_LETTER_getInstance = kotlin_kotlin.$_$.f;
  var CharCategory_DECIMAL_DIGIT_NUMBER_getInstance = kotlin_kotlin.$_$.d;
  var CharCategory_CONNECTOR_PUNCTUATION_getInstance = kotlin_kotlin.$_$.c;
  var Enum = kotlin_kotlin.$_$.i7;
  var toString_0 = kotlin_kotlin.$_$.a8;
  var compareTo = kotlin_kotlin.$_$.p5;
  //endregion
  //region block: pre-declaration
  function get_field() {
    return this.j11().p11();
  }
  function fromVector(vector, degree) {
    return new GVector(vector, degree, this);
  }
  function fromBasisName(basisName, degree) {
    var vector = this.m11(degree).y1a(basisName);
    return this.q11(vector, degree);
  }
  function getBasis(degree) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.m11(degree).z1a();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpace.getBasis.<anonymous>' call
      tmp$ret$0 = this.q11(item, degree);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function getBasisForAugmentedDegree(augmentedDegree) {
    var tmp0_elvis_lhs = this.l11();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new NotImplementedError('GVectorSpace.getBasisForAugmentedDegree() cannot be called since the property listDegreesForAugmentedDegree is null');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var listDegreesForAugmentedDegree = tmp;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = listDegreesForAugmentedDegree(augmentedDegree);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpace.getBasisForAugmentedDegree.<anonymous>' call
      tmp$ret$0 = this.t11(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return flatten(tmp$ret$2);
  }
  function getZero(degree) {
    var vector = this.m11(degree).b1b();
    return this.q11(vector, degree);
  }
  function convertToGVector(gVectorOrZero, degree) {
    var tmp0_subject = gVectorOrZero;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = this.u11(degree);
    } else {
      if (tmp0_subject instanceof GVector) {
        tmp = gVectorOrZero;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function fromVector_0(vector, degree) {
    return this.q11(vector, this.s14().zn(degree));
  }
  function getBasis_0(degree) {
    return this.t11(this.s14().zn(degree));
  }
  function contains(gVector) {
    return equals(gVector.y17_1.n11(), this.n11());
  }
  function add(a, b) {
    if (!this.w11(a))
      throw new IllegalContextException('The gVector ' + a + ' does not match the context');
    if (!this.w11(b))
      throw new IllegalContextException('The gVector ' + b + ' does not match the context');
    if (!equals(a.x17_1, b.x17_1))
      throw ArithmeticException_init_$Create$('Cannot add two graded vectors of different degrees: ' + ('deg(' + a + ')=' + a.x17_1 + ' and deg(' + b + ')=' + b.x17_1));
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = a.w17_1.f19_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpace.add.<anonymous>' call
    tmp$ret$0 = tmp0_run.d1b(a.w17_1, b.w17_1);
    tmp$ret$1 = tmp$ret$0;
    var vector = tmp$ret$1;
    return this.q11(vector, a.x17_1);
  }
  function subtract(a, b) {
    if (!this.w11(a))
      throw new IllegalContextException('The gVector ' + a + ' does not match the context');
    if (!this.w11(b))
      throw new IllegalContextException('The gVector ' + b + ' does not match the context');
    if (!equals(a.x17_1, b.x17_1))
      throw ArithmeticException_init_$Create$('Cannot subtract a graded vector from another one with a different degree: ' + ('deg(' + a + ')=' + a.x17_1 + ' and deg(' + b + ')=' + b.x17_1));
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = a.w17_1.f19_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpace.subtract.<anonymous>' call
    tmp$ret$0 = tmp0_run.e1b(a.w17_1, b.w17_1);
    tmp$ret$1 = tmp$ret$0;
    var vector = tmp$ret$1;
    return this.q11(vector, a.x17_1);
  }
  function multiply(scalar, gVector) {
    if (!this.w11(gVector))
      throw new IllegalContextException('The gVector ' + gVector + ' does not match the context');
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = gVector.w17_1.f19_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpace.multiply.<anonymous>' call
    tmp$ret$0 = tmp0_run.f1b(scalar, gVector.w17_1);
    tmp$ret$1 = tmp$ret$0;
    var vector = tmp$ret$1;
    return this.q11(vector, gVector.x17_1);
  }
  function divideByGVector(a, b) {
    if (!this.w11(a))
      throw new IllegalContextException('The gVector ' + a + ' does not match the context');
    if (!this.w11(b))
      throw new IllegalContextException('The gVector ' + b + ' does not match the context');
    if (!equals(a.x17_1, b.x17_1))
      throw ArithmeticException_init_$Create$('Cannot divide a graded vector by another one with a different degree: ' + ('deg(' + a + ')=' + a.x17_1 + ' and deg(' + b + ')=' + b.x17_1));
    if (b.op())
      throw ArithmeticException_init_$Create$('Division by zero gVector');
    return this.m11(a.x17_1).g1b(a.w17_1, b.w17_1);
  }
  function cohomologyClassOf(cocycle) {
    return Companion_getInstance_7().q14(this.e11(), cocycle);
  }
  function multiply_0(a, b) {
    return this.f11().d19(a, b);
  }
  function multiply_1(a, b) {
    var tmp0_subject = a;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = this.d12();
    } else {
      if (tmp0_subject instanceof GVector) {
        var tmp1_subject = b;
        var tmp_0;
        if (tmp1_subject instanceof ZeroGVector) {
          tmp_0 = this.d12();
        } else {
          if (tmp1_subject instanceof GVector) {
            tmp_0 = this.a12(a, b);
          } else {
            noWhenBranchMatchedException();
          }
        }
        tmp = tmp_0;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function convertToScalar(gVector) {
    if (gVector.x17_1.z17()) {
      throw ArithmeticException_init_$Create$('Cannot convert ' + gVector + ' to a scalar since it has non-zero degree ' + gVector.x17_1);
    }
    var tmp0_elvis_lhs = this.c12(gVector, this.e12());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw ArithmeticException_init_$Create$('Cannot convert ' + gVector + ' to a scalar since it is not of a multiple of the unit');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function parse(generators, text) {
    var astNode = parseToEnd(GAlgebraElementASTGrammar_getInstance(), text);
    return getValueFromASTNode(this, generators, astNode);
  }
  function plus_1(_this__u8e3s4, other) {
    return this.p11().m1w(_this__u8e3s4, other);
  }
  function minus(_this__u8e3s4, other) {
    return this.p11().n1w(_this__u8e3s4, other);
  }
  function times(_this__u8e3s4, other) {
    return this.p11().o1w(_this__u8e3s4, other);
  }
  function unaryMinus(_this__u8e3s4) {
    return this.p11().p1w(_this__u8e3s4);
  }
  function div(_this__u8e3s4, other) {
    return this.p11().q1w(_this__u8e3s4, other);
  }
  function div_0(_this__u8e3s4, other) {
    return this.p11().q1w(this.p11().zn(_this__u8e3s4), other);
  }
  function inv(_this__u8e3s4) {
    return this.p11().q1w(this.w12(), _this__u8e3s4);
  }
  function toScalar(_this__u8e3s4) {
    return this.p11().zn(_this__u8e3s4);
  }
  function get_zero() {
    return this.p11().x12();
  }
  function get_one() {
    return this.p11().w12();
  }
  function sum_0(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.fold' call
    var tmp0_fold = this.x12();
    var accumulator = tmp0_fold;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.ScalarContext.sum.<anonymous>' call
      var tmp1__anonymous__uwfjfc = accumulator;
      tmp$ret$0 = this.g13(tmp1__anonymous__uwfjfc, element);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return tmp$ret$1;
  }
  function plus_2(_this__u8e3s4, other) {
    return this.j11().f1v(_this__u8e3s4, other);
  }
  function minus_0(_this__u8e3s4, other) {
    return this.j11().h1v(_this__u8e3s4, other);
  }
  function times_0(_this__u8e3s4, scalar) {
    return this.j11().k1v(scalar, _this__u8e3s4);
  }
  function times_1(_this__u8e3s4, numVector) {
    return this.p13(numVector, _this__u8e3s4);
  }
  function unaryMinus_0(_this__u8e3s4) {
    return this.j11().o1v(_this__u8e3s4);
  }
  function get(_this__u8e3s4, ind) {
    return this.j11().q1v(_this__u8e3s4, ind);
  }
  function plus_3(_this__u8e3s4, other) {
    return this.v12().x11(_this__u8e3s4, other);
  }
  function plus_4(_this__u8e3s4, other) {
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = _this__u8e3s4;
    } else {
      if (tmp0_subject instanceof GVector) {
        var tmp1_subject = _this__u8e3s4;
        var tmp_0;
        if (tmp1_subject instanceof ZeroGVector) {
          tmp_0 = other;
        } else {
          if (tmp1_subject instanceof GVector) {
            tmp_0 = this.v12().x11(_this__u8e3s4, other);
          } else {
            noWhenBranchMatchedException();
          }
        }
        tmp = tmp_0;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function minus_1(_this__u8e3s4, other) {
    return this.v12().y11(_this__u8e3s4, other);
  }
  function minus_2(_this__u8e3s4, other) {
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = _this__u8e3s4;
    } else {
      if (tmp0_subject instanceof GVector) {
        var tmp1_subject = _this__u8e3s4;
        var tmp_0;
        if (tmp1_subject instanceof ZeroGVector) {
          tmp_0 = this.v12().z11(this.v12().p11().zn(-1), other);
        } else {
          if (tmp1_subject instanceof GVector) {
            tmp_0 = this.v12().y11(_this__u8e3s4, other);
          } else {
            noWhenBranchMatchedException();
          }
        }
        tmp = tmp_0;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function times_2(_this__u8e3s4, scalar) {
    return this.v12().z11(scalar, _this__u8e3s4);
  }
  function times_3(_this__u8e3s4, gVector) {
    return this.v12().z11(_this__u8e3s4, gVector);
  }
  function times_4(_this__u8e3s4, gVector) {
    return this.v12().z11(this.x13(_this__u8e3s4), gVector);
  }
  function times_5(_this__u8e3s4, scalar) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = this.v12().d12();
    } else {
      if (tmp0_subject instanceof GVector) {
        tmp = this.v12().z11(scalar, _this__u8e3s4);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function times_6(_this__u8e3s4, sign) {
    var tmp0_subject = sign;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = _this__u8e3s4;
        break;
      case 1:
        tmp = this.z13(_this__u8e3s4);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function times_7(_this__u8e3s4, gVector) {
    return this.s13(gVector, _this__u8e3s4);
  }
  function unaryMinus_1(_this__u8e3s4) {
    return this.v12().z11(this.x13(-1), _this__u8e3s4);
  }
  function unaryMinus_2(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof ZeroGVector) {
      tmp = this.v12().d12();
    } else {
      if (tmp0_subject instanceof GVector) {
        tmp = this.z13(_this__u8e3s4);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function sum_1(_this__u8e3s4, degree) {
    var tmp;
    if (any(_this__u8e3s4)) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.reduce' call
      var iterator = _this__u8e3s4.f();
      if (!iterator.g())
        throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
      var accumulator = iterator.h();
      while (iterator.g()) {
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.dg.GVectorContext.sum.<anonymous>' call
        var tmp0__anonymous__q1qw7t = accumulator;
        var tmp1__anonymous__uwfjfc = iterator.h();
        tmp$ret$0 = this.i13(tmp0__anonymous__q1qw7t, tmp1__anonymous__uwfjfc);
        accumulator = tmp$ret$0;
      }
      tmp$ret$1 = accumulator;
      tmp = tmp$ret$1;
    } else {
      if (degree == null)
        throw IllegalArgumentException_init_$Create$('degree cannot be null when an iterator of GVector is empty');
      return this.v12().u11(degree);
    }
    return tmp;
  }
  function get_d() {
    return this.t12().g11();
  }
  function cohomologyClass(_this__u8e3s4) {
    return this.t12().i11(_this__u8e3s4);
  }
  function times_8(_this__u8e3s4, other) {
    return this.u12().a12(_this__u8e3s4, other);
  }
  function times_9(_this__u8e3s4, other) {
    return this.u12().b12(_this__u8e3s4, other);
  }
  function times_10(_this__u8e3s4, other) {
    return this.m12().a12(_this__u8e3s4, other);
  }
  function get_unit() {
    return this.b14().e12();
  }
  function pow(_this__u8e3s4, exponent) {
    var unit = this.b14().e12();
    var tmp;
    if (exponent === 0) {
      tmp = unit;
    } else if (exponent === 1) {
      tmp = _this__u8e3s4;
    } else if (exponent > 1) {
      var half = this.c14(_this__u8e3s4, exponent / 2 | 0);
      var rem = (exponent % 2 | 0) === 1 ? _this__u8e3s4 : unit;
      tmp = this.r13(this.r13(half, half), rem);
    } else if (exponent < 0) {
      throw ArithmeticException_init_$Create$('Negative power in an algebra is not defined');
    } else {
      throw Exception_init_$Create$("This can't happen!");
    }
    return tmp;
  }
  function pow_0(_this__u8e3s4, exponent) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof GVector) {
      tmp = this.c14(_this__u8e3s4, exponent);
    } else {
      if (tmp0_subject instanceof ZeroGVector) {
        var tmp_0;
        if (exponent === 0) {
          tmp_0 = this.b14().e12();
        } else if (exponent > 0) {
          tmp_0 = this.b14().d12();
        } else if (exponent < 0) {
          throw ArithmeticException_init_$Create$('Negative power in an algebra is not defined');
        } else {
          throw Exception_init_$Create$("This can't happen!");
        }
        tmp = tmp_0;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function toScalar_0(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof GVector) {
      tmp = this.b14().g12(_this__u8e3s4);
    } else {
      if (tmp0_subject instanceof ZeroGVector) {
        tmp = this.x12();
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function product(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.fold' call
    var tmp0_fold = this.b14().e12();
    var accumulator = tmp0_fold;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GAlgebraContext.product.<anonymous>' call
      var tmp1__anonymous__uwfjfc = accumulator;
      tmp$ret$0 = this.r13(tmp1__anonymous__uwfjfc, element);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return tmp$ret$1;
  }
  function get_degreeGroup() {
    return this.z14().s14();
  }
  function invoke(gVector) {
    if (!this.z14().w11(gVector))
      throw new IllegalContextException('Invalid graded vector is given as an argument for a graded linear map');
    var linearMap = this.m11(gVector.x17_1);
    if (!equals(gVector.w17_1.f19_1, linearMap.w19_1))
      throw Exception_init_$Create$('Graded linear map contains a bug: getLinearMap returns incorrect linear map');
    var newVector = linearMap.b1a(gVector.w17_1);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.s14().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.dg.GLinearMap.invoke.<anonymous>' call
    tmp$ret$0 = tmp0_run.y18(gVector.x17_1, this.b15());
    tmp$ret$1 = tmp$ret$0;
    var newDegree = tmp$ret$1;
    return this.a15().q11(newVector, newDegree);
  }
  function kernel() {
    var tmp = Companion_getInstance_17();
    var tmp_0 = this.h11();
    var tmp_1 = this.z14();
    var tmp_2 = 'Ker(' + this.xb() + ')';
    return tmp.c1a(tmp_0, tmp_1, tmp_2, null, GLinearMap$kernel$lambda(this), 8, null);
  }
  function image() {
    var tmp = Companion_getInstance_17();
    var tmp_0 = this.h11();
    var tmp_1 = this.a15();
    var tmp_2 = 'Im(' + this.xb() + ')';
    return tmp.c1a(tmp_0, tmp_1, tmp_2, null, GLinearMap$image$lambda(this), 8, null);
  }
  function induce(sourceSubQuot, targetSubQuot) {
    var gLinearMapDegree = this.b15();
    var tmp = Companion_getInstance_14();
    var tmp_0 = this.b15();
    var tmp_1 = this.h11();
    var tmp_2 = this.xb();
    return tmp.u19(sourceSubQuot, targetSubQuot, tmp_0, tmp_1, tmp_2, GLinearMap$induce$lambda(this, gLinearMapDegree, sourceSubQuot, targetSubQuot));
  }
  function ad(gVector) {
    var matrixSpace = this.z15().h11();
    var name = 'ad(' + gVector + ')';
    var tmp = Companion_getInstance_9();
    var tmp_0 = this.z15();
    return tmp.l17(tmp_0, gVector.x17_1, matrixSpace, name, GLieAlgebraContext$ad$lambda(this, gVector));
  }
  function isNotZero() {
    return !this.op();
  }
  function subspaceContains(gVector) {
    var subQuotVectorSpace = this.m11(gVector.x17_1);
    return subQuotVectorSpace.y1d(gVector.w17_1);
  }
  function isNotZero_0() {
    return !this.op();
  }
  function isOdd() {
    return !this.r1e();
  }
  function koszulSign(other) {
    return Companion_getInstance_45().u1e(this.r1e() ? true : other.r1e());
  }
  function get_zero_0() {
    return this.zn(0);
  }
  AugmentedDegreeContext.prototype = Object.create(DegreeContext.prototype);
  AugmentedDegreeContext.prototype.constructor = AugmentedDegreeContext;
  CharCategoryToken.prototype = Object.create(Token.prototype);
  CharCategoryToken.prototype.constructor = CharCategoryToken;
  GAlgebraElementASTGrammar.prototype = Object.create(Grammar.prototype);
  GAlgebraElementASTGrammar.prototype.constructor = GAlgebraElementASTGrammar;
  RegexToken.prototype = Object.create(Token.prototype);
  RegexToken.prototype.constructor = RegexToken;
  IllegalContextException.prototype = Object.create(RuntimeException.prototype);
  IllegalContextException.prototype.constructor = IllegalContextException;
  InvalidSizeException.prototype = Object.create(RuntimeException.prototype);
  InvalidSizeException.prototype.constructor = InvalidSizeException;
  function get_generatorList() {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.c1g();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.<get-generatorList>.<anonymous>' call
      var monomial = Companion_getInstance_31().y1n(this.s14(), this.c1g(), item);
      tmp$ret$0 = this.s11(monomial, item.g1k_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function getDerivation(valueList, derivationDegree) {
    if (!(valueList.i() === this.c1g().i()))
      throw new InvalidSizeException('Invalid size of the list of values of a derivation: ' + ('' + this.c1g().i() + ' is expected but ' + valueList.i() + ' is given'));
    var tmp0_iterator = zip(this.c1g(), valueList).f();
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var indeterminate = tmp1_loop_parameter.w3();
      var value = tmp1_loop_parameter.x3();
      if (value instanceof GVector) {
        var tmp$ret$1;
        // Inline function 'kotlin.run' call
        var tmp0_run = this.s14().t14();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivation.<anonymous>' call
        tmp$ret$0 = tmp0_run.y18(indeterminate.g1k_1, derivationDegree);
        tmp$ret$1 = tmp$ret$0;
        var expectedValueDegree = tmp$ret$1;
        if (!equals(value.x17_1, expectedValueDegree))
          throw IllegalArgumentException_init_$Create$('Illegal degree: the degree of the value of ' + indeterminate + ' must be ' + ('' + indeterminate.g1k_1 + ' + ' + derivationDegree + ' = ' + expectedValueDegree + ', ') + ('but ' + value.x17_1 + ' was given'));
      }
    }
    var tmp$ret$6;
    // Inline function 'kotlin.collections.mapIndexed' call
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(valueList, 10));
    var index = 0;
    var tmp0_iterator_0 = valueList.f();
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      var tmp$ret$4;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivation.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
      var tmp$ret$3;
      // Inline function 'kotlin.run' call
      var tmp0_run_0 = this.s14().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivation.<anonymous>.<anonymous>' call
      tmp$ret$2 = tmp0_run_0.y18(this.c1g().l(tmp1__anonymous__uwfjfc).g1k_1, derivationDegree);
      tmp$ret$3 = tmp$ret$2;
      var valueDegree = tmp$ret$3;
      tmp$ret$4 = this.v11(item, valueDegree);
      tmp0_mapIndexedTo.a(tmp$ret$4);
    }
    tmp$ret$5 = tmp0_mapIndexedTo;
    tmp$ret$6 = tmp$ret$5;
    var gVectorValueList = tmp$ret$6;
    var name = 'Derivation(' + joinToString$default(valueList, ', ', null, null, 0, null, FreeGAlgebra$getDerivation$lambda, 30, null) + ')';
    var tmp = Companion_getInstance_8();
    var tmp_0 = this.h11();
    return tmp.j17(this, derivationDegree, tmp_0, name, FreeGAlgebra$getDerivation$lambda_0(this, derivationDegree, gVectorValueList));
  }
  function getDerivation_0(valueList, derivationDegree) {
    return this.h1k(valueList, this.s14().zn(derivationDegree));
  }
  function getGAlgebraMap(target, valueList) {
    if (!(valueList.i() === this.c1g().i()))
      throw new InvalidSizeException('Invalid size of the list of values of an algebra map');
    var tmp0_iterator = zip(this.c1g(), valueList).f();
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var indeterminate = tmp1_loop_parameter.w3();
      var value = tmp1_loop_parameter.x3();
      if (value instanceof GVector) {
        if (!equals(value.x17_1, indeterminate.g1k_1))
          throw IllegalArgumentException_init_$Create$('Illegal degree: the degree of the value of ' + indeterminate + ' must be ' + indeterminate.g1k_1 + ('but ' + value.x17_1 + ' was given'));
      }
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapIndexed' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(valueList, 10));
    var index = 0;
    var tmp0_iterator_0 = valueList.f();
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getGAlgebraMap.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var valueDegree = this.c1g().l(tmp0__anonymous__q1qw7t).g1k_1;
      tmp$ret$0 = target.v11(item, valueDegree);
      tmp0_mapIndexedTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapIndexedTo;
    tmp$ret$2 = tmp$ret$1;
    var gVectorValueList = tmp$ret$2;
    var name = 'AlgebraMap(' + joinToString$default(valueList, ', ', null, null, 0, null, FreeGAlgebra$getGAlgebraMap$lambda, 30, null) + ')';
    var tmp = Companion_getInstance_11();
    var tmp_0 = this.h11();
    return tmp.r18(this, target, tmp_0, name, FreeGAlgebra$getGAlgebraMap$lambda_0(this, target, gVectorValueList));
  }
  function containsIndeterminate(indeterminateIndex, element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = element.w17_1.t1a();
      if (tmp0_any.p()) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$1 = tmp0_any.d1().f();
      var tmp0_iterator = tmp$ret$1;
      while (tmp0_iterator.g()) {
        var element_0 = tmp0_iterator.h();
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.containsIndeterminate.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$2 = element_0.e1();
        var monomial = tmp$ret$2;
        tmp$ret$3 = monomial.z1n(indeterminateIndex);
        if (tmp$ret$3) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  }
  function parse_0(text) {
    var generators = this.a1l();
    return this.h12(generators, text);
  }
  function getGeneratorsForParser() {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = zip(this.c1g(), this.d1g());
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getGeneratorsForParser.<anonymous>' call
      var indeterminate = item.w3();
      var generator = item.x3();
      tmp$ret$0 = new Pair(indeterminate.f1k_1.p1e().a1o_1, generator);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function convertDegree(degreeMorphism) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.c1g();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.convertDegree.<anonymous>' call
      tmp$ret$0 = item.b1o(degreeMorphism);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var newIndeterminateList = tmp$ret$2;
    var tmp = Companion_getInstance_26();
    var tmp_0 = this.h11();
    var tmp_1 = degreeMorphism.a15();
    var newFreeGAlgebra = tmp.s1n(tmp_0, tmp_1, newIndeterminateList, null, 8, null);
    var freeMonoidMorphism = new FreeMonoidMorphismByDegreeChange(this.p1l(), degreeMorphism);
    var tmp_2 = Companion_getInstance_15();
    var tmp_3 = this.h11();
    var tmp_4 = this.xb() + ' (degree changed)';
    var gLinearMapWithDegreeChange = tmp_2.l1a(this, newFreeGAlgebra, degreeMorphism, tmp_3, tmp_4, FreeGAlgebra$convertDegree$lambda(freeMonoidMorphism));
    return new Pair(newFreeGAlgebra, gLinearMapWithDegreeChange);
  }
  function toString_1(printConfig) {
    var tmp = this.c1g();
    var indeterminateString = joinToString$default(tmp, ', ', null, null, 0, null, FreeGAlgebra$toString$lambda(printConfig), 30, null);
    return '\u039B(' + indeterminateString + ')';
  }
  function toString_2(printConfig) {
    var gAlgebraString = this.y1j().v1a(printConfig);
    return '(' + gAlgebraString + ', d)';
  }
  function convertDegree_0(degreeMorphism) {
    var tmp0_container = convertDegree.call(this, degreeMorphism);
    var newFreeGAlgebra = tmp0_container.w3();
    var changeDegree = tmp0_container.x3();
    var tmp$ret$4;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.d1g();
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.free.FreeDGAlgebra.convertDegree.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeDGAlgebra.convertDegree.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.l12().e15(item);
      tmp$ret$1 = tmp$ret$0;
      var dv = tmp$ret$1;
      tmp$ret$2 = changeDegree.s1a(dv);
      tmp0_mapTo.a(tmp$ret$2);
    }
    tmp$ret$3 = tmp0_mapTo;
    tmp$ret$4 = tmp$ret$3;
    var differentialValueList = tmp$ret$4;
    var differential = newFreeGAlgebra.t1k(differentialValueList, 1);
    var newFreeDGAlgebra = Companion_getInstance_24().q1k(newFreeGAlgebra, differential);
    return new Pair(newFreeDGAlgebra, changeDegree);
  }
  function parse_1(text) {
    return this.b14().p1k(text);
  }
  function listDegreesForAugmentedDegree(augmentedDegree) {
    throw new NotImplementedError('Monoid.listDegreesForAugmentedDegree() is not implemented for a general monoid');
  }
  function toString_3(printConfig) {
    return toString(this);
  }
  PositiveIndeterminateList.prototype = Object.create(IndeterminateList.prototype);
  PositiveIndeterminateList.prototype.constructor = PositiveIndeterminateList;
  NegativeIndeterminateList.prototype = Object.create(IndeterminateList.prototype);
  NegativeIndeterminateList.prototype.constructor = NegativeIndeterminateList;
  function toString_4(printConfig) {
    return toString(this);
  }
  Zero_0.prototype = Object.create(SignedOrZero.prototype);
  Zero_0.prototype.constructor = Zero_0;
  Signed.prototype = Object.create(SignedOrZero.prototype);
  Signed.prototype.constructor = Signed;
  DecomposedSparseRowEchelonForm.prototype = Object.create(RowEchelonForm.prototype);
  DecomposedSparseRowEchelonForm.prototype.constructor = DecomposedSparseRowEchelonForm;
  function getIdentity(dim) {
    var one = this.p11().w12();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.List' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dim);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < dim)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.MatrixSpace.getIdentity.<anonymous>' call
        tmp$ret$0 = to(index, mapOf(to(index, one)));
        list.a(tmp$ret$0);
      }
       while (inductionVariable < dim);
    tmp$ret$1 = list;
    tmp$ret$2 = tmp$ret$1;
    var rowMap = toMap(tmp$ret$2);
    return this.e1t(rowMap, dim, dim);
  }
  function fromRowList$default(rowList, colCount, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      colCount = null;
    return $handler == null ? this.m1u(rowList, colCount) : $handler(rowList, colCount);
  }
  function fromColList(colList, rowCount) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$0 = !colList.p();
    if (tmp$ret$0) {
      tmp = colList.l(0).i();
    } else {
      if (!(rowCount == null)) {
        tmp = rowCount;
      } else {
        throw IllegalArgumentException_init_$Create$('Column list is empty and rowCount is not specified');
      }
    }
    var rowCountNonNull = tmp;
    var colCount = colList.i();
    var tmp$ret$6;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, rowCountNonNull);
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$4;
        // Inline function 'com.github.shwaka.kohomology.linalg.MatrixSpace.fromColList.<anonymous>' call
        var tmp$ret$3;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, colCount);
        var tmp$ret$2;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$1;
            // Inline function 'com.github.shwaka.kohomology.linalg.MatrixSpace.fromColList.<anonymous>.<anonymous>' call
            tmp$ret$1 = colList.l(item_0).l(item);
            tmp0_mapTo_0.a(tmp$ret$1);
          }
           while (!(item_0 === last_0));
        tmp$ret$2 = tmp0_mapTo_0;
        tmp$ret$3 = tmp$ret$2;
        tmp$ret$4 = tmp$ret$3;
        tmp0_mapTo.a(tmp$ret$4);
      }
       while (!(item === last));
    tmp$ret$5 = tmp0_mapTo;
    tmp$ret$6 = tmp$ret$5;
    var rows = tmp$ret$6;
    return this.m1u(rows, colCount);
  }
  function fromColMap(colMap, rowCount, colCount) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var rowMap = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$1 = colMap.d1().f();
    var tmp0_iterator = tmp$ret$1;
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$2 = tmp1_loop_parameter.e1();
      var colInd = tmp$ret$2;
      var tmp$ret$3;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$3 = tmp1_loop_parameter.f1();
      var col = tmp$ret$3;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$4 = col.d1().f();
      var tmp2_iterator = tmp$ret$4;
      while (tmp2_iterator.g()) {
        var tmp3_loop_parameter = tmp2_iterator.h();
        var tmp$ret$5;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$5 = tmp3_loop_parameter.e1();
        var rowInd = tmp$ret$5;
        var tmp$ret$6;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$6 = tmp3_loop_parameter.f1();
        var elm = tmp$ret$6;
        var tmp$ret$9;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = rowMap.t(rowInd);
        var tmp;
        if (value == null) {
          var tmp$ret$8;
          // Inline function 'com.github.shwaka.kohomology.linalg.MatrixSpace.fromColMap.<anonymous>' call
          var tmp$ret$7;
          // Inline function 'kotlin.collections.mutableMapOf' call
          tmp$ret$7 = LinkedHashMap_init_$Create$();
          tmp$ret$8 = tmp$ret$7;
          var answer = tmp$ret$8;
          rowMap.u(rowInd, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        tmp$ret$9 = tmp;
        var row = tmp$ret$9;
        // Inline function 'kotlin.collections.set' call
        row.u(colInd, elm);
      }
    }
    return this.e1t(rowMap, rowCount, colCount);
  }
  function fromNumVectorList(numVectors, dim) {
    if (numVectors.p() ? dim == null : false)
      throw IllegalArgumentException_init_$Create$('Vector list is empty and dim is not specified');
    var tmp0_elvis_lhs = dim;
    var dimNotNull = tmp0_elvis_lhs == null ? numVectors.l(0).d1u() : tmp0_elvis_lhs;
    var colMap = toMap(pmapIndexedNotNull(numVectors, MatrixSpace$fromNumVectorList$lambda));
    return this.y1u(colMap, dimNotNull, numVectors.i());
  }
  function toList_2() {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, this.z1u());
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.Matrix.toList.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, this.a1v());
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.linalg.Matrix.toList.<anonymous>.<anonymous>' call
            tmp$ret$0 = this.k1u(item, item_0);
            tmp0_mapTo_0.a(tmp$ret$0);
          }
           while (!(item_0 === last_0));
        tmp$ret$1 = tmp0_mapTo_0;
        tmp$ret$2 = tmp$ret$1;
        tmp$ret$3 = tmp$ret$2;
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  }
  function toNumVectorList() {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, this.a1v());
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.Matrix.toNumVectorList.<anonymous>' call
        var tmp = this.j11();
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, this.z1u());
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.linalg.Matrix.toNumVectorList.<anonymous>.<anonymous>' call
            tmp$ret$0 = this.k1u(item_0, item);
            tmp0_mapTo_0.a(tmp$ret$0);
          }
           while (!(item_0 === last_0));
        tmp$ret$1 = tmp0_mapTo_0;
        tmp$ret$2 = tmp$ret$1;
        tmp$ret$3 = tmp.e1u(tmp$ret$2);
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  }
  function getOneAtIndex(index, dim) {
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.p11().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.NumVectorSpace.getOneAtIndex.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, dim);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.NumVectorSpace.getOneAtIndex.<anonymous>.<anonymous>' call
        tmp$ret$0 = item === index ? tmp0_run.w12() : tmp0_run.x12();
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var valueList = tmp$ret$4;
    return this.e1u(valueList);
  }
  function fromReducedValueMap(valueMap, dim) {
    return this.r1v(valueMap, dim);
  }
  DenseRowEchelonForm.prototype = Object.create(RowEchelonForm.prototype);
  DenseRowEchelonForm.prototype.constructor = DenseRowEchelonForm;
  function toString_5(printType, withSign) {
    return this.d22(PrintConfig_init_$Create$(printType, null, null, null, null, 30, null), withSign);
  }
  function toString_6(printConfig) {
    return this.d22(printConfig, true);
  }
  function isNotZero_1() {
    return !this.op();
  }
  function unaryMinusOf(scalar) {
    return this.o1w(scalar, this.zn(-1));
  }
  function times_11(_this__u8e3s4, numVector) {
    return this.h11().f1u(_this__u8e3s4, numVector);
  }
  function get_rowEchelonForm(_this__u8e3s4) {
    return this.h11().i1u(_this__u8e3s4);
  }
  function rowSlice(_this__u8e3s4, rowRange) {
    return this.h11().r1u(_this__u8e3s4, rowRange);
  }
  function colSlice(_this__u8e3s4, colRange) {
    return this.h11().t1u(_this__u8e3s4, colRange);
  }
  function join(_this__u8e3s4) {
    if (_this__u8e3s4.p())
      throw IllegalArgumentException_init_$Create$('Empty list of matrices cannot be reduced');
    var tmp$ret$1;
    // Inline function 'kotlin.collections.reduce' call
    var iterator = _this__u8e3s4.f();
    if (!iterator.g())
      throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
    var accumulator = iterator.h();
    while (iterator.g()) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.MatrixContext.join.<anonymous>' call
      var tmp0__anonymous__q1qw7t = accumulator;
      var tmp1__anonymous__uwfjfc = iterator.h();
      tmp$ret$0 = this.h11().p1u(tmp0__anonymous__q1qw7t, tmp1__anonymous__uwfjfc);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return tmp$ret$1;
  }
  function transpose(_this__u8e3s4) {
    return this.h11().l1u(_this__u8e3s4);
  }
  function computeKernelBasis(_this__u8e3s4) {
    var rowEchelonForm = this.v1w(_this__u8e3s4);
    var dim = _this__u8e3s4.a1v();
    var pivots = rowEchelonForm.l1t();
    var firstNonZeroIndex = pivots.p() ? _this__u8e3s4.a1v() : pivots.l(0);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, firstNonZeroIndex);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.MatrixContext.computeKernelBasis.<anonymous>' call
        tmp$ret$0 = _this__u8e3s4.j11().t1v(item, dim);
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var trivialVectors = tmp$ret$2;
    var matrix = rowEchelonForm.k1t();
    var tmp$ret$8;
    // Inline function 'kotlin.collections.map' call
    var tmp1_map = get_indices_0(pivots);
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
    var inductionVariable_0 = tmp1_map.h5_1;
    var last_0 = tmp1_map.i5_1;
    if (inductionVariable_0 <= last_0)
      do {
        var item_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.linalg.MatrixContext.computeKernelBasis.<anonymous>' call
        var start = pivots.l(item_0) + 1 | 0;
        var limit = (item_0 + 1 | 0) < pivots.i() ? pivots.l(item_0 + 1 | 0) : dim;
        var tmp$ret$5;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(start, limit);
        var tmp$ret$4;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_1 = tmp0_map_0.h5_1;
        var last_1 = tmp0_map_0.i5_1;
        if (inductionVariable_1 <= last_1)
          do {
            var item_1 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var tmp$ret$3;
            // Inline function 'com.github.shwaka.kohomology.linalg.MatrixContext.computeKernelBasis.<anonymous>.<anonymous>' call
            var numVector = _this__u8e3s4.j11().t1v(item_1, dim);
            var inductionVariable_2 = item_0;
            if (0 <= inductionVariable_2)
              do {
                var q = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + -1 | 0;
                numVector = this.d13(numVector, this.p13(_this__u8e3s4.j11().t1v(pivots.l(q), dim), matrix.k1u(q, item_1)));
              }
               while (0 <= inductionVariable_2);
            tmp$ret$3 = numVector;
            tmp0_mapTo_1.a(tmp$ret$3);
          }
           while (!(item_1 === last_1));
        tmp$ret$4 = tmp0_mapTo_1;
        tmp$ret$5 = tmp$ret$4;
        tmp$ret$6 = tmp$ret$5;
        tmp0_mapTo_0.a(tmp$ret$6);
      }
       while (!(item_0 === last_0));
    tmp$ret$7 = tmp0_mapTo_0;
    tmp$ret$8 = tmp$ret$7;
    var vectorsForPivots = flatten(tmp$ret$8);
    return plus(trivialVectors, vectorsForPivots);
  }
  SparseMatrixSpace.prototype = Object.create(AbstractSparseMatrixSpace.prototype);
  SparseMatrixSpace.prototype.constructor = SparseMatrixSpace;
  DecomposedSparseMatrixSpace.prototype = Object.create(AbstractSparseMatrixSpace.prototype);
  DecomposedSparseMatrixSpace.prototype.constructor = DecomposedSparseMatrixSpace;
  SparseRowEchelonForm.prototype = Object.create(RowEchelonForm.prototype);
  SparseRowEchelonForm.prototype.constructor = SparseRowEchelonForm;
  PrintType.prototype = Object.create(Enum.prototype);
  PrintType.prototype.constructor = PrintType;
  ShowShift.prototype = Object.create(Enum.prototype);
  ShowShift.prototype.constructor = ShowShift;
  Sign.prototype = Object.create(Enum.prototype);
  Sign.prototype.constructor = Sign;
  function get_dim() {
    return this.s19().i();
  }
  function get_field_0() {
    return this.j11().p11();
  }
  function contains_0(vector) {
    return equals(vector.f19_1, this);
  }
  function add_0(a, b) {
    if (!this.x23(a))
      throw new IllegalContextException('The vector ' + a + ' is not contained in the vector space ' + this);
    if (!this.x23(b))
      throw new IllegalContextException('The vector ' + b + ' is not contained in the vector space ' + this);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.j11().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpace.add.<anonymous>' call
    tmp$ret$0 = new Vector(tmp0_run.h13(a.e19_1, b.e19_1), this);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function subtract_0(a, b) {
    if (!this.x23(a))
      throw new IllegalContextException('The vector ' + a + ' is not contained in the vector space ' + this);
    if (!this.x23(b))
      throw new IllegalContextException('The vector ' + b + ' is not contained in the vector space ' + this);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.j11().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpace.subtract.<anonymous>' call
    tmp$ret$0 = new Vector(tmp0_run.d13(a.e19_1, b.e19_1), this);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function multiply_2(scalar, vector) {
    if (!this.p11().j1v(scalar))
      throw new IllegalContextException('The scalar ' + scalar + ' does not match the context (' + this.p11() + ')');
    if (!this.x23(vector))
      throw new IllegalContextException('The vector ' + vector + ' is not contained in the vector space ' + this);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.j11().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpace.multiply.<anonymous>' call
    tmp$ret$0 = new Vector(tmp0_run.p13(vector.e19_1, scalar), vector.f19_1);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function divideByVector(a, b) {
    if (!this.x23(a))
      throw new IllegalContextException('The vector ' + a + ' is not contained in the vector space ' + this);
    if (!this.x23(b))
      throw new IllegalContextException('The vector ' + b + ' is not contained in the vector space ' + this);
    if (b.op())
      throw ArithmeticException_init_$Create$('Division by zero vector');
    return this.j11().m1v(a.e19_1, b.e19_1);
  }
  function fromNumVector(numVector) {
    return new Vector(numVector, this);
  }
  function fromCoeffList(coeffList) {
    var numVector = this.j11().e1u(coeffList);
    return this.b24(numVector);
  }
  function fromBasisName_0(basisName) {
    var index = this.u23(basisName);
    var coeffMap = mapOf(to(index, this.p11().w12()));
    var numVector = this.j11().u1v(coeffMap, this.d1u());
    return this.b24(numVector);
  }
  function get_zeroVector() {
    return new Vector(this.j11().s1v(this.d1u()), this);
  }
  function getBasis_1() {
    var zero = this.p11().x12();
    var one = this.p11().w12();
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, this.d1u());
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpace.getBasis.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, this.d1u());
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpace.getBasis.<anonymous>.<anonymous>' call
            tmp$ret$0 = item === item_0 ? one : zero;
            tmp0_mapTo_0.a(tmp$ret$0);
          }
           while (!(item_0 === last_0));
        tmp$ret$1 = tmp0_mapTo_0;
        tmp$ret$2 = tmp$ret$1;
        var coeff = tmp$ret$2;
        tmp$ret$3 = this.c24(coeff);
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  }
  function plus_5(_this__u8e3s4, other) {
    return this.w25().y23(_this__u8e3s4, other);
  }
  function minus_3(_this__u8e3s4, other) {
    return this.w25().z23(_this__u8e3s4, other);
  }
  function times_12(_this__u8e3s4, scalar) {
    return this.w25().a24(scalar, _this__u8e3s4);
  }
  function times_13(_this__u8e3s4, vector) {
    return this.w25().a24(_this__u8e3s4, vector);
  }
  function unaryMinus_3(_this__u8e3s4) {
    return new Vector(this.e1x(_this__u8e3s4.e19_1), _this__u8e3s4.f19_1);
  }
  function sum_2(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.fold' call
    var tmp0_fold = this.w25().b1b();
    var accumulator = tmp0_fold;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.VectorContext.sum.<anonymous>' call
      var tmp1__anonymous__uwfjfc = accumulator;
      tmp$ret$0 = this.d1b(tmp1__anonymous__uwfjfc, element);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return tmp$ret$1;
  }
  //endregion
  function Boundedness_init_$Init$(upperBound, lowerBound, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      upperBound = null;
    if (!(($mask0 & 2) === 0))
      lowerBound = null;
    Boundedness.call($this, upperBound, lowerBound);
    return $this;
  }
  function Boundedness_init_$Create$(upperBound, lowerBound, $mask0, $marker) {
    return Boundedness_init_$Init$(upperBound, lowerBound, $mask0, $marker, Object.create(Boundedness.prototype));
  }
  function Companion() {
    Companion_instance = this;
  }
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance_0() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Boundedness(upperBound, lowerBound) {
    Companion_getInstance_0();
    this.a11_1 = upperBound;
    this.b11_1 = lowerBound;
  }
  Boundedness.prototype.toString = function () {
    return 'Boundedness(upperBound=' + this.a11_1 + ', lowerBound=' + this.b11_1 + ')';
  };
  Boundedness.prototype.hashCode = function () {
    var result = this.a11_1 == null ? 0 : this.a11_1;
    result = imul(result, 31) + (this.b11_1 == null ? 0 : this.b11_1) | 0;
    return result;
  };
  Boundedness.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Boundedness))
      return false;
    var tmp0_other_with_cast = other instanceof Boundedness ? other : THROW_CCE();
    if (!(this.a11_1 == tmp0_other_with_cast.a11_1))
      return false;
    if (!(this.b11_1 == tmp0_other_with_cast.b11_1))
      return false;
    return true;
  };
  Boundedness.$metadata$ = classMeta('Boundedness');
  function Companion_0() {
    Companion_instance_0 = this;
  }
  Companion_0.prototype.c11 = function (gAlgebra, differential) {
    var dgMagma = Companion_getInstance_6().d11(gAlgebra, differential);
    return new DGAlgebraImpl(gAlgebra, differential, dgMagma.e11(), dgMagma.e11().f11());
  };
  Companion_0.$metadata$ = objectMeta('Companion');
  var Companion_instance_0;
  function Companion_getInstance_1() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function DGAlgebra() {
  }
  DGAlgebra.$metadata$ = interfaceMeta('DGAlgebra', [DGMagma, GAlgebra]);
  function DGAlgebraContext() {
  }
  DGAlgebraContext.$metadata$ = interfaceMeta('DGAlgebraContext', [DGMagmaContext, GAlgebraContext]);
  function DGAlgebraContextImpl(dgAlgebra) {
    this.i12_1 = dgAlgebra;
    this.j12_1 = new DGMagmaContextImpl(dgAlgebra);
    this.k12_1 = this.i12_1;
  }
  DGAlgebraContextImpl.prototype.l12 = function () {
    return this.j12_1.l12();
  };
  DGAlgebraContextImpl.prototype.m12 = function () {
    return this.j12_1.n12_1;
  };
  DGAlgebraContextImpl.prototype.t12 = function () {
    return this.j12_1.o12_1;
  };
  DGAlgebraContextImpl.prototype.p11 = function () {
    return this.j12_1.s12_1;
  };
  DGAlgebraContextImpl.prototype.u12 = function () {
    return this.j12_1.p12_1;
  };
  DGAlgebraContextImpl.prototype.v12 = function () {
    return this.j12_1.q12_1;
  };
  DGAlgebraContextImpl.prototype.j11 = function () {
    return this.j12_1.r12_1;
  };
  DGAlgebraContextImpl.prototype.w12 = function () {
    return this.j12_1.w12();
  };
  DGAlgebraContextImpl.prototype.x12 = function () {
    return this.j12_1.x12();
  };
  DGAlgebraContextImpl.prototype.y12 = function (_this__u8e3s4) {
    return this.j12_1.y12(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.j12_1.z12(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.j12_1.a13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.j12_1.b13(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.j12_1.c13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.j12_1.d13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.e13 = function (_this__u8e3s4, other) {
    return this.j12_1.e13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.f13 = function (_this__u8e3s4, other) {
    return this.j12_1.f13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.j12_1.g13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.j12_1.h13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.j12_1.i13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.j13 = function (_this__u8e3s4, other) {
    return this.j12_1.j13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.j12_1.k13(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.j12_1.l13(_this__u8e3s4, degree);
  };
  DGAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.j12_1.m13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.j12_1.n13(_this__u8e3s4, numVector);
  };
  DGAlgebraContextImpl.prototype.o13 = function (_this__u8e3s4, gVector) {
    return this.j12_1.o13(_this__u8e3s4, gVector);
  };
  DGAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.j12_1.p13(_this__u8e3s4, scalar);
  };
  DGAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.j12_1.q13(_this__u8e3s4, scalar);
  };
  DGAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.j12_1.r13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.j12_1.s13(_this__u8e3s4, sign);
  };
  DGAlgebraContextImpl.prototype.t13 = function (_this__u8e3s4, scalar) {
    return this.j12_1.t13(_this__u8e3s4, scalar);
  };
  DGAlgebraContextImpl.prototype.u13 = function (_this__u8e3s4, other) {
    return this.j12_1.u13(_this__u8e3s4, other);
  };
  DGAlgebraContextImpl.prototype.v13 = function (_this__u8e3s4, gVector) {
    return this.j12_1.v13(_this__u8e3s4, gVector);
  };
  DGAlgebraContextImpl.prototype.w13 = function (_this__u8e3s4, gVector) {
    return this.j12_1.w13(_this__u8e3s4, gVector);
  };
  DGAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.j12_1.x13(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.j12_1.y13(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.j12_1.z13(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.a14 = function (_this__u8e3s4) {
    return this.j12_1.a14(_this__u8e3s4);
  };
  DGAlgebraContextImpl.prototype.b14 = function () {
    return this.k12_1;
  };
  DGAlgebraContextImpl.$metadata$ = classMeta('DGAlgebraContextImpl', [DGAlgebraContext, DGMagmaContext]);
  function DGAlgebraImpl$cohomology$delegate$lambda(this$0) {
    return function () {
      var cohomologyUnit = Companion_getInstance_7().q14(this$0.i14_1, this$0.g14_1.e12());
      return Companion_getInstance_18().r14(this$0.n14_1, this$0.i14_1, this$0.j14_1, cohomologyUnit, this$0.m14_1);
    };
  }
  function DGAlgebraImpl(underlyingGAlgebra, differential, cohomologyGVectorSpace, cohomologyMultiplication) {
    this.g14_1 = underlyingGAlgebra;
    this.h14_1 = differential;
    this.i14_1 = cohomologyGVectorSpace;
    this.j14_1 = cohomologyMultiplication;
    this.k14_1 = new DGAlgebraContextImpl(this);
    this.l14_1 = this.g14_1.e12();
    this.m14_1 = this.g14_1.f12();
    this.n14_1 = this.g14_1.h11();
    this.o14_1 = this.g14_1.f11();
    var tmp = this;
    tmp.p14_1 = lazy(DGAlgebraImpl$cohomology$delegate$lambda(this));
  }
  DGAlgebraImpl.prototype.g11 = function () {
    return this.h14_1;
  };
  DGAlgebraImpl.prototype.o11 = function () {
    return this.g14_1.o11();
  };
  DGAlgebraImpl.prototype.s14 = function () {
    return this.g14_1.s14();
  };
  DGAlgebraImpl.prototype.p11 = function () {
    return this.g14_1.p11();
  };
  DGAlgebraImpl.prototype.k11 = function () {
    return this.g14_1.k11();
  };
  DGAlgebraImpl.prototype.l11 = function () {
    return this.g14_1.l11();
  };
  DGAlgebraImpl.prototype.xb = function () {
    return this.g14_1.xb();
  };
  DGAlgebraImpl.prototype.j11 = function () {
    return this.g14_1.j11();
  };
  DGAlgebraImpl.prototype.n11 = function () {
    return this.g14_1.n11();
  };
  DGAlgebraImpl.prototype.d12 = function () {
    return this.g14_1.d12();
  };
  DGAlgebraImpl.prototype.x11 = function (a, b) {
    return this.g14_1.x11(a, b);
  };
  DGAlgebraImpl.prototype.w11 = function (gVector) {
    return this.g14_1.w11(gVector);
  };
  DGAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.g14_1.v11(gVectorOrZero, degree);
  };
  DGAlgebraImpl.prototype.c12 = function (a, b) {
    return this.g14_1.c12(a, b);
  };
  DGAlgebraImpl.prototype.s11 = function (basisName, degree) {
    return this.g14_1.s11(basisName, degree);
  };
  DGAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.g14_1.q11(vector, degree);
  };
  DGAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.g14_1.r11(vector, degree);
  };
  DGAlgebraImpl.prototype.m11 = function (degree) {
    return this.g14_1.m11(degree);
  };
  DGAlgebraImpl.prototype.t11 = function (degree) {
    return this.g14_1.t11(degree);
  };
  DGAlgebraImpl.prototype.u11 = function (degree) {
    return this.g14_1.u11(degree);
  };
  DGAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.g14_1.z11(scalar, gVector);
  };
  DGAlgebraImpl.prototype.y11 = function (a, b) {
    return this.g14_1.y11(a, b);
  };
  DGAlgebraImpl.prototype.toString = function () {
    return this.g14_1.toString();
  };
  DGAlgebraImpl.prototype.t14 = function () {
    return this.k14_1;
  };
  DGAlgebraImpl.prototype.e12 = function () {
    return this.l14_1;
  };
  DGAlgebraImpl.prototype.f12 = function () {
    return this.m14_1;
  };
  DGAlgebraImpl.prototype.h11 = function () {
    return this.n14_1;
  };
  DGAlgebraImpl.prototype.f11 = function () {
    return this.o14_1;
  };
  DGAlgebraImpl.prototype.e11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = cohomology$factory();
    tmp$ret$0 = this.p14_1.f1();
    return tmp$ret$0;
  };
  DGAlgebraImpl.$metadata$ = classMeta('DGAlgebraImpl', [DGAlgebra, GVectorSpace]);
  function cohomology$factory() {
    return getPropertyCallableRef('cohomology', 1, KProperty1, function (receiver) {
      return receiver.e11();
    }, null);
  }
  function Companion_1() {
    Companion_instance_1 = this;
  }
  Companion_1.prototype.u14 = function (source, target, gLinearMap) {
    return new DGAlgebraMapImpl(source, target, gLinearMap);
  };
  Companion_1.$metadata$ = objectMeta('Companion');
  var Companion_instance_1;
  function Companion_getInstance_2() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function DGAlgebraMap() {
  }
  DGAlgebraMap.$metadata$ = interfaceMeta('DGAlgebraMap', [DGLinearMap, GAlgebraMap]);
  function DGAlgebraMapImpl(source, target, gLinearMap) {
    this.v14_1 = source;
    this.w14_1 = target;
    this.x14_1 = Companion_getInstance_5().y14(source, target, gLinearMap);
  }
  DGAlgebraMapImpl.prototype.z14 = function () {
    return this.v14_1;
  };
  DGAlgebraMapImpl.prototype.a15 = function () {
    return this.w14_1;
  };
  DGAlgebraMapImpl.prototype.b15 = function () {
    return this.x14_1.b15();
  };
  DGAlgebraMapImpl.prototype.s14 = function () {
    return this.x14_1.s14();
  };
  DGAlgebraMapImpl.prototype.h11 = function () {
    return this.x14_1.h11();
  };
  DGAlgebraMapImpl.prototype.xb = function () {
    return this.x14_1.xb();
  };
  DGAlgebraMapImpl.prototype.m11 = function (degree) {
    return this.x14_1.m11(degree);
  };
  DGAlgebraMapImpl.prototype.c15 = function () {
    return this.x14_1.c15();
  };
  DGAlgebraMapImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.x14_1.d15(sourceSubQuot, targetSubQuot);
  };
  DGAlgebraMapImpl.prototype.e15 = function (gVector) {
    return this.x14_1.e15(gVector);
  };
  DGAlgebraMapImpl.prototype.f15 = function () {
    return this.x14_1.f15();
  };
  DGAlgebraMapImpl.$metadata$ = classMeta('DGAlgebraMapImpl', [DGAlgebraMap, DGLinearMap]);
  function Companion_2() {
    Companion_instance_2 = this;
  }
  Companion_2.prototype.g15 = function (source, gLinearMap) {
    return new DGDerivationImpl(source, gLinearMap);
  };
  Companion_2.$metadata$ = objectMeta('Companion');
  var Companion_instance_2;
  function Companion_getInstance_3() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function DGDerivation() {
  }
  DGDerivation.$metadata$ = interfaceMeta('DGDerivation', [DGLinearMap, Derivation]);
  function DGDerivationImpl(source, gLinearMap) {
    this.h15_1 = source;
    this.i15_1 = Companion_getInstance_5().y14(source, source, gLinearMap);
    this.j15_1 = this.h15_1;
  }
  DGDerivationImpl.prototype.z14 = function () {
    return this.h15_1;
  };
  DGDerivationImpl.prototype.b15 = function () {
    return this.i15_1.b15();
  };
  DGDerivationImpl.prototype.s14 = function () {
    return this.i15_1.s14();
  };
  DGDerivationImpl.prototype.h11 = function () {
    return this.i15_1.h11();
  };
  DGDerivationImpl.prototype.xb = function () {
    return this.i15_1.xb();
  };
  DGDerivationImpl.prototype.m11 = function (degree) {
    return this.i15_1.m11(degree);
  };
  DGDerivationImpl.prototype.c15 = function () {
    return this.i15_1.c15();
  };
  DGDerivationImpl.prototype.k15 = function (sourceSubQuot, targetSubQuot) {
    return this.i15_1.d15(sourceSubQuot, targetSubQuot);
  };
  DGDerivationImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.k15(sourceSubQuot, targetSubQuot);
  };
  DGDerivationImpl.prototype.l15 = function (gVector) {
    return this.i15_1.e15(gVector);
  };
  DGDerivationImpl.prototype.e15 = function (gVector) {
    return this.l15(gVector);
  };
  DGDerivationImpl.prototype.f15 = function () {
    return this.i15_1.f15();
  };
  DGDerivationImpl.prototype.a15 = function () {
    return this.j15_1;
  };
  DGDerivationImpl.$metadata$ = classMeta('DGDerivationImpl', [DGDerivation, DGLinearMap]);
  function Companion_3() {
    Companion_instance_3 = this;
  }
  Companion_3.prototype.m15 = function (gLieAlgebra, differential) {
    var dgMagma = Companion_getInstance_6().d11(gLieAlgebra, differential);
    return new DGLieAlgebraImpl(gLieAlgebra, differential, dgMagma.e11(), dgMagma.e11().f11());
  };
  Companion_3.$metadata$ = objectMeta('Companion');
  var Companion_instance_3;
  function Companion_getInstance_4() {
    if (Companion_instance_3 == null)
      new Companion_3();
    return Companion_instance_3;
  }
  function DGLieAlgebra() {
  }
  DGLieAlgebra.$metadata$ = interfaceMeta('DGLieAlgebra', [DGMagma, GLieAlgebra]);
  function DGLieAlgebraContext() {
  }
  DGLieAlgebraContext.$metadata$ = interfaceMeta('DGLieAlgebraContext', [DGMagmaContext, GLieAlgebraContext]);
  function DGLieAlgebraImpl$cohomology$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_19().v15(this$0.s15_1, this$0.p15_1, this$0.q15_1);
    };
  }
  function DGLieAlgebraImpl(underlyingGLieAlgebra, differential, cohomologyGVectorSpace, cohomologyMultiplication) {
    this.n15_1 = underlyingGLieAlgebra;
    this.o15_1 = differential;
    this.p15_1 = cohomologyGVectorSpace;
    this.q15_1 = cohomologyMultiplication;
    this.r15_1 = new DGLieAlgebraContextImpl(this);
    this.s15_1 = this.n15_1.h11();
    this.t15_1 = this.n15_1.f11();
    var tmp = this;
    tmp.u15_1 = lazy(DGLieAlgebraImpl$cohomology$delegate$lambda(this));
  }
  DGLieAlgebraImpl.prototype.g11 = function () {
    return this.o15_1;
  };
  DGLieAlgebraImpl.prototype.o11 = function () {
    return this.n15_1.o11();
  };
  DGLieAlgebraImpl.prototype.s14 = function () {
    return this.n15_1.s14();
  };
  DGLieAlgebraImpl.prototype.p11 = function () {
    return this.n15_1.p11();
  };
  DGLieAlgebraImpl.prototype.k11 = function () {
    return this.n15_1.k11();
  };
  DGLieAlgebraImpl.prototype.l11 = function () {
    return this.n15_1.l11();
  };
  DGLieAlgebraImpl.prototype.xb = function () {
    return this.n15_1.xb();
  };
  DGLieAlgebraImpl.prototype.j11 = function () {
    return this.n15_1.j11();
  };
  DGLieAlgebraImpl.prototype.n11 = function () {
    return this.n15_1.n11();
  };
  DGLieAlgebraImpl.prototype.d12 = function () {
    return this.n15_1.d12();
  };
  DGLieAlgebraImpl.prototype.x11 = function (a, b) {
    return this.n15_1.x11(a, b);
  };
  DGLieAlgebraImpl.prototype.w11 = function (gVector) {
    return this.n15_1.w11(gVector);
  };
  DGLieAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.n15_1.v11(gVectorOrZero, degree);
  };
  DGLieAlgebraImpl.prototype.c12 = function (a, b) {
    return this.n15_1.c12(a, b);
  };
  DGLieAlgebraImpl.prototype.s11 = function (basisName, degree) {
    return this.n15_1.s11(basisName, degree);
  };
  DGLieAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.n15_1.q11(vector, degree);
  };
  DGLieAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.n15_1.r11(vector, degree);
  };
  DGLieAlgebraImpl.prototype.m11 = function (degree) {
    return this.n15_1.m11(degree);
  };
  DGLieAlgebraImpl.prototype.t11 = function (degree) {
    return this.n15_1.t11(degree);
  };
  DGLieAlgebraImpl.prototype.u11 = function (degree) {
    return this.n15_1.u11(degree);
  };
  DGLieAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.n15_1.z11(scalar, gVector);
  };
  DGLieAlgebraImpl.prototype.y11 = function (a, b) {
    return this.n15_1.y11(a, b);
  };
  DGLieAlgebraImpl.prototype.toString = function () {
    return this.n15_1.toString();
  };
  DGLieAlgebraImpl.prototype.t14 = function () {
    return this.r15_1;
  };
  DGLieAlgebraImpl.prototype.h11 = function () {
    return this.s15_1;
  };
  DGLieAlgebraImpl.prototype.f11 = function () {
    return this.t15_1;
  };
  DGLieAlgebraImpl.prototype.e11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = cohomology$factory_0();
    tmp$ret$0 = this.u15_1.f1();
    return tmp$ret$0;
  };
  DGLieAlgebraImpl.$metadata$ = classMeta('DGLieAlgebraImpl', [DGLieAlgebra, GVectorSpace]);
  function DGLieAlgebraContextImpl(dgLieAlgebra) {
    this.w15_1 = dgLieAlgebra;
    this.x15_1 = new DGMagmaContextImpl(dgLieAlgebra);
    this.y15_1 = this.w15_1;
  }
  DGLieAlgebraContextImpl.prototype.m12 = function () {
    return this.x15_1.n12_1;
  };
  DGLieAlgebraContextImpl.prototype.t12 = function () {
    return this.x15_1.o12_1;
  };
  DGLieAlgebraContextImpl.prototype.p11 = function () {
    return this.x15_1.s12_1;
  };
  DGLieAlgebraContextImpl.prototype.u12 = function () {
    return this.x15_1.p12_1;
  };
  DGLieAlgebraContextImpl.prototype.v12 = function () {
    return this.x15_1.q12_1;
  };
  DGLieAlgebraContextImpl.prototype.j11 = function () {
    return this.x15_1.r12_1;
  };
  DGLieAlgebraContextImpl.prototype.w12 = function () {
    return this.x15_1.w12();
  };
  DGLieAlgebraContextImpl.prototype.x12 = function () {
    return this.x15_1.x12();
  };
  DGLieAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.x15_1.z12(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.x15_1.b13(_this__u8e3s4);
  };
  DGLieAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.x15_1.c13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.x15_1.d13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.x15_1.g13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.x15_1.h13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.x15_1.i13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.x15_1.k13(_this__u8e3s4);
  };
  DGLieAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.x15_1.l13(_this__u8e3s4, degree);
  };
  DGLieAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.x15_1.m13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.x15_1.n13(_this__u8e3s4, numVector);
  };
  DGLieAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.x15_1.p13(_this__u8e3s4, scalar);
  };
  DGLieAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.x15_1.q13(_this__u8e3s4, scalar);
  };
  DGLieAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.x15_1.r13(_this__u8e3s4, other);
  };
  DGLieAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.x15_1.s13(_this__u8e3s4, sign);
  };
  DGLieAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.x15_1.x13(_this__u8e3s4);
  };
  DGLieAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.x15_1.y13(_this__u8e3s4);
  };
  DGLieAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.x15_1.z13(_this__u8e3s4);
  };
  DGLieAlgebraContextImpl.prototype.z15 = function () {
    return this.y15_1;
  };
  DGLieAlgebraContextImpl.$metadata$ = classMeta('DGLieAlgebraContextImpl', [DGLieAlgebraContext, DGMagmaContext]);
  function cohomology$factory_0() {
    return getPropertyCallableRef('cohomology', 1, KProperty1, function (receiver) {
      return receiver.e11();
    }, null);
  }
  function Companion_4() {
    Companion_instance_4 = this;
  }
  Companion_4.prototype.y14 = function (source, target, gLinearMap) {
    return new DGLinearMapImpl(source, target, gLinearMap);
  };
  Companion_4.$metadata$ = objectMeta('Companion');
  var Companion_instance_4;
  function Companion_getInstance_5() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function DGLinearMap() {
  }
  DGLinearMap.$metadata$ = interfaceMeta('DGLinearMap', [GLinearMap]);
  function DGLinearMapImpl$inducedMapOnCohomology$delegate$lambda(this$0) {
    return function () {
      return this$0.d15(this$0.b16_1.e11(), this$0.c16_1.e11());
    };
  }
  function DGLinearMapImpl(source, target, gLinearMap) {
    this.b16_1 = source;
    this.c16_1 = target;
    this.d16_1 = gLinearMap;
    // Inline function 'kotlin.require' call
    var tmp0_require = equals(this.b16_1.n11(), gLinearMap.z14().n11());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.DGLinearMapImpl.<anonymous>' call
      tmp$ret$0 = 'The source DGVectorSpace does not match to the source GVectorSpace of GLinearMap';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = equals(this.c16_1.n11(), gLinearMap.a15().n11());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.dg.DGLinearMapImpl.<anonymous>' call
      tmp$ret$1 = 'The target DGVectorSpace does not match to the target GVectorSpace of GLinearMap';
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    var tmp = this;
    tmp.e16_1 = lazy(DGLinearMapImpl$inducedMapOnCohomology$delegate$lambda(this));
  }
  DGLinearMapImpl.prototype.z14 = function () {
    return this.b16_1;
  };
  DGLinearMapImpl.prototype.a15 = function () {
    return this.c16_1;
  };
  DGLinearMapImpl.prototype.b15 = function () {
    return this.d16_1.b15();
  };
  DGLinearMapImpl.prototype.s14 = function () {
    return this.d16_1.s14();
  };
  DGLinearMapImpl.prototype.h11 = function () {
    return this.d16_1.h11();
  };
  DGLinearMapImpl.prototype.xb = function () {
    return this.d16_1.xb();
  };
  DGLinearMapImpl.prototype.m11 = function (degree) {
    return this.d16_1.m11(degree);
  };
  DGLinearMapImpl.prototype.c15 = function () {
    return this.d16_1.c15();
  };
  DGLinearMapImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.d16_1.d15(sourceSubQuot, targetSubQuot);
  };
  DGLinearMapImpl.prototype.e15 = function (gVector) {
    return this.d16_1.e15(gVector);
  };
  DGLinearMapImpl.prototype.f15 = function () {
    return this.d16_1.f15();
  };
  DGLinearMapImpl.$metadata$ = classMeta('DGLinearMapImpl', [DGLinearMap, GLinearMap]);
  function Companion_5() {
    Companion_instance_5 = this;
  }
  Companion_5.prototype.d11 = function (gMagma, differential) {
    var dgVectorSpace = Companion_getInstance_7().f16(gMagma, differential);
    return new DGMagmaImpl(gMagma, differential, gMagma.f11(), dgVectorSpace.e11());
  };
  Companion_5.$metadata$ = objectMeta('Companion');
  var Companion_instance_5;
  function Companion_getInstance_6() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function DGMagma() {
  }
  DGMagma.$metadata$ = interfaceMeta('DGMagma', [DGVectorSpace, GMagma]);
  function DGMagmaContext() {
  }
  DGMagmaContext.$metadata$ = interfaceMeta('DGMagmaContext', [DGVectorContext, GMagmaContext]);
  function DGMagmaContextImpl(dgMagma) {
    this.n12_1 = dgMagma;
    this.o12_1 = this.n12_1;
    this.p12_1 = this.n12_1;
    this.q12_1 = this.p12_1;
    this.r12_1 = this.p12_1.j11();
    this.s12_1 = this.p12_1.p11();
  }
  DGMagmaContextImpl.prototype.m12 = function () {
    return this.n12_1;
  };
  DGMagmaContextImpl.prototype.t12 = function () {
    return this.o12_1;
  };
  DGMagmaContextImpl.prototype.u12 = function () {
    return this.p12_1;
  };
  DGMagmaContextImpl.prototype.v12 = function () {
    return this.q12_1;
  };
  DGMagmaContextImpl.prototype.j11 = function () {
    return this.r12_1;
  };
  DGMagmaContextImpl.prototype.p11 = function () {
    return this.s12_1;
  };
  DGMagmaContextImpl.$metadata$ = classMeta('DGMagmaContextImpl', [DGMagmaContext]);
  function getCohomologyMultiplication($this) {
    return $this.h16_1.w16($this.i16_1, $this.i16_1, $this.i16_1);
  }
  function DGMagmaImpl$cohomology$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_20().v15(this$0.l16_1, this$0.i16_1, getCohomologyMultiplication(this$0));
    };
  }
  function DGMagmaImpl(gVectorSpace, differential, multiplication, cohomologyGVectorSpace) {
    this.g16_1 = differential;
    this.h16_1 = multiplication;
    this.i16_1 = cohomologyGVectorSpace;
    this.j16_1 = gVectorSpace;
    this.k16_1 = new DGMagmaContextImpl(this);
    this.l16_1 = this.g16_1.h11();
    var tmp = this;
    tmp.m16_1 = lazy(DGMagmaImpl$cohomology$delegate$lambda(this));
  }
  DGMagmaImpl.prototype.g11 = function () {
    return this.g16_1;
  };
  DGMagmaImpl.prototype.f11 = function () {
    return this.h16_1;
  };
  DGMagmaImpl.prototype.o11 = function () {
    return this.j16_1.o11();
  };
  DGMagmaImpl.prototype.s14 = function () {
    return this.j16_1.s14();
  };
  DGMagmaImpl.prototype.p11 = function () {
    return this.j16_1.p11();
  };
  DGMagmaImpl.prototype.k11 = function () {
    return this.j16_1.k11();
  };
  DGMagmaImpl.prototype.l11 = function () {
    return this.j16_1.l11();
  };
  DGMagmaImpl.prototype.xb = function () {
    return this.j16_1.xb();
  };
  DGMagmaImpl.prototype.j11 = function () {
    return this.j16_1.j11();
  };
  DGMagmaImpl.prototype.n11 = function () {
    return this.j16_1.n11();
  };
  DGMagmaImpl.prototype.d12 = function () {
    return this.j16_1.d12();
  };
  DGMagmaImpl.prototype.x11 = function (a, b) {
    return this.j16_1.x11(a, b);
  };
  DGMagmaImpl.prototype.w11 = function (gVector) {
    return this.j16_1.w11(gVector);
  };
  DGMagmaImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.j16_1.v11(gVectorOrZero, degree);
  };
  DGMagmaImpl.prototype.c12 = function (a, b) {
    return this.j16_1.c12(a, b);
  };
  DGMagmaImpl.prototype.s11 = function (basisName, degree) {
    return this.j16_1.s11(basisName, degree);
  };
  DGMagmaImpl.prototype.q11 = function (vector, degree) {
    return this.j16_1.q11(vector, degree);
  };
  DGMagmaImpl.prototype.r11 = function (vector, degree) {
    return this.j16_1.r11(vector, degree);
  };
  DGMagmaImpl.prototype.m11 = function (degree) {
    return this.j16_1.m11(degree);
  };
  DGMagmaImpl.prototype.t11 = function (degree) {
    return this.j16_1.t11(degree);
  };
  DGMagmaImpl.prototype.u11 = function (degree) {
    return this.j16_1.u11(degree);
  };
  DGMagmaImpl.prototype.z11 = function (scalar, gVector) {
    return this.j16_1.z11(scalar, gVector);
  };
  DGMagmaImpl.prototype.y11 = function (a, b) {
    return this.j16_1.y11(a, b);
  };
  DGMagmaImpl.prototype.toString = function () {
    return this.j16_1.toString();
  };
  DGMagmaImpl.prototype.t14 = function () {
    return this.k16_1;
  };
  DGMagmaImpl.prototype.e11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = cohomology$factory_1();
    tmp$ret$0 = this.m16_1.f1();
    return tmp$ret$0;
  };
  DGMagmaImpl.$metadata$ = classMeta('DGMagmaImpl', [DGMagma, GVectorSpace]);
  function cohomology$factory_1() {
    return getPropertyCallableRef('cohomology', 1, KProperty1, function (receiver) {
      return receiver.e11();
    }, null);
  }
  function getCohomology($this, gVectorSpace, differential) {
    var name = 'H(' + gVectorSpace.xb() + ')';
    var tmp = Companion_getInstance_21();
    var tmp_0 = differential.h11();
    var tmp_1 = differential.f15();
    var tmp_2 = differential.c15();
    return tmp.x16(tmp_0, name, gVectorSpace, tmp_1, tmp_2, null, 32, null);
  }
  function Companion_6() {
    Companion_instance_6 = this;
  }
  Companion_6.prototype.f16 = function (gVectorSpace, differential) {
    var cohomology = getCohomology(Companion_getInstance_7(), gVectorSpace, differential);
    return new DGVectorSpaceImpl(gVectorSpace, differential, cohomology);
  };
  Companion_6.prototype.q14 = function (cohomology, cocycle) {
    // Inline function 'kotlin.require' call
    var tmp0_require = cohomology.y16(cocycle);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.Companion.getCohomologyClass.<anonymous>' call
      tmp$ret$0 = '' + cocycle + ' is not a cocycle';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return cohomology.z16().e15(cocycle);
  };
  Companion_6.$metadata$ = objectMeta('Companion');
  var Companion_instance_6;
  function Companion_getInstance_7() {
    if (Companion_instance_6 == null)
      new Companion_6();
    return Companion_instance_6;
  }
  function DGVectorSpace() {
  }
  DGVectorSpace.$metadata$ = interfaceMeta('DGVectorSpace', [GVectorSpace]);
  function DGVectorContext() {
  }
  DGVectorContext.$metadata$ = interfaceMeta('DGVectorContext', [GVectorContext]);
  function DGVectorSpaceImpl(gVectorSpace, differential, cohomology) {
    this.a17_1 = differential;
    this.b17_1 = cohomology;
    this.c17_1 = gVectorSpace;
    this.d17_1 = new DGVectorContextImpl(this);
    this.e17_1 = gVectorSpace.n11();
  }
  DGVectorSpaceImpl.prototype.g11 = function () {
    return this.a17_1;
  };
  DGVectorSpaceImpl.prototype.e11 = function () {
    return this.b17_1;
  };
  DGVectorSpaceImpl.prototype.o11 = function () {
    return this.c17_1.o11();
  };
  DGVectorSpaceImpl.prototype.s14 = function () {
    return this.c17_1.s14();
  };
  DGVectorSpaceImpl.prototype.p11 = function () {
    return this.c17_1.p11();
  };
  DGVectorSpaceImpl.prototype.k11 = function () {
    return this.c17_1.k11();
  };
  DGVectorSpaceImpl.prototype.l11 = function () {
    return this.c17_1.l11();
  };
  DGVectorSpaceImpl.prototype.xb = function () {
    return this.c17_1.xb();
  };
  DGVectorSpaceImpl.prototype.j11 = function () {
    return this.c17_1.j11();
  };
  DGVectorSpaceImpl.prototype.d12 = function () {
    return this.c17_1.d12();
  };
  DGVectorSpaceImpl.prototype.x11 = function (a, b) {
    return this.c17_1.x11(a, b);
  };
  DGVectorSpaceImpl.prototype.w11 = function (gVector) {
    return this.c17_1.w11(gVector);
  };
  DGVectorSpaceImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.c17_1.v11(gVectorOrZero, degree);
  };
  DGVectorSpaceImpl.prototype.c12 = function (a, b) {
    return this.c17_1.c12(a, b);
  };
  DGVectorSpaceImpl.prototype.s11 = function (basisName, degree) {
    return this.c17_1.s11(basisName, degree);
  };
  DGVectorSpaceImpl.prototype.q11 = function (vector, degree) {
    return this.c17_1.q11(vector, degree);
  };
  DGVectorSpaceImpl.prototype.r11 = function (vector, degree) {
    return this.c17_1.r11(vector, degree);
  };
  DGVectorSpaceImpl.prototype.m11 = function (degree) {
    return this.c17_1.m11(degree);
  };
  DGVectorSpaceImpl.prototype.t11 = function (degree) {
    return this.c17_1.t11(degree);
  };
  DGVectorSpaceImpl.prototype.u11 = function (degree) {
    return this.c17_1.u11(degree);
  };
  DGVectorSpaceImpl.prototype.z11 = function (scalar, gVector) {
    return this.c17_1.z11(scalar, gVector);
  };
  DGVectorSpaceImpl.prototype.y11 = function (a, b) {
    return this.c17_1.y11(a, b);
  };
  DGVectorSpaceImpl.prototype.t14 = function () {
    return this.d17_1;
  };
  DGVectorSpaceImpl.prototype.n11 = function () {
    return this.e17_1;
  };
  DGVectorSpaceImpl.prototype.toString = function () {
    var name = this.xb();
    return '(' + name + ', d)';
  };
  DGVectorSpaceImpl.$metadata$ = classMeta('DGVectorSpaceImpl', [DGVectorSpace, GVectorSpace]);
  function DGVectorContextImpl(dgVectorSpace) {
    this.f17_1 = dgVectorSpace;
    this.g17_1 = new GVectorContextImpl(dgVectorSpace);
  }
  DGVectorContextImpl.prototype.t12 = function () {
    return this.f17_1;
  };
  DGVectorContextImpl.prototype.p11 = function () {
    return this.g17_1.p11();
  };
  DGVectorContextImpl.prototype.v12 = function () {
    return this.g17_1.h17_1;
  };
  DGVectorContextImpl.prototype.j11 = function () {
    return this.g17_1.j11();
  };
  DGVectorContextImpl.prototype.w12 = function () {
    return this.g17_1.w12();
  };
  DGVectorContextImpl.prototype.x12 = function () {
    return this.g17_1.x12();
  };
  DGVectorContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.g17_1.z12(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.g17_1.b13(_this__u8e3s4);
  };
  DGVectorContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.g17_1.c13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.g17_1.d13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.g17_1.g13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.g17_1.h13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.g17_1.i13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.g17_1.k13(_this__u8e3s4);
  };
  DGVectorContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.g17_1.l13(_this__u8e3s4, degree);
  };
  DGVectorContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.g17_1.m13(_this__u8e3s4, other);
  };
  DGVectorContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.g17_1.n13(_this__u8e3s4, numVector);
  };
  DGVectorContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.g17_1.p13(_this__u8e3s4, scalar);
  };
  DGVectorContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.g17_1.q13(_this__u8e3s4, scalar);
  };
  DGVectorContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.g17_1.s13(_this__u8e3s4, sign);
  };
  DGVectorContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.g17_1.x13(_this__u8e3s4);
  };
  DGVectorContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.g17_1.y13(_this__u8e3s4);
  };
  DGVectorContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.g17_1.z13(_this__u8e3s4);
  };
  DGVectorContextImpl.$metadata$ = classMeta('DGVectorContextImpl', [DGVectorContext, GVectorContext]);
  function Companion_7() {
    Companion_instance_7 = this;
  }
  Companion_7.prototype.j17 = function (source, degree, matrixSpace, name, getGVectors) {
    var gLinearMap = Companion_getInstance_14().k17(source, source, degree, matrixSpace, name, getGVectors);
    return new DerivationImpl(source, gLinearMap);
  };
  Companion_7.$metadata$ = objectMeta('Companion');
  var Companion_instance_7;
  function Companion_getInstance_8() {
    if (Companion_instance_7 == null)
      new Companion_7();
    return Companion_instance_7;
  }
  function Derivation() {
  }
  Derivation.$metadata$ = interfaceMeta('Derivation', [MagmaDerivation]);
  function Companion_8() {
    Companion_instance_8 = this;
  }
  Companion_8.prototype.l17 = function (source, degree, matrixSpace, name, getGVectors) {
    var gLinearMap = Companion_getInstance_14().k17(source, source, degree, matrixSpace, name, getGVectors);
    return new LieDerivationImpl(source, gLinearMap);
  };
  Companion_8.$metadata$ = objectMeta('Companion');
  var Companion_instance_8;
  function Companion_getInstance_9() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  function LieDerivation() {
  }
  LieDerivation.$metadata$ = interfaceMeta('LieDerivation', [MagmaDerivation]);
  function Companion_9() {
    Companion_instance_9 = this;
  }
  Companion_9.prototype.m17 = function (source, gLinearMap) {
    return new MagmaDerivationImpl(source, gLinearMap);
  };
  Companion_9.$metadata$ = objectMeta('Companion');
  var Companion_instance_9;
  function Companion_getInstance_10() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function MagmaDerivation() {
  }
  MagmaDerivation.$metadata$ = interfaceMeta('MagmaDerivation', [GLinearMap]);
  function DerivationImpl(source, gLinearMap) {
    this.n17_1 = source;
    this.o17_1 = Companion_getInstance_10().m17(source, gLinearMap);
    this.p17_1 = this.n17_1;
  }
  DerivationImpl.prototype.z14 = function () {
    return this.n17_1;
  };
  DerivationImpl.prototype.b15 = function () {
    return this.o17_1.b15();
  };
  DerivationImpl.prototype.s14 = function () {
    return this.o17_1.s14();
  };
  DerivationImpl.prototype.h11 = function () {
    return this.o17_1.h11();
  };
  DerivationImpl.prototype.xb = function () {
    return this.o17_1.xb();
  };
  DerivationImpl.prototype.m11 = function (degree) {
    return this.o17_1.m11(degree);
  };
  DerivationImpl.prototype.c15 = function () {
    return this.o17_1.c15();
  };
  DerivationImpl.prototype.k15 = function (sourceSubQuot, targetSubQuot) {
    return this.o17_1.d15(sourceSubQuot, targetSubQuot);
  };
  DerivationImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.k15(sourceSubQuot, targetSubQuot);
  };
  DerivationImpl.prototype.l15 = function (gVector) {
    return this.o17_1.e15(gVector);
  };
  DerivationImpl.prototype.e15 = function (gVector) {
    return this.l15(gVector);
  };
  DerivationImpl.prototype.f15 = function () {
    return this.o17_1.f15();
  };
  DerivationImpl.prototype.a15 = function () {
    return this.p17_1;
  };
  DerivationImpl.$metadata$ = classMeta('DerivationImpl', [Derivation, MagmaDerivation]);
  function LieDerivationImpl(source, gLinearMap) {
    this.q17_1 = source;
    this.r17_1 = Companion_getInstance_10().m17(source, gLinearMap);
    this.s17_1 = this.q17_1;
  }
  LieDerivationImpl.prototype.z14 = function () {
    return this.q17_1;
  };
  LieDerivationImpl.prototype.b15 = function () {
    return this.r17_1.b15();
  };
  LieDerivationImpl.prototype.s14 = function () {
    return this.r17_1.s14();
  };
  LieDerivationImpl.prototype.h11 = function () {
    return this.r17_1.h11();
  };
  LieDerivationImpl.prototype.xb = function () {
    return this.r17_1.xb();
  };
  LieDerivationImpl.prototype.m11 = function (degree) {
    return this.r17_1.m11(degree);
  };
  LieDerivationImpl.prototype.c15 = function () {
    return this.r17_1.c15();
  };
  LieDerivationImpl.prototype.k15 = function (sourceSubQuot, targetSubQuot) {
    return this.r17_1.d15(sourceSubQuot, targetSubQuot);
  };
  LieDerivationImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.k15(sourceSubQuot, targetSubQuot);
  };
  LieDerivationImpl.prototype.l15 = function (gVector) {
    return this.r17_1.e15(gVector);
  };
  LieDerivationImpl.prototype.e15 = function (gVector) {
    return this.l15(gVector);
  };
  LieDerivationImpl.prototype.f15 = function () {
    return this.r17_1.f15();
  };
  LieDerivationImpl.prototype.a15 = function () {
    return this.s17_1;
  };
  LieDerivationImpl.$metadata$ = classMeta('LieDerivationImpl', [LieDerivation, MagmaDerivation]);
  function MagmaDerivationImpl(source, gLinearMap) {
    this.t17_1 = source;
    this.u17_1 = gLinearMap;
    this.v17_1 = this.t17_1;
    // Inline function 'kotlin.require' call
    var tmp0_require = equals(gLinearMap.z14(), this.t17_1);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = equals(gLinearMap.a15(), this.t17_1);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$1 = 'Failed requirement.';
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  MagmaDerivationImpl.prototype.z14 = function () {
    return this.t17_1;
  };
  MagmaDerivationImpl.prototype.b15 = function () {
    return this.u17_1.b15();
  };
  MagmaDerivationImpl.prototype.s14 = function () {
    return this.u17_1.s14();
  };
  MagmaDerivationImpl.prototype.h11 = function () {
    return this.u17_1.h11();
  };
  MagmaDerivationImpl.prototype.xb = function () {
    return this.u17_1.xb();
  };
  MagmaDerivationImpl.prototype.m11 = function (degree) {
    return this.u17_1.m11(degree);
  };
  MagmaDerivationImpl.prototype.c15 = function () {
    return this.u17_1.c15();
  };
  MagmaDerivationImpl.prototype.k15 = function (sourceSubQuot, targetSubQuot) {
    return this.u17_1.d15(sourceSubQuot, targetSubQuot);
  };
  MagmaDerivationImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.k15(sourceSubQuot, targetSubQuot);
  };
  MagmaDerivationImpl.prototype.l15 = function (gVector) {
    return this.u17_1.e15(gVector);
  };
  MagmaDerivationImpl.prototype.e15 = function (gVector) {
    return this.l15(gVector);
  };
  MagmaDerivationImpl.prototype.f15 = function () {
    return this.u17_1.f15();
  };
  MagmaDerivationImpl.prototype.a15 = function () {
    return this.v17_1;
  };
  MagmaDerivationImpl.$metadata$ = classMeta('MagmaDerivationImpl', [MagmaDerivation, GLinearMap]);
  function GAlgebra() {
  }
  GAlgebra.$metadata$ = interfaceMeta('GAlgebra', [GMagma]);
  function GAlgebraContext() {
  }
  GAlgebraContext.$metadata$ = interfaceMeta('GAlgebraContext', [GMagmaContext]);
  function GAlgebraContextImpl(gAlgebra) {
    this.a18_1 = gAlgebra;
    this.b18_1 = new GMagmaContextImpl(gAlgebra);
  }
  GAlgebraContextImpl.prototype.b14 = function () {
    return this.a18_1;
  };
  GAlgebraContextImpl.prototype.p11 = function () {
    return this.b18_1.p11();
  };
  GAlgebraContextImpl.prototype.u12 = function () {
    return this.b18_1.c18_1;
  };
  GAlgebraContextImpl.prototype.v12 = function () {
    return this.b18_1.v12();
  };
  GAlgebraContextImpl.prototype.j11 = function () {
    return this.b18_1.j11();
  };
  GAlgebraContextImpl.prototype.w12 = function () {
    return this.b18_1.w12();
  };
  GAlgebraContextImpl.prototype.x12 = function () {
    return this.b18_1.x12();
  };
  GAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.b18_1.z12(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.b18_1.a13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.b18_1.b13(_this__u8e3s4);
  };
  GAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.b18_1.c13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.b18_1.d13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.e13 = function (_this__u8e3s4, other) {
    return this.b18_1.e13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.f13 = function (_this__u8e3s4, other) {
    return this.b18_1.f13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.b18_1.g13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.b18_1.h13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.b18_1.i13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.j13 = function (_this__u8e3s4, other) {
    return this.b18_1.j13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.b18_1.k13(_this__u8e3s4);
  };
  GAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.b18_1.l13(_this__u8e3s4, degree);
  };
  GAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.b18_1.m13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.b18_1.n13(_this__u8e3s4, numVector);
  };
  GAlgebraContextImpl.prototype.o13 = function (_this__u8e3s4, gVector) {
    return this.b18_1.o13(_this__u8e3s4, gVector);
  };
  GAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.b18_1.p13(_this__u8e3s4, scalar);
  };
  GAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.b18_1.q13(_this__u8e3s4, scalar);
  };
  GAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.b18_1.r13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.b18_1.s13(_this__u8e3s4, sign);
  };
  GAlgebraContextImpl.prototype.t13 = function (_this__u8e3s4, scalar) {
    return this.b18_1.t13(_this__u8e3s4, scalar);
  };
  GAlgebraContextImpl.prototype.u13 = function (_this__u8e3s4, other) {
    return this.b18_1.u13(_this__u8e3s4, other);
  };
  GAlgebraContextImpl.prototype.v13 = function (_this__u8e3s4, gVector) {
    return this.b18_1.v13(_this__u8e3s4, gVector);
  };
  GAlgebraContextImpl.prototype.w13 = function (_this__u8e3s4, gVector) {
    return this.b18_1.w13(_this__u8e3s4, gVector);
  };
  GAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.b18_1.x13(_this__u8e3s4);
  };
  GAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.b18_1.y13(_this__u8e3s4);
  };
  GAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.b18_1.z13(_this__u8e3s4);
  };
  GAlgebraContextImpl.prototype.a14 = function (_this__u8e3s4) {
    return this.b18_1.a14(_this__u8e3s4);
  };
  GAlgebraContextImpl.$metadata$ = classMeta('GAlgebraContextImpl', [GAlgebraContext, GMagmaContext]);
  function getValueFromASTNode(_this__u8e3s4, generators, astNode) {
    var tmp0_subject = astNode;
    var tmp;
    if (tmp0_subject instanceof Zero) {
      tmp = _this__u8e3s4.d12();
    } else {
      if (tmp0_subject instanceof Identifier) {
        var tmp$ret$2;
        // Inline function 'kotlin.collections.find' call
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var tmp0_iterator = generators.f();
          while (tmp0_iterator.g()) {
            var element = tmp0_iterator.h();
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
            tmp$ret$0 = element.v4_1 === astNode.q18_1;
            if (tmp$ret$0) {
              tmp$ret$1 = element;
              break $l$block;
            }
          }
          tmp$ret$1 = null;
        }
        tmp$ret$2 = tmp$ret$1;
        var tmp1_safe_receiver = tmp$ret$2;
        var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.w4_1;
        var tmp_0;
        if (tmp2_elvis_lhs == null) {
          throw Exception_init_$Create$(trimIndent('\n                        Invalid generator name: ' + astNode.q18_1 + '\n                        Valid names are: ' + joinToString$default(generators, ', ', null, null, 0, null, getValueFromASTNode$lambda, 30, null) + '\n                '));
        } else {
          tmp_0 = tmp2_elvis_lhs;
        }
        tmp = tmp_0;
      } else {
        if (tmp0_subject instanceof NatNumber) {
          var tmp_1;
          if (astNode.p18_1 === 0) {
            tmp_1 = _this__u8e3s4.d12();
          } else {
            var scalar = _this__u8e3s4.p11().zn(astNode.p18_1);
            var tmp$ret$4;
            // Inline function 'kotlin.run' call
            var tmp0_run = _this__u8e3s4.t14();
            // Inline function 'kotlin.contracts.contract' call
            var tmp$ret$3;
            // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
            tmp$ret$3 = tmp0_run.o13(scalar, tmp0_run.e12());
            tmp$ret$4 = tmp$ret$3;
            tmp_1 = tmp$ret$4;
          }
          tmp = tmp_1;
        } else {
          if (tmp0_subject instanceof Divide) {
            var numeratorValue = getValueFromASTNode(_this__u8e3s4, generators, astNode.n18_1);
            var denominatorValue = getValueFromASTNode(_this__u8e3s4, generators, astNode.o18_1);
            var tmp$ret$6;
            // Inline function 'kotlin.run' call
            var tmp1_run = _this__u8e3s4.t14();
            // Inline function 'kotlin.contracts.contract' call
            var tmp$ret$5;
            // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
            tmp$ret$5 = tmp1_run.t13(numeratorValue, tmp1_run.a13(1, tmp1_run.e14(denominatorValue)));
            tmp$ret$6 = tmp$ret$5;
            tmp = tmp$ret$6;
          } else {
            if (tmp0_subject instanceof UnaryMinus) {
              var valueWithoutMinus = getValueFromASTNode(_this__u8e3s4, generators, astNode.m18_1);
              var tmp$ret$8;
              // Inline function 'kotlin.run' call
              var tmp2_run = _this__u8e3s4.t14();
              // Inline function 'kotlin.contracts.contract' call
              var tmp$ret$7;
              // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
              tmp$ret$7 = tmp2_run.a14(valueWithoutMinus);
              tmp$ret$8 = tmp$ret$7;
              tmp = tmp$ret$8;
            } else {
              if (tmp0_subject instanceof Power) {
                var baseValue = getValueFromASTNode(_this__u8e3s4, generators, astNode.k18_1);
                var tmp$ret$10;
                // Inline function 'kotlin.run' call
                var tmp3_run = _this__u8e3s4.t14();
                // Inline function 'kotlin.contracts.contract' call
                var tmp$ret$9;
                // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
                tmp$ret$9 = tmp3_run.d14(baseValue, astNode.l18_1);
                tmp$ret$10 = tmp$ret$9;
                tmp = tmp$ret$10;
              } else {
                if (tmp0_subject instanceof Multiply) {
                  var leftValue = getValueFromASTNode(_this__u8e3s4, generators, astNode.i18_1);
                  var rightValue = getValueFromASTNode(_this__u8e3s4, generators, astNode.j18_1);
                  var tmp$ret$12;
                  // Inline function 'kotlin.run' call
                  var tmp4_run = _this__u8e3s4.t14();
                  // Inline function 'kotlin.contracts.contract' call
                  var tmp$ret$11;
                  // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
                  tmp$ret$11 = tmp4_run.u13(leftValue, rightValue);
                  tmp$ret$12 = tmp$ret$11;
                  tmp = tmp$ret$12;
                } else {
                  if (tmp0_subject instanceof Subtract) {
                    var leftValue_0 = getValueFromASTNode(_this__u8e3s4, generators, astNode.g18_1);
                    var rightValue_0 = getValueFromASTNode(_this__u8e3s4, generators, astNode.h18_1);
                    var tmp$ret$14;
                    // Inline function 'kotlin.run' call
                    var tmp5_run = _this__u8e3s4.t14();
                    // Inline function 'kotlin.contracts.contract' call
                    var tmp$ret$13;
                    // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
                    tmp$ret$13 = tmp5_run.f13(leftValue_0, rightValue_0);
                    tmp$ret$14 = tmp$ret$13;
                    tmp = tmp$ret$14;
                  } else {
                    if (tmp0_subject instanceof Sum) {
                      var leftValue_1 = getValueFromASTNode(_this__u8e3s4, generators, astNode.e18_1);
                      var rightValue_1 = getValueFromASTNode(_this__u8e3s4, generators, astNode.f18_1);
                      var tmp$ret$16;
                      // Inline function 'kotlin.run' call
                      var tmp6_run = _this__u8e3s4.t14();
                      // Inline function 'kotlin.contracts.contract' call
                      var tmp$ret$15;
                      // Inline function 'com.github.shwaka.kohomology.dg.getValueFromASTNode.<anonymous>' call
                      tmp$ret$15 = tmp6_run.j13(leftValue_1, rightValue_1);
                      tmp$ret$16 = tmp$ret$15;
                      tmp = tmp$ret$16;
                    } else {
                      noWhenBranchMatchedException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  }
  function getValueFromASTNode$lambda(it) {
    return it.v4_1;
  }
  function Companion_10() {
    Companion_instance_10 = this;
  }
  Companion_10.prototype.r18 = function (source, target, matrixSpace, name, getGVectors) {
    var getLinearMap = Companion_getInstance_14().s18(source, target, 0, matrixSpace, getGVectors);
    return new GAlgebraMapImpl(source, target, matrixSpace, name, getLinearMap);
  };
  Companion_10.$metadata$ = objectMeta('Companion');
  var Companion_instance_10;
  function Companion_getInstance_11() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function GAlgebraMap() {
  }
  GAlgebraMap.$metadata$ = interfaceMeta('GAlgebraMap', [GLinearMap]);
  function GAlgebraMapImpl(source, target, matrixSpace, name, getLinearMap) {
    this.t18_1 = source;
    this.u18_1 = target;
    this.v18_1 = Companion_getInstance_14().w18(source, target, 0, matrixSpace, name, getLinearMap);
  }
  GAlgebraMapImpl.prototype.z14 = function () {
    return this.t18_1;
  };
  GAlgebraMapImpl.prototype.a15 = function () {
    return this.u18_1;
  };
  GAlgebraMapImpl.prototype.b15 = function () {
    return this.v18_1.b15();
  };
  GAlgebraMapImpl.prototype.s14 = function () {
    return this.v18_1.s14();
  };
  GAlgebraMapImpl.prototype.h11 = function () {
    return this.v18_1.h11();
  };
  GAlgebraMapImpl.prototype.xb = function () {
    return this.v18_1.xb();
  };
  GAlgebraMapImpl.prototype.m11 = function (degree) {
    return this.v18_1.m11(degree);
  };
  GAlgebraMapImpl.prototype.c15 = function () {
    return this.v18_1.c15();
  };
  GAlgebraMapImpl.prototype.d15 = function (sourceSubQuot, targetSubQuot) {
    return this.v18_1.d15(sourceSubQuot, targetSubQuot);
  };
  GAlgebraMapImpl.prototype.e15 = function (gVector) {
    return this.v18_1.e15(gVector);
  };
  GAlgebraMapImpl.prototype.f15 = function () {
    return this.v18_1.f15();
  };
  GAlgebraMapImpl.$metadata$ = classMeta('GAlgebraMapImpl', [GAlgebraMap, GLinearMap]);
  function GBilinearMap_init_$Init$(matrixSpace, source1, source2, target, degree, name, getBilinearMap, $this) {
    GBilinearMap.call($this, matrixSpace, source1, source2, target, source1.s14().zn(degree), name, getBilinearMap);
    return $this;
  }
  function GBilinearMap_init_$Create$(matrixSpace, source1, source2, target, degree, name, getBilinearMap) {
    return GBilinearMap_init_$Init$(matrixSpace, source1, source2, target, degree, name, getBilinearMap, Object.create(GBilinearMap.prototype));
  }
  function Companion_11() {
    Companion_instance_11 = this;
  }
  Companion_11.$metadata$ = objectMeta('Companion');
  var Companion_instance_11;
  function Companion_getInstance_12() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function GBilinearMap$induce$lambda(this$0, $source1SubQuot, $source2SubQuot, $targetSubQuot) {
    return function (p, q) {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.v16_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.induce.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.y18(p, q);
      tmp$ret$1 = tmp$ret$0;
      var pPlusQ = tmp$ret$1;
      return this$0.z18(p, q).a19($source1SubQuot.m11(p), $source2SubQuot.m11(q), $targetSubQuot.m11(pPlusQ));
    };
  }
  function GBilinearMap(matrixSpace, source1, source2, target, degree, name, getBilinearMap) {
    Companion_getInstance_12();
    this.n16_1 = matrixSpace;
    this.o16_1 = source1;
    this.p16_1 = source2;
    this.q16_1 = target;
    this.r16_1 = degree;
    this.s16_1 = name;
    this.t16_1 = getBilinearMap;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.u16_1 = tmp$ret$0;
    this.v16_1 = this.o16_1.s14();
  }
  GBilinearMap.prototype.b19 = function () {
    return this.o16_1;
  };
  GBilinearMap.prototype.c19 = function () {
    return this.p16_1;
  };
  GBilinearMap.prototype.b15 = function () {
    return this.r16_1;
  };
  GBilinearMap.prototype.z18 = function (p, q) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.u16_1;
    var tmp1_getOrPut = new Pair(p, q);
    var value = tmp0_getOrPut.t(tmp1_getOrPut);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.get.<anonymous>' call
      tmp$ret$0 = this.t16_1(p, q);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(tmp1_getOrPut, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  GBilinearMap.prototype.d19 = function (gVector1, gVector2) {
    // Inline function 'kotlin.require' call
    var tmp0_require = equals(gVector1.y17_1.n11(), this.o16_1.n11());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.invoke.<anonymous>' call
      tmp$ret$0 = 'Cannot compute the value of the bilinear map ' + this + '; ' + ('the first argument ' + gVector1 + ' should be an element of ' + this.o16_1);
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = equals(gVector2.y17_1.n11(), this.p16_1.n11());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.invoke.<anonymous>' call
      tmp$ret$1 = 'Cannot compute the value of the bilinear map ' + this + '; ' + ('the second argument ' + gVector2 + ' should be an element of ' + this.p16_1);
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    var bilinearMap = this.z18(gVector1.x17_1, gVector2.x17_1);
    // Inline function 'kotlin.require' call
    var tmp2_require = equals(gVector1.w17_1.f19_1, bilinearMap.b19());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp2_require) {
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.invoke.<anonymous>' call
      tmp$ret$2 = 'Graded bilinear map contains a bug: ' + ('gVector1.vector is an element of ' + gVector1.w17_1.f19_1 + ', ') + ('but bilinearMap.source1 is ' + bilinearMap.b19());
      var message_1 = tmp$ret$2;
      throw IllegalArgumentException_init_$Create$(toString(message_1));
    }
    // Inline function 'kotlin.require' call
    var tmp3_require = equals(gVector2.w17_1.f19_1, bilinearMap.c19());
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp3_require) {
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.invoke.<anonymous>' call
      tmp$ret$3 = 'Graded bilinear map contains a bug: ' + ('gVector2.vector is an element of ' + gVector2.w17_1.f19_1 + ', ') + ('but bilinearMap.source2 is ' + bilinearMap.c19());
      var message_2 = tmp$ret$3;
      throw IllegalArgumentException_init_$Create$(toString(message_2));
    }
    var newVector = bilinearMap.g19(gVector1.w17_1, gVector2.w17_1);
    var tmp$ret$5;
    // Inline function 'kotlin.run' call
    var tmp4_run = this.v16_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$4;
    // Inline function 'com.github.shwaka.kohomology.dg.GBilinearMap.invoke.<anonymous>' call
    tmp$ret$4 = tmp4_run.y18(tmp4_run.y18(gVector1.x17_1, gVector2.x17_1), this.r16_1);
    tmp$ret$5 = tmp$ret$4;
    var newDegree = tmp$ret$5;
    return this.q16_1.q11(newVector, newDegree);
  };
  GBilinearMap.prototype.w16 = function (source1SubQuot, source2SubQuot, targetSubQuot) {
    return new GBilinearMap(this.n16_1, source1SubQuot, source2SubQuot, targetSubQuot, this.r16_1, this.s16_1, GBilinearMap$induce$lambda(this, source1SubQuot, source2SubQuot, targetSubQuot));
  };
  GBilinearMap.prototype.toString = function () {
    return this.s16_1;
  };
  GBilinearMap.$metadata$ = classMeta('GBilinearMap');
  function GLieAlgebra$Companion$invoke$lambda(it) {
    return Companion_getInstance_44().h19(it);
  }
  function GLieAlgebra$Companion$invoke$lambda_0($getMultiplication) {
    return function (p, q) {
      return $getMultiplication(p, q);
    };
  }
  function Companion_12() {
    Companion_instance_12 = this;
  }
  Companion_12.prototype.i19 = function (matrixSpace, degreeGroup, name, getVectorSpace, getMultiplication, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness) {
    var gVectorSpace = Companion_getInstance_16().j19(matrixSpace.j11(), degreeGroup, name, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness, getVectorSpace);
    var bilinearMapName = 'LieBracket(' + name + ')';
    var multiplication = GBilinearMap_init_$Create$(matrixSpace, gVectorSpace, gVectorSpace, gVectorSpace, 0, bilinearMapName, GLieAlgebra$Companion$invoke$lambda_0(getMultiplication));
    return new GLieAlgebraImpl(matrixSpace, gVectorSpace, multiplication);
  };
  Companion_12.prototype.k19 = function (matrixSpace, degreeGroup, name, getVectorSpace, getMultiplication, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness, $mask0, $handler) {
    if (!(($mask0 & 32) === 0)) {
      getInternalPrintConfig = GLieAlgebra$Companion$invoke$lambda;
    }
    if (!(($mask0 & 64) === 0))
      listDegreesForAugmentedDegree = null;
    if (!(($mask0 & 128) === 0)) {
      boundedness = Boundedness_init_$Create$(null, null, 3, null);
    }
    return this.i19(matrixSpace, degreeGroup, name, getVectorSpace, getMultiplication, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness);
  };
  Companion_12.$metadata$ = objectMeta('Companion');
  var Companion_instance_12;
  function Companion_getInstance_13() {
    if (Companion_instance_12 == null)
      new Companion_12();
    return Companion_instance_12;
  }
  function GLieAlgebra() {
  }
  GLieAlgebra.$metadata$ = interfaceMeta('GLieAlgebra', [GMagma]);
  function GLieAlgebraContext$ad$lambda(this$0, $gVector) {
    return function (degree) {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = this$0.z15().t11(degree);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator = tmp0_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.dg.GLieAlgebraContext.ad.<anonymous>.<anonymous>' call
        tmp$ret$0 = this$0.r13($gVector, item);
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    };
  }
  function GLieAlgebraContext() {
  }
  GLieAlgebraContext.$metadata$ = interfaceMeta('GLieAlgebraContext', [GMagmaContext]);
  function GLieAlgebraContextImpl(gLieAlgebra) {
    this.l19_1 = gLieAlgebra;
    this.m19_1 = new GMagmaContextImpl(gLieAlgebra);
  }
  GLieAlgebraContextImpl.prototype.z15 = function () {
    return this.l19_1;
  };
  GLieAlgebraContextImpl.prototype.p11 = function () {
    return this.m19_1.p11();
  };
  GLieAlgebraContextImpl.prototype.u12 = function () {
    return this.m19_1.c18_1;
  };
  GLieAlgebraContextImpl.prototype.v12 = function () {
    return this.m19_1.v12();
  };
  GLieAlgebraContextImpl.prototype.j11 = function () {
    return this.m19_1.j11();
  };
  GLieAlgebraContextImpl.prototype.w12 = function () {
    return this.m19_1.w12();
  };
  GLieAlgebraContextImpl.prototype.x12 = function () {
    return this.m19_1.x12();
  };
  GLieAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.m19_1.z12(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.m19_1.b13(_this__u8e3s4);
  };
  GLieAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.m19_1.c13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.m19_1.d13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.m19_1.g13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.m19_1.h13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.m19_1.i13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.m19_1.k13(_this__u8e3s4);
  };
  GLieAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.m19_1.l13(_this__u8e3s4, degree);
  };
  GLieAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.m19_1.m13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.m19_1.n13(_this__u8e3s4, numVector);
  };
  GLieAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.m19_1.p13(_this__u8e3s4, scalar);
  };
  GLieAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.m19_1.q13(_this__u8e3s4, scalar);
  };
  GLieAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.m19_1.r13(_this__u8e3s4, other);
  };
  GLieAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.m19_1.s13(_this__u8e3s4, sign);
  };
  GLieAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.m19_1.x13(_this__u8e3s4);
  };
  GLieAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.m19_1.y13(_this__u8e3s4);
  };
  GLieAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.m19_1.z13(_this__u8e3s4);
  };
  GLieAlgebraContextImpl.$metadata$ = classMeta('GLieAlgebraContextImpl', [GLieAlgebraContext, GMagmaContext]);
  function GLieAlgebraImpl(matrixSpace, gVectorSpace, multiplication) {
    this.n19_1 = matrixSpace;
    this.o19_1 = multiplication;
    this.p19_1 = gVectorSpace;
    this.q19_1 = new GLieAlgebraContextImpl(this);
    this.r19_1 = this;
  }
  GLieAlgebraImpl.prototype.h11 = function () {
    return this.n19_1;
  };
  GLieAlgebraImpl.prototype.f11 = function () {
    return this.o19_1;
  };
  GLieAlgebraImpl.prototype.o11 = function () {
    return this.p19_1.o11();
  };
  GLieAlgebraImpl.prototype.s14 = function () {
    return this.p19_1.s14();
  };
  GLieAlgebraImpl.prototype.p11 = function () {
    return this.p19_1.p11();
  };
  GLieAlgebraImpl.prototype.k11 = function () {
    return this.p19_1.k11();
  };
  GLieAlgebraImpl.prototype.l11 = function () {
    return this.p19_1.l11();
  };
  GLieAlgebraImpl.prototype.xb = function () {
    return this.p19_1.xb();
  };
  GLieAlgebraImpl.prototype.j11 = function () {
    return this.p19_1.j11();
  };
  GLieAlgebraImpl.prototype.n11 = function () {
    return this.p19_1.n11();
  };
  GLieAlgebraImpl.prototype.d12 = function () {
    return this.p19_1.d12();
  };
  GLieAlgebraImpl.prototype.x11 = function (a, b) {
    return this.p19_1.x11(a, b);
  };
  GLieAlgebraImpl.prototype.w11 = function (gVector) {
    return this.p19_1.w11(gVector);
  };
  GLieAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.p19_1.v11(gVectorOrZero, degree);
  };
  GLieAlgebraImpl.prototype.c12 = function (a, b) {
    return this.p19_1.c12(a, b);
  };
  GLieAlgebraImpl.prototype.s11 = function (basisName, degree) {
    return this.p19_1.s11(basisName, degree);
  };
  GLieAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.p19_1.q11(vector, degree);
  };
  GLieAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.p19_1.r11(vector, degree);
  };
  GLieAlgebraImpl.prototype.m11 = function (degree) {
    return this.p19_1.m11(degree);
  };
  GLieAlgebraImpl.prototype.t11 = function (degree) {
    return this.p19_1.t11(degree);
  };
  GLieAlgebraImpl.prototype.u11 = function (degree) {
    return this.p19_1.u11(degree);
  };
  GLieAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.p19_1.z11(scalar, gVector);
  };
  GLieAlgebraImpl.prototype.y11 = function (a, b) {
    return this.p19_1.y11(a, b);
  };
  GLieAlgebraImpl.prototype.toString = function () {
    return this.p19_1.toString();
  };
  GLieAlgebraImpl.prototype.t14 = function () {
    return this.q19_1;
  };
  GLieAlgebraImpl.$metadata$ = classMeta('GLieAlgebraImpl', [GLieAlgebra, GVectorSpace]);
  function createGetLinearMap($this, source, target, degree, matrixSpace, getGVectors) {
    if (!equals(source.s14(), target.s14()))
      throw IllegalArgumentException_init_$Create$('Cannot consider a linear map between graded vector spaces with different degree groups');
    return GLinearMap$Companion$createGetLinearMap$lambda(source, degree, target, getGVectors, matrixSpace);
  }
  function GLinearMap$Companion$createGetLinearMap$lambda($source, $degree, $target, $getGVectors, $matrixSpace) {
    return function (k) {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = $source.s14().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.Companion.createGetLinearMap.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.y18(k, $degree);
      tmp$ret$1 = tmp$ret$0;
      var l = tmp$ret$1;
      var sourceVectorSpace = $source.m11(k);
      var targetVectorSpace = $target.m11(l);
      var gVectorValueList = $getGVectors(k);
      var tmp;
      var tmp$ret$2;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var tmp_0;
        if (isInterface(gVectorValueList, Collection)) {
          tmp_0 = gVectorValueList.p();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$2 = false;
          break $l$block_0;
        }
        var tmp0_iterator = gVectorValueList.f();
        while (tmp0_iterator.g()) {
          var element = tmp0_iterator.h();
          var tmp$ret$3;
          // Inline function 'com.github.shwaka.kohomology.dg.Companion.createGetLinearMap.<anonymous>.<anonymous>' call
          tmp$ret$3 = !$target.w11(element);
          if (tmp$ret$3) {
            tmp$ret$2 = true;
            break $l$block_0;
          }
        }
        tmp$ret$2 = false;
      }
      if (tmp$ret$2) {
        throw new IllegalContextException('The value list contains an element not contained in ' + $target);
      }
      var tmp_1;
      var tmp$ret$4;
      $l$block_2: {
        // Inline function 'kotlin.collections.any' call
        var tmp_2;
        if (isInterface(gVectorValueList, Collection)) {
          tmp_2 = gVectorValueList.p();
        } else {
          tmp_2 = false;
        }
        if (tmp_2) {
          tmp$ret$4 = false;
          break $l$block_2;
        }
        var tmp0_iterator_0 = gVectorValueList.f();
        while (tmp0_iterator_0.g()) {
          var element_0 = tmp0_iterator_0.h();
          var tmp$ret$5;
          // Inline function 'com.github.shwaka.kohomology.dg.Companion.createGetLinearMap.<anonymous>.<anonymous>' call
          tmp$ret$5 = !equals(element_0.x17_1, l);
          if (tmp$ret$5) {
            tmp$ret$4 = true;
            break $l$block_2;
          }
        }
        tmp$ret$4 = false;
      }
      if (tmp$ret$4) {
        throw IllegalArgumentException_init_$Create$('The value list contains an element with wrong degree');
      }
      var tmp_3;
      if (!(sourceVectorSpace.s19().i() === gVectorValueList.i())) {
        throw new InvalidSizeException('The value list has incompatible size');
      }
      var tmp$ret$8;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$7;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(gVectorValueList, 10));
      var tmp0_iterator_1 = gVectorValueList.f();
      while (tmp0_iterator_1.g()) {
        var item = tmp0_iterator_1.h();
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.dg.Companion.createGetLinearMap.<anonymous>.<anonymous>' call
        tmp$ret$6 = item.w17_1;
        tmp0_mapTo.a(tmp$ret$6);
      }
      tmp$ret$7 = tmp0_mapTo;
      tmp$ret$8 = tmp$ret$7;
      var valueList = tmp$ret$8;
      return Companion_getInstance_47().t19(sourceVectorSpace, targetVectorSpace, $matrixSpace, valueList);
    };
  }
  function Companion_13() {
    Companion_instance_13 = this;
  }
  Companion_13.prototype.u19 = function (source, target, degree, matrixSpace, name, getLinearMap) {
    return new GLinearMapImpl(source, target, degree, matrixSpace, name, getLinearMap);
  };
  Companion_13.prototype.w18 = function (source, target, degree, matrixSpace, name, getLinearMap) {
    return new GLinearMapImpl(source, target, source.s14().zn(degree), matrixSpace, name, getLinearMap);
  };
  Companion_13.prototype.s18 = function (source, target, degree, matrixSpace, getGVectors) {
    return createGetLinearMap(this, source, target, source.s14().zn(degree), matrixSpace, getGVectors);
  };
  Companion_13.prototype.k17 = function (source, target, degree, matrixSpace, name, getGVectors) {
    var getLinearMap = createGetLinearMap(this, source, target, degree, matrixSpace, getGVectors);
    return Companion_getInstance_14().u19(source, target, degree, matrixSpace, name, getLinearMap);
  };
  Companion_13.$metadata$ = objectMeta('Companion');
  var Companion_instance_13;
  function Companion_getInstance_14() {
    if (Companion_instance_13 == null)
      new Companion_13();
    return Companion_instance_13;
  }
  function GLinearMap$kernel$lambda(this$0) {
    return function (degree) {
      return this$0.m11(degree).f15();
    };
  }
  function GLinearMap$image$lambda(this$0) {
    return function (degree) {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.s14().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GLinearMap.image.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.z19(degree, this$0.b15());
      tmp$ret$1 = tmp$ret$0;
      var sourceDegree = tmp$ret$1;
      return this$0.m11(sourceDegree).c15();
    };
  }
  function GLinearMap$induce$lambda(this$0, $gLinearMapDegree, $sourceSubQuot, $targetSubQuot) {
    return function (degree) {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.s14().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GLinearMap.induce.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.y18(degree, $gLinearMapDegree);
      tmp$ret$1 = tmp$ret$0;
      var targetDegree = tmp$ret$1;
      return this$0.m11(degree).a1a($sourceSubQuot.m11(degree), $targetSubQuot.m11(targetDegree));
    };
  }
  function GLinearMap() {
  }
  GLinearMap.$metadata$ = interfaceMeta('GLinearMap');
  function GLinearMapImpl(source, target, degree, matrixSpace, name, getLinearMap) {
    this.d1a_1 = source;
    this.e1a_1 = target;
    this.f1a_1 = degree;
    this.g1a_1 = matrixSpace;
    this.h1a_1 = name;
    this.i1a_1 = getLinearMap;
    if (!equals(this.d1a_1.s14(), this.e1a_1.s14()))
      throw IllegalArgumentException_init_$Create$('Cannot consider a linear map between graded vector spaces with different degree groups');
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.j1a_1 = tmp$ret$0;
  }
  GLinearMapImpl.prototype.z14 = function () {
    return this.d1a_1;
  };
  GLinearMapImpl.prototype.a15 = function () {
    return this.e1a_1;
  };
  GLinearMapImpl.prototype.b15 = function () {
    return this.f1a_1;
  };
  GLinearMapImpl.prototype.h11 = function () {
    return this.g1a_1;
  };
  GLinearMapImpl.prototype.xb = function () {
    return this.h1a_1;
  };
  GLinearMapImpl.prototype.m11 = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.j1a_1;
    var value = tmp0_getOrPut.t(degree);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GLinearMapImpl.get.<anonymous>' call
      tmp$ret$0 = this.i1a_1(degree);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(degree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  GLinearMapImpl.prototype.toString = function () {
    return this.h1a_1;
  };
  GLinearMapImpl.$metadata$ = classMeta('GLinearMapImpl', [GLinearMap]);
  function GLinearMapWithDegreeChange$Companion$invoke$lambda($basisMap, $degreeMorphism, $target) {
    return function (basisName, degree) {
      var targetBasisName = $basisMap(basisName);
      var targetDegree = $degreeMorphism.k1a(degree);
      return $target.s11(targetBasisName, targetDegree);
    };
  }
  function Companion_14() {
    Companion_instance_14 = this;
  }
  Companion_14.prototype.l1a = function (source, target, degreeMorphism, matrixSpace, name, basisMap) {
    return new GLinearMapWithDegreeChange(source, target, degreeMorphism, matrixSpace, name, GLinearMapWithDegreeChange$Companion$invoke$lambda(basisMap, degreeMorphism, target));
  };
  Companion_14.$metadata$ = objectMeta('Companion');
  var Companion_instance_14;
  function Companion_getInstance_15() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function GLinearMapWithDegreeChange(source, target, degreeMorphism, matrixSpace, name, getValueOnBasis) {
    Companion_getInstance_15();
    this.m1a_1 = source;
    this.n1a_1 = target;
    this.o1a_1 = degreeMorphism;
    this.p1a_1 = matrixSpace;
    this.q1a_1 = name;
    this.r1a_1 = getValueOnBasis;
  }
  GLinearMapWithDegreeChange.prototype.s1a = function (gVector) {
    if (!this.m1a_1.w11(gVector))
      throw new IllegalContextException('Invalid graded vector is given as an argument for a graded linear map with degree change');
    var targetDegree = this.o1a_1.k1a(gVector.x17_1);
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.n1a_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.dg.GLinearMapWithDegreeChange.invoke.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = toList(gVector.w17_1.t1a());
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GLinearMapWithDegreeChange.invoke.<anonymous>.<anonymous>' call
      var basisName = item.w3();
      var coeff = item.x3();
      tmp$ret$0 = tmp0_run.q13(this.r1a_1(basisName, gVector.x17_1), coeff);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp0_run.l13(tmp$ret$2, targetDegree);
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  };
  GLinearMapWithDegreeChange.prototype.toString = function () {
    return this.q1a_1;
  };
  GLinearMapWithDegreeChange.$metadata$ = classMeta('GLinearMapWithDegreeChange');
  function GMagma() {
  }
  GMagma.$metadata$ = interfaceMeta('GMagma', [GVectorSpace]);
  function GMagmaContext() {
  }
  GMagmaContext.$metadata$ = interfaceMeta('GMagmaContext', [GVectorContext]);
  function GMagmaContextImpl(gMagma) {
    this.c18_1 = gMagma;
    this.d18_1 = new GVectorContextImpl(gMagma);
  }
  GMagmaContextImpl.prototype.u12 = function () {
    return this.c18_1;
  };
  GMagmaContextImpl.prototype.p11 = function () {
    return this.d18_1.p11();
  };
  GMagmaContextImpl.prototype.v12 = function () {
    return this.d18_1.h17_1;
  };
  GMagmaContextImpl.prototype.j11 = function () {
    return this.d18_1.j11();
  };
  GMagmaContextImpl.prototype.w12 = function () {
    return this.d18_1.w12();
  };
  GMagmaContextImpl.prototype.x12 = function () {
    return this.d18_1.x12();
  };
  GMagmaContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.d18_1.z12(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.d18_1.a13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.d18_1.b13(_this__u8e3s4);
  };
  GMagmaContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.d18_1.c13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.d18_1.d13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.e13 = function (_this__u8e3s4, other) {
    return this.d18_1.e13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.f13 = function (_this__u8e3s4, other) {
    return this.d18_1.f13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.d18_1.g13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.d18_1.h13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.d18_1.i13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.j13 = function (_this__u8e3s4, other) {
    return this.d18_1.j13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.d18_1.k13(_this__u8e3s4);
  };
  GMagmaContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.d18_1.l13(_this__u8e3s4, degree);
  };
  GMagmaContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.d18_1.m13(_this__u8e3s4, other);
  };
  GMagmaContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.d18_1.n13(_this__u8e3s4, numVector);
  };
  GMagmaContextImpl.prototype.o13 = function (_this__u8e3s4, gVector) {
    return this.d18_1.o13(_this__u8e3s4, gVector);
  };
  GMagmaContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.d18_1.p13(_this__u8e3s4, scalar);
  };
  GMagmaContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.d18_1.q13(_this__u8e3s4, scalar);
  };
  GMagmaContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.d18_1.s13(_this__u8e3s4, sign);
  };
  GMagmaContextImpl.prototype.t13 = function (_this__u8e3s4, scalar) {
    return this.d18_1.t13(_this__u8e3s4, scalar);
  };
  GMagmaContextImpl.prototype.v13 = function (_this__u8e3s4, gVector) {
    return this.d18_1.v13(_this__u8e3s4, gVector);
  };
  GMagmaContextImpl.prototype.w13 = function (_this__u8e3s4, gVector) {
    return this.d18_1.w13(_this__u8e3s4, gVector);
  };
  GMagmaContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.d18_1.x13(_this__u8e3s4);
  };
  GMagmaContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.d18_1.y13(_this__u8e3s4);
  };
  GMagmaContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.d18_1.z13(_this__u8e3s4);
  };
  GMagmaContextImpl.prototype.a14 = function (_this__u8e3s4) {
    return this.d18_1.a14(_this__u8e3s4);
  };
  GMagmaContextImpl.$metadata$ = classMeta('GMagmaContextImpl', [GMagmaContext, GVectorContext]);
  function GVector(vector, degree, gVectorSpace) {
    this.w17_1 = vector;
    this.x17_1 = degree;
    this.y17_1 = gVectorSpace;
  }
  GVector.prototype.u1a = function () {
    return this.w17_1;
  };
  GVector.prototype.b15 = function () {
    return this.x17_1;
  };
  GVector.prototype.op = function () {
    return this.w17_1.op();
  };
  GVector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof GVector)
      other;
    else
      THROW_CCE();
    if (!this.w17_1.equals(other.w17_1))
      return false;
    if (!equals(this.x17_1, other.x17_1))
      return false;
    if (!equals(this.y17_1.n11(), other.y17_1.n11()))
      return false;
    return true;
  };
  GVector.prototype.hashCode = function () {
    var result = this.w17_1.hashCode();
    result = imul(31, result) + hashCode(this.x17_1) | 0;
    result = imul(31, result) + hashCode(this.y17_1) | 0;
    return result;
  };
  GVector.prototype.toString = function () {
    return this.v1a(PrintConfig_init_$Create$(null, null, null, null, null, 31, null));
  };
  GVector.prototype.v1a = function (printConfig) {
    var internalPrintConfig = this.y17_1.k11()(printConfig);
    return this.w17_1.w1a(printConfig, internalPrintConfig);
  };
  GVector.$metadata$ = classMeta('GVector', [GVectorOrZero, Printable]);
  function GVectorOrZero() {
  }
  GVectorOrZero.$metadata$ = interfaceMeta('GVectorOrZero');
  function ZeroGVector(gVectorSpace) {
    this.x1a_1 = gVectorSpace;
  }
  ZeroGVector.prototype.op = function () {
    return true;
  };
  ZeroGVector.prototype.toString = function () {
    return '0';
  };
  ZeroGVector.prototype.hashCode = function () {
    return hashCode(this.x1a_1);
  };
  ZeroGVector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof ZeroGVector)
      other;
    else
      THROW_CCE();
    return equals(this.x1a_1.n11(), other.x1a_1.n11());
  };
  ZeroGVector.$metadata$ = classMeta('ZeroGVector', [GVectorOrZero]);
  function Companion_15() {
    Companion_instance_15 = this;
  }
  Companion_15.prototype.j19 = function (numVectorSpace, degreeGroup, name, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness, getVectorSpace) {
    return new GVectorSpaceImpl(numVectorSpace, degreeGroup, name, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness, getVectorSpace);
  };
  Companion_15.$metadata$ = objectMeta('Companion');
  var Companion_instance_15;
  function Companion_getInstance_16() {
    if (Companion_instance_15 == null)
      new Companion_15();
    return Companion_instance_15;
  }
  function GVectorSpace() {
  }
  GVectorSpace.$metadata$ = interfaceMeta('GVectorSpace');
  function GVectorContext() {
  }
  GVectorContext.$metadata$ = interfaceMeta('GVectorContext', [NumVectorContext]);
  function GVectorContextImpl(gVectorSpace) {
    this.h17_1 = gVectorSpace;
    this.i17_1 = new NumVectorContextImpl(gVectorSpace.j11());
  }
  GVectorContextImpl.prototype.v12 = function () {
    return this.h17_1;
  };
  GVectorContextImpl.prototype.p11 = function () {
    return this.i17_1.p11();
  };
  GVectorContextImpl.prototype.j11 = function () {
    return this.i17_1.h1b_1;
  };
  GVectorContextImpl.prototype.w12 = function () {
    return this.i17_1.w12();
  };
  GVectorContextImpl.prototype.x12 = function () {
    return this.i17_1.x12();
  };
  GVectorContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.i17_1.z12(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.i17_1.a13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.i17_1.b13(_this__u8e3s4);
  };
  GVectorContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.i17_1.c13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.i17_1.d13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.i17_1.g13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.i17_1.h13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.i17_1.k13(_this__u8e3s4);
  };
  GVectorContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.i17_1.m13(_this__u8e3s4, other);
  };
  GVectorContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.i17_1.n13(_this__u8e3s4, numVector);
  };
  GVectorContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.i17_1.p13(_this__u8e3s4, scalar);
  };
  GVectorContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.i17_1.x13(_this__u8e3s4);
  };
  GVectorContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.i17_1.y13(_this__u8e3s4);
  };
  GVectorContextImpl.$metadata$ = classMeta('GVectorContextImpl', [GVectorContext, NumVectorContext]);
  function GVectorSpaceImpl(numVectorSpace, degreeGroup, name, getInternalPrintConfig, listDegreesForAugmentedDegree, boundedness, getVectorSpace) {
    this.j1b_1 = numVectorSpace;
    this.k1b_1 = degreeGroup;
    this.l1b_1 = name;
    this.m1b_1 = getInternalPrintConfig;
    this.n1b_1 = listDegreesForAugmentedDegree;
    this.o1b_1 = boundedness;
    this.p1b_1 = getVectorSpace;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.q1b_1 = tmp$ret$0;
    this.r1b_1 = new GVectorContextImpl(this);
    this.s1b_1 = this;
    this.t1b_1 = new ZeroGVector(this);
  }
  GVectorSpaceImpl.prototype.j11 = function () {
    return this.j1b_1;
  };
  GVectorSpaceImpl.prototype.s14 = function () {
    return this.k1b_1;
  };
  GVectorSpaceImpl.prototype.xb = function () {
    return this.l1b_1;
  };
  GVectorSpaceImpl.prototype.k11 = function () {
    return this.m1b_1;
  };
  GVectorSpaceImpl.prototype.l11 = function () {
    return this.n1b_1;
  };
  GVectorSpaceImpl.prototype.o11 = function () {
    return this.o1b_1;
  };
  GVectorSpaceImpl.prototype.t14 = function () {
    return this.r1b_1;
  };
  GVectorSpaceImpl.prototype.n11 = function () {
    return this.s1b_1;
  };
  GVectorSpaceImpl.prototype.d12 = function () {
    return this.t1b_1;
  };
  GVectorSpaceImpl.prototype.m11 = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.q1b_1;
    var value = tmp0_getOrPut.t(degree);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.GVectorSpaceImpl.get.<anonymous>' call
      tmp$ret$0 = this.p1b_1(degree);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(degree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  GVectorSpaceImpl.prototype.toString = function () {
    return this.l1b_1;
  };
  GVectorSpaceImpl.$metadata$ = classMeta('GVectorSpaceImpl', [GVectorSpace]);
  function Companion_16() {
    Companion_instance_16 = this;
  }
  Companion_16.prototype.u1b = function (matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace) {
    return new SubGVectorSpaceImpl(matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace);
  };
  Companion_16.prototype.c1a = function (matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace, $mask0, $handler) {
    if (!(($mask0 & 8) === 0))
      boundedness = totalGVectorSpace.o11();
    return this.u1b(matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace);
  };
  Companion_16.$metadata$ = objectMeta('Companion');
  var Companion_instance_16;
  function Companion_getInstance_17() {
    if (Companion_instance_16 == null)
      new Companion_16();
    return Companion_instance_16;
  }
  function SubGVectorSpace() {
  }
  SubGVectorSpace.$metadata$ = interfaceMeta('SubGVectorSpace', [GVectorSpace]);
  function SubGVectorSpaceImpl$inclusion$delegate$lambda$lambda(this$0) {
    return function (degree) {
      return this$0.m11(degree).k1c();
    };
  }
  function SubGVectorSpaceImpl$inclusion$delegate$lambda(this$0) {
    return function () {
      var tmp = Companion_getInstance_14();
      var tmp_0 = this$0.b1c_1.x12();
      return tmp.u19(this$0, this$0.w1b_1, tmp_0, this$0.v1b_1, 'inclusion', SubGVectorSpaceImpl$inclusion$delegate$lambda$lambda(this$0));
    };
  }
  function SubGVectorSpaceImpl$retraction$delegate$lambda$lambda(this$0) {
    return function (degree) {
      return this$0.m11(degree).l1c();
    };
  }
  function SubGVectorSpaceImpl$retraction$delegate$lambda(this$0) {
    return function () {
      var tmp = Companion_getInstance_14();
      var tmp_0 = this$0.b1c_1.x12();
      return tmp.u19(this$0.w1b_1, this$0, tmp_0, this$0.v1b_1, 'inclusion', SubGVectorSpaceImpl$retraction$delegate$lambda$lambda(this$0));
    };
  }
  function SubGVectorSpaceImpl(matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace) {
    this.v1b_1 = matrixSpace;
    this.w1b_1 = totalGVectorSpace;
    this.x1b_1 = name;
    this.y1b_1 = boundedness;
    this.z1b_1 = getVectorSpace;
    this.a1c_1 = this.w1b_1.j11();
    this.b1c_1 = this.w1b_1.s14();
    this.c1c_1 = Companion_getInstance_52().m1c(this.w1b_1.k11());
    this.d1c_1 = this.w1b_1.l11();
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.e1c_1 = tmp$ret$0;
    this.f1c_1 = new GVectorContextImpl(this);
    this.g1c_1 = this;
    this.h1c_1 = new ZeroGVector(this);
    var tmp_0 = this;
    tmp_0.i1c_1 = lazy(SubGVectorSpaceImpl$inclusion$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.j1c_1 = lazy(SubGVectorSpaceImpl$retraction$delegate$lambda(this));
  }
  SubGVectorSpaceImpl.prototype.xb = function () {
    return this.x1b_1;
  };
  SubGVectorSpaceImpl.prototype.o11 = function () {
    return this.y1b_1;
  };
  SubGVectorSpaceImpl.prototype.j11 = function () {
    return this.a1c_1;
  };
  SubGVectorSpaceImpl.prototype.s14 = function () {
    return this.b1c_1;
  };
  SubGVectorSpaceImpl.prototype.k11 = function () {
    return this.c1c_1;
  };
  SubGVectorSpaceImpl.prototype.l11 = function () {
    return this.d1c_1;
  };
  SubGVectorSpaceImpl.prototype.t14 = function () {
    return this.f1c_1;
  };
  SubGVectorSpaceImpl.prototype.n11 = function () {
    return this.g1c_1;
  };
  SubGVectorSpaceImpl.prototype.d12 = function () {
    return this.h1c_1;
  };
  SubGVectorSpaceImpl.prototype.m11 = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.e1c_1;
    var value = tmp0_getOrPut.t(degree);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.SubGVectorSpaceImpl.get.<anonymous>' call
      tmp$ret$0 = this.z1b_1(degree);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(degree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  SubGVectorSpaceImpl.prototype.toString = function () {
    return this.x1b_1;
  };
  SubGVectorSpaceImpl.$metadata$ = classMeta('SubGVectorSpaceImpl', [SubGVectorSpace]);
  function Companion_17() {
    Companion_instance_17 = this;
  }
  Companion_17.prototype.r14 = function (matrixSpace, subQuotGVectorSpace, multiplication, unit, isCommutative) {
    return new SubQuotGAlgebraImpl(matrixSpace, subQuotGVectorSpace, multiplication, unit, isCommutative);
  };
  Companion_17.$metadata$ = objectMeta('Companion');
  var Companion_instance_17;
  function Companion_getInstance_18() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function SubQuotGAlgebra() {
  }
  SubQuotGAlgebra.$metadata$ = interfaceMeta('SubQuotGAlgebra', [GAlgebra, SubQuotGMagma]);
  function SubQuotGAlgebraImpl(matrixSpace, subQuotGVectorSpace, multiplication, unit, isCommutative) {
    this.n1c_1 = matrixSpace;
    this.o1c_1 = multiplication;
    this.p1c_1 = unit;
    this.q1c_1 = isCommutative;
    this.r1c_1 = subQuotGVectorSpace;
    this.s1c_1 = new GAlgebraContextImpl(this);
    this.t1c_1 = this;
  }
  SubQuotGAlgebraImpl.prototype.h11 = function () {
    return this.n1c_1;
  };
  SubQuotGAlgebraImpl.prototype.f11 = function () {
    return this.o1c_1;
  };
  SubQuotGAlgebraImpl.prototype.e12 = function () {
    return this.p1c_1;
  };
  SubQuotGAlgebraImpl.prototype.f12 = function () {
    return this.q1c_1;
  };
  SubQuotGAlgebraImpl.prototype.o11 = function () {
    return this.r1c_1.o11();
  };
  SubQuotGAlgebraImpl.prototype.s14 = function () {
    return this.r1c_1.s14();
  };
  SubQuotGAlgebraImpl.prototype.p11 = function () {
    return this.r1c_1.p11();
  };
  SubQuotGAlgebraImpl.prototype.k11 = function () {
    return this.r1c_1.k11();
  };
  SubQuotGAlgebraImpl.prototype.l11 = function () {
    return this.r1c_1.l11();
  };
  SubQuotGAlgebraImpl.prototype.xb = function () {
    return this.r1c_1.xb();
  };
  SubQuotGAlgebraImpl.prototype.j11 = function () {
    return this.r1c_1.j11();
  };
  SubQuotGAlgebraImpl.prototype.z16 = function () {
    return this.r1c_1.z16();
  };
  SubQuotGAlgebraImpl.prototype.n11 = function () {
    return this.r1c_1.n11();
  };
  SubQuotGAlgebraImpl.prototype.d12 = function () {
    return this.r1c_1.d12();
  };
  SubQuotGAlgebraImpl.prototype.u1c = function (a, b) {
    return this.r1c_1.x11(a, b);
  };
  SubQuotGAlgebraImpl.prototype.x11 = function (a, b) {
    return this.u1c(a, b);
  };
  SubQuotGAlgebraImpl.prototype.v1c = function (gVector) {
    return this.r1c_1.w11(gVector);
  };
  SubQuotGAlgebraImpl.prototype.w11 = function (gVector) {
    return this.v1c(gVector);
  };
  SubQuotGAlgebraImpl.prototype.w1c = function (gVectorOrZero, degree) {
    return this.r1c_1.v11(gVectorOrZero, degree);
  };
  SubQuotGAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.w1c(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGAlgebraImpl.prototype.x1c = function (a, b) {
    return this.r1c_1.c12(a, b);
  };
  SubQuotGAlgebraImpl.prototype.c12 = function (a, b) {
    return this.x1c(a, b);
  };
  SubQuotGAlgebraImpl.prototype.y1c = function (basisName, degree) {
    return this.r1c_1.s11(basisName, degree);
  };
  SubQuotGAlgebraImpl.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof SubQuotBasis ? basisName : THROW_CCE();
    return this.y1c(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGAlgebraImpl.prototype.z1c = function (vector, degree) {
    return this.r1c_1.q11(vector, degree);
  };
  SubQuotGAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.z1c(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGAlgebraImpl.prototype.a1d = function (vector, degree) {
    return this.r1c_1.r11(vector, degree);
  };
  SubQuotGAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.a1d(vector, degree);
  };
  SubQuotGAlgebraImpl.prototype.m11 = function (degree) {
    return this.r1c_1.m11(degree);
  };
  SubQuotGAlgebraImpl.prototype.t11 = function (degree) {
    return this.r1c_1.t11(degree);
  };
  SubQuotGAlgebraImpl.prototype.c1b = function (degree) {
    return this.r1c_1.c1b(degree);
  };
  SubQuotGAlgebraImpl.prototype.a1b = function (augmentedDegree) {
    return this.r1c_1.a1b(augmentedDegree);
  };
  SubQuotGAlgebraImpl.prototype.u11 = function (degree) {
    return this.r1c_1.u11(degree);
  };
  SubQuotGAlgebraImpl.prototype.b1d = function (scalar, gVector) {
    return this.r1c_1.z11(scalar, gVector);
  };
  SubQuotGAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.b1d(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  SubQuotGAlgebraImpl.prototype.y16 = function (gVector) {
    return this.r1c_1.y16(gVector);
  };
  SubQuotGAlgebraImpl.prototype.c1d = function (a, b) {
    return this.r1c_1.y11(a, b);
  };
  SubQuotGAlgebraImpl.prototype.y11 = function (a, b) {
    return this.c1d(a, b);
  };
  SubQuotGAlgebraImpl.prototype.toString = function () {
    return this.r1c_1.toString();
  };
  SubQuotGAlgebraImpl.prototype.t14 = function () {
    return this.s1c_1;
  };
  SubQuotGAlgebraImpl.$metadata$ = classMeta('SubQuotGAlgebraImpl', [SubQuotGAlgebra, SubQuotGVectorSpace]);
  function Companion_18() {
    Companion_instance_18 = this;
  }
  Companion_18.prototype.v15 = function (matrixSpace, subQuotGVectorSpace, multiplication) {
    return new SubQuotGLieAlgebraImpl(matrixSpace, subQuotGVectorSpace, multiplication);
  };
  Companion_18.$metadata$ = objectMeta('Companion');
  var Companion_instance_18;
  function Companion_getInstance_19() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function SubQuotGLieAlgebra() {
  }
  SubQuotGLieAlgebra.$metadata$ = interfaceMeta('SubQuotGLieAlgebra', [GLieAlgebra, SubQuotGMagma]);
  function SubQuotGLieAlgebraImpl(matrixSpace, subQuotGVectorSpace, multiplication) {
    this.d1d_1 = matrixSpace;
    this.e1d_1 = multiplication;
    this.f1d_1 = subQuotGVectorSpace;
    this.g1d_1 = new GLieAlgebraContextImpl(this);
    this.h1d_1 = this;
  }
  SubQuotGLieAlgebraImpl.prototype.h11 = function () {
    return this.d1d_1;
  };
  SubQuotGLieAlgebraImpl.prototype.f11 = function () {
    return this.e1d_1;
  };
  SubQuotGLieAlgebraImpl.prototype.o11 = function () {
    return this.f1d_1.o11();
  };
  SubQuotGLieAlgebraImpl.prototype.s14 = function () {
    return this.f1d_1.s14();
  };
  SubQuotGLieAlgebraImpl.prototype.p11 = function () {
    return this.f1d_1.p11();
  };
  SubQuotGLieAlgebraImpl.prototype.k11 = function () {
    return this.f1d_1.k11();
  };
  SubQuotGLieAlgebraImpl.prototype.l11 = function () {
    return this.f1d_1.l11();
  };
  SubQuotGLieAlgebraImpl.prototype.xb = function () {
    return this.f1d_1.xb();
  };
  SubQuotGLieAlgebraImpl.prototype.j11 = function () {
    return this.f1d_1.j11();
  };
  SubQuotGLieAlgebraImpl.prototype.z16 = function () {
    return this.f1d_1.z16();
  };
  SubQuotGLieAlgebraImpl.prototype.n11 = function () {
    return this.f1d_1.n11();
  };
  SubQuotGLieAlgebraImpl.prototype.d12 = function () {
    return this.f1d_1.d12();
  };
  SubQuotGLieAlgebraImpl.prototype.u1c = function (a, b) {
    return this.f1d_1.x11(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.x11 = function (a, b) {
    return this.u1c(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.v1c = function (gVector) {
    return this.f1d_1.w11(gVector);
  };
  SubQuotGLieAlgebraImpl.prototype.w11 = function (gVector) {
    return this.v1c(gVector);
  };
  SubQuotGLieAlgebraImpl.prototype.w1c = function (gVectorOrZero, degree) {
    return this.f1d_1.v11(gVectorOrZero, degree);
  };
  SubQuotGLieAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.w1c(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGLieAlgebraImpl.prototype.x1c = function (a, b) {
    return this.f1d_1.c12(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.c12 = function (a, b) {
    return this.x1c(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.y1c = function (basisName, degree) {
    return this.f1d_1.s11(basisName, degree);
  };
  SubQuotGLieAlgebraImpl.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof SubQuotBasis ? basisName : THROW_CCE();
    return this.y1c(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGLieAlgebraImpl.prototype.z1c = function (vector, degree) {
    return this.f1d_1.q11(vector, degree);
  };
  SubQuotGLieAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.z1c(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGLieAlgebraImpl.prototype.a1d = function (vector, degree) {
    return this.f1d_1.r11(vector, degree);
  };
  SubQuotGLieAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.a1d(vector, degree);
  };
  SubQuotGLieAlgebraImpl.prototype.m11 = function (degree) {
    return this.f1d_1.m11(degree);
  };
  SubQuotGLieAlgebraImpl.prototype.t11 = function (degree) {
    return this.f1d_1.t11(degree);
  };
  SubQuotGLieAlgebraImpl.prototype.c1b = function (degree) {
    return this.f1d_1.c1b(degree);
  };
  SubQuotGLieAlgebraImpl.prototype.a1b = function (augmentedDegree) {
    return this.f1d_1.a1b(augmentedDegree);
  };
  SubQuotGLieAlgebraImpl.prototype.u11 = function (degree) {
    return this.f1d_1.u11(degree);
  };
  SubQuotGLieAlgebraImpl.prototype.b1d = function (scalar, gVector) {
    return this.f1d_1.z11(scalar, gVector);
  };
  SubQuotGLieAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.b1d(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  SubQuotGLieAlgebraImpl.prototype.y16 = function (gVector) {
    return this.f1d_1.y16(gVector);
  };
  SubQuotGLieAlgebraImpl.prototype.c1d = function (a, b) {
    return this.f1d_1.y11(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.y11 = function (a, b) {
    return this.c1d(a, b);
  };
  SubQuotGLieAlgebraImpl.prototype.toString = function () {
    return this.f1d_1.toString();
  };
  SubQuotGLieAlgebraImpl.prototype.t14 = function () {
    return this.g1d_1;
  };
  SubQuotGLieAlgebraImpl.$metadata$ = classMeta('SubQuotGLieAlgebraImpl', [SubQuotGLieAlgebra, SubQuotGVectorSpace]);
  function Companion_19() {
    Companion_instance_19 = this;
  }
  Companion_19.prototype.v15 = function (matrixSpace, subQuotGVectorSpace, multiplication) {
    return new SubQuotGMagmaImpl(matrixSpace, subQuotGVectorSpace, multiplication);
  };
  Companion_19.$metadata$ = objectMeta('Companion');
  var Companion_instance_19;
  function Companion_getInstance_20() {
    if (Companion_instance_19 == null)
      new Companion_19();
    return Companion_instance_19;
  }
  function SubQuotGMagma() {
  }
  SubQuotGMagma.$metadata$ = interfaceMeta('SubQuotGMagma', [GMagma, SubQuotGVectorSpace]);
  function SubQuotGMagmaImpl(matrixSpace, subQuotGVectorSpace, multiplication) {
    this.i1d_1 = matrixSpace;
    this.j1d_1 = multiplication;
    this.k1d_1 = subQuotGVectorSpace;
    this.l1d_1 = new GMagmaContextImpl(this);
  }
  SubQuotGMagmaImpl.prototype.f11 = function () {
    return this.j1d_1;
  };
  SubQuotGMagmaImpl.prototype.o11 = function () {
    return this.k1d_1.o11();
  };
  SubQuotGMagmaImpl.prototype.s14 = function () {
    return this.k1d_1.s14();
  };
  SubQuotGMagmaImpl.prototype.p11 = function () {
    return this.k1d_1.p11();
  };
  SubQuotGMagmaImpl.prototype.k11 = function () {
    return this.k1d_1.k11();
  };
  SubQuotGMagmaImpl.prototype.l11 = function () {
    return this.k1d_1.l11();
  };
  SubQuotGMagmaImpl.prototype.xb = function () {
    return this.k1d_1.xb();
  };
  SubQuotGMagmaImpl.prototype.j11 = function () {
    return this.k1d_1.j11();
  };
  SubQuotGMagmaImpl.prototype.z16 = function () {
    return this.k1d_1.z16();
  };
  SubQuotGMagmaImpl.prototype.n11 = function () {
    return this.k1d_1.n11();
  };
  SubQuotGMagmaImpl.prototype.d12 = function () {
    return this.k1d_1.d12();
  };
  SubQuotGMagmaImpl.prototype.u1c = function (a, b) {
    return this.k1d_1.x11(a, b);
  };
  SubQuotGMagmaImpl.prototype.x11 = function (a, b) {
    return this.u1c(a, b);
  };
  SubQuotGMagmaImpl.prototype.v1c = function (gVector) {
    return this.k1d_1.w11(gVector);
  };
  SubQuotGMagmaImpl.prototype.w11 = function (gVector) {
    return this.v1c(gVector);
  };
  SubQuotGMagmaImpl.prototype.w1c = function (gVectorOrZero, degree) {
    return this.k1d_1.v11(gVectorOrZero, degree);
  };
  SubQuotGMagmaImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.w1c(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGMagmaImpl.prototype.x1c = function (a, b) {
    return this.k1d_1.c12(a, b);
  };
  SubQuotGMagmaImpl.prototype.c12 = function (a, b) {
    return this.x1c(a, b);
  };
  SubQuotGMagmaImpl.prototype.y1c = function (basisName, degree) {
    return this.k1d_1.s11(basisName, degree);
  };
  SubQuotGMagmaImpl.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof SubQuotBasis ? basisName : THROW_CCE();
    return this.y1c(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGMagmaImpl.prototype.z1c = function (vector, degree) {
    return this.k1d_1.q11(vector, degree);
  };
  SubQuotGMagmaImpl.prototype.q11 = function (vector, degree) {
    return this.z1c(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  SubQuotGMagmaImpl.prototype.a1d = function (vector, degree) {
    return this.k1d_1.r11(vector, degree);
  };
  SubQuotGMagmaImpl.prototype.r11 = function (vector, degree) {
    return this.a1d(vector, degree);
  };
  SubQuotGMagmaImpl.prototype.m11 = function (degree) {
    return this.k1d_1.m11(degree);
  };
  SubQuotGMagmaImpl.prototype.t11 = function (degree) {
    return this.k1d_1.t11(degree);
  };
  SubQuotGMagmaImpl.prototype.c1b = function (degree) {
    return this.k1d_1.c1b(degree);
  };
  SubQuotGMagmaImpl.prototype.a1b = function (augmentedDegree) {
    return this.k1d_1.a1b(augmentedDegree);
  };
  SubQuotGMagmaImpl.prototype.u11 = function (degree) {
    return this.k1d_1.u11(degree);
  };
  SubQuotGMagmaImpl.prototype.b1d = function (scalar, gVector) {
    return this.k1d_1.z11(scalar, gVector);
  };
  SubQuotGMagmaImpl.prototype.z11 = function (scalar, gVector) {
    return this.b1d(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  SubQuotGMagmaImpl.prototype.y16 = function (gVector) {
    return this.k1d_1.y16(gVector);
  };
  SubQuotGMagmaImpl.prototype.c1d = function (a, b) {
    return this.k1d_1.y11(a, b);
  };
  SubQuotGMagmaImpl.prototype.y11 = function (a, b) {
    return this.c1d(a, b);
  };
  SubQuotGMagmaImpl.prototype.toString = function () {
    return this.k1d_1.toString();
  };
  SubQuotGMagmaImpl.prototype.t14 = function () {
    return this.l1d_1;
  };
  SubQuotGMagmaImpl.$metadata$ = classMeta('SubQuotGMagmaImpl', [SubQuotGMagma, SubQuotGVectorSpace]);
  function SubQuotGVectorSpace$Companion$invoke$lambda($matrixSpace, $totalGVectorSpace, $subspaceGenerator, $quotientGenerator) {
    return function (degree) {
      return Companion_getInstance_49().m1d($matrixSpace, $totalGVectorSpace.m11(degree), $subspaceGenerator.m11(degree), $quotientGenerator.m11(degree));
    };
  }
  function Companion_20() {
    Companion_instance_20 = this;
  }
  Companion_20.prototype.n1d = function (matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace) {
    return new SubQuotGVectorSpaceImpl(matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace);
  };
  Companion_20.prototype.o1d = function (matrixSpace, name, totalGVectorSpace, subspaceGenerator, quotientGenerator, boundedness) {
    var tmp = Companion_getInstance_21();
    return tmp.n1d(matrixSpace, totalGVectorSpace, name, boundedness, SubQuotGVectorSpace$Companion$invoke$lambda(matrixSpace, totalGVectorSpace, subspaceGenerator, quotientGenerator));
  };
  Companion_20.prototype.x16 = function (matrixSpace, name, totalGVectorSpace, subspaceGenerator, quotientGenerator, boundedness, $mask0, $handler) {
    if (!(($mask0 & 32) === 0))
      boundedness = totalGVectorSpace.o11();
    return this.o1d(matrixSpace, name, totalGVectorSpace, subspaceGenerator, quotientGenerator, boundedness);
  };
  Companion_20.$metadata$ = objectMeta('Companion');
  var Companion_instance_20;
  function Companion_getInstance_21() {
    if (Companion_instance_20 == null)
      new Companion_20();
    return Companion_instance_20;
  }
  function SubQuotGVectorSpace() {
  }
  SubQuotGVectorSpace.$metadata$ = interfaceMeta('SubQuotGVectorSpace', [GVectorSpace]);
  function SubQuotGVectorSpaceImpl$projection$delegate$lambda$lambda(this$0) {
    return function (degree) {
      return this$0.m11(degree).z16();
    };
  }
  function SubQuotGVectorSpaceImpl$projection$delegate$lambda(this$0) {
    return function () {
      var tmp = Companion_getInstance_14();
      var tmp_0 = this$0.f1e_1.x12();
      return tmp.u19(this$0.a1e_1, this$0, tmp_0, this$0.z1d_1, 'projection', SubQuotGVectorSpaceImpl$projection$delegate$lambda$lambda(this$0));
    };
  }
  function SubQuotGVectorSpaceImpl$section$delegate$lambda$lambda(this$0) {
    return function (degree) {
      return this$0.m11(degree).o1e();
    };
  }
  function SubQuotGVectorSpaceImpl$section$delegate$lambda(this$0) {
    return function () {
      var tmp = Companion_getInstance_14();
      var tmp_0 = this$0.f1e_1.x12();
      return tmp.u19(this$0, this$0.a1e_1, tmp_0, this$0.z1d_1, 'section', SubQuotGVectorSpaceImpl$section$delegate$lambda$lambda(this$0));
    };
  }
  function SubQuotGVectorSpaceImpl(matrixSpace, totalGVectorSpace, name, boundedness, getVectorSpace) {
    this.z1d_1 = matrixSpace;
    this.a1e_1 = totalGVectorSpace;
    this.b1e_1 = name;
    this.c1e_1 = boundedness;
    this.d1e_1 = getVectorSpace;
    this.e1e_1 = this.a1e_1.j11();
    this.f1e_1 = this.a1e_1.s14();
    this.g1e_1 = Companion_getInstance_48().m1c(this.a1e_1.k11());
    this.h1e_1 = this.a1e_1.l11();
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.i1e_1 = tmp$ret$0;
    this.j1e_1 = new GVectorContextImpl(this);
    this.k1e_1 = this;
    this.l1e_1 = new ZeroGVector(this);
    var tmp_0 = this;
    tmp_0.m1e_1 = lazy(SubQuotGVectorSpaceImpl$projection$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.n1e_1 = lazy(SubQuotGVectorSpaceImpl$section$delegate$lambda(this));
  }
  SubQuotGVectorSpaceImpl.prototype.xb = function () {
    return this.b1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.o11 = function () {
    return this.c1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.j11 = function () {
    return this.e1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.s14 = function () {
    return this.f1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.k11 = function () {
    return this.g1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.l11 = function () {
    return this.h1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.t14 = function () {
    return this.j1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.n11 = function () {
    return this.k1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.d12 = function () {
    return this.l1e_1;
  };
  SubQuotGVectorSpaceImpl.prototype.z16 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = projection$factory();
    tmp$ret$0 = this.m1e_1.f1();
    return tmp$ret$0;
  };
  SubQuotGVectorSpaceImpl.prototype.m11 = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.i1e_1;
    var value = tmp0_getOrPut.t(degree);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.SubQuotGVectorSpaceImpl.get.<anonymous>' call
      tmp$ret$0 = this.d1e_1(degree);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(degree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  SubQuotGVectorSpaceImpl.prototype.toString = function () {
    return this.b1e_1;
  };
  SubQuotGVectorSpaceImpl.$metadata$ = classMeta('SubQuotGVectorSpaceImpl', [SubQuotGVectorSpace]);
  function projection$factory() {
    return getPropertyCallableRef('projection', 1, KProperty1, function (receiver) {
      return receiver.z16();
    }, null);
  }
  function Degree() {
  }
  Degree.$metadata$ = interfaceMeta('Degree');
  function DegreeGroup() {
  }
  DegreeGroup.$metadata$ = interfaceMeta('DegreeGroup');
  function AugmentedDegreeContext(group) {
    DegreeContext.call(this, group);
    this.z1e_1 = group;
  }
  AugmentedDegreeContext.prototype.a1f = function (degree) {
    return this.z1e_1.a1f(degree);
  };
  AugmentedDegreeContext.prototype.b1f = function (_this__u8e3s4) {
    return this.a1f(_this__u8e3s4);
  };
  AugmentedDegreeContext.$metadata$ = classMeta('AugmentedDegreeContext', [AugmentedDegreeGroupOperations], undefined, undefined, undefined, DegreeContext.prototype);
  function AugmentedDegreeGroup() {
  }
  AugmentedDegreeGroup.$metadata$ = interfaceMeta('AugmentedDegreeGroup', [DegreeGroup, AugmentedDegreeGroupOperations]);
  function AugmentedDegreeMorphism() {
  }
  AugmentedDegreeMorphism.$metadata$ = interfaceMeta('AugmentedDegreeMorphism', [DegreeMorphism]);
  function DegreeMorphism() {
  }
  DegreeMorphism.$metadata$ = interfaceMeta('DegreeMorphism');
  function DegreeContext(group) {
    this.x18_1 = group;
  }
  DegreeContext.prototype.t14 = function () {
    return this.x18_1.t14();
  };
  DegreeContext.prototype.x12 = function () {
    return this.x18_1.x12();
  };
  DegreeContext.prototype.v1e = function (degree1, degree2) {
    return this.x18_1.v1e(degree1, degree2);
  };
  DegreeContext.prototype.zn = function (n) {
    return this.x18_1.zn(n);
  };
  DegreeContext.prototype.x1e = function (degree, n) {
    return this.x18_1.x1e(degree, n);
  };
  DegreeContext.prototype.w1e = function (degree1, degree2) {
    return this.x18_1.w1e(degree1, degree2);
  };
  DegreeContext.prototype.c1f = function (_this__u8e3s4) {
    return this.zn(_this__u8e3s4);
  };
  DegreeContext.prototype.y18 = function (_this__u8e3s4, other) {
    return this.v1e(_this__u8e3s4, other);
  };
  DegreeContext.prototype.d1f = function (_this__u8e3s4, other) {
    return this.v1e(_this__u8e3s4, this.c1f(other));
  };
  DegreeContext.prototype.z19 = function (_this__u8e3s4, other) {
    return this.w1e(_this__u8e3s4, other);
  };
  DegreeContext.prototype.e1f = function (_this__u8e3s4, n) {
    return this.x1e(_this__u8e3s4, n);
  };
  DegreeContext.prototype.f1f = function (_this__u8e3s4, degree) {
    return this.x1e(degree, _this__u8e3s4);
  };
  DegreeContext.prototype.g1f = function (_this__u8e3s4) {
    return this.x1e(_this__u8e3s4, -1);
  };
  DegreeContext.prototype.h1f = function (_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.fold' call
    var tmp0_fold = this.x12();
    var accumulator = tmp0_fold;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.degree.DegreeContext.sum.<anonymous>' call
      var tmp1__anonymous__uwfjfc = accumulator;
      tmp$ret$0 = this.y18(tmp1__anonymous__uwfjfc, element);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return tmp$ret$1;
  };
  DegreeContext.$metadata$ = classMeta('DegreeContext', [DegreeGroup]);
  function AugmentedDegreeGroupOperations() {
  }
  AugmentedDegreeGroupOperations.$metadata$ = interfaceMeta('AugmentedDegreeGroupOperations');
  function IntDegree(value) {
    this.i1f_1 = value;
  }
  IntDegree.prototype.p1e = function () {
    return Companion_getInstance_42().zn(this.i1f_1);
  };
  IntDegree.prototype.r1e = function () {
    return (this.i1f_1 % 2 | 0) === 0;
  };
  IntDegree.prototype.op = function () {
    return this.i1f_1 === 0;
  };
  IntDegree.prototype.q1e = function () {
    return this.i1f_1 === 1;
  };
  IntDegree.prototype.toString = function () {
    return this.i1f_1.toString();
  };
  IntDegree.prototype.hashCode = function () {
    return this.i1f_1;
  };
  IntDegree.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof IntDegree))
      return false;
    var tmp0_other_with_cast = other instanceof IntDegree ? other : THROW_CCE();
    if (!(this.i1f_1 === tmp0_other_with_cast.i1f_1))
      return false;
    return true;
  };
  IntDegree.$metadata$ = classMeta('IntDegree', [Degree]);
  function IntDegreeGroup$context$delegate$lambda(this$0) {
    return function () {
      return new AugmentedDegreeContext(this$0);
    };
  }
  function IntDegreeGroup() {
    IntDegreeGroup_instance = this;
    var tmp = this;
    tmp.k1f_1 = lazy(IntDegreeGroup$context$delegate$lambda(this));
  }
  IntDegreeGroup.prototype.t14 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = context$factory();
    tmp$ret$0 = this.k1f_1.f1();
    return tmp$ret$0;
  };
  IntDegreeGroup.prototype.zn = function (n) {
    return new IntDegree(n);
  };
  IntDegreeGroup.prototype.l1f = function (degree) {
    return degree.i1f_1;
  };
  IntDegreeGroup.prototype.a1f = function (degree) {
    return this.l1f(degree instanceof IntDegree ? degree : THROW_CCE());
  };
  IntDegreeGroup.prototype.m1f = function (degree1, degree2) {
    return new IntDegree(degree1.i1f_1 + degree2.i1f_1 | 0);
  };
  IntDegreeGroup.prototype.v1e = function (degree1, degree2) {
    var tmp = degree1 instanceof IntDegree ? degree1 : THROW_CCE();
    return this.m1f(tmp, degree2 instanceof IntDegree ? degree2 : THROW_CCE());
  };
  IntDegreeGroup.prototype.n1f = function (degree1, degree2) {
    return new IntDegree(degree1.i1f_1 - degree2.i1f_1 | 0);
  };
  IntDegreeGroup.prototype.w1e = function (degree1, degree2) {
    var tmp = degree1 instanceof IntDegree ? degree1 : THROW_CCE();
    return this.n1f(tmp, degree2 instanceof IntDegree ? degree2 : THROW_CCE());
  };
  IntDegreeGroup.prototype.o1f = function (degree, n) {
    return new IntDegree(imul(degree.i1f_1, n));
  };
  IntDegreeGroup.prototype.x1e = function (degree, n) {
    return this.o1f(degree instanceof IntDegree ? degree : THROW_CCE(), n);
  };
  IntDegreeGroup.$metadata$ = objectMeta('IntDegreeGroup', [AugmentedDegreeGroup]);
  var IntDegreeGroup_instance;
  function IntDegreeGroup_getInstance() {
    if (IntDegreeGroup_instance == null)
      new IntDegreeGroup();
    return IntDegreeGroup_instance;
  }
  function context$factory() {
    return getPropertyCallableRef('context', 1, KProperty1, function (receiver) {
      return receiver.t14();
    }, null);
  }
  function MultiDegree$isEven$lambda(this$0) {
    return function (it) {
      return this$0.t1f_1.p1f_1.l(it).toString();
    };
  }
  function MultiDegree(group, constantTerm, coeffList) {
    this.t1f_1 = group;
    this.u1f_1 = constantTerm;
    this.v1f_1 = coeffList;
  }
  MultiDegree.prototype.w1f = function () {
    return this.t1f_1;
  };
  MultiDegree.prototype.x1f = function () {
    return this.u1f_1;
  };
  MultiDegree.prototype.y1f = function () {
    return this.v1f_1;
  };
  MultiDegree.prototype.p1e = function () {
    return Companion_getInstance_42().z1f(plus(listOf(this.u1f_1), toList_0(this.v1f_1)));
  };
  MultiDegree.prototype.r1e = function () {
    var tmp$ret$4;
    // Inline function 'kotlin.let' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filter' call
    var tmp0_filter = get_indices(this.v1f_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$_0();
    var inductionVariable = tmp0_filter.h5_1;
    var last = tmp0_filter.i5_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegree.isEven.<anonymous>' call
        tmp$ret$0 = isOdd_0(this.v1f_1[element]);
        if (tmp$ret$0) {
          tmp0_filterTo.a(element);
        }
      }
       while (!(element === last));
    tmp$ret$1 = tmp0_filterTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp1_let = tmp$ret$2;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    var tmp$ret$3;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$3 = !tmp1_let.p();
    if (tmp$ret$3) {
      var oddIndeterminateString = joinToString$default(tmp1_let, ', ', null, null, 0, null, MultiDegree$isEven$lambda(this), 30, null);
      throw ArithmeticException_init_$Create$('Cannot determine the parity of ' + this + ', since the coefficients of ' + oddIndeterminateString + ' are odd');
    }
    tmp$ret$4 = tmp;
    return isEven(this.u1f_1);
  };
  MultiDegree.prototype.op = function () {
    var tmp;
    if (this.u1f_1 === 0) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = this.v1f_1;
        var indexedObject = tmp0_all;
        var inductionVariable = 0;
        var last = indexedObject.length;
        while (inductionVariable < last) {
          var element = indexedObject[inductionVariable];
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegree.isZero.<anonymous>' call
          tmp$ret$0 = element === 0;
          if (!tmp$ret$0) {
            tmp$ret$1 = false;
            break $l$block;
          }
        }
        tmp$ret$1 = true;
      }
      tmp = tmp$ret$1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  MultiDegree.prototype.q1e = function () {
    var tmp;
    if (this.u1f_1 === 1) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = this.v1f_1;
        var indexedObject = tmp0_all;
        var inductionVariable = 0;
        var last = indexedObject.length;
        while (inductionVariable < last) {
          var element = indexedObject[inductionVariable];
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegree.isOne.<anonymous>' call
          tmp$ret$0 = element === 0;
          if (!tmp$ret$0) {
            tmp$ret$1 = false;
            break $l$block;
          }
        }
        tmp$ret$1 = true;
      }
      tmp = tmp$ret$1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  MultiDegree.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof MultiDegree)
      other;
    else
      THROW_CCE();
    if (!this.t1f_1.equals(other.t1f_1))
      return false;
    if (!(this.u1f_1 === other.u1f_1))
      return false;
    if (!contentEquals(this.v1f_1, other.v1f_1))
      return false;
    return true;
  };
  MultiDegree.prototype.hashCode = function () {
    var result = this.t1f_1.hashCode();
    result = imul(31, result) + this.u1f_1 | 0;
    result = imul(31, result) + contentHashCode(this.v1f_1) | 0;
    return result;
  };
  MultiDegree.prototype.toString = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isEmpty' call
    var tmp0_isEmpty = this.v1f_1;
    tmp$ret$0 = tmp0_isEmpty.length === 0;
    if (tmp$ret$0) {
      return this.u1f_1.toString();
    }
    var tmp;
    if (!(this.u1f_1 === 0)) {
      tmp = listOf('' + this.u1f_1);
    } else {
      tmp = emptyList();
    }
    var stringListForConstantTerm = tmp;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapNotNull' call
    var tmp1_mapNotNull = get_indices(this.v1f_1);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapNotNullTo' call
    var tmp0_mapNotNullTo = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = tmp1_mapNotNull.h5_1;
    var last = tmp1_mapNotNull.i5_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegree.toString.<anonymous>' call
        var coeff = this.v1f_1[element];
        switch (coeff) {
          case 0:
            tmp$ret$1 = null;
            break;
          case 1:
            tmp$ret$1 = this.t1f_1.p1f_1.l(element).a1g_1;
            break;
          default:
            tmp$ret$1 = '' + coeff + this.t1f_1.p1f_1.l(element).a1g_1;
            break;
        }
        var tmp0_safe_receiver = tmp$ret$1;
        if (tmp0_safe_receiver == null)
          null;
        else {
          var tmp$ret$2;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp0_mapNotNullTo.a(tmp0_safe_receiver);
          tmp$ret$2 = Unit_getInstance();
        }
      }
       while (!(element === last));
    tmp$ret$3 = tmp0_mapNotNullTo;
    tmp$ret$4 = tmp$ret$3;
    var stringListForCoeff = tmp$ret$4;
    var stringList = plus(stringListForConstantTerm, stringListForCoeff);
    var tmp_0;
    if (stringList.p()) {
      tmp_0 = '0';
    } else {
      tmp_0 = joinToString$default(stringList, ' + ', null, null, 0, null, null, 62, null);
    }
    return tmp_0;
  };
  MultiDegree.$metadata$ = classMeta('MultiDegree', [Degree]);
  function MultiDegreeGroup$context$delegate$lambda(this$0) {
    return function () {
      return new AugmentedDegreeContext(this$0);
    };
  }
  function MultiDegreeGroup(indeterminateList) {
    this.p1f_1 = indeterminateList;
    var tmp = this;
    tmp.q1f_1 = lazy(MultiDegreeGroup$context$delegate$lambda(this));
    this.r1f_1 = this.p1f_1.i() + 1 | 0;
    var tmp_0 = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp_0.s1f_1 = tmp$ret$0;
  }
  MultiDegreeGroup.prototype.c1g = function () {
    return this.p1f_1;
  };
  MultiDegreeGroup.prototype.t14 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = context$factory_0();
    tmp$ret$0 = this.q1f_1.f1();
    return tmp$ret$0;
  };
  MultiDegreeGroup.prototype.d1g = function () {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = get_indices_0(this.p1f_1);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.<get-generatorList>.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.List' call
        var tmp0_List = this.p1f_1.i();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.MutableList' call
        var list = ArrayList_init_$Create$(tmp0_List);
        // Inline function 'kotlin.repeat' call
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < tmp0_List)
          do {
            var index = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.<get-generatorList>.<anonymous>.<anonymous>' call
            tmp$ret$0 = item === index ? 1 : 0;
            list.a(tmp$ret$0);
          }
           while (inductionVariable_0 < tmp0_List);
        tmp$ret$1 = list;
        tmp$ret$2 = tmp$ret$1;
        var coeffList = tmp$ret$2;
        tmp$ret$3 = this.e1g(0, coeffList);
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  };
  MultiDegreeGroup.prototype.zn = function (n) {
    var tmp = 0;
    var tmp_0 = this.p1f_1.i();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.fromInt.<anonymous>' call
      tmp$ret$0 = 0;
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    return new MultiDegree(this, n, tmp_1);
  };
  MultiDegreeGroup.prototype.f1g = function (degree) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = get_indices(degree.v1f_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.augmentation.<anonymous>' call
        tmp$ret$0 = imul(degree.v1f_1[item], this.p1f_1.l(item).b1g_1);
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return degree.u1f_1 + sum(tmp$ret$2) | 0;
  };
  MultiDegreeGroup.prototype.a1f = function (degree) {
    return this.f1g(degree instanceof MultiDegree ? degree : THROW_CCE());
  };
  MultiDegreeGroup.prototype.g1g = function (degree1, degree2) {
    if (!degree1.t1f_1.equals(this))
      throw new IllegalContextException('' + degree1 + ' is not an element of ' + this);
    if (!degree2.t1f_1.equals(this))
      throw new IllegalContextException('' + degree2 + ' is not an element of ' + this);
    var tmp = 0;
    var tmp_0 = this.p1f_1.i();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.add.<anonymous>' call
      tmp$ret$0 = degree1.v1f_1[tmp_2] + degree2.v1f_1[tmp_2] | 0;
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    var coeffList = tmp_1;
    return new MultiDegree(this, degree1.u1f_1 + degree2.u1f_1 | 0, coeffList);
  };
  MultiDegreeGroup.prototype.v1e = function (degree1, degree2) {
    var tmp = degree1 instanceof MultiDegree ? degree1 : THROW_CCE();
    return this.g1g(tmp, degree2 instanceof MultiDegree ? degree2 : THROW_CCE());
  };
  MultiDegreeGroup.prototype.h1g = function (degree1, degree2) {
    if (!degree1.t1f_1.equals(this))
      throw new IllegalContextException('' + degree1 + ' is not an element of ' + this);
    if (!degree2.t1f_1.equals(this))
      throw new IllegalContextException('' + degree2 + ' is not an element of ' + this);
    var tmp = 0;
    var tmp_0 = this.p1f_1.i();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.subtract.<anonymous>' call
      tmp$ret$0 = degree1.v1f_1[tmp_2] - degree2.v1f_1[tmp_2] | 0;
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    var coeffList = tmp_1;
    return new MultiDegree(this, degree1.u1f_1 - degree2.u1f_1 | 0, coeffList);
  };
  MultiDegreeGroup.prototype.w1e = function (degree1, degree2) {
    var tmp = degree1 instanceof MultiDegree ? degree1 : THROW_CCE();
    return this.h1g(tmp, degree2 instanceof MultiDegree ? degree2 : THROW_CCE());
  };
  MultiDegreeGroup.prototype.i1g = function (degree, n) {
    if (!degree.t1f_1.equals(this))
      throw new IllegalContextException('' + degree + ' is not an element of ' + this);
    var tmp = 0;
    var tmp_0 = this.p1f_1.i();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeGroup.multiply.<anonymous>' call
      tmp$ret$0 = imul(degree.v1f_1[tmp_2], n);
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    var coeffList = tmp_1;
    return new MultiDegree(this, imul(degree.u1f_1, n), coeffList);
  };
  MultiDegreeGroup.prototype.x1e = function (degree, n) {
    return this.i1g(degree instanceof MultiDegree ? degree : THROW_CCE(), n);
  };
  MultiDegreeGroup.prototype.e1g = function (constantTerm, coeffList) {
    if (!(coeffList.i() === this.p1f_1.i()))
      throw IllegalArgumentException_init_$Create$('The length of ' + coeffList + ' should be ' + this.p1f_1.i() + ', but ' + coeffList.i() + ' was given');
    return new MultiDegree(this, constantTerm, toIntArray(coeffList));
  };
  MultiDegreeGroup.prototype.j1g = function (degree) {
    return degree.t1f_1.equals(this);
  };
  MultiDegreeGroup.prototype.toString = function () {
    return 'MultiDegreeGroup(indeterminateList=' + this.p1f_1 + ')';
  };
  MultiDegreeGroup.prototype.hashCode = function () {
    return hashCode(this.p1f_1);
  };
  MultiDegreeGroup.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MultiDegreeGroup))
      return false;
    var tmp0_other_with_cast = other instanceof MultiDegreeGroup ? other : THROW_CCE();
    if (!equals(this.p1f_1, tmp0_other_with_cast.p1f_1))
      return false;
    return true;
  };
  MultiDegreeGroup.$metadata$ = classMeta('MultiDegreeGroup', [AugmentedDegreeGroup]);
  function DegreeIndeterminate(name, defaultValue) {
    this.a1g_1 = name;
    this.b1g_1 = defaultValue;
  }
  DegreeIndeterminate.prototype.xb = function () {
    return this.a1g_1;
  };
  DegreeIndeterminate.prototype.k1g = function () {
    return this.b1g_1;
  };
  DegreeIndeterminate.prototype.toString = function () {
    return 'DegreeIndeterminate(name=' + this.a1g_1 + ', defaultValue=' + this.b1g_1 + ')';
  };
  DegreeIndeterminate.prototype.hashCode = function () {
    var result = getStringHashCode(this.a1g_1);
    result = imul(result, 31) + this.b1g_1 | 0;
    return result;
  };
  DegreeIndeterminate.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DegreeIndeterminate))
      return false;
    var tmp0_other_with_cast = other instanceof DegreeIndeterminate ? other : THROW_CCE();
    if (!(this.a1g_1 === tmp0_other_with_cast.a1g_1))
      return false;
    if (!(this.b1g_1 === tmp0_other_with_cast.b1g_1))
      return false;
    return true;
  };
  DegreeIndeterminate.$metadata$ = classMeta('DegreeIndeterminate');
  function MultiDegreeMorphism(source, target, values) {
    this.l1g_1 = source;
    this.m1g_1 = target;
    this.n1g_1 = values;
    if (!(this.n1g_1.i() === this.l1g_1.p1f_1.i()))
      throw IllegalArgumentException_init_$Create$('values.size should be equal to source.indeterminateList.size');
  }
  MultiDegreeMorphism.prototype.a15 = function () {
    return this.m1g_1;
  };
  MultiDegreeMorphism.prototype.o1g = function (degree) {
    if (!this.l1g_1.j1g(degree))
      throw IllegalArgumentException_init_$Create$('The degree ' + degree + ' is not an element of the group ' + this.l1g_1);
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.m1g_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeMorphism.invoke.<anonymous>' call
    var tmp = this.m1g_1.zn(degree.u1f_1);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = get_indices(degree.v1f_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.dg.degree.MultiDegreeMorphism.invoke.<anonymous>.<anonymous>' call
        tmp$ret$0 = tmp0_run.f1f(degree.v1f_1[item], this.n1g_1.l(item));
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp0_run.y18(tmp, tmp0_run.h1f(tmp$ret$2));
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  };
  MultiDegreeMorphism.prototype.k1a = function (degree) {
    return this.o1g(degree instanceof MultiDegree ? degree : THROW_CCE());
  };
  MultiDegreeMorphism.$metadata$ = classMeta('MultiDegreeMorphism', [AugmentedDegreeMorphism]);
  function InclusionFromIntDegreeToMultiDegree(target) {
    this.p1g_1 = target;
    this.q1g_1 = IntDegreeGroup_getInstance();
  }
  InclusionFromIntDegreeToMultiDegree.prototype.a15 = function () {
    return this.p1g_1;
  };
  InclusionFromIntDegreeToMultiDegree.prototype.r1g = function (degree) {
    return this.p1g_1.zn(degree.i1f_1);
  };
  InclusionFromIntDegreeToMultiDegree.prototype.k1a = function (degree) {
    return this.r1g(degree instanceof IntDegree ? degree : THROW_CCE());
  };
  InclusionFromIntDegreeToMultiDegree.$metadata$ = classMeta('InclusionFromIntDegreeToMultiDegree', [AugmentedDegreeMorphism]);
  function context$factory_0() {
    return getPropertyCallableRef('context', 1, KProperty1, function (receiver) {
      return receiver.t14();
    }, null);
  }
  function Zero() {
    Zero_instance = this;
  }
  Zero.$metadata$ = objectMeta('Zero', [ASTNode]);
  var Zero_instance;
  function Zero_getInstance() {
    if (Zero_instance == null)
      new Zero();
    return Zero_instance;
  }
  function Identifier(name) {
    this.q18_1 = name;
  }
  Identifier.prototype.xb = function () {
    return this.q18_1;
  };
  Identifier.prototype.toString = function () {
    return 'Identifier(name=' + this.q18_1 + ')';
  };
  Identifier.prototype.hashCode = function () {
    return getStringHashCode(this.q18_1);
  };
  Identifier.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Identifier))
      return false;
    var tmp0_other_with_cast = other instanceof Identifier ? other : THROW_CCE();
    if (!(this.q18_1 === tmp0_other_with_cast.q18_1))
      return false;
    return true;
  };
  Identifier.$metadata$ = classMeta('Identifier', [ASTNode]);
  function NatNumber(value) {
    this.p18_1 = value;
  }
  NatNumber.prototype.toString = function () {
    return 'NatNumber(value=' + this.p18_1 + ')';
  };
  NatNumber.prototype.hashCode = function () {
    return this.p18_1;
  };
  NatNumber.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof NatNumber))
      return false;
    var tmp0_other_with_cast = other instanceof NatNumber ? other : THROW_CCE();
    if (!(this.p18_1 === tmp0_other_with_cast.p18_1))
      return false;
    return true;
  };
  NatNumber.$metadata$ = classMeta('NatNumber', [ASTNode]);
  function UnaryMinus(value) {
    this.m18_1 = value;
  }
  UnaryMinus.prototype.toString = function () {
    return 'UnaryMinus(value=' + this.m18_1 + ')';
  };
  UnaryMinus.prototype.hashCode = function () {
    return hashCode(this.m18_1);
  };
  UnaryMinus.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof UnaryMinus))
      return false;
    var tmp0_other_with_cast = other instanceof UnaryMinus ? other : THROW_CCE();
    if (!equals(this.m18_1, tmp0_other_with_cast.m18_1))
      return false;
    return true;
  };
  UnaryMinus.$metadata$ = classMeta('UnaryMinus', [ASTNode]);
  function Power(base, exponent) {
    this.k18_1 = base;
    this.l18_1 = exponent;
  }
  Power.prototype.s1g = function () {
    return this.l18_1;
  };
  Power.prototype.toString = function () {
    return 'Power(base=' + this.k18_1 + ', exponent=' + this.l18_1 + ')';
  };
  Power.prototype.hashCode = function () {
    var result = hashCode(this.k18_1);
    result = imul(result, 31) + this.l18_1 | 0;
    return result;
  };
  Power.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Power))
      return false;
    var tmp0_other_with_cast = other instanceof Power ? other : THROW_CCE();
    if (!equals(this.k18_1, tmp0_other_with_cast.k18_1))
      return false;
    if (!(this.l18_1 === tmp0_other_with_cast.l18_1))
      return false;
    return true;
  };
  Power.$metadata$ = classMeta('Power', [ASTNode]);
  function Divide(numerator, denominator) {
    this.n18_1 = numerator;
    this.o18_1 = denominator;
  }
  Divide.prototype.toString = function () {
    return 'Divide(numerator=' + this.n18_1 + ', denominator=' + this.o18_1 + ')';
  };
  Divide.prototype.hashCode = function () {
    var result = hashCode(this.n18_1);
    result = imul(result, 31) + hashCode(this.o18_1) | 0;
    return result;
  };
  Divide.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Divide))
      return false;
    var tmp0_other_with_cast = other instanceof Divide ? other : THROW_CCE();
    if (!equals(this.n18_1, tmp0_other_with_cast.n18_1))
      return false;
    if (!equals(this.o18_1, tmp0_other_with_cast.o18_1))
      return false;
    return true;
  };
  Divide.$metadata$ = classMeta('Divide', [ASTNode]);
  function Multiply(left, right) {
    this.i18_1 = left;
    this.j18_1 = right;
  }
  Multiply.prototype.toString = function () {
    return 'Multiply(left=' + this.i18_1 + ', right=' + this.j18_1 + ')';
  };
  Multiply.prototype.hashCode = function () {
    var result = hashCode(this.i18_1);
    result = imul(result, 31) + hashCode(this.j18_1) | 0;
    return result;
  };
  Multiply.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Multiply))
      return false;
    var tmp0_other_with_cast = other instanceof Multiply ? other : THROW_CCE();
    if (!equals(this.i18_1, tmp0_other_with_cast.i18_1))
      return false;
    if (!equals(this.j18_1, tmp0_other_with_cast.j18_1))
      return false;
    return true;
  };
  Multiply.$metadata$ = classMeta('Multiply', [ASTNode]);
  function Subtract(left, right) {
    this.g18_1 = left;
    this.h18_1 = right;
  }
  Subtract.prototype.toString = function () {
    return 'Subtract(left=' + this.g18_1 + ', right=' + this.h18_1 + ')';
  };
  Subtract.prototype.hashCode = function () {
    var result = hashCode(this.g18_1);
    result = imul(result, 31) + hashCode(this.h18_1) | 0;
    return result;
  };
  Subtract.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Subtract))
      return false;
    var tmp0_other_with_cast = other instanceof Subtract ? other : THROW_CCE();
    if (!equals(this.g18_1, tmp0_other_with_cast.g18_1))
      return false;
    if (!equals(this.h18_1, tmp0_other_with_cast.h18_1))
      return false;
    return true;
  };
  Subtract.$metadata$ = classMeta('Subtract', [ASTNode]);
  function Sum(left, right) {
    this.e18_1 = left;
    this.f18_1 = right;
  }
  Sum.prototype.toString = function () {
    return 'Sum(left=' + this.e18_1 + ', right=' + this.f18_1 + ')';
  };
  Sum.prototype.hashCode = function () {
    var result = hashCode(this.e18_1);
    result = imul(result, 31) + hashCode(this.f18_1) | 0;
    return result;
  };
  Sum.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Sum))
      return false;
    var tmp0_other_with_cast = other instanceof Sum ? other : THROW_CCE();
    if (!equals(this.e18_1, tmp0_other_with_cast.e18_1))
      return false;
    if (!equals(this.f18_1, tmp0_other_with_cast.f18_1))
      return false;
    return true;
  };
  Sum.$metadata$ = classMeta('Sum', [ASTNode]);
  function ASTNode() {
  }
  ASTNode.$metadata$ = interfaceMeta('ASTNode');
  function CharCategoryToken_init_$Init$(name, firstCharCategoryList, nonFirstCharCategoryList, ignored, $mask0, $marker, $this) {
    if (!(($mask0 & 8) === 0))
      ignored = false;
    CharCategoryToken.call($this, name, firstCharCategoryList, nonFirstCharCategoryList, ignored);
    return $this;
  }
  function CharCategoryToken_init_$Create$(name, firstCharCategoryList, nonFirstCharCategoryList, ignored, $mask0, $marker) {
    return CharCategoryToken_init_$Init$(name, firstCharCategoryList, nonFirstCharCategoryList, ignored, $mask0, $marker, Object.create(CharCategoryToken.prototype));
  }
  function CharCategoryToken(name, firstCharCategoryList, nonFirstCharCategoryList, ignored) {
    Token.call(this, name, ignored);
    this.v1g_1 = firstCharCategoryList;
    this.w1g_1 = nonFirstCharCategoryList;
  }
  CharCategoryToken.prototype.pz = function (input, fromIndex) {
    if (!this.v1g_1.u1(get_category(charSequenceGet(input, fromIndex)))) {
      return 0;
    }
    var index = fromIndex + 1 | 0;
    while (index < charSequenceLength(input) ? this.w1g_1.u1(get_category(charSequenceGet(input, index))) : false) {
      var tmp0 = index;
      index = tmp0 + 1 | 0;
    }
    return index - fromIndex | 0;
  };
  CharCategoryToken.prototype.toString = function () {
    var tmp0_elvis_lhs = this.wy_1;
    return (tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs) + ' (' + this.v1g_1 + ', ' + this.w1g_1 + ')' + (this.xy_1 ? ' [ignorable]' : '');
  };
  CharCategoryToken.$metadata$ = classMeta('CharCategoryToken', undefined, undefined, undefined, undefined, Token.prototype);
  function charCategoryToken(firstCharCategoryList, nonFirstCharCategoryList) {
    return CharCategoryToken_init_$Create$(null, firstCharCategoryList, nonFirstCharCategoryList, false, 8, null);
  }
  function _get_zero__dhgbs3($this) {
    return $this.bz($this.a1h_1, $this, zero$factory_0());
  }
  function _get_id__ndc34g($this) {
    return $this.bz($this.b1h_1, $this, id$factory_0());
  }
  function _get_nat__e6db4g($this) {
    return $this.bz($this.c1h_1, $this, nat$factory_0());
  }
  function _get_lpar__d9xvsm($this) {
    return $this.bz($this.d1h_1, $this, lpar$factory_0());
  }
  function _get_rpar__dd8ncs($this) {
    return $this.bz($this.e1h_1, $this, rpar$factory_0());
  }
  function _get_mul__e6d2rx($this) {
    return $this.bz($this.f1h_1, $this, mul$factory_0());
  }
  function _get_pow__e6evjt($this) {
    return $this.bz($this.g1h_1, $this, pow$factory_0());
  }
  function _get_div__e6738g($this) {
    return $this.bz($this.h1h_1, $this, div$factory_0());
  }
  function _get_minus__e92hlr($this) {
    return $this.bz($this.i1h_1, $this, minus$factory_0());
  }
  function _get_plus__dc2x2p($this) {
    return $this.bz($this.j1h_1, $this, plus$factory_0());
  }
  function _get_ws__ndcdv3($this) {
    return $this.bz($this.k1h_1, $this, ws$factory_0());
  }
  function _get_idParser__4cqmtr($this) {
    return $this.zy($this.l1h_1, $this, idParser$factory_0());
  }
  function _get_natParser__86xlm9($this) {
    return $this.zy($this.m1h_1, $this, natParser$factory_0());
  }
  function _get_parenParser__kd1lns($this) {
    return $this.zy($this.n1h_1, $this, parenParser$factory_0());
  }
  function _get_minusParser__naumde($this) {
    return $this.zy($this.o1h_1, $this, minusParser$factory_0());
  }
  function _get_termParser__9ktxa8($this) {
    return $this.zy($this.p1h_1, $this, termParser$factory_0());
  }
  function _get_powerParser__cj0rqr($this) {
    return $this.zy($this.q1h_1, $this, powerParser$factory_0());
  }
  function _get_mulDivChain__rkka6b($this) {
    return $this.zy($this.r1h_1, $this, mulDivChain$factory_1());
  }
  function _get_subSumChain__3rvi9x($this) {
    return $this.zy($this.s1h_1, $this, subSumChain$factory_0());
  }
  function GAlgebraElementASTGrammar$idParser$delegate$lambda($this$null) {
    return new Identifier($this$null.i10());
  }
  function GAlgebraElementASTGrammar$idParser$delegate$lambda_0($this$null) {
    return Zero_getInstance();
  }
  function GAlgebraElementASTGrammar$natParser$delegate$lambda($this$null) {
    return new NatNumber(toInt($this$null.i10()));
  }
  function GAlgebraElementASTGrammar$parenParser$delegate$lambda(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var b = tmp$ret$0;
    return (!(b == null) ? isInterface(b, ASTNode) : false) ? b : THROW_CCE();
  }
  function GAlgebraElementASTGrammar$parenParser$delegate$lambda_0(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var a = tmp$ret$0;
    return (!(a == null) ? isInterface(a, ASTNode) : false) ? a : THROW_CCE();
  }
  function GAlgebraElementASTGrammar$minusParser$delegate$lambda(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var b = tmp$ret$0;
    return (!(b == null) ? isInterface(b, ASTNode) : false) ? b : THROW_CCE();
  }
  function GAlgebraElementASTGrammar$minusParser$delegate$lambda_0(it) {
    return new UnaryMinus(it);
  }
  function GAlgebraElementASTGrammar$minusParser$delegate$lambda_1(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var b = tmp$ret$0;
    return (!(b == null) ? isInterface(b, ASTNode) : false) ? b : THROW_CCE();
  }
  function GAlgebraElementASTGrammar$minusParser$delegate$lambda_2(it) {
    return new UnaryMinus(it);
  }
  function GAlgebraElementASTGrammar$powerParser$delegate$lambda(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var a = tmp$ret$0;
    return (!(a == null) ? isInterface(a, ASTNode) : false) ? a : THROW_CCE();
  }
  function GAlgebraElementASTGrammar$powerParser$delegate$lambda_0(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.l(0);
    var a1 = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.component2' call
    tmp$ret$1 = _name_for_destructuring_parameter_0__wldtmu.l(1);
    var a2 = tmp$ret$1;
    var tmp = (!(a1 == null) ? isInterface(a1, ASTNode) : false) ? a1 : THROW_CCE();
    return new Tuple2(tmp, a2 instanceof TokenMatch ? a2 : THROW_CCE());
  }
  function GAlgebraElementASTGrammar$powerParser$delegate$lambda_1(_name_for_destructuring_parameter_0__wldtmu) {
    var node = _name_for_destructuring_parameter_0__wldtmu.w3();
    var n = _name_for_destructuring_parameter_0__wldtmu.x3();
    return new Power(node, toInt(n.i10()));
  }
  function GAlgebraElementASTGrammar$mulDivChain$delegate$lambda($this$null) {
    return $this$null.zz_1;
  }
  function GAlgebraElementASTGrammar$mulDivChain$delegate$lambda_0(left, op, right) {
    var tmp0_subject = op;
    var tmp;
    if (equals(tmp0_subject, _get_mul__e6d2rx(GAlgebraElementASTGrammar_getInstance()))) {
      tmp = new Multiply(left, right);
    } else if (equals(tmp0_subject, _get_div__e6738g(GAlgebraElementASTGrammar_getInstance()))) {
      tmp = new Divide(left, right);
    } else {
      throw Exception_init_$Create$("This can't happen!");
    }
    return tmp;
  }
  function GAlgebraElementASTGrammar$mulDivChain$delegate$lambda_1($tmp2_leftAssociative) {
    return function (it) {
      return it.ly($tmp2_leftAssociative);
    };
  }
  function GAlgebraElementASTGrammar$subSumChain$delegate$lambda($this$null) {
    return $this$null.zz_1;
  }
  function GAlgebraElementASTGrammar$subSumChain$delegate$lambda_0(left, op, right) {
    var tmp0_subject = op;
    var tmp;
    if (equals(tmp0_subject, _get_plus__dc2x2p(GAlgebraElementASTGrammar_getInstance()))) {
      tmp = new Sum(left, right);
    } else if (equals(tmp0_subject, _get_minus__e92hlr(GAlgebraElementASTGrammar_getInstance()))) {
      tmp = new Subtract(left, right);
    } else {
      throw Exception_init_$Create$("This can't happen!");
    }
    return tmp;
  }
  function GAlgebraElementASTGrammar$subSumChain$delegate$lambda_1($tmp2_leftAssociative) {
    return function (it) {
      return it.ly($tmp2_leftAssociative);
    };
  }
  function GAlgebraElementASTGrammar() {
    GAlgebraElementASTGrammar_instance = this;
    Grammar.call(this);
    var tmp = this;
    tmp.a1h_1 = this.az(literalToken$default('zero', false, 2, null), this, zero$factory());
    this.b1h_1 = this.az(charCategoryToken(Companion_getInstance_43().u1h_1, Companion_getInstance_42().j1f_1), this, id$factory());
    var tmp_0 = this;
    tmp_0.c1h_1 = this.az(regexToken$default('\\d+', false, 2, null), this, nat$factory());
    var tmp_1 = this;
    tmp_1.d1h_1 = this.az(literalToken$default('(', false, 2, null), this, lpar$factory());
    var tmp_2 = this;
    tmp_2.e1h_1 = this.az(literalToken$default(')', false, 2, null), this, rpar$factory());
    var tmp_3 = this;
    tmp_3.f1h_1 = this.az(literalToken$default('*', false, 2, null), this, mul$factory());
    var tmp_4 = this;
    tmp_4.g1h_1 = this.az(literalToken$default('^', false, 2, null), this, pow$factory());
    var tmp_5 = this;
    tmp_5.h1h_1 = this.az(literalToken$default('/', false, 2, null), this, div$factory());
    var tmp_6 = this;
    tmp_6.i1h_1 = this.az(literalToken$default('-', false, 2, null), this, minus$factory());
    var tmp_7 = this;
    tmp_7.j1h_1 = this.az(literalToken$default('+', false, 2, null), this, plus$factory());
    this.k1h_1 = this.az(regexToken('\\s*', true), this, ws$factory());
    var tmp_8 = this;
    var tmp_9 = _get_id__ndc34g(this);
    var tmp_10 = use(tmp_9, GAlgebraElementASTGrammar$idParser$delegate$lambda);
    var tmp_11 = _get_zero__dhgbs3(this);
    tmp_8.l1h_1 = this.yy(or(tmp_10, use(tmp_11, GAlgebraElementASTGrammar$idParser$delegate$lambda_0)), this, idParser$factory());
    var tmp_12 = this;
    var tmp_13 = _get_nat__e6db4g(this);
    tmp_12.m1h_1 = this.yy(use(tmp_13, GAlgebraElementASTGrammar$natParser$delegate$lambda), this, natParser$factory());
    var tmp_14 = this;
    var tmp$ret$1;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp$ret$0;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp0_and = skip(_get_lpar__d9xvsm(this));
    var tmp1_and = parser(rootParser$factory(this));
    var tmp_15 = listOf_0([tmp0_and, tmp1_and]);
    tmp$ret$0 = new AndCombinator(tmp_15, GAlgebraElementASTGrammar$parenParser$delegate$lambda);
    var tmp2_and = tmp$ret$0;
    var tmp3_and = skip(_get_rpar__dd8ncs(this));
    var tmp_16 = listOf_0([tmp2_and, tmp3_and]);
    tmp$ret$1 = new AndCombinator(tmp_16, GAlgebraElementASTGrammar$parenParser$delegate$lambda_0);
    tmp_14.n1h_1 = this.yy(tmp$ret$1, this, parenParser$factory());
    var tmp_17 = this;
    var tmp$ret$2;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp0_and_0 = skip(_get_minus__e92hlr(this));
    var tmp1_and_0 = _get_parenParser__kd1lns(this);
    var tmp_18 = listOf_0([tmp0_and_0, tmp1_and_0]);
    tmp$ret$2 = new AndCombinator(tmp_18, GAlgebraElementASTGrammar$minusParser$delegate$lambda);
    var tmp_19 = tmp$ret$2;
    var tmp_20 = map(tmp_19, GAlgebraElementASTGrammar$minusParser$delegate$lambda_0);
    var tmp$ret$3;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp2_and_0 = skip(_get_minus__e92hlr(this));
    var tmp3_and_0 = parser(mulDivChain$factory(this));
    var tmp_21 = listOf_0([tmp2_and_0, tmp3_and_0]);
    tmp$ret$3 = new AndCombinator(tmp_21, GAlgebraElementASTGrammar$minusParser$delegate$lambda_1);
    var tmp_22 = tmp$ret$3;
    tmp_17.o1h_1 = this.yy(or(tmp_20, map(tmp_22, GAlgebraElementASTGrammar$minusParser$delegate$lambda_2)), this, minusParser$factory());
    this.p1h_1 = this.yy(or(or(or(_get_natParser__86xlm9(this), _get_idParser__4cqmtr(this)), _get_minusParser__naumde(this)), _get_parenParser__kd1lns(this)), this, termParser$factory());
    var tmp_23 = this;
    var tmp$ret$5;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp$ret$4;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.and' call
    var tmp0_and_1 = _get_termParser__9ktxa8(this);
    var tmp1_and_1 = skip(_get_pow__e6evjt(this));
    var tmp_24 = listOf_0([tmp0_and_1, tmp1_and_1]);
    tmp$ret$4 = new AndCombinator(tmp_24, GAlgebraElementASTGrammar$powerParser$delegate$lambda);
    var tmp2_and_1 = tmp$ret$4;
    var tmp3_and_1 = _get_nat__e6db4g(this);
    var tmp_25 = plus(tmp2_and_1.zx_1, listOf(tmp3_and_1));
    tmp$ret$5 = new AndCombinator(tmp_25, GAlgebraElementASTGrammar$powerParser$delegate$lambda_0);
    var tmp_26 = tmp$ret$5;
    tmp_23.q1h_1 = this.yy(or(map(tmp_26, GAlgebraElementASTGrammar$powerParser$delegate$lambda_1), _get_termParser__9ktxa8(this)), this, powerParser$factory());
    var tmp_27 = this;
    var tmp$ret$7;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.leftAssociative' call
    var tmp0_leftAssociative = _get_powerParser__cj0rqr(this);
    var tmp_28 = or(_get_mul__e6d2rx(this), _get_div__e6738g(this));
    var tmp1_leftAssociative = use(tmp_28, GAlgebraElementASTGrammar$mulDivChain$delegate$lambda);
    var tmp2_leftAssociative = GAlgebraElementASTGrammar$mulDivChain$delegate$lambda_0;
    var tmp$ret$6;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.separated' call
    tmp$ret$6 = new SeparatedCombinator(tmp0_leftAssociative, tmp1_leftAssociative, false);
    var tmp_29 = tmp$ret$6;
    tmp$ret$7 = map(tmp_29, GAlgebraElementASTGrammar$mulDivChain$delegate$lambda_1(tmp2_leftAssociative));
    tmp_27.r1h_1 = this.yy(tmp$ret$7, this, mulDivChain$factory_0());
    var tmp_30 = this;
    var tmp$ret$9;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.leftAssociative' call
    var tmp0_leftAssociative_0 = _get_mulDivChain__rkka6b(this);
    var tmp_31 = or(_get_plus__dc2x2p(this), _get_minus__e92hlr(this));
    var tmp1_leftAssociative_0 = use(tmp_31, GAlgebraElementASTGrammar$subSumChain$delegate$lambda);
    var tmp2_leftAssociative_0 = GAlgebraElementASTGrammar$subSumChain$delegate$lambda_0;
    var tmp$ret$8;
    // Inline function 'com.github.h0tk3y.betterParse.combinators.separated' call
    tmp$ret$8 = new SeparatedCombinator(tmp0_leftAssociative_0, tmp1_leftAssociative_0, false);
    var tmp_32 = tmp$ret$8;
    tmp$ret$9 = map(tmp_32, GAlgebraElementASTGrammar$subSumChain$delegate$lambda_1(tmp2_leftAssociative_0));
    tmp_30.s1h_1 = this.yy(tmp$ret$9, this, subSumChain$factory());
    this.t1h_1 = this.yy(_get_subSumChain__3rvi9x(this), this, rootParser$factory_0());
  }
  GAlgebraElementASTGrammar.prototype.sy = function () {
    return this.zy(this.t1h_1, this, rootParser$factory_1());
  };
  GAlgebraElementASTGrammar.$metadata$ = objectMeta('GAlgebraElementASTGrammar', undefined, undefined, undefined, undefined, Grammar.prototype);
  var GAlgebraElementASTGrammar_instance;
  function GAlgebraElementASTGrammar_getInstance() {
    if (GAlgebraElementASTGrammar_instance == null)
      new GAlgebraElementASTGrammar();
    return GAlgebraElementASTGrammar_instance;
  }
  function zero$factory() {
    return getPropertyCallableRef('zero', 1, KProperty1, function (receiver) {
      return _get_zero__dhgbs3(receiver);
    }, null);
  }
  function id$factory() {
    return getPropertyCallableRef('id', 1, KProperty1, function (receiver) {
      return _get_id__ndc34g(receiver);
    }, null);
  }
  function nat$factory() {
    return getPropertyCallableRef('nat', 1, KProperty1, function (receiver) {
      return _get_nat__e6db4g(receiver);
    }, null);
  }
  function lpar$factory() {
    return getPropertyCallableRef('lpar', 1, KProperty1, function (receiver) {
      return _get_lpar__d9xvsm(receiver);
    }, null);
  }
  function rpar$factory() {
    return getPropertyCallableRef('rpar', 1, KProperty1, function (receiver) {
      return _get_rpar__dd8ncs(receiver);
    }, null);
  }
  function mul$factory() {
    return getPropertyCallableRef('mul', 1, KProperty1, function (receiver) {
      return _get_mul__e6d2rx(receiver);
    }, null);
  }
  function pow$factory() {
    return getPropertyCallableRef('pow', 1, KProperty1, function (receiver) {
      return _get_pow__e6evjt(receiver);
    }, null);
  }
  function div$factory() {
    return getPropertyCallableRef('div', 1, KProperty1, function (receiver) {
      return _get_div__e6738g(receiver);
    }, null);
  }
  function minus$factory() {
    return getPropertyCallableRef('minus', 1, KProperty1, function (receiver) {
      return _get_minus__e92hlr(receiver);
    }, null);
  }
  function plus$factory() {
    return getPropertyCallableRef('plus', 1, KProperty1, function (receiver) {
      return _get_plus__dc2x2p(receiver);
    }, null);
  }
  function ws$factory() {
    return getPropertyCallableRef('ws', 1, KProperty1, function (receiver) {
      return _get_ws__ndcdv3(receiver);
    }, null);
  }
  function idParser$factory() {
    return getPropertyCallableRef('idParser', 1, KProperty1, function (receiver) {
      return _get_idParser__4cqmtr(receiver);
    }, null);
  }
  function natParser$factory() {
    return getPropertyCallableRef('natParser', 1, KProperty1, function (receiver) {
      return _get_natParser__86xlm9(receiver);
    }, null);
  }
  function rootParser$factory($b0) {
    return getPropertyCallableRef('rootParser', 0, KProperty0, function () {
      return $b0.sy();
    }, null);
  }
  function parenParser$factory() {
    return getPropertyCallableRef('parenParser', 1, KProperty1, function (receiver) {
      return _get_parenParser__kd1lns(receiver);
    }, null);
  }
  function mulDivChain$factory($b0) {
    return getPropertyCallableRef('mulDivChain', 0, KProperty0, function () {
      return _get_mulDivChain__rkka6b($b0);
    }, null);
  }
  function minusParser$factory() {
    return getPropertyCallableRef('minusParser', 1, KProperty1, function (receiver) {
      return _get_minusParser__naumde(receiver);
    }, null);
  }
  function termParser$factory() {
    return getPropertyCallableRef('termParser', 1, KProperty1, function (receiver) {
      return _get_termParser__9ktxa8(receiver);
    }, null);
  }
  function powerParser$factory() {
    return getPropertyCallableRef('powerParser', 1, KProperty1, function (receiver) {
      return _get_powerParser__cj0rqr(receiver);
    }, null);
  }
  function mulDivChain$factory_0() {
    return getPropertyCallableRef('mulDivChain', 1, KProperty1, function (receiver) {
      return _get_mulDivChain__rkka6b(receiver);
    }, null);
  }
  function subSumChain$factory() {
    return getPropertyCallableRef('subSumChain', 1, KProperty1, function (receiver) {
      return _get_subSumChain__3rvi9x(receiver);
    }, null);
  }
  function rootParser$factory_0() {
    return getPropertyCallableRef('rootParser', 1, KProperty1, function (receiver) {
      return receiver.sy();
    }, null);
  }
  function zero$factory_0() {
    return getPropertyCallableRef('zero', 1, KProperty1, function (receiver) {
      return _get_zero__dhgbs3(receiver);
    }, null);
  }
  function id$factory_0() {
    return getPropertyCallableRef('id', 1, KProperty1, function (receiver) {
      return _get_id__ndc34g(receiver);
    }, null);
  }
  function nat$factory_0() {
    return getPropertyCallableRef('nat', 1, KProperty1, function (receiver) {
      return _get_nat__e6db4g(receiver);
    }, null);
  }
  function lpar$factory_0() {
    return getPropertyCallableRef('lpar', 1, KProperty1, function (receiver) {
      return _get_lpar__d9xvsm(receiver);
    }, null);
  }
  function rpar$factory_0() {
    return getPropertyCallableRef('rpar', 1, KProperty1, function (receiver) {
      return _get_rpar__dd8ncs(receiver);
    }, null);
  }
  function mul$factory_0() {
    return getPropertyCallableRef('mul', 1, KProperty1, function (receiver) {
      return _get_mul__e6d2rx(receiver);
    }, null);
  }
  function pow$factory_0() {
    return getPropertyCallableRef('pow', 1, KProperty1, function (receiver) {
      return _get_pow__e6evjt(receiver);
    }, null);
  }
  function div$factory_0() {
    return getPropertyCallableRef('div', 1, KProperty1, function (receiver) {
      return _get_div__e6738g(receiver);
    }, null);
  }
  function minus$factory_0() {
    return getPropertyCallableRef('minus', 1, KProperty1, function (receiver) {
      return _get_minus__e92hlr(receiver);
    }, null);
  }
  function plus$factory_0() {
    return getPropertyCallableRef('plus', 1, KProperty1, function (receiver) {
      return _get_plus__dc2x2p(receiver);
    }, null);
  }
  function ws$factory_0() {
    return getPropertyCallableRef('ws', 1, KProperty1, function (receiver) {
      return _get_ws__ndcdv3(receiver);
    }, null);
  }
  function idParser$factory_0() {
    return getPropertyCallableRef('idParser', 1, KProperty1, function (receiver) {
      return _get_idParser__4cqmtr(receiver);
    }, null);
  }
  function natParser$factory_0() {
    return getPropertyCallableRef('natParser', 1, KProperty1, function (receiver) {
      return _get_natParser__86xlm9(receiver);
    }, null);
  }
  function parenParser$factory_0() {
    return getPropertyCallableRef('parenParser', 1, KProperty1, function (receiver) {
      return _get_parenParser__kd1lns(receiver);
    }, null);
  }
  function minusParser$factory_0() {
    return getPropertyCallableRef('minusParser', 1, KProperty1, function (receiver) {
      return _get_minusParser__naumde(receiver);
    }, null);
  }
  function termParser$factory_0() {
    return getPropertyCallableRef('termParser', 1, KProperty1, function (receiver) {
      return _get_termParser__9ktxa8(receiver);
    }, null);
  }
  function powerParser$factory_0() {
    return getPropertyCallableRef('powerParser', 1, KProperty1, function (receiver) {
      return _get_powerParser__cj0rqr(receiver);
    }, null);
  }
  function mulDivChain$factory_1() {
    return getPropertyCallableRef('mulDivChain', 1, KProperty1, function (receiver) {
      return _get_mulDivChain__rkka6b(receiver);
    }, null);
  }
  function subSumChain$factory_0() {
    return getPropertyCallableRef('subSumChain', 1, KProperty1, function (receiver) {
      return _get_subSumChain__3rvi9x(receiver);
    }, null);
  }
  function rootParser$factory_1() {
    return getPropertyCallableRef('rootParser', 1, KProperty1, function (receiver) {
      return receiver.sy();
    }, null);
  }
  function RegexToken_init_$Init$(name, pattern, ignored, $this) {
    RegexToken.call($this, name, Regex_init_$Create$(pattern), ignored);
    return $this;
  }
  function RegexToken_init_$Create$(name, pattern, ignored) {
    return RegexToken_init_$Init$(name, pattern, ignored, Object.create(RegexToken.prototype));
  }
  function RegexToken(name, regex, ignored) {
    Token.call(this, name, ignored);
    this.x1h_1 = regex;
  }
  RegexToken.prototype.pz = function (input, fromIndex) {
    var matchResult = this.x1h_1.de(input, fromIndex);
    if (!(matchResult == null) ? matchResult.j6().h5_1 === fromIndex : false) {
      return (matchResult.j6().i5_1 - fromIndex | 0) + 1 | 0;
    }
    return 0;
  };
  RegexToken.prototype.toString = function () {
    var tmp0_elvis_lhs = this.wy_1;
    return (tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs) + ' [' + this.x1h_1.yd_1 + ']' + (this.xy_1 ? ' [ignorable]' : '');
  };
  RegexToken.$metadata$ = classMeta('RegexToken', undefined, undefined, undefined, undefined, Token.prototype);
  function regexToken(pattern, ignore) {
    return RegexToken_init_$Create$(null, pattern, ignore);
  }
  function regexToken$default(pattern, ignore, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignore = false;
    return regexToken(pattern, ignore);
  }
  function IllegalContextException(message) {
    RuntimeException_init_$Init$(message, this);
    captureStack(this, IllegalContextException);
  }
  IllegalContextException.$metadata$ = classMeta('IllegalContextException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function InvalidSizeException(message) {
    RuntimeException_init_$Init$(message, this);
    captureStack(this, InvalidSizeException);
  }
  InvalidSizeException.$metadata$ = classMeta('InvalidSizeException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function Companion_21() {
    Companion_instance_21 = this;
  }
  Companion_21.prototype.y1h = function (freeDGAlgebra) {
    var factory = new DerivationDGLieAlgebraFactory(freeDGAlgebra);
    return new DerivationDGLieAlgebra(factory);
  };
  Companion_21.$metadata$ = objectMeta('Companion');
  var Companion_instance_21;
  function Companion_getInstance_22() {
    if (Companion_instance_21 == null)
      new Companion_21();
    return Companion_instance_21;
  }
  function DerivationDGLieAlgebra(factory) {
    Companion_getInstance_22();
    this.z1h_1 = factory;
    this.a1i_1 = Companion_getInstance_4().m15(factory.g1i_1, factory.h1i_1);
    this.b1i_1 = this.z1h_1.d1i_1;
    this.c1i_1 = this.z1h_1.g1i_1;
  }
  DerivationDGLieAlgebra.prototype.o11 = function () {
    return this.a1i_1.o11();
  };
  DerivationDGLieAlgebra.prototype.e11 = function () {
    return this.a1i_1.e11();
  };
  DerivationDGLieAlgebra.prototype.t14 = function () {
    return this.a1i_1.t14();
  };
  DerivationDGLieAlgebra.prototype.s14 = function () {
    return this.a1i_1.s14();
  };
  DerivationDGLieAlgebra.prototype.g11 = function () {
    return this.a1i_1.g11();
  };
  DerivationDGLieAlgebra.prototype.p11 = function () {
    return this.a1i_1.p11();
  };
  DerivationDGLieAlgebra.prototype.k11 = function () {
    return this.a1i_1.k11();
  };
  DerivationDGLieAlgebra.prototype.l11 = function () {
    return this.a1i_1.l11();
  };
  DerivationDGLieAlgebra.prototype.h11 = function () {
    return this.a1i_1.h11();
  };
  DerivationDGLieAlgebra.prototype.f11 = function () {
    return this.a1i_1.f11();
  };
  DerivationDGLieAlgebra.prototype.xb = function () {
    return this.a1i_1.xb();
  };
  DerivationDGLieAlgebra.prototype.j11 = function () {
    return this.a1i_1.j11();
  };
  DerivationDGLieAlgebra.prototype.n11 = function () {
    return this.a1i_1.n11();
  };
  DerivationDGLieAlgebra.prototype.d12 = function () {
    return this.a1i_1.d12();
  };
  DerivationDGLieAlgebra.prototype.i1i = function (a, b) {
    return this.a1i_1.x11(a, b);
  };
  DerivationDGLieAlgebra.prototype.x11 = function (a, b) {
    return this.i1i(a, b);
  };
  DerivationDGLieAlgebra.prototype.j1i = function (cocycle) {
    return this.a1i_1.i11(cocycle);
  };
  DerivationDGLieAlgebra.prototype.i11 = function (cocycle) {
    return this.j1i(cocycle);
  };
  DerivationDGLieAlgebra.prototype.k1i = function (gVector) {
    return this.a1i_1.w11(gVector);
  };
  DerivationDGLieAlgebra.prototype.w11 = function (gVector) {
    return this.k1i(gVector);
  };
  DerivationDGLieAlgebra.prototype.l1i = function (gVectorOrZero, degree) {
    return this.a1i_1.v11(gVectorOrZero, degree);
  };
  DerivationDGLieAlgebra.prototype.v11 = function (gVectorOrZero, degree) {
    return this.l1i(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationDGLieAlgebra.prototype.m1i = function (a, b) {
    return this.a1i_1.c12(a, b);
  };
  DerivationDGLieAlgebra.prototype.c12 = function (a, b) {
    return this.m1i(a, b);
  };
  DerivationDGLieAlgebra.prototype.n1i = function (basisName, degree) {
    return this.a1i_1.s11(basisName, degree);
  };
  DerivationDGLieAlgebra.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof DirectSumBasis ? basisName : THROW_CCE();
    return this.n1i(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationDGLieAlgebra.prototype.o1i = function (vector, degree) {
    return this.a1i_1.q11(vector, degree);
  };
  DerivationDGLieAlgebra.prototype.q11 = function (vector, degree) {
    return this.o1i(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationDGLieAlgebra.prototype.p1i = function (vector, degree) {
    return this.a1i_1.r11(vector, degree);
  };
  DerivationDGLieAlgebra.prototype.r11 = function (vector, degree) {
    return this.p1i(vector, degree);
  };
  DerivationDGLieAlgebra.prototype.m11 = function (degree) {
    return this.a1i_1.m11(degree);
  };
  DerivationDGLieAlgebra.prototype.t11 = function (degree) {
    return this.a1i_1.t11(degree);
  };
  DerivationDGLieAlgebra.prototype.u11 = function (degree) {
    return this.a1i_1.u11(degree);
  };
  DerivationDGLieAlgebra.prototype.q1i = function (scalar, gVector) {
    return this.a1i_1.z11(scalar, gVector);
  };
  DerivationDGLieAlgebra.prototype.z11 = function (scalar, gVector) {
    return this.q1i(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  DerivationDGLieAlgebra.prototype.r1i = function (a, b) {
    return this.a1i_1.a12(a, b);
  };
  DerivationDGLieAlgebra.prototype.a12 = function (a, b) {
    return this.r1i(a, b);
  };
  DerivationDGLieAlgebra.prototype.s1i = function (a, b) {
    return this.a1i_1.b12(a, b);
  };
  DerivationDGLieAlgebra.prototype.b12 = function (a, b) {
    return this.s1i(a, b);
  };
  DerivationDGLieAlgebra.prototype.t1i = function (a, b) {
    return this.a1i_1.y11(a, b);
  };
  DerivationDGLieAlgebra.prototype.y11 = function (a, b) {
    return this.t1i(a, b);
  };
  DerivationDGLieAlgebra.prototype.v1a = function (printConfig) {
    var gLieAlgebraString = this.c1i_1.v1a(printConfig);
    return '(' + gLieAlgebraString + ', d)';
  };
  DerivationDGLieAlgebra.prototype.toString = function () {
    return '(' + this.c1i_1 + ', d)';
  };
  DerivationDGLieAlgebra.$metadata$ = classMeta('DerivationDGLieAlgebra', [DGLieAlgebra, Printable]);
  function DerivationDGLieAlgebraFactory(freeDGAlgebra) {
    this.d1i_1 = freeDGAlgebra;
    this.e1i_1 = this.d1i_1.h11();
    this.f1i_1 = this.d1i_1.s14();
    this.g1i_1 = Companion_getInstance_23().x1i(this.d1i_1);
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.g1i_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.DerivationDGLieAlgebraFactory.differential.<anonymous>' call
    var differentialAsGVector = this.g1i_1.y1i(this.d1i_1.g11());
    tmp$ret$0 = tmp0_run.a16(differentialAsGVector);
    tmp$ret$1 = tmp$ret$0;
    tmp.h1i_1 = tmp$ret$1;
  }
  DerivationDGLieAlgebraFactory.prototype.z1i = function () {
    return this.d1i_1;
  };
  DerivationDGLieAlgebraFactory.prototype.z15 = function () {
    return this.g1i_1;
  };
  DerivationDGLieAlgebraFactory.$metadata$ = classMeta('DerivationDGLieAlgebraFactory');
  function Companion_22() {
    Companion_instance_22 = this;
  }
  Companion_22.prototype.x1i = function (freeGAlgebra) {
    var factory = new DerivationGLieAlgebraFactory(freeGAlgebra);
    return new DerivationGLieAlgebra(factory);
  };
  Companion_22.$metadata$ = objectMeta('Companion');
  var Companion_instance_22;
  function Companion_getInstance_23() {
    if (Companion_instance_22 == null)
      new Companion_22();
    return Companion_instance_22;
  }
  function DerivationGLieAlgebraFactory$getVectorSpace$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.f1j(p0);
    };
    l.callableName = 'getVectorSpace';
    return l;
  }
  function DerivationGLieAlgebraFactory$getMultiplication$ref($boundThis) {
    var l = function (p0, p1) {
      return $boundThis.g1j(p0, p1);
    };
    l.callableName = 'getMultiplication';
    return l;
  }
  function DerivationGLieAlgebraFactory$getInternalPrintConfig$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.h1j(p0);
    };
    l.callableName = 'getInternalPrintConfig';
    return l;
  }
  function DerivationGLieAlgebra(factory) {
    Companion_getInstance_23();
    this.u1i_1 = factory;
    var tmp = this;
    var tmp_0 = Companion_getInstance_13();
    var tmp_1 = DerivationGLieAlgebraFactory$getVectorSpace$ref(factory);
    var tmp_2 = DerivationGLieAlgebraFactory$getMultiplication$ref(factory);
    var tmp_3 = DerivationGLieAlgebraFactory$getInternalPrintConfig$ref(factory);
    tmp.v1i_1 = tmp_0.k19(factory.b1j_1, factory.c1j_1, factory.d1j_1, tmp_1, tmp_2, tmp_3, null, null, 192, null);
    this.w1i_1 = this.u1i_1.a1j_1;
  }
  DerivationGLieAlgebra.prototype.o11 = function () {
    return this.v1i_1.o11();
  };
  DerivationGLieAlgebra.prototype.t14 = function () {
    return this.v1i_1.t14();
  };
  DerivationGLieAlgebra.prototype.s14 = function () {
    return this.v1i_1.s14();
  };
  DerivationGLieAlgebra.prototype.p11 = function () {
    return this.v1i_1.p11();
  };
  DerivationGLieAlgebra.prototype.k11 = function () {
    return this.v1i_1.k11();
  };
  DerivationGLieAlgebra.prototype.l11 = function () {
    return this.v1i_1.l11();
  };
  DerivationGLieAlgebra.prototype.h11 = function () {
    return this.v1i_1.h11();
  };
  DerivationGLieAlgebra.prototype.f11 = function () {
    return this.v1i_1.f11();
  };
  DerivationGLieAlgebra.prototype.xb = function () {
    return this.v1i_1.xb();
  };
  DerivationGLieAlgebra.prototype.j11 = function () {
    return this.v1i_1.j11();
  };
  DerivationGLieAlgebra.prototype.n11 = function () {
    return this.v1i_1.n11();
  };
  DerivationGLieAlgebra.prototype.d12 = function () {
    return this.v1i_1.d12();
  };
  DerivationGLieAlgebra.prototype.i1i = function (a, b) {
    return this.v1i_1.x11(a, b);
  };
  DerivationGLieAlgebra.prototype.x11 = function (a, b) {
    return this.i1i(a, b);
  };
  DerivationGLieAlgebra.prototype.k1i = function (gVector) {
    return this.v1i_1.w11(gVector);
  };
  DerivationGLieAlgebra.prototype.w11 = function (gVector) {
    return this.k1i(gVector);
  };
  DerivationGLieAlgebra.prototype.l1i = function (gVectorOrZero, degree) {
    return this.v1i_1.v11(gVectorOrZero, degree);
  };
  DerivationGLieAlgebra.prototype.v11 = function (gVectorOrZero, degree) {
    return this.l1i(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationGLieAlgebra.prototype.m1i = function (a, b) {
    return this.v1i_1.c12(a, b);
  };
  DerivationGLieAlgebra.prototype.c12 = function (a, b) {
    return this.m1i(a, b);
  };
  DerivationGLieAlgebra.prototype.n1i = function (basisName, degree) {
    return this.v1i_1.s11(basisName, degree);
  };
  DerivationGLieAlgebra.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof DirectSumBasis ? basisName : THROW_CCE();
    return this.n1i(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationGLieAlgebra.prototype.o1i = function (vector, degree) {
    return this.v1i_1.q11(vector, degree);
  };
  DerivationGLieAlgebra.prototype.q11 = function (vector, degree) {
    return this.o1i(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  DerivationGLieAlgebra.prototype.p1i = function (vector, degree) {
    return this.v1i_1.r11(vector, degree);
  };
  DerivationGLieAlgebra.prototype.r11 = function (vector, degree) {
    return this.p1i(vector, degree);
  };
  DerivationGLieAlgebra.prototype.m11 = function (degree) {
    return this.v1i_1.m11(degree);
  };
  DerivationGLieAlgebra.prototype.t11 = function (degree) {
    return this.v1i_1.t11(degree);
  };
  DerivationGLieAlgebra.prototype.u11 = function (degree) {
    return this.v1i_1.u11(degree);
  };
  DerivationGLieAlgebra.prototype.q1i = function (scalar, gVector) {
    return this.v1i_1.z11(scalar, gVector);
  };
  DerivationGLieAlgebra.prototype.z11 = function (scalar, gVector) {
    return this.q1i(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  DerivationGLieAlgebra.prototype.r1i = function (a, b) {
    return this.v1i_1.a12(a, b);
  };
  DerivationGLieAlgebra.prototype.a12 = function (a, b) {
    return this.r1i(a, b);
  };
  DerivationGLieAlgebra.prototype.s1i = function (a, b) {
    return this.v1i_1.b12(a, b);
  };
  DerivationGLieAlgebra.prototype.b12 = function (a, b) {
    return this.s1i(a, b);
  };
  DerivationGLieAlgebra.prototype.t1i = function (a, b) {
    return this.v1i_1.y11(a, b);
  };
  DerivationGLieAlgebra.prototype.y11 = function (a, b) {
    return this.t1i(a, b);
  };
  DerivationGLieAlgebra.prototype.toString = function () {
    return this.v1i_1.toString();
  };
  DerivationGLieAlgebra.prototype.y1i = function (derivation) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.w1i_1.d1g();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebra.derivationToGVector.<anonymous>' call
      tmp$ret$0 = derivation.e15(item).w17_1;
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var valueList = tmp$ret$2;
    var vector = this.u1i_1.f1j(derivation.b15()).s1j(valueList);
    return this.o1i(vector, derivation.b15());
  };
  DerivationGLieAlgebra.prototype.v1a = function (printConfig) {
    var tmp0_subject = printConfig.t1j_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = 'Der';
        break;
      case 1:
        tmp = '\\mathrm{Der}';
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    var der = tmp;
    return der + '(' + this.w1i_1.y1j().v1a(printConfig) + ')';
  };
  DerivationGLieAlgebra.$metadata$ = classMeta('DerivationGLieAlgebra', [GLieAlgebra, Printable]);
  function generateGetValue($this, target) {
    return DerivationGLieAlgebraFactory$generateGetValue$lambda($this, target);
  }
  function toDerivation(_this__u8e3s4, $this) {
    var freeGAlgebra = $this.a1j_1;
    var size = freeGAlgebra.c1g().i();
    var basisDegree = _this__u8e3s4.a1k_1.b15();
    var index = _this__u8e3s4.z1j_1;
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = freeGAlgebra.s14().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.toDerivation.<anonymous>' call
    tmp$ret$0 = tmp0_run.z19(basisDegree, freeGAlgebra.c1g().l(index).g1k_1);
    tmp$ret$1 = tmp$ret$0;
    var derivationDegree = tmp$ret$1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.map' call
    var tmp1_map = until(0, size);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
    var inductionVariable = tmp1_map.h5_1;
    var last = tmp1_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$2;
        // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.toDerivation.<anonymous>' call
        var tmp;
        if (item === index) {
          tmp = freeGAlgebra.s11(_this__u8e3s4.a1k_1, basisDegree);
        } else {
          tmp = freeGAlgebra.d12();
        }
        tmp$ret$2 = tmp;
        tmp0_mapTo.a(tmp$ret$2);
      }
       while (!(item === last));
    tmp$ret$3 = tmp0_mapTo;
    tmp$ret$4 = tmp$ret$3;
    var valueList = tmp$ret$4;
    return freeGAlgebra.h1k(valueList, derivationDegree);
  }
  function DerivationGLieAlgebraFactory$getInternalPrintConfig$lambda($indeterminateList, $p) {
    return function (directSumBasis) {
      var from = $indeterminateList.l(directSumBasis.z1j_1);
      var to = directSumBasis.a1k_1;
      return '(' + $p.k1k(from) + ', ' + $p.k1k(to) + ')';
    };
  }
  function DerivationGLieAlgebraFactory$getInternalPrintConfig$ref_0($boundThis) {
    var l = function (p0) {
      return $boundThis.h1j(p0);
    };
    l.callableName = 'getInternalPrintConfig';
    return l;
  }
  function DerivationGLieAlgebraFactory$generateGetValue$lambda(this$0, $target) {
    return function (derivationBasis1, derivationBasis2) {
      var derivation1 = toDerivation(derivationBasis1, this$0);
      var derivation2 = toDerivation(derivationBasis2, this$0);
      var sign = derivation1.b15().t1e(derivation2.b15());
      var tmp$ret$7;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$4;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.a1j_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.generateGetValue.<anonymous>.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = this$0.a1j_1.d1g();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator = tmp0_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.generateGetValue.<anonymous>.<anonymous>.<anonymous>' call
        tmp$ret$0 = tmp0_run.e13(derivation1.e15(derivation2.e15(item)), tmp0_run.v13(sign, derivation2.e15(derivation1.e15(item))));
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      tmp$ret$4 = tmp$ret$3;
      var tmp1_map = tmp$ret$4;
      var tmp$ret$6;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
      var tmp0_iterator_0 = tmp1_map.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$5;
        // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.generateGetValue.<anonymous>.<anonymous>' call
        tmp$ret$5 = item_0.w17_1;
        tmp0_mapTo_0.a(tmp$ret$5);
      }
      tmp$ret$6 = tmp0_mapTo_0;
      tmp$ret$7 = tmp$ret$6;
      var valueList = tmp$ret$7;
      return $target.s1j(valueList);
    };
  }
  function DerivationGLieAlgebraFactory(freeGAlgebra) {
    this.a1j_1 = freeGAlgebra;
    this.b1j_1 = this.a1j_1.h11();
    this.c1j_1 = this.a1j_1.s14();
    this.d1j_1 = 'Der(' + this.a1j_1.xb() + ')';
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.e1j_1 = tmp$ret$0;
  }
  DerivationGLieAlgebraFactory.prototype.l1k = function () {
    return this.a1j_1;
  };
  DerivationGLieAlgebraFactory.prototype.s14 = function () {
    return this.c1j_1;
  };
  DerivationGLieAlgebraFactory.prototype.h1j = function (printConfig) {
    var p = Printer_init_$Create$(printConfig);
    var indeterminateList = this.a1j_1.c1g();
    var tmp = DerivationGLieAlgebraFactory$getInternalPrintConfig$lambda(indeterminateList, p);
    return InternalPrintConfig_init_$Create$(null, tmp, null, 5, null);
  };
  DerivationGLieAlgebraFactory.prototype.f1j = function (derivationDegree) {
    var tmp$ret$9;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = this.e1j_1;
    var value = tmp0_getOrPut.t(derivationDegree);
    var tmp;
    if (value == null) {
      var tmp$ret$8;
      // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.getVectorSpace.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = this.a1j_1.c1g();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator = tmp0_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.getVectorSpace.<anonymous>.<anonymous>' call
        tmp$ret$0 = item.g1k_1;
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      var generatorDegreeList = tmp$ret$2;
      var tmp$ret$7;
      // Inline function 'kotlin.run' call
      var tmp1_run = this.c1j_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$6;
      // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.getVectorSpace.<anonymous>.<anonymous>' call
      var tmp$ret$5;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$4;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(generatorDegreeList, 10));
      var tmp0_iterator_0 = generatorDegreeList.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.getVectorSpace.<anonymous>.<anonymous>.<anonymous>' call
        tmp$ret$3 = this.a1j_1.m11(tmp1_run.y18(item_0, derivationDegree));
        tmp0_mapTo_0.a(tmp$ret$3);
      }
      tmp$ret$4 = tmp0_mapTo_0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = tmp$ret$6;
      var vectorSpaceList = tmp$ret$7;
      var tmp_0 = this.a1j_1.h11();
      tmp$ret$8 = DirectSum_init_$Create$(vectorSpaceList, tmp_0, DerivationGLieAlgebraFactory$getInternalPrintConfig$ref_0(this));
      var answer = tmp$ret$8;
      tmp0_getOrPut.u(derivationDegree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$9 = tmp;
    return tmp$ret$9;
  };
  DerivationGLieAlgebraFactory.prototype.g1j = function (derivationDegree1, derivationDegree2) {
    var source1 = this.f1j(derivationDegree1);
    var source2 = this.f1j(derivationDegree2);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.c1j_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.DerivationGLieAlgebraFactory.getMultiplication.<anonymous>' call
    tmp$ret$0 = tmp0_run.y18(derivationDegree1, derivationDegree2);
    tmp$ret$1 = tmp$ret$0;
    var target = this.f1j(tmp$ret$1);
    return ValueBilinearMap_init_$Create$(source1, source2, target, this.b1j_1, generateGetValue(this, target));
  };
  DerivationGLieAlgebraFactory.$metadata$ = classMeta('DerivationGLieAlgebraFactory');
  function InternalPrintConfig$Companion$default$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.h19(p0);
    };
    l.callableName = 'default';
    return l;
  }
  function FreeDGAlgebra$Companion$fromList$lambda($generatorList) {
    return function ($this$null, it) {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault($generatorList, 10));
      var tmp0_iterator = $generatorList.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.Companion.fromList.<anonymous>.<anonymous>' call
        tmp$ret$0 = $this$null.p1k(item.o1k_1);
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    };
  }
  function Companion_23() {
    Companion_instance_23 = this;
  }
  Companion_23.prototype.q1k = function (gAlgebra, differential) {
    return new FreeDGAlgebraImpl(gAlgebra, differential);
  };
  Companion_23.prototype.r1k = function (matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig, getDifferentialValueList) {
    var freeGAlgebra = Companion_getInstance_26().s1k(matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = freeGAlgebra.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.Companion.fromList.<anonymous>' call
    tmp$ret$0 = getDifferentialValueList(tmp0_run, freeGAlgebra.d1g());
    tmp$ret$1 = tmp$ret$0;
    var valueList = tmp$ret$1;
    var differential = freeGAlgebra.t1k(valueList, 1);
    var inductionVariable = 0;
    var last = valueList.i() - 1 | 0;
    if (inductionVariable <= last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var value = valueList.l(i);
        if (!(value instanceof GVector))
          continue $l$loop;
        var tmp$ret$2;
        $l$block_0: {
          // Inline function 'kotlin.collections.any' call
          var tmp1_any = until(i, valueList.i());
          var tmp;
          if (isInterface(tmp1_any, Collection)) {
            tmp = tmp1_any.p();
          } else {
            tmp = false;
          }
          if (tmp) {
            tmp$ret$2 = false;
            break $l$block_0;
          }
          var inductionVariable_0 = tmp1_any.h5_1;
          var last_0 = tmp1_any.i5_1;
          if (inductionVariable_0 <= last_0)
            do {
              var element = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var tmp$ret$3;
              // Inline function 'com.github.shwaka.kohomology.free.Companion.fromList.<anonymous>' call
              tmp$ret$3 = freeGAlgebra.u1k(element, value);
              if (tmp$ret$3) {
                tmp$ret$2 = true;
                break $l$block_0;
              }
            }
             while (!(element === last_0));
          tmp$ret$2 = false;
        }
        if (tmp$ret$2) {
          throw IllegalArgumentException_init_$Create$('The generator list of a FreeDGAlgebra should be sorted along a Sullivan filtration');
        }
        var dValue = differential.e15(value);
        if (dValue.z17())
          throw IllegalArgumentException_init_$Create$('d(' + indeterminateList.l(i) + ') must be a cocycle, ' + ('but your input is ' + value + ' with d(d(' + indeterminateList.l(i) + ')) = d(' + value + ') = ' + dValue + ' (!= 0)'));
      }
       while (inductionVariable <= last);
    return new FreeDGAlgebraImpl(freeGAlgebra, differential);
  };
  Companion_23.prototype.v1k = function (matrixSpace, degreeGroup, indeterminateList, getDifferentialValueList) {
    var tmp = Companion_getInstance_24();
    return tmp.r1k(matrixSpace, degreeGroup, indeterminateList, InternalPrintConfig$Companion$default$ref(Companion_getInstance_44()), getDifferentialValueList);
  };
  Companion_23.prototype.w1k = function (matrixSpace, degreeGroup, generatorList) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(generatorList, 10));
    var tmp0_iterator = generatorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.Companion.fromList.<anonymous>' call
      tmp$ret$0 = Indeterminate_0(item.m1k_1, item.n1k_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var indeterminateList = tmp$ret$2;
    var getDifferentialValueList = FreeDGAlgebra$Companion$fromList$lambda(generatorList);
    return Companion_getInstance_24().v1k(matrixSpace, degreeGroup, indeterminateList, getDifferentialValueList);
  };
  Companion_23.prototype.x1k = function (matrixSpace, generatorList) {
    return Companion_getInstance_24().w1k(matrixSpace, IntDegreeGroup_getInstance(), generatorList);
  };
  Companion_23.$metadata$ = objectMeta('Companion');
  var Companion_instance_23;
  function Companion_getInstance_24() {
    if (Companion_instance_23 == null)
      new Companion_23();
    return Companion_instance_23;
  }
  function FreeDGAlgebra() {
  }
  FreeDGAlgebra.$metadata$ = interfaceMeta('FreeDGAlgebra', [DGAlgebra, FreeGAlgebra]);
  function Companion_24() {
    Companion_instance_24 = this;
  }
  Companion_24.prototype.b1l = function (name, degree, differentialValue) {
    return new GeneratorOfFreeDGA(name, new IntDegree(degree), differentialValue);
  };
  Companion_24.$metadata$ = objectMeta('Companion');
  var Companion_instance_24;
  function Companion_getInstance_25() {
    if (Companion_instance_24 == null)
      new Companion_24();
    return Companion_instance_24;
  }
  function GeneratorOfFreeDGA(name, degree, differentialValue) {
    Companion_getInstance_25();
    this.m1k_1 = name;
    this.n1k_1 = degree;
    this.o1k_1 = differentialValue;
  }
  GeneratorOfFreeDGA.prototype.xb = function () {
    return this.m1k_1;
  };
  GeneratorOfFreeDGA.prototype.b15 = function () {
    return this.n1k_1;
  };
  GeneratorOfFreeDGA.prototype.c1l = function () {
    return this.o1k_1;
  };
  GeneratorOfFreeDGA.prototype.toString = function () {
    return 'GeneratorOfFreeDGA(name=' + this.m1k_1 + ', degree=' + this.n1k_1 + ', differentialValue=' + this.o1k_1 + ')';
  };
  GeneratorOfFreeDGA.prototype.hashCode = function () {
    var result = getStringHashCode(this.m1k_1);
    result = imul(result, 31) + hashCode(this.n1k_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.o1k_1) | 0;
    return result;
  };
  GeneratorOfFreeDGA.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof GeneratorOfFreeDGA))
      return false;
    var tmp0_other_with_cast = other instanceof GeneratorOfFreeDGA ? other : THROW_CCE();
    if (!(this.m1k_1 === tmp0_other_with_cast.m1k_1))
      return false;
    if (!equals(this.n1k_1, tmp0_other_with_cast.n1k_1))
      return false;
    if (!(this.o1k_1 === tmp0_other_with_cast.o1k_1))
      return false;
    return true;
  };
  GeneratorOfFreeDGA.$metadata$ = classMeta('GeneratorOfFreeDGA');
  function FreeDGAlgebraContext() {
  }
  FreeDGAlgebraContext.$metadata$ = interfaceMeta('FreeDGAlgebraContext', [DGAlgebraContext, FreeGAlgebraContext]);
  function _get_dgAlgebra__ci9nm4($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = dgAlgebra$factory();
    tmp$ret$0 = $this.n1l_1.f1();
    return tmp$ret$0;
  }
  function FreeDGAlgebraImpl$dgAlgebra$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_1().c11(this$0.d1l_1, this$0.e1l_1);
    };
  }
  function FreeDGAlgebraImpl$cohomology$delegate$lambda(this$0) {
    return function () {
      return _get_dgAlgebra__ci9nm4(this$0).e11();
    };
  }
  function FreeDGAlgebraImpl(underlyingGAlgebra, differential) {
    this.d1l_1 = underlyingGAlgebra;
    this.e1l_1 = differential;
    this.f1l_1 = new FreeDGAlgebraContextImpl(this);
    this.g1l_1 = this.d1l_1.e12();
    this.h1l_1 = true;
    this.i1l_1 = this.d1l_1.h11();
    this.j1l_1 = this.d1l_1.f11();
    this.k1l_1 = this.d1l_1.s14();
    this.l1l_1 = this.d1l_1.c1g();
    this.m1l_1 = this.d1l_1.p1l();
    var tmp = this;
    tmp.n1l_1 = lazy(FreeDGAlgebraImpl$dgAlgebra$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.o1l_1 = lazy(FreeDGAlgebraImpl$cohomology$delegate$lambda(this));
  }
  FreeDGAlgebraImpl.prototype.y1j = function () {
    return this.d1l_1;
  };
  FreeDGAlgebraImpl.prototype.g11 = function () {
    return this.e1l_1;
  };
  FreeDGAlgebraImpl.prototype.o11 = function () {
    return this.d1l_1.o11();
  };
  FreeDGAlgebraImpl.prototype.p11 = function () {
    return this.d1l_1.p11();
  };
  FreeDGAlgebraImpl.prototype.k11 = function () {
    return this.d1l_1.k11();
  };
  FreeDGAlgebraImpl.prototype.l11 = function () {
    return this.d1l_1.l11();
  };
  FreeDGAlgebraImpl.prototype.xb = function () {
    return this.d1l_1.xb();
  };
  FreeDGAlgebraImpl.prototype.j11 = function () {
    return this.d1l_1.j11();
  };
  FreeDGAlgebraImpl.prototype.n11 = function () {
    return this.d1l_1.n11();
  };
  FreeDGAlgebraImpl.prototype.d12 = function () {
    return this.d1l_1.d12();
  };
  FreeDGAlgebraImpl.prototype.q1l = function (a, b) {
    return this.d1l_1.x11(a, b);
  };
  FreeDGAlgebraImpl.prototype.x11 = function (a, b) {
    return this.q1l(a, b);
  };
  FreeDGAlgebraImpl.prototype.r1l = function (a, b) {
    return this.q1l(a, b);
  };
  FreeDGAlgebraImpl.prototype.s1l = function (gVector) {
    return this.d1l_1.w11(gVector);
  };
  FreeDGAlgebraImpl.prototype.w11 = function (gVector) {
    return this.s1l(gVector);
  };
  FreeDGAlgebraImpl.prototype.t1l = function (gVector) {
    return this.s1l(gVector);
  };
  FreeDGAlgebraImpl.prototype.u1l = function (gVectorOrZero, degree) {
    return this.d1l_1.v11(gVectorOrZero, degree);
  };
  FreeDGAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.u1l(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.v1l = function (gVectorOrZero, degree) {
    return this.u1l(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.w1l = function (a, b) {
    return this.d1l_1.c12(a, b);
  };
  FreeDGAlgebraImpl.prototype.c12 = function (a, b) {
    return this.w1l(a, b);
  };
  FreeDGAlgebraImpl.prototype.x1l = function (a, b) {
    return this.w1l(a, b);
  };
  FreeDGAlgebraImpl.prototype.y1l = function (basisName, degree) {
    return this.d1l_1.s11(basisName, degree);
  };
  FreeDGAlgebraImpl.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.y1l(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.z1l = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.y1l(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.a1m = function (vector, degree) {
    return this.d1l_1.q11(vector, degree);
  };
  FreeDGAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.a1m(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.b1m = function (vector, degree) {
    return this.a1m(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeDGAlgebraImpl.prototype.c1m = function (vector, degree) {
    return this.d1l_1.r11(vector, degree);
  };
  FreeDGAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.c1m(vector, degree);
  };
  FreeDGAlgebraImpl.prototype.d1m = function (vector, degree) {
    return this.c1m(vector, degree);
  };
  FreeDGAlgebraImpl.prototype.m11 = function (degree) {
    return this.d1l_1.m11(degree);
  };
  FreeDGAlgebraImpl.prototype.t11 = function (degree) {
    return this.d1l_1.t11(degree);
  };
  FreeDGAlgebraImpl.prototype.u11 = function (degree) {
    return this.d1l_1.u11(degree);
  };
  FreeDGAlgebraImpl.prototype.e1m = function (scalar, gVector) {
    return this.d1l_1.z11(scalar, gVector);
  };
  FreeDGAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.e1m(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeDGAlgebraImpl.prototype.f1m = function (scalar, gVector) {
    return this.e1m(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeDGAlgebraImpl.prototype.g1m = function (a, b) {
    return this.d1l_1.y11(a, b);
  };
  FreeDGAlgebraImpl.prototype.y11 = function (a, b) {
    return this.g1m(a, b);
  };
  FreeDGAlgebraImpl.prototype.h1m = function (a, b) {
    return this.g1m(a, b);
  };
  FreeDGAlgebraImpl.prototype.t14 = function () {
    return this.f1l_1;
  };
  FreeDGAlgebraImpl.prototype.e12 = function () {
    return this.g1l_1;
  };
  FreeDGAlgebraImpl.prototype.f12 = function () {
    return this.h1l_1;
  };
  FreeDGAlgebraImpl.prototype.h11 = function () {
    return this.i1l_1;
  };
  FreeDGAlgebraImpl.prototype.f11 = function () {
    return this.j1l_1;
  };
  FreeDGAlgebraImpl.prototype.s14 = function () {
    return this.k1l_1;
  };
  FreeDGAlgebraImpl.prototype.c1g = function () {
    return this.l1l_1;
  };
  FreeDGAlgebraImpl.prototype.p1l = function () {
    return this.m1l_1;
  };
  FreeDGAlgebraImpl.prototype.e11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = cohomology$factory_2();
    tmp$ret$0 = this.o1l_1.f1();
    return tmp$ret$0;
  };
  FreeDGAlgebraImpl.prototype.toString = function () {
    return '(' + this.d1l_1 + ', d)';
  };
  FreeDGAlgebraImpl.$metadata$ = classMeta('FreeDGAlgebraImpl', [FreeDGAlgebra, GVectorSpace, Printable]);
  function FreeDGAlgebraContextImpl(dgAlgebra) {
    this.i1m_1 = dgAlgebra;
    this.j1m_1 = new DGAlgebraContextImpl(dgAlgebra);
    this.k1m_1 = this.i1m_1;
  }
  FreeDGAlgebraContextImpl.prototype.l12 = function () {
    return this.j1m_1.l12();
  };
  FreeDGAlgebraContextImpl.prototype.m12 = function () {
    return this.j1m_1.m12();
  };
  FreeDGAlgebraContextImpl.prototype.t12 = function () {
    return this.j1m_1.t12();
  };
  FreeDGAlgebraContextImpl.prototype.p11 = function () {
    return this.j1m_1.p11();
  };
  FreeDGAlgebraContextImpl.prototype.u12 = function () {
    return this.j1m_1.u12();
  };
  FreeDGAlgebraContextImpl.prototype.v12 = function () {
    return this.j1m_1.v12();
  };
  FreeDGAlgebraContextImpl.prototype.j11 = function () {
    return this.j1m_1.j11();
  };
  FreeDGAlgebraContextImpl.prototype.w12 = function () {
    return this.j1m_1.w12();
  };
  FreeDGAlgebraContextImpl.prototype.e12 = function () {
    return this.j1m_1.e12();
  };
  FreeDGAlgebraContextImpl.prototype.x12 = function () {
    return this.j1m_1.x12();
  };
  FreeDGAlgebraContextImpl.prototype.l1m = function (_this__u8e3s4) {
    return this.j1m_1.y12(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.y12 = function (_this__u8e3s4) {
    return this.l1m(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.j1m_1.z12(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.j1m_1.a13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.j1m_1.b13(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.j1m_1.c13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.j1m_1.d13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.m1m = function (_this__u8e3s4, other) {
    return this.j1m_1.e13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.e13 = function (_this__u8e3s4, other) {
    return this.m1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.n1m = function (_this__u8e3s4, other) {
    return this.j1m_1.f13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.f13 = function (_this__u8e3s4, other) {
    return this.n1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.j1m_1.g13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.j1m_1.h13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.o1m = function (_this__u8e3s4, other) {
    return this.j1m_1.i13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.o1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.p1m = function (_this__u8e3s4, other) {
    return this.j1m_1.j13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.j13 = function (_this__u8e3s4, other) {
    return this.p1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.q1m = function (_this__u8e3s4, exponent) {
    return this.j1m_1.c14(_this__u8e3s4, exponent);
  };
  FreeDGAlgebraContextImpl.prototype.c14 = function (_this__u8e3s4, exponent) {
    return this.q1m(_this__u8e3s4, exponent);
  };
  FreeDGAlgebraContextImpl.prototype.r1m = function (_this__u8e3s4, exponent) {
    return this.j1m_1.d14(_this__u8e3s4, exponent);
  };
  FreeDGAlgebraContextImpl.prototype.d14 = function (_this__u8e3s4, exponent) {
    return this.r1m(_this__u8e3s4, exponent);
  };
  FreeDGAlgebraContextImpl.prototype.s1m = function (_this__u8e3s4) {
    return this.j1m_1.f14(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.f14 = function (_this__u8e3s4) {
    return this.s1m(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.j1m_1.k13(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.t1m = function (_this__u8e3s4, degree) {
    return this.j1m_1.l13(_this__u8e3s4, degree);
  };
  FreeDGAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.t1m(_this__u8e3s4, (degree == null ? true : isInterface(degree, Degree)) ? degree : THROW_CCE());
  };
  FreeDGAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.j1m_1.m13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.j1m_1.n13(_this__u8e3s4, numVector);
  };
  FreeDGAlgebraContextImpl.prototype.u1m = function (_this__u8e3s4, gVector) {
    return this.j1m_1.o13(_this__u8e3s4, gVector);
  };
  FreeDGAlgebraContextImpl.prototype.o13 = function (_this__u8e3s4, gVector) {
    return this.u1m(isInterface(_this__u8e3s4, Scalar) ? _this__u8e3s4 : THROW_CCE(), gVector);
  };
  FreeDGAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.j1m_1.p13(_this__u8e3s4, scalar);
  };
  FreeDGAlgebraContextImpl.prototype.v1m = function (_this__u8e3s4, scalar) {
    return this.j1m_1.q13(_this__u8e3s4, scalar);
  };
  FreeDGAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.v1m(_this__u8e3s4, isInterface(scalar, Scalar) ? scalar : THROW_CCE());
  };
  FreeDGAlgebraContextImpl.prototype.w1m = function (_this__u8e3s4, other) {
    return this.j1m_1.r13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.w1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.x1m = function (_this__u8e3s4, sign) {
    return this.j1m_1.s13(_this__u8e3s4, sign);
  };
  FreeDGAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.x1m(_this__u8e3s4, sign);
  };
  FreeDGAlgebraContextImpl.prototype.y1m = function (_this__u8e3s4, scalar) {
    return this.j1m_1.t13(_this__u8e3s4, scalar);
  };
  FreeDGAlgebraContextImpl.prototype.t13 = function (_this__u8e3s4, scalar) {
    return this.y1m(_this__u8e3s4, isInterface(scalar, Scalar) ? scalar : THROW_CCE());
  };
  FreeDGAlgebraContextImpl.prototype.z1m = function (_this__u8e3s4, other) {
    return this.j1m_1.u13(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.u13 = function (_this__u8e3s4, other) {
    return this.z1m(_this__u8e3s4, other);
  };
  FreeDGAlgebraContextImpl.prototype.a1n = function (_this__u8e3s4, gVector) {
    return this.j1m_1.v13(_this__u8e3s4, gVector);
  };
  FreeDGAlgebraContextImpl.prototype.v13 = function (_this__u8e3s4, gVector) {
    return this.a1n(_this__u8e3s4, gVector);
  };
  FreeDGAlgebraContextImpl.prototype.b1n = function (_this__u8e3s4, gVector) {
    return this.j1m_1.w13(_this__u8e3s4, gVector);
  };
  FreeDGAlgebraContextImpl.prototype.w13 = function (_this__u8e3s4, gVector) {
    return this.b1n(_this__u8e3s4, gVector);
  };
  FreeDGAlgebraContextImpl.prototype.c1n = function (_this__u8e3s4) {
    return this.j1m_1.e14(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.e14 = function (_this__u8e3s4) {
    return this.c1n(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.j1m_1.x13(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.j1m_1.y13(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.d1n = function (_this__u8e3s4) {
    return this.j1m_1.z13(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.d1n(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.e1n = function (_this__u8e3s4) {
    return this.j1m_1.a14(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.a14 = function (_this__u8e3s4) {
    return this.e1n(_this__u8e3s4);
  };
  FreeDGAlgebraContextImpl.prototype.b14 = function () {
    return this.k1m_1;
  };
  FreeDGAlgebraContextImpl.$metadata$ = classMeta('FreeDGAlgebraContextImpl', [FreeDGAlgebraContext, DGAlgebraContext]);
  function dgAlgebra$factory() {
    return getPropertyCallableRef('dgAlgebra', 1, KProperty1, function (receiver) {
      return _get_dgAlgebra__ci9nm4(receiver);
    }, null);
  }
  function cohomology$factory_2() {
    return getPropertyCallableRef('cohomology', 1, KProperty1, function (receiver) {
      return receiver.e11();
    }, null);
  }
  function InternalPrintConfig$Companion$default$ref_0($boundThis) {
    var l = function (p0) {
      return $boundThis.h19(p0);
    };
    l.callableName = 'default';
    return l;
  }
  function getDerivationValue($this, valueList, monomial, valueDegree) {
    var tmp$ret$9;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = $this.p1l().m1n(monomial);
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$7;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivationValue.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map_0 = get_indices_0($this.c1g());
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
      var inductionVariable = tmp0_map_0.h5_1;
      var last = tmp0_map_0.i5_1;
      if (inductionVariable <= last)
        do {
          var item_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivationValue.<anonymous>.<anonymous>' call
          tmp$ret$0 = item_0 === item.r1n_1 ? item.p1n_1 - 1 | 0 : 0;
          tmp0_mapTo_0.a(tmp$ret$0);
        }
         while (!(item_0 === last));
      tmp$ret$1 = tmp0_mapTo_0;
      tmp$ret$2 = tmp$ret$1;
      var derivedSeparatedExponentList = tmp$ret$2;
      var derivedSeparatedMonomial = Monomial_init_$Create$($this.s14(), $this.c1g(), derivedSeparatedExponentList);
      var tmp$ret$4;
      // Inline function 'kotlin.run' call
      var tmp1_run = $this.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivationValue.<anonymous>.<anonymous>' call
      tmp$ret$3 = tmp1_run.r13(tmp1_run.w13(item.p1n_1, $this.s11(derivedSeparatedMonomial, derivedSeparatedMonomial.b15())), valueList.l(item.r1n_1));
      tmp$ret$4 = tmp$ret$3;
      var derivedSeparatedGVector = tmp$ret$4;
      var remainingGVector = $this.s11(item.n1n_1, item.n1n_1.b15());
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      var tmp2_run = $this.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivationValue.<anonymous>.<anonymous>' call
      tmp$ret$5 = tmp2_run.s13(tmp2_run.r13(derivedSeparatedGVector, remainingGVector), item.q1n_1);
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = tmp$ret$6;
      tmp0_mapTo.a(tmp$ret$7);
    }
    tmp$ret$8 = tmp0_mapTo;
    tmp$ret$9 = tmp$ret$8;
    var terms = tmp$ret$9;
    var tmp$ret$11;
    // Inline function 'kotlin.run' call
    var tmp1_run_0 = $this.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$10;
    // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivationValue.<anonymous>' call
    tmp$ret$10 = tmp1_run_0.l13(terms, valueDegree);
    tmp$ret$11 = tmp$ret$10;
    return tmp$ret$11;
  }
  function getAlgebraMapValue($this, target, valueList, monomial) {
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = target.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getAlgebraMapValue.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapIndexed' call
    var tmp0_mapIndexed = monomial.d1k_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$(tmp0_mapIndexed.length);
    var index = 0;
    var indexedObject = tmp0_mapIndexed;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getAlgebraMapValue.<anonymous>.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp1__anonymous__uwfjfc = tmp1;
      tmp$ret$0 = tmp0_run.c14(valueList.l(tmp1__anonymous__uwfjfc), item);
      tmp0_mapIndexedTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapIndexedTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp0_run.f14(tmp$ret$2);
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function Companion_25() {
    Companion_instance_25 = this;
  }
  Companion_25.prototype.s1k = function (matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig) {
    return new FreeGAlgebraImpl(matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig);
  };
  Companion_25.prototype.s1n = function (matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig, $mask0, $handler) {
    if (!(($mask0 & 8) === 0)) {
      getInternalPrintConfig = InternalPrintConfig$Companion$default$ref_0(Companion_getInstance_44());
    }
    return this.s1k(matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig);
  };
  Companion_25.prototype.t1n = function (matrixSpace, indeterminateList) {
    var tmp = Companion_getInstance_26();
    var tmp_0 = IntDegreeGroup_getInstance();
    return tmp.s1n(matrixSpace, tmp_0, indeterminateList, null, 8, null);
  };
  Companion_25.$metadata$ = objectMeta('Companion');
  var Companion_instance_25;
  function Companion_getInstance_26() {
    if (Companion_instance_25 == null)
      new Companion_25();
    return Companion_instance_25;
  }
  function FreeGAlgebra$getDerivation$lambda(it) {
    return toString(it);
  }
  function FreeGAlgebra$getDerivation$lambda_0(this$0, $derivationDegree, $gVectorValueList) {
    return function (k) {
      var sourceVectorSpace = this$0.m11(k);
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.s14().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivation.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.y18(k, $derivationDegree);
      tmp$ret$1 = tmp$ret$0;
      var targetDegree = tmp$ret$1;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.map' call
      var tmp1_map = sourceVectorSpace.s19();
      var tmp$ret$3;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
      var tmp0_iterator = tmp1_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$2;
        // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getDerivation.<anonymous>.<anonymous>' call
        tmp$ret$2 = getDerivationValue(this$0, $gVectorValueList, item, targetDegree);
        tmp0_mapTo.a(tmp$ret$2);
      }
      tmp$ret$3 = tmp0_mapTo;
      tmp$ret$4 = tmp$ret$3;
      return tmp$ret$4;
    };
  }
  function FreeGAlgebra$getGAlgebraMap$lambda(it) {
    return toString(it);
  }
  function FreeGAlgebra$getGAlgebraMap$lambda_0(this$0, $target, $gVectorValueList) {
    return function (k) {
      var sourceVectorSpace = this$0.m11(k);
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = sourceVectorSpace.s19();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator = tmp0_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebra.getGAlgebraMap.<anonymous>.<anonymous>' call
        var gVectorValue = getAlgebraMapValue(this$0, $target, $gVectorValueList, item);
        tmp$ret$0 = gVectorValue;
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    };
  }
  function FreeGAlgebra$convertDegree$lambda($freeMonoidMorphism) {
    return function (monomial) {
      return $freeMonoidMorphism.x1n(monomial);
    };
  }
  function FreeGAlgebra$toString$lambda($printConfig) {
    return function (it) {
      return it.v1a($printConfig);
    };
  }
  function FreeGAlgebra() {
  }
  FreeGAlgebra.$metadata$ = interfaceMeta('FreeGAlgebra', [MonoidGAlgebra, Printable]);
  function FreeGAlgebraContext() {
  }
  FreeGAlgebraContext.$metadata$ = interfaceMeta('FreeGAlgebraContext', [GAlgebraContext]);
  function getName($this, indeterminateList) {
    var indeterminateString = joinToString$default(indeterminateList, ', ', null, null, 0, null, FreeGAlgebraImpl$Companion$getName$lambda, 30, null);
    return '\u039B(' + indeterminateString + ')';
  }
  function FreeGAlgebraImpl$Companion$getName$lambda(it) {
    return it.toString();
  }
  function Companion_26() {
    Companion_instance_26 = this;
  }
  Companion_26.$metadata$ = objectMeta('Companion');
  var Companion_instance_26;
  function Companion_getInstance_27() {
    if (Companion_instance_26 == null)
      new Companion_26();
    return Companion_instance_26;
  }
  function _no_name_provided__qut3iv($tmp0_groupingBy) {
    this.c1o_1 = $tmp0_groupingBy;
  }
  _no_name_provided__qut3iv.prototype.a1 = function () {
    return this.c1o_1.f();
  };
  _no_name_provided__qut3iv.prototype.d1o = function (element) {
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebraImpl.<anonymous>' call
    tmp$ret$0 = element;
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv.prototype.b1 = function (element) {
    return this.d1o(element instanceof Indeterminate ? element : THROW_CCE());
  };
  _no_name_provided__qut3iv.$metadata$ = classMeta(undefined, [Grouping]);
  function FreeGAlgebraImpl(matrixSpace, degreeGroup, indeterminateList, getInternalPrintConfig) {
    Companion_getInstance_27();
    this.e1o_1 = degreeGroup;
    this.f1o_1 = indeterminateList;
    this.g1o_1 = Companion_getInstance_28().j1o(matrixSpace, degreeGroup, new FreeMonoid(degreeGroup, indeterminateList), getName(Companion_getInstance_27(), indeterminateList), getInternalPrintConfig);
    var tmp$ret$8;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.filter' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.groupingBy' call
    var tmp0_groupingBy = this.f1o_1;
    tmp$ret$0 = new _no_name_provided__qut3iv(tmp0_groupingBy);
    var tmp1_filter = eachCount(tmp$ret$0);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = LinkedHashMap_init_$Create$();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$1 = tmp1_filter.d1().f();
    var tmp0_iterator = tmp$ret$1;
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebraImpl.<anonymous>' call
      tmp$ret$2 = element.f1() > 1;
      if (tmp$ret$2) {
        tmp0_filterTo.u(element.e1(), element.f1());
      }
    }
    tmp$ret$3 = tmp0_filterTo;
    tmp$ret$4 = tmp$ret$3;
    var tmp2_map = tmp$ret$4;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(tmp2_map.i());
    var tmp$ret$5;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$5 = tmp2_map.d1().f();
    var tmp0_iterator_0 = tmp$ret$5;
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      var tmp$ret$6;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebraImpl.<anonymous>' call
      tmp$ret$6 = item.e1();
      tmp0_mapTo.a(tmp$ret$6);
    }
    tmp$ret$7 = tmp0_mapTo;
    tmp$ret$8 = tmp$ret$7;
    var duplicatedIndeterminateList = tmp$ret$8;
    // Inline function 'kotlin.require' call
    var tmp3_require = duplicatedIndeterminateList.p();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp3_require) {
      var tmp$ret$9;
      // Inline function 'com.github.shwaka.kohomology.free.FreeGAlgebraImpl.<anonymous>' call
      tmp$ret$9 = 'indeterminateList contains duplicates: ' + duplicatedIndeterminateList;
      var message = tmp$ret$9;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    this.h1o_1 = new FreeGAlgebraContextImpl(this);
    this.i1o_1 = this;
  }
  FreeGAlgebraImpl.prototype.s14 = function () {
    return this.e1o_1;
  };
  FreeGAlgebraImpl.prototype.c1g = function () {
    return this.f1o_1;
  };
  FreeGAlgebraImpl.prototype.o11 = function () {
    return this.g1o_1.o11();
  };
  FreeGAlgebraImpl.prototype.p11 = function () {
    return this.g1o_1.p11();
  };
  FreeGAlgebraImpl.prototype.k11 = function () {
    return this.g1o_1.k11();
  };
  FreeGAlgebraImpl.prototype.f12 = function () {
    return this.g1o_1.f12();
  };
  FreeGAlgebraImpl.prototype.l11 = function () {
    return this.g1o_1.l11();
  };
  FreeGAlgebraImpl.prototype.h11 = function () {
    return this.g1o_1.h11();
  };
  FreeGAlgebraImpl.prototype.p1l = function () {
    return this.g1o_1.p1l();
  };
  FreeGAlgebraImpl.prototype.f11 = function () {
    return this.g1o_1.f11();
  };
  FreeGAlgebraImpl.prototype.xb = function () {
    return this.g1o_1.xb();
  };
  FreeGAlgebraImpl.prototype.j11 = function () {
    return this.g1o_1.j11();
  };
  FreeGAlgebraImpl.prototype.n11 = function () {
    return this.g1o_1.n11();
  };
  FreeGAlgebraImpl.prototype.e12 = function () {
    return this.g1o_1.e12();
  };
  FreeGAlgebraImpl.prototype.d12 = function () {
    return this.g1o_1.d12();
  };
  FreeGAlgebraImpl.prototype.q1l = function (a, b) {
    return this.g1o_1.x11(a, b);
  };
  FreeGAlgebraImpl.prototype.x11 = function (a, b) {
    return this.q1l(a, b);
  };
  FreeGAlgebraImpl.prototype.r1l = function (a, b) {
    return this.q1l(a, b);
  };
  FreeGAlgebraImpl.prototype.s1l = function (gVector) {
    return this.g1o_1.w11(gVector);
  };
  FreeGAlgebraImpl.prototype.w11 = function (gVector) {
    return this.s1l(gVector);
  };
  FreeGAlgebraImpl.prototype.t1l = function (gVector) {
    return this.s1l(gVector);
  };
  FreeGAlgebraImpl.prototype.u1l = function (gVectorOrZero, degree) {
    return this.g1o_1.v11(gVectorOrZero, degree);
  };
  FreeGAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.u1l(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.v1l = function (gVectorOrZero, degree) {
    return this.u1l(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.k1o = function (gVector) {
    return this.g1o_1.g12(gVector);
  };
  FreeGAlgebraImpl.prototype.g12 = function (gVector) {
    return this.k1o(gVector);
  };
  FreeGAlgebraImpl.prototype.l1o = function (gVector) {
    return this.k1o(gVector);
  };
  FreeGAlgebraImpl.prototype.w1l = function (a, b) {
    return this.g1o_1.c12(a, b);
  };
  FreeGAlgebraImpl.prototype.c12 = function (a, b) {
    return this.w1l(a, b);
  };
  FreeGAlgebraImpl.prototype.x1l = function (a, b) {
    return this.w1l(a, b);
  };
  FreeGAlgebraImpl.prototype.y1l = function (basisName, degree) {
    return this.g1o_1.s11(basisName, degree);
  };
  FreeGAlgebraImpl.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.y1l(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.z1l = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.y1l(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.a1m = function (vector, degree) {
    return this.g1o_1.q11(vector, degree);
  };
  FreeGAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.a1m(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.b1m = function (vector, degree) {
    return this.a1m(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeGAlgebraImpl.prototype.c1m = function (vector, degree) {
    return this.g1o_1.r11(vector, degree);
  };
  FreeGAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.c1m(vector, degree);
  };
  FreeGAlgebraImpl.prototype.d1m = function (vector, degree) {
    return this.c1m(vector, degree);
  };
  FreeGAlgebraImpl.prototype.m11 = function (degree) {
    return this.g1o_1.m11(degree);
  };
  FreeGAlgebraImpl.prototype.t11 = function (degree) {
    return this.g1o_1.t11(degree);
  };
  FreeGAlgebraImpl.prototype.u11 = function (degree) {
    return this.g1o_1.u11(degree);
  };
  FreeGAlgebraImpl.prototype.e1m = function (scalar, gVector) {
    return this.g1o_1.z11(scalar, gVector);
  };
  FreeGAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.e1m(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeGAlgebraImpl.prototype.f1m = function (scalar, gVector) {
    return this.e1m(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeGAlgebraImpl.prototype.m1o = function (a, b) {
    return this.g1o_1.a12(a, b);
  };
  FreeGAlgebraImpl.prototype.a12 = function (a, b) {
    return this.m1o(a, b);
  };
  FreeGAlgebraImpl.prototype.n1o = function (a, b) {
    return this.m1o(a, b);
  };
  FreeGAlgebraImpl.prototype.o1o = function (a, b) {
    return this.g1o_1.b12(a, b);
  };
  FreeGAlgebraImpl.prototype.b12 = function (a, b) {
    return this.o1o(a, b);
  };
  FreeGAlgebraImpl.prototype.p1o = function (a, b) {
    return this.o1o(a, b);
  };
  FreeGAlgebraImpl.prototype.q1o = function (generators, text) {
    return this.g1o_1.h12(generators, text);
  };
  FreeGAlgebraImpl.prototype.h12 = function (generators, text) {
    return this.q1o(generators, text);
  };
  FreeGAlgebraImpl.prototype.r1o = function (generators, text) {
    return this.q1o(generators, text);
  };
  FreeGAlgebraImpl.prototype.g1m = function (a, b) {
    return this.g1o_1.y11(a, b);
  };
  FreeGAlgebraImpl.prototype.y11 = function (a, b) {
    return this.g1m(a, b);
  };
  FreeGAlgebraImpl.prototype.h1m = function (a, b) {
    return this.g1m(a, b);
  };
  FreeGAlgebraImpl.prototype.toString = function () {
    return this.g1o_1.toString();
  };
  FreeGAlgebraImpl.prototype.t14 = function () {
    return this.h1o_1;
  };
  FreeGAlgebraImpl.prototype.y1j = function () {
    return this.i1o_1;
  };
  FreeGAlgebraImpl.$metadata$ = classMeta('FreeGAlgebraImpl', [FreeGAlgebra, MonoidGAlgebra, Printable]);
  function FreeGAlgebraContextImpl(gAlgebra) {
    this.s1o_1 = gAlgebra;
    this.t1o_1 = new GAlgebraContextImpl(gAlgebra);
  }
  FreeGAlgebraContextImpl.prototype.b14 = function () {
    return this.s1o_1;
  };
  FreeGAlgebraContextImpl.prototype.p11 = function () {
    return this.t1o_1.p11();
  };
  FreeGAlgebraContextImpl.prototype.u12 = function () {
    return this.t1o_1.u12();
  };
  FreeGAlgebraContextImpl.prototype.v12 = function () {
    return this.t1o_1.v12();
  };
  FreeGAlgebraContextImpl.prototype.j11 = function () {
    return this.t1o_1.j11();
  };
  FreeGAlgebraContextImpl.prototype.w12 = function () {
    return this.t1o_1.w12();
  };
  FreeGAlgebraContextImpl.prototype.e12 = function () {
    return this.t1o_1.e12();
  };
  FreeGAlgebraContextImpl.prototype.x12 = function () {
    return this.t1o_1.x12();
  };
  FreeGAlgebraContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.t1o_1.z12(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.t1o_1.a13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.t1o_1.b13(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.t1o_1.c13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.t1o_1.d13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.m1m = function (_this__u8e3s4, other) {
    return this.t1o_1.e13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.e13 = function (_this__u8e3s4, other) {
    return this.m1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.n1m = function (_this__u8e3s4, other) {
    return this.t1o_1.f13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.f13 = function (_this__u8e3s4, other) {
    return this.n1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.t1o_1.g13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.t1o_1.h13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.o1m = function (_this__u8e3s4, other) {
    return this.t1o_1.i13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.i13 = function (_this__u8e3s4, other) {
    return this.o1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.p1m = function (_this__u8e3s4, other) {
    return this.t1o_1.j13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.j13 = function (_this__u8e3s4, other) {
    return this.p1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.q1m = function (_this__u8e3s4, exponent) {
    return this.t1o_1.c14(_this__u8e3s4, exponent);
  };
  FreeGAlgebraContextImpl.prototype.c14 = function (_this__u8e3s4, exponent) {
    return this.q1m(_this__u8e3s4, exponent);
  };
  FreeGAlgebraContextImpl.prototype.r1m = function (_this__u8e3s4, exponent) {
    return this.t1o_1.d14(_this__u8e3s4, exponent);
  };
  FreeGAlgebraContextImpl.prototype.d14 = function (_this__u8e3s4, exponent) {
    return this.r1m(_this__u8e3s4, exponent);
  };
  FreeGAlgebraContextImpl.prototype.s1m = function (_this__u8e3s4) {
    return this.t1o_1.f14(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.f14 = function (_this__u8e3s4) {
    return this.s1m(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.t1o_1.k13(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.t1m = function (_this__u8e3s4, degree) {
    return this.t1o_1.l13(_this__u8e3s4, degree);
  };
  FreeGAlgebraContextImpl.prototype.l13 = function (_this__u8e3s4, degree) {
    return this.t1m(_this__u8e3s4, (degree == null ? true : isInterface(degree, Degree)) ? degree : THROW_CCE());
  };
  FreeGAlgebraContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.t1o_1.m13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.t1o_1.n13(_this__u8e3s4, numVector);
  };
  FreeGAlgebraContextImpl.prototype.u1m = function (_this__u8e3s4, gVector) {
    return this.t1o_1.o13(_this__u8e3s4, gVector);
  };
  FreeGAlgebraContextImpl.prototype.o13 = function (_this__u8e3s4, gVector) {
    return this.u1m(isInterface(_this__u8e3s4, Scalar) ? _this__u8e3s4 : THROW_CCE(), gVector);
  };
  FreeGAlgebraContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.t1o_1.p13(_this__u8e3s4, scalar);
  };
  FreeGAlgebraContextImpl.prototype.v1m = function (_this__u8e3s4, scalar) {
    return this.t1o_1.q13(_this__u8e3s4, scalar);
  };
  FreeGAlgebraContextImpl.prototype.q13 = function (_this__u8e3s4, scalar) {
    return this.v1m(_this__u8e3s4, isInterface(scalar, Scalar) ? scalar : THROW_CCE());
  };
  FreeGAlgebraContextImpl.prototype.w1m = function (_this__u8e3s4, other) {
    return this.t1o_1.r13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.r13 = function (_this__u8e3s4, other) {
    return this.w1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.x1m = function (_this__u8e3s4, sign) {
    return this.t1o_1.s13(_this__u8e3s4, sign);
  };
  FreeGAlgebraContextImpl.prototype.s13 = function (_this__u8e3s4, sign) {
    return this.x1m(_this__u8e3s4, sign);
  };
  FreeGAlgebraContextImpl.prototype.y1m = function (_this__u8e3s4, scalar) {
    return this.t1o_1.t13(_this__u8e3s4, scalar);
  };
  FreeGAlgebraContextImpl.prototype.t13 = function (_this__u8e3s4, scalar) {
    return this.y1m(_this__u8e3s4, isInterface(scalar, Scalar) ? scalar : THROW_CCE());
  };
  FreeGAlgebraContextImpl.prototype.z1m = function (_this__u8e3s4, other) {
    return this.t1o_1.u13(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.u13 = function (_this__u8e3s4, other) {
    return this.z1m(_this__u8e3s4, other);
  };
  FreeGAlgebraContextImpl.prototype.a1n = function (_this__u8e3s4, gVector) {
    return this.t1o_1.v13(_this__u8e3s4, gVector);
  };
  FreeGAlgebraContextImpl.prototype.v13 = function (_this__u8e3s4, gVector) {
    return this.a1n(_this__u8e3s4, gVector);
  };
  FreeGAlgebraContextImpl.prototype.b1n = function (_this__u8e3s4, gVector) {
    return this.t1o_1.w13(_this__u8e3s4, gVector);
  };
  FreeGAlgebraContextImpl.prototype.w13 = function (_this__u8e3s4, gVector) {
    return this.b1n(_this__u8e3s4, gVector);
  };
  FreeGAlgebraContextImpl.prototype.c1n = function (_this__u8e3s4) {
    return this.t1o_1.e14(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.e14 = function (_this__u8e3s4) {
    return this.c1n(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.t1o_1.x13(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.t1o_1.y13(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.d1n = function (_this__u8e3s4) {
    return this.t1o_1.z13(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.z13 = function (_this__u8e3s4) {
    return this.d1n(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.e1n = function (_this__u8e3s4) {
    return this.t1o_1.a14(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.prototype.a14 = function (_this__u8e3s4) {
    return this.e1n(_this__u8e3s4);
  };
  FreeGAlgebraContextImpl.$metadata$ = classMeta('FreeGAlgebraContextImpl', [FreeGAlgebraContext, GAlgebraContext]);
  function Companion_27() {
    Companion_instance_27 = this;
  }
  Companion_27.prototype.j1o = function (matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig) {
    return MonoidGAlgebraImpl_init_$Create$(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig);
  };
  Companion_27.$metadata$ = objectMeta('Companion');
  var Companion_instance_27;
  function Companion_getInstance_28() {
    if (Companion_instance_27 == null)
      new Companion_27();
    return Companion_instance_27;
  }
  function MonoidGAlgebra() {
  }
  MonoidGAlgebra.$metadata$ = interfaceMeta('MonoidGAlgebra', [GAlgebra]);
  function MonoidGAlgebraImpl_init_$Init$(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig, $this) {
    MonoidGAlgebraImpl.call($this, new MonoidGAlgebraFactory(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig));
    return $this;
  }
  function MonoidGAlgebraImpl_init_$Create$(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig) {
    return MonoidGAlgebraImpl_init_$Init$(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig, Object.create(MonoidGAlgebraImpl.prototype));
  }
  function MonoidGAlgebraImpl(factory) {
    this.u1o_1 = factory.j1p_1;
    this.v1o_1 = factory.d1p_1;
    this.w1o_1 = factory.k1p_1;
    this.x1o_1 = factory.l1p_1;
    this.y1o_1 = factory.f1p_1.f12();
    this.z1o_1 = factory.f1p_1;
    this.a1p_1 = new GAlgebraContextImpl(this);
    this.b1p_1 = factory.j1p_1;
    this.c1p_1 = this;
  }
  MonoidGAlgebraImpl.prototype.o11 = function () {
    return this.u1o_1.o11();
  };
  MonoidGAlgebraImpl.prototype.s14 = function () {
    return this.u1o_1.s14();
  };
  MonoidGAlgebraImpl.prototype.p11 = function () {
    return this.u1o_1.p11();
  };
  MonoidGAlgebraImpl.prototype.k11 = function () {
    return this.u1o_1.k11();
  };
  MonoidGAlgebraImpl.prototype.l11 = function () {
    return this.u1o_1.l11();
  };
  MonoidGAlgebraImpl.prototype.xb = function () {
    return this.u1o_1.xb();
  };
  MonoidGAlgebraImpl.prototype.j11 = function () {
    return this.u1o_1.j11();
  };
  MonoidGAlgebraImpl.prototype.d12 = function () {
    return this.u1o_1.d12();
  };
  MonoidGAlgebraImpl.prototype.r1l = function (a, b) {
    return this.u1o_1.x11(a, b);
  };
  MonoidGAlgebraImpl.prototype.x11 = function (a, b) {
    return this.r1l(a, b);
  };
  MonoidGAlgebraImpl.prototype.t1l = function (gVector) {
    return this.u1o_1.w11(gVector);
  };
  MonoidGAlgebraImpl.prototype.w11 = function (gVector) {
    return this.t1l(gVector);
  };
  MonoidGAlgebraImpl.prototype.v1l = function (gVectorOrZero, degree) {
    return this.u1o_1.v11(gVectorOrZero, degree);
  };
  MonoidGAlgebraImpl.prototype.v11 = function (gVectorOrZero, degree) {
    return this.v1l(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  MonoidGAlgebraImpl.prototype.x1l = function (a, b) {
    return this.u1o_1.c12(a, b);
  };
  MonoidGAlgebraImpl.prototype.c12 = function (a, b) {
    return this.x1l(a, b);
  };
  MonoidGAlgebraImpl.prototype.z1l = function (basisName, degree) {
    return this.u1o_1.s11(basisName, degree);
  };
  MonoidGAlgebraImpl.prototype.s11 = function (basisName, degree) {
    var tmp = isInterface(basisName, MonoidElement) ? basisName : THROW_CCE();
    return this.z1l(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  MonoidGAlgebraImpl.prototype.b1m = function (vector, degree) {
    return this.u1o_1.q11(vector, degree);
  };
  MonoidGAlgebraImpl.prototype.q11 = function (vector, degree) {
    return this.b1m(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  MonoidGAlgebraImpl.prototype.d1m = function (vector, degree) {
    return this.u1o_1.r11(vector, degree);
  };
  MonoidGAlgebraImpl.prototype.r11 = function (vector, degree) {
    return this.d1m(vector, degree);
  };
  MonoidGAlgebraImpl.prototype.m11 = function (degree) {
    return this.u1o_1.m11(degree);
  };
  MonoidGAlgebraImpl.prototype.t11 = function (degree) {
    return this.u1o_1.t11(degree);
  };
  MonoidGAlgebraImpl.prototype.u11 = function (degree) {
    return this.u1o_1.u11(degree);
  };
  MonoidGAlgebraImpl.prototype.f1m = function (scalar, gVector) {
    return this.u1o_1.z11(scalar, gVector);
  };
  MonoidGAlgebraImpl.prototype.z11 = function (scalar, gVector) {
    return this.f1m(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  MonoidGAlgebraImpl.prototype.h1m = function (a, b) {
    return this.u1o_1.y11(a, b);
  };
  MonoidGAlgebraImpl.prototype.y11 = function (a, b) {
    return this.h1m(a, b);
  };
  MonoidGAlgebraImpl.prototype.toString = function () {
    return this.u1o_1.toString();
  };
  MonoidGAlgebraImpl.prototype.h11 = function () {
    return this.v1o_1;
  };
  MonoidGAlgebraImpl.prototype.f11 = function () {
    return this.w1o_1;
  };
  MonoidGAlgebraImpl.prototype.e12 = function () {
    return this.x1o_1;
  };
  MonoidGAlgebraImpl.prototype.f12 = function () {
    return this.y1o_1;
  };
  MonoidGAlgebraImpl.prototype.p1l = function () {
    return this.z1o_1;
  };
  MonoidGAlgebraImpl.prototype.t14 = function () {
    return this.a1p_1;
  };
  MonoidGAlgebraImpl.prototype.n11 = function () {
    return this.b1p_1;
  };
  MonoidGAlgebraImpl.$metadata$ = classMeta('MonoidGAlgebraImpl', [MonoidGAlgebra, GVectorSpace]);
  function getBasisNames($this, degree) {
    return $this.f1p_1.m1p(degree);
  }
  function getVectorSpace($this, degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = $this.i1p_1;
    var value = tmp0_getOrPut.t(degree);
    var tmp;
    if (value == null) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.MonoidGAlgebraFactory.getVectorSpace.<anonymous>' call
      var tmp_0 = Companion_getInstance_55();
      var tmp_1 = $this.d1p_1.j11();
      var tmp_2 = getBasisNames($this, degree);
      tmp$ret$0 = tmp_0.n1p(tmp_1, tmp_2, null, 4, null);
      var answer = tmp$ret$0;
      tmp0_getOrPut.u(degree, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  }
  function getVectorSpace_0($this, degree) {
    return getVectorSpace($this, $this.e1p_1.zn(degree));
  }
  function getMultiplication($this, p, q) {
    var source1 = getVectorSpace($this, p);
    var source2 = getVectorSpace($this, q);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.e1p_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.MonoidGAlgebraFactory.getMultiplication.<anonymous>' call
    tmp$ret$0 = tmp0_run.y18(p, q);
    tmp$ret$1 = tmp$ret$0;
    var target = getVectorSpace($this, tmp$ret$1);
    return ValueBilinearMap_init_$Create$(source1, source2, target, $this.d1p_1, generateGetValue_0($this, target));
  }
  function generateGetValue_0($this, target) {
    return MonoidGAlgebraFactory$generateGetValue$lambda($this, target);
  }
  function listDegreesForAugmentedDegree_0($this, augmentedDegree) {
    return $this.f1p_1.o1p(augmentedDegree);
  }
  function MonoidGAlgebraFactory$listDegreesForAugmentedDegree$ref($boundThis) {
    var l = function (p0) {
      return listDegreesForAugmentedDegree_0($boundThis, p0);
    };
    l.callableName = 'listDegreesForAugmentedDegree';
    return l;
  }
  function MonoidGAlgebraFactory$getVectorSpace$ref($boundThis) {
    var l = function (p0) {
      return getVectorSpace($boundThis, p0);
    };
    l.callableName = 'getVectorSpace';
    return l;
  }
  function MonoidGAlgebraFactory$multiplication$lambda(this$0) {
    return function (p, q) {
      return getMultiplication(this$0, p, q);
    };
  }
  function MonoidGAlgebraFactory$generateGetValue$lambda(this$0, $target) {
    return function (monoidElement1, monoidElement2) {
      var tmp$ret$3;
      // Inline function 'kotlin.let' call
      var tmp0_let = this$0.f1p_1.p1p(monoidElement1, monoidElement2);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.free.MonoidGAlgebraFactory.generateGetValue.<anonymous>.<anonymous>' call
      var tmp0_subject = tmp0_let;
      var tmp;
      if (tmp0_subject instanceof Zero_0) {
        tmp = $target.b1b();
      } else {
        if (tmp0_subject instanceof Signed) {
          var tmp1_container = tmp0_let;
          var monoidElement = tmp1_container.w3();
          var sign = tmp1_container.x3();
          var vectorWithoutSign = $target.y1a(monoidElement);
          var tmp2_subject = sign;
          var tmp0 = tmp2_subject.a2_1;
          var tmp_0;
          switch (tmp0) {
            case 0:
              tmp_0 = vectorWithoutSign;
              break;
            case 1:
              var tmp$ret$1;
              // Inline function 'kotlin.run' call
              var tmp0_run = $target.t14();
              // Inline function 'kotlin.contracts.contract' call
              var tmp$ret$0;
              // Inline function 'com.github.shwaka.kohomology.free.MonoidGAlgebraFactory.generateGetValue.<anonymous>.<anonymous>.<anonymous>' call
              tmp$ret$0 = tmp0_run.s1p(vectorWithoutSign);
              tmp$ret$1 = tmp$ret$0;

              tmp_0 = tmp$ret$1;
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }
          tmp = tmp_0;
        } else {
          noWhenBranchMatchedException();
        }
      }
      tmp$ret$2 = tmp;
      tmp$ret$3 = tmp$ret$2;
      return tmp$ret$3;
    };
  }
  function MonoidGAlgebraFactory(matrixSpace, degreeGroup, monoid, name, getInternalPrintConfig) {
    this.d1p_1 = matrixSpace;
    this.e1p_1 = degreeGroup;
    this.f1p_1 = monoid;
    this.g1p_1 = name;
    this.h1p_1 = getInternalPrintConfig;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.i1p_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp_1 = Companion_getInstance_16();
    var tmp_2 = this.d1p_1.j11();
    var tmp_3 = MonoidGAlgebraFactory$listDegreesForAugmentedDegree$ref(this);
    var tmp_4 = this.f1p_1.o11();
    tmp_0.j1p_1 = tmp_1.j19(tmp_2, this.e1p_1, this.g1p_1, this.h1p_1, tmp_3, tmp_4, MonoidGAlgebraFactory$getVectorSpace$ref(this));
    var tmp_5 = this;
    var tmp_6 = 'Multiplication(' + this.g1p_1 + ')';
    tmp_5.k1p_1 = GBilinearMap_init_$Create$(this.d1p_1, this.j1p_1, this.j1p_1, this.j1p_1, 0, tmp_6, MonoidGAlgebraFactory$multiplication$lambda(this));
    this.l1p_1 = this.j1p_1.r11(getVectorSpace_0(this, 0).y1a(this.f1p_1.e12()), 0);
  }
  MonoidGAlgebraFactory.prototype.h11 = function () {
    return this.d1p_1;
  };
  MonoidGAlgebraFactory.$metadata$ = classMeta('MonoidGAlgebraFactory');
  function Companion_28() {
    Companion_instance_28 = this;
  }
  Companion_28.$metadata$ = objectMeta('Companion');
  var Companion_instance_28;
  function Companion_getInstance_29() {
    if (Companion_instance_28 == null)
      new Companion_28();
    return Companion_instance_28;
  }
  function addExponentLists($this, exponentList1, exponentList2) {
    var tmp = 0;
    var tmp_0 = exponentList1.length;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.addExponentLists.<anonymous>' call
      tmp$ret$0 = exponentList1[tmp_2] + exponentList2[tmp_2] | 0;
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function _get_monomialListGeneratorWithAugmentedDegree__ota534($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = monomialListGeneratorWithAugmentedDegree$factory();
    tmp$ret$0 = $this.l1n_1.f1();
    return tmp$ret$0;
  }
  function listElementsForAugmentedDegree($this, augmentedDegree) {
    var elementListWithIntDegree = _get_monomialListGeneratorWithAugmentedDegree__ota534($this).x1p(new IntDegree(augmentedDegree));
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(elementListWithIntDegree, 10));
    var tmp0_iterator = elementListWithIntDegree.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.listElementsForAugmentedDegree.<anonymous>' call
      tmp$ret$0 = new Monomial($this.f1n_1, $this.g1n_1, item.d1k_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function separate($this, monomial, index) {
    var separatedExponent = monomial.d1k_1[index];
    if (separatedExponent === 0)
      return null;
    var tmp = 0;
    var tmp_0 = monomial.d1k_1.length;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.separate.<anonymous>' call
      tmp$ret$0 = tmp_2 === index ? 0 : monomial.d1k_1[tmp_2];
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    var remainingExponentList = tmp_1;
    var remainingMonomial = new Monomial($this.f1n_1, $this.g1n_1, remainingExponentList);
    var separatedIndeterminate = $this.g1n_1.l(index);
    var tmp_3 = 0;
    var tmp_4 = monomial.d1k_1.length;
    var tmp_5 = new Int32Array(tmp_4);
    while (tmp_3 < tmp_4) {
      var tmp_6 = tmp_3;
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.separate.<anonymous>' call
      tmp$ret$1 = tmp_6 === index ? monomial.d1k_1[tmp_6] : 0;
      tmp_5[tmp_6] = tmp$ret$1;
      tmp_3 = tmp_3 + 1 | 0;
    }
    var separatedExponentList = tmp_5;
    var multipliedMonomialOrZero = $this.d1q(new Monomial($this.f1n_1, $this.g1n_1, separatedExponentList), remainingMonomial);
    var tmp0_subject = multipliedMonomialOrZero;
    var tmp_7;
    if (tmp0_subject instanceof Signed) {
      tmp_7 = multipliedMonomialOrZero.r1p_1;
    } else {
      if (tmp0_subject instanceof Zero_0) {
        throw Exception_init_$Create$("This can't happen!");
      } else {
        noWhenBranchMatchedException();
      }
    }
    var sign = tmp_7;
    return new MonomialSeparation(remainingMonomial, separatedIndeterminate, separatedExponent, sign, index);
  }
  function FreeMonoid$indeterminateList$delegate$lambda(this$0) {
    return function () {
      return this$0.g1n_1.e1q();
    };
  }
  function FreeMonoid$boundedness$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.g1n_1.g1q()) {
        tmp = this$0.g1n_1.f1q();
      } else {
        tmp = null;
      }
      var bound = tmp;
      var tmp0_subject = this$0.g1n_1;
      var tmp_0;
      if (tmp0_subject instanceof PositiveIndeterminateList) {
        tmp_0 = new Boundedness(bound, 0);
      } else {
        if (tmp0_subject instanceof NegativeIndeterminateList) {
          tmp_0 = new Boundedness(0, bound);
        } else {
          noWhenBranchMatchedException();
        }
      }
      return tmp_0;
    };
  }
  function FreeMonoid$monomialListGeneratorWithAugmentedDegree$delegate$lambda$lambda(this$0) {
    return function (indeterminate) {
      return Indeterminate_1(indeterminate.f1k_1, this$0.f1n_1.a1f(indeterminate.g1k_1));
    };
  }
  function FreeMonoid$monomialListGeneratorWithAugmentedDegree$delegate$lambda(this$0) {
    return function () {
      var indeterminateRawList = this$0.g1n_1.h1q(FreeMonoid$monomialListGeneratorWithAugmentedDegree$delegate$lambda$lambda(this$0));
      var indeterminateListWithAugDeg = Companion_getInstance_30().i1q(IntDegreeGroup_getInstance(), indeterminateRawList);
      return new MonomialListGenerator(IntDegreeGroup_getInstance(), indeterminateListWithAugDeg);
    };
  }
  function FreeMonoid(degreeGroup, indeterminateList) {
    Companion_getInstance_29();
    this.f1n_1 = degreeGroup;
    this.g1n_1 = Companion_getInstance_30().i1q(this.f1n_1, indeterminateList);
    var tmp = this;
    tmp.h1n_1 = lazy(FreeMonoid$indeterminateList$delegate$lambda(this));
    var tmp_0 = this;
    var tmp_1 = 0;
    var tmp_2 = this.g1n_1.i();
    var tmp_3 = new Int32Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.unit.<anonymous>' call
      tmp$ret$0 = 0;
      tmp_3[tmp_4] = tmp$ret$0;
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.i1n_1 = new Monomial(this.f1n_1, this.g1n_1, tmp_3);
    this.j1n_1 = true;
    var tmp_5 = this;
    tmp_5.k1n_1 = lazy(FreeMonoid$boundedness$delegate$lambda(this));
    var tmp_6 = this;
    tmp_6.l1n_1 = lazy(FreeMonoid$monomialListGeneratorWithAugmentedDegree$delegate$lambda(this));
  }
  FreeMonoid.prototype.s14 = function () {
    return this.f1n_1;
  };
  FreeMonoid.prototype.c1g = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = indeterminateList$factory();
    tmp$ret$0 = this.h1n_1.f1();
    return tmp$ret$0;
  };
  FreeMonoid.prototype.e12 = function () {
    return this.i1n_1;
  };
  FreeMonoid.prototype.f12 = function () {
    return this.j1n_1;
  };
  FreeMonoid.prototype.o11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = boundedness$factory();
    tmp$ret$0 = this.k1n_1.f1();
    return tmp$ret$0;
  };
  FreeMonoid.prototype.j1q = function (exponentList) {
    return new Monomial(this.f1n_1, this.g1n_1, exponentList);
  };
  FreeMonoid.prototype.d1q = function (monoidElement1, monoidElement2) {
    var size = this.g1n_1.i();
    var exponentList = addExponentLists(this, monoidElement1.d1k_1, monoidElement2.d1k_1);
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (this.g1n_1.l(i).g1k_1.s1e() ? exponentList[i] >= 2 : false)
          return Zero_getInstance_0();
      }
       while (inductionVariable < size);
    var sign = Sign_PLUS_getInstance();
    var inductionVariable_0 = 0;
    if (inductionVariable_0 < size)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (this.g1n_1.l(i_0).g1k_1.s1e() ? monoidElement1.d1k_1[i_0] === 1 : false) {
          var inductionVariable_1 = 0;
          if (inductionVariable_1 < i_0)
            do {
              var j = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              if (this.g1n_1.l(j).g1k_1.s1e() ? monoidElement2.d1k_1[j] === 1 : false) {
                sign = sign.t5();
              }
            }
             while (inductionVariable_1 < i_0);
        }
      }
       while (inductionVariable_0 < size);
    var monomial = new Monomial(this.f1n_1, this.g1n_1, exponentList);
    return new Signed(monomial, sign);
  };
  FreeMonoid.prototype.p1p = function (monoidElement1, monoidElement2) {
    var tmp = monoidElement1 instanceof Monomial ? monoidElement1 : THROW_CCE();
    return this.d1q(tmp, monoidElement2 instanceof Monomial ? monoidElement2 : THROW_CCE());
  };
  FreeMonoid.prototype.m1p = function (degree) {
    var augmentedDegree = this.f1n_1.a1f(degree);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filter' call
    var tmp0_filter = listElementsForAugmentedDegree(this, augmentedDegree);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$_0();
    var tmp0_iterator = tmp0_filter.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.listElements.<anonymous>' call
      tmp$ret$0 = equals(element.b15(), degree);
      if (tmp$ret$0) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$1 = tmp0_filterTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  FreeMonoid.prototype.o1p = function (augmentedDegree) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = listElementsForAugmentedDegree(this, augmentedDegree);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.listDegreesForAugmentedDegree.<anonymous>' call
      tmp$ret$0 = item.b15();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return distinct(tmp$ret$2);
  };
  FreeMonoid.prototype.m1n = function (monomial) {
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapNotNull' call
    var tmp0_mapNotNull = this.g1n_1.a1q_1;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapNotNullTo' call
    var tmp0_mapNotNullTo = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = tmp0_mapNotNull.h5_1;
    var last = tmp0_mapNotNull.i5_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoid.allSeparations.<anonymous>' call
        tmp$ret$0 = separate(this, monomial, element);
        var tmp0_safe_receiver = tmp$ret$0;
        if (tmp0_safe_receiver == null)
          null;
        else {
          var tmp$ret$1;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp0_mapNotNullTo.a(tmp0_safe_receiver);
          tmp$ret$1 = Unit_getInstance();
        }
      }
       while (!(element === last));
    tmp$ret$2 = tmp0_mapNotNullTo;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  };
  FreeMonoid.prototype.toString = function () {
    var indeterminateListString = this.g1n_1.n1q(', ', null, 2, null);
    return 'FreeMonoid(' + indeterminateListString + ')';
  };
  FreeMonoid.$metadata$ = classMeta('FreeMonoid', [Monoid]);
  function MonomialSeparation(remainingMonomial, separatedIndeterminate, separatedExponent, sign, index) {
    this.n1n_1 = remainingMonomial;
    this.o1n_1 = separatedIndeterminate;
    this.p1n_1 = separatedExponent;
    this.q1n_1 = sign;
    this.r1n_1 = index;
    if (this.p1n_1 <= 0)
      throw Exception_init_$Create$('separatedExponent must be positive');
  }
  MonomialSeparation.prototype.o1q = function () {
    return this.n1n_1;
  };
  MonomialSeparation.prototype.p1q = function () {
    return this.p1n_1;
  };
  MonomialSeparation.prototype.q1q = function () {
    return this.q1n_1;
  };
  MonomialSeparation.prototype.r1q = function () {
    return this.r1n_1;
  };
  MonomialSeparation.prototype.toString = function () {
    return 'MonomialSeparation(remainingMonomial=' + this.n1n_1 + ', separatedIndeterminate=' + this.o1n_1 + ', separatedExponent=' + this.p1n_1 + ', sign=' + this.q1n_1 + ', index=' + this.r1n_1 + ')';
  };
  MonomialSeparation.prototype.hashCode = function () {
    var result = this.n1n_1.hashCode();
    result = imul(result, 31) + this.o1n_1.hashCode() | 0;
    result = imul(result, 31) + this.p1n_1 | 0;
    result = imul(result, 31) + this.q1n_1.hashCode() | 0;
    result = imul(result, 31) + this.r1n_1 | 0;
    return result;
  };
  MonomialSeparation.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MonomialSeparation))
      return false;
    var tmp0_other_with_cast = other instanceof MonomialSeparation ? other : THROW_CCE();
    if (!this.n1n_1.equals(tmp0_other_with_cast.n1n_1))
      return false;
    if (!this.o1n_1.equals(tmp0_other_with_cast.o1n_1))
      return false;
    if (!(this.p1n_1 === tmp0_other_with_cast.p1n_1))
      return false;
    if (!this.q1n_1.equals(tmp0_other_with_cast.q1n_1))
      return false;
    if (!(this.r1n_1 === tmp0_other_with_cast.r1n_1))
      return false;
    return true;
  };
  MonomialSeparation.$metadata$ = classMeta('MonomialSeparation');
  function FreeMonoidMorphismByDegreeChange(source, degreeMorphism) {
    this.u1n_1 = source;
    this.v1n_1 = degreeMorphism;
    var tmp = this;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoidMorphismByDegreeChange.target.<anonymous>' call
    var targetDegreeGroup = this.v1n_1.a15();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.u1n_1.c1g();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.FreeMonoidMorphismByDegreeChange.target.<anonymous>.<anonymous>' call
      tmp$ret$0 = item.b1o(this.v1n_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var targetIndeterminateList = tmp$ret$2;
    tmp$ret$3 = new FreeMonoid(targetDegreeGroup, targetIndeterminateList);
    tmp$ret$4 = tmp$ret$3;
    tmp.w1n_1 = tmp$ret$4;
  }
  FreeMonoidMorphismByDegreeChange.prototype.z14 = function () {
    return this.u1n_1;
  };
  FreeMonoidMorphismByDegreeChange.prototype.s1q = function () {
    return this.v1n_1;
  };
  FreeMonoidMorphismByDegreeChange.prototype.x1n = function (monoidElement) {
    return this.w1n_1.j1q(monoidElement.d1k_1);
  };
  FreeMonoidMorphismByDegreeChange.$metadata$ = classMeta('FreeMonoidMorphismByDegreeChange', [MonoidMorphismWithDegreeChange]);
  function listMonomialsInternal($this, degree, index) {
    if (index < 0 ? true : index > $this.u1p_1.i())
      throw Exception_init_$Create$("This can't happen! (illegal index: " + index + ')');
    if (index === $this.u1p_1.i()) {
      return degree.op() ? listOf($this.w1p_1) : emptyList();
    }
    var cacheKey = new Pair(degree, index);
    var tmp$ret$7;
    // Inline function 'kotlin.collections.getOrPut' call
    var tmp0_getOrPut = $this.v1p_1;
    var value = tmp0_getOrPut.t(cacheKey);
    var tmp;
    if (value == null) {
      var tmp$ret$6;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.MonomialListGenerator.listMonomialsInternal.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = $this.t1p_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.MonomialListGenerator.listMonomialsInternal.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.z19(degree, $this.u1p_1.l(index).g1k_1);
      tmp$ret$1 = tmp$ret$0;
      var newDegree = tmp$ret$1;
      var tmp_0;
      if ($this.u1p_1.u1q(newDegree)) {
        var tmp$ret$5;
        // Inline function 'kotlin.collections.mapNotNull' call
        var tmp1_mapNotNull = listMonomialsInternal($this, newDegree, index);
        var tmp$ret$4;
        // Inline function 'kotlin.collections.mapNotNullTo' call
        var tmp0_mapNotNullTo = ArrayList_init_$Create$_0();
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator = tmp1_mapNotNull.f();
        while (tmp0_iterator.g()) {
          var element = tmp0_iterator.h();
          // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
          var tmp$ret$2;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.MonomialListGenerator.listMonomialsInternal.<anonymous>.<anonymous>' call
          tmp$ret$2 = element.t1q(index);
          var tmp0_safe_receiver = tmp$ret$2;
          if (tmp0_safe_receiver == null)
            null;
          else {
            var tmp$ret$3;
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            tmp0_mapNotNullTo.a(tmp0_safe_receiver);
            tmp$ret$3 = Unit_getInstance();
          }
        }
        tmp$ret$4 = tmp0_mapNotNullTo;
        tmp$ret$5 = tmp$ret$4;
        tmp_0 = tmp$ret$5;
      } else {
        tmp_0 = emptyList();
      }
      var listWithNonZeroAtIndex = tmp_0;
      var listWithZeroAtIndex = listMonomialsInternal($this, degree, index + 1 | 0);
      tmp$ret$6 = plus(listWithNonZeroAtIndex, listWithZeroAtIndex);
      var answer = tmp$ret$6;
      tmp0_getOrPut.u(cacheKey, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    tmp$ret$7 = tmp;
    return tmp$ret$7;
  }
  function MonomialListGenerator(degreeGroup, indeterminateList) {
    this.t1p_1 = degreeGroup;
    this.u1p_1 = indeterminateList;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.v1p_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp_1 = 0;
    var tmp_2 = this.u1p_1.i();
    var tmp_3 = new Int32Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.MonomialListGenerator.unit.<anonymous>' call
      tmp$ret$1 = 0;
      tmp_3[tmp_4] = tmp$ret$1;
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.w1p_1 = new Monomial(this.t1p_1, this.u1p_1, tmp_3);
  }
  MonomialListGenerator.prototype.s14 = function () {
    return this.t1p_1;
  };
  MonomialListGenerator.prototype.c1g = function () {
    return this.u1p_1;
  };
  MonomialListGenerator.prototype.x1p = function (degree) {
    if (!this.u1p_1.u1q(degree))
      return emptyList();
    return listMonomialsInternal(this, degree, 0);
  };
  MonomialListGenerator.$metadata$ = classMeta('MonomialListGenerator');
  function indeterminateList$factory() {
    return getPropertyCallableRef('indeterminateList', 1, KProperty1, function (receiver) {
      return receiver.c1g();
    }, null);
  }
  function boundedness$factory() {
    return getPropertyCallableRef('boundedness', 1, KProperty1, function (receiver) {
      return receiver.o11();
    }, null);
  }
  function monomialListGeneratorWithAugmentedDegree$factory() {
    return getPropertyCallableRef('monomialListGeneratorWithAugmentedDegree', 1, KProperty1, function (receiver) {
      return _get_monomialListGeneratorWithAugmentedDegree__ota534(receiver);
    }, null);
  }
  function StringIndeterminateName_init_$Init$(name, tex, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      tex = null;
    StringIndeterminateName.call($this, name, tex);
    return $this;
  }
  function StringIndeterminateName_init_$Create$(name, tex, $mask0, $marker) {
    return StringIndeterminateName_init_$Init$(name, tex, $mask0, $marker, Object.create(StringIndeterminateName.prototype));
  }
  function StringIndeterminateName(name, tex) {
    this.v1q_1 = new Identifier_0(name);
    this.w1q_1 = this.v1q_1.a1o_1;
    var tmp = this;
    var tmp0_elvis_lhs = tex;
    tmp.x1q_1 = tmp0_elvis_lhs == null ? name : tmp0_elvis_lhs;
  }
  StringIndeterminateName.prototype.p1e = function () {
    return this.v1q_1;
  };
  StringIndeterminateName.prototype.toString = function () {
    return this.w1q_1;
  };
  StringIndeterminateName.prototype.v1a = function (printConfig) {
    var tmp0_subject = printConfig.t1j_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = this.w1q_1;
        break;
      case 1:
        tmp = this.x1q_1;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  StringIndeterminateName.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof StringIndeterminateName)
      other;
    else
      THROW_CCE();
    if (!(this.w1q_1 === other.w1q_1))
      return false;
    if (!(this.x1q_1 === other.x1q_1))
      return false;
    return true;
  };
  StringIndeterminateName.prototype.hashCode = function () {
    var result = getStringHashCode(this.w1q_1);
    result = imul(31, result) + getStringHashCode(this.x1q_1) | 0;
    return result;
  };
  StringIndeterminateName.$metadata$ = classMeta('StringIndeterminateName', [IndeterminateName]);
  function Indeterminate(name, degree) {
    this.f1k_1 = name;
    this.g1k_1 = degree;
  }
  Indeterminate.prototype.xb = function () {
    return this.f1k_1;
  };
  Indeterminate.prototype.b15 = function () {
    return this.g1k_1;
  };
  Indeterminate.prototype.toString = function () {
    return toString(this.f1k_1);
  };
  Indeterminate.prototype.v1a = function (printConfig) {
    return this.f1k_1.v1a(printConfig);
  };
  Indeterminate.prototype.b1o = function (degreeMorphism) {
    return new Indeterminate(this.f1k_1, degreeMorphism.k1a(this.g1k_1));
  };
  Indeterminate.prototype.hashCode = function () {
    var result = hashCode(this.f1k_1);
    result = imul(result, 31) + hashCode(this.g1k_1) | 0;
    return result;
  };
  Indeterminate.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Indeterminate))
      return false;
    var tmp0_other_with_cast = other instanceof Indeterminate ? other : THROW_CCE();
    if (!equals(this.f1k_1, tmp0_other_with_cast.f1k_1))
      return false;
    if (!equals(this.g1k_1, tmp0_other_with_cast.g1k_1))
      return false;
    return true;
  };
  Indeterminate.$metadata$ = classMeta('Indeterminate', [Printable]);
  function IndeterminateName() {
  }
  IndeterminateName.$metadata$ = interfaceMeta('IndeterminateName', [Printable]);
  function Indeterminate_0(name, degree) {
    return new Indeterminate(StringIndeterminateName_init_$Create$(name, null, 2, null), degree);
  }
  function Indeterminate_1(name, degree) {
    return new Indeterminate(name, new IntDegree(degree));
  }
  function Companion_29() {
    Companion_instance_29 = this;
  }
  Companion_29.prototype.i1q = function (degreeGroup, indeterminateList) {
    var tmp$ret$16;
    // Inline function 'kotlin.run' call
    var tmp0_run = degreeGroup.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$15;
    // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>' call
    var tmp;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp_0;
      if (isInterface(indeterminateList, Collection)) {
        tmp_0 = indeterminateList.p();
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = indeterminateList.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
        tmp$ret$1 = tmp0_run.b1f(element.g1k_1) === 0;
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0) {
      var tmp$ret$4;
      // Inline function 'kotlin.collections.filter' call
      var tmp$ret$3;
      // Inline function 'kotlin.collections.filterTo' call
      var tmp0_filterTo = ArrayList_init_$Create$_0();
      var tmp0_iterator_0 = indeterminateList.f();
      while (tmp0_iterator_0.g()) {
        var element_0 = tmp0_iterator_0.h();
        var tmp$ret$2;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
        tmp$ret$2 = tmp0_run.b1f(element_0.g1k_1) === 0;
        if (tmp$ret$2) {
          tmp0_filterTo.a(element_0);
        }
      }
      tmp$ret$3 = tmp0_filterTo;
      tmp$ret$4 = tmp$ret$3;
      var degree0IndeterminateList = tmp$ret$4;
      throw IllegalArgumentException_init_$Create$('Cannot consider indeterminate of degree zero: ' + joinToString$default(degree0IndeterminateList, ', ', null, null, 0, null, null, 62, null));
    } else {
      var tmp$ret$5;
      $l$block_2: {
        // Inline function 'kotlin.collections.all' call
        var tmp_1;
        if (isInterface(indeterminateList, Collection)) {
          tmp_1 = indeterminateList.p();
        } else {
          tmp_1 = false;
        }
        if (tmp_1) {
          tmp$ret$5 = true;
          break $l$block_2;
        }
        var tmp0_iterator_1 = indeterminateList.f();
        while (tmp0_iterator_1.g()) {
          var element_1 = tmp0_iterator_1.h();
          var tmp$ret$6;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
          tmp$ret$6 = tmp0_run.b1f(element_1.g1k_1) > 0;
          if (!tmp$ret$6) {
            tmp$ret$5 = false;
            break $l$block_2;
          }
        }
        tmp$ret$5 = true;
      }
      if (tmp$ret$5) {
        tmp = new PositiveIndeterminateList(degreeGroup, indeterminateList);
      } else {
        var tmp$ret$7;
        $l$block_4: {
          // Inline function 'kotlin.collections.all' call
          var tmp_2;
          if (isInterface(indeterminateList, Collection)) {
            tmp_2 = indeterminateList.p();
          } else {
            tmp_2 = false;
          }
          if (tmp_2) {
            tmp$ret$7 = true;
            break $l$block_4;
          }
          var tmp0_iterator_2 = indeterminateList.f();
          while (tmp0_iterator_2.g()) {
            var element_2 = tmp0_iterator_2.h();
            var tmp$ret$8;
            // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
            tmp$ret$8 = tmp0_run.b1f(element_2.g1k_1) < 0;
            if (!tmp$ret$8) {
              tmp$ret$7 = false;
              break $l$block_4;
            }
          }
          tmp$ret$7 = true;
        }
        if (tmp$ret$7) {
          tmp = new NegativeIndeterminateList(degreeGroup, indeterminateList);
        } else {
          var tmp$ret$11;
          // Inline function 'kotlin.collections.filter' call
          var tmp$ret$10;
          // Inline function 'kotlin.collections.filterTo' call
          var tmp0_filterTo_0 = ArrayList_init_$Create$_0();
          var tmp0_iterator_3 = indeterminateList.f();
          while (tmp0_iterator_3.g()) {
            var element_3 = tmp0_iterator_3.h();
            var tmp$ret$9;
            // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
            tmp$ret$9 = tmp0_run.b1f(element_3.g1k_1) > 0;
            if (tmp$ret$9) {
              tmp0_filterTo_0.a(element_3);
            }
          }
          tmp$ret$10 = tmp0_filterTo_0;
          tmp$ret$11 = tmp$ret$10;
          var positiveIndeterminateList = tmp$ret$11;
          var tmp$ret$14;
          // Inline function 'kotlin.collections.filter' call
          var tmp$ret$13;
          // Inline function 'kotlin.collections.filterTo' call
          var tmp0_filterTo_1 = ArrayList_init_$Create$_0();
          var tmp0_iterator_4 = indeterminateList.f();
          while (tmp0_iterator_4.g()) {
            var element_4 = tmp0_iterator_4.h();
            var tmp$ret$12;
            // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.from.<anonymous>.<anonymous>' call
            tmp$ret$12 = tmp0_run.b1f(element_4.g1k_1) < 0;
            if (tmp$ret$12) {
              tmp0_filterTo_1.a(element_4);
            }
          }
          tmp$ret$13 = tmp0_filterTo_1;
          tmp$ret$14 = tmp$ret$13;
          var negativeIndeterminateList = tmp$ret$14;
          var tmp_3 = 'Cannot consider a list of indeterminate containing both positive and negative degrees.\n' + ('  positive: ' + joinToString$default(positiveIndeterminateList, ', ', null, null, 0, null, null, 62, null) + '}\n');
          throw IllegalArgumentException_init_$Create$(tmp_3 + ('  negative: ' + joinToString$default(negativeIndeterminateList, ', ', null, null, 0, null, null, 62, null)));
        }
      }
    }
    tmp$ret$15 = tmp;
    tmp$ret$16 = tmp$ret$15;
    return tmp$ret$16;
  };
  Companion_29.$metadata$ = objectMeta('Companion');
  var Companion_instance_29;
  function Companion_getInstance_30() {
    if (Companion_instance_29 == null)
      new Companion_29();
    return Companion_instance_29;
  }
  function IndeterminateList$isOddOnly$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = this$0.z1p_1;
        var tmp;
        if (isInterface(tmp0_all, Collection)) {
          tmp = tmp0_all.p();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = tmp0_all.f();
        while (tmp0_iterator.g()) {
          var element = tmp0_iterator.h();
          var tmp$ret$1;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.IndeterminateList.isOddOnly$delegate.<anonymous>.<anonymous>' call
          tmp$ret$1 = isOdd_0(this$0.y1p_1.a1f(element.g1k_1));
          if (!tmp$ret$1) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function IndeterminateList$degreeSumAsInt$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = this$0.z1p_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator = tmp0_map.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.IndeterminateList.degreeSumAsInt$delegate.<anonymous>.<anonymous>' call
        tmp$ret$0 = this$0.y1p_1.a1f(item.g1k_1);
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      return sum(tmp$ret$2);
    };
  }
  function IndeterminateList(degreeGroup, rawList) {
    Companion_getInstance_30();
    this.y1p_1 = degreeGroup;
    this.z1p_1 = rawList;
    this.a1q_1 = get_indices_0(this.z1p_1);
    var tmp = this;
    tmp.b1q_1 = lazy(IndeterminateList$isOddOnly$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.c1q_1 = lazy(IndeterminateList$degreeSumAsInt$delegate$lambda(this));
  }
  IndeterminateList.prototype.s14 = function () {
    return this.y1p_1;
  };
  IndeterminateList.prototype.y1q = function () {
    return this.z1p_1;
  };
  IndeterminateList.prototype.e1q = function () {
    return this.z1p_1;
  };
  IndeterminateList.prototype.i = function () {
    return this.z1p_1.i();
  };
  IndeterminateList.prototype.z1q = function (list) {
    return zip(this.z1p_1, list);
  };
  IndeterminateList.prototype.h1q = function (transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.z1p_1;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      tmp0_mapTo.a(transform(item));
    }
    tmp$ret$0 = tmp0_mapTo;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  IndeterminateList.prototype.a1r = function (transform) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.List' call
    var tmp0_List = this.i();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(tmp0_List);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < tmp0_List)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.IndeterminateList.mapIndexed.<anonymous>' call
        tmp$ret$0 = transform(index, this.z1p_1.l(index));
        list.a(tmp$ret$0);
      }
       while (inductionVariable < tmp0_List);
    tmp$ret$1 = list;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  IndeterminateList.prototype.l = function (index) {
    return this.z1p_1.l(index);
  };
  IndeterminateList.prototype.b1r = function (separator, transform) {
    return joinToString$default(this.z1p_1, separator, null, null, 0, null, transform, 30, null);
  };
  IndeterminateList.prototype.n1q = function (separator, transform, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      transform = null;
    return this.b1r(separator, transform);
  };
  IndeterminateList.prototype.g1q = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = isOddOnly$factory();
    tmp$ret$0 = this.b1q_1.f1();
    return tmp$ret$0;
  };
  IndeterminateList.prototype.f1q = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = degreeSumAsInt$factory();
    tmp$ret$0 = this.c1q_1.f1();
    return tmp$ret$0;
  };
  IndeterminateList.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof IndeterminateList)
      other;
    else
      THROW_CCE();
    if (!equals(this.z1p_1, other.z1p_1))
      return false;
    return true;
  };
  IndeterminateList.prototype.hashCode = function () {
    return hashCode(this.z1p_1);
  };
  IndeterminateList.$metadata$ = classMeta('IndeterminateList');
  function PositiveIndeterminateList(degreeGroup, rawList) {
    IndeterminateList.call(this, degreeGroup, rawList);
    var tmp$ret$0;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.y1p_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp0_iterator = rawList.f();
    while (tmp0_iterator.g()) {
      var indeterminate = tmp0_iterator.h();
      if (tmp0_run.b1f(indeterminate.g1k_1) <= 0)
        throw IllegalArgumentException_init_$Create$('The degree of an indeterminate in PositiveIndeterminateList must be positive');
    }
    tmp$ret$0 = Unit_getInstance();
  }
  PositiveIndeterminateList.prototype.u1q = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.y1p_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.monoid.PositiveIndeterminateList.isAllowedDegree.<anonymous>' call
    tmp$ret$0 = tmp0_run.b1f(degree) >= 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  PositiveIndeterminateList.$metadata$ = classMeta('PositiveIndeterminateList', undefined, undefined, undefined, undefined, IndeterminateList.prototype);
  function NegativeIndeterminateList(degreeGroup, rawList) {
    IndeterminateList.call(this, degreeGroup, rawList);
    var tmp$ret$0;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.y1p_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp0_iterator = rawList.f();
    while (tmp0_iterator.g()) {
      var indeterminate = tmp0_iterator.h();
      if (tmp0_run.b1f(indeterminate.g1k_1) >= 0)
        throw IllegalArgumentException_init_$Create$('The degree of an indeterminate in NegativeIndeterminateList must be negative');
    }
    tmp$ret$0 = Unit_getInstance();
  }
  NegativeIndeterminateList.prototype.u1q = function (degree) {
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.y1p_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.free.monoid.NegativeIndeterminateList.isAllowedDegree.<anonymous>' call
    tmp$ret$0 = tmp0_run.b1f(degree) <= 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  NegativeIndeterminateList.$metadata$ = classMeta('NegativeIndeterminateList', undefined, undefined, undefined, undefined, IndeterminateList.prototype);
  function isOddOnly$factory() {
    return getPropertyCallableRef('isOddOnly', 1, KProperty1, function (receiver) {
      return receiver.g1q();
    }, null);
  }
  function degreeSumAsInt$factory() {
    return getPropertyCallableRef('degreeSumAsInt', 1, KProperty1, function (receiver) {
      return receiver.f1q();
    }, null);
  }
  function MonoidElement() {
  }
  MonoidElement.$metadata$ = interfaceMeta('MonoidElement', [BasisName]);
  function Monoid() {
  }
  Monoid.$metadata$ = interfaceMeta('Monoid');
  function SignedOrZero() {
  }
  SignedOrZero.$metadata$ = classMeta('SignedOrZero');
  function Zero_0() {
    Zero_instance_0 = this;
    SignedOrZero.call(this);
  }
  Zero_0.$metadata$ = objectMeta('Zero', undefined, undefined, undefined, undefined, SignedOrZero.prototype);
  var Zero_instance_0;
  function Zero_getInstance_0() {
    if (Zero_instance_0 == null)
      new Zero_0();
    return Zero_instance_0;
  }
  function Signed(value, sign) {
    SignedOrZero.call(this);
    this.q1p_1 = value;
    this.r1p_1 = sign;
  }
  Signed.prototype.w3 = function () {
    return this.q1p_1;
  };
  Signed.prototype.x3 = function () {
    return this.r1p_1;
  };
  Signed.prototype.toString = function () {
    return 'Signed(value=' + this.q1p_1 + ', sign=' + this.r1p_1 + ')';
  };
  Signed.prototype.hashCode = function () {
    var result = this.q1p_1 == null ? 0 : hashCode(this.q1p_1);
    result = imul(result, 31) + this.r1p_1.hashCode() | 0;
    return result;
  };
  Signed.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Signed))
      return false;
    var tmp0_other_with_cast = other instanceof Signed ? other : THROW_CCE();
    if (!equals(this.q1p_1, tmp0_other_with_cast.q1p_1))
      return false;
    if (!this.r1p_1.equals(tmp0_other_with_cast.r1p_1))
      return false;
    return true;
  };
  Signed.$metadata$ = classMeta('Signed', undefined, undefined, undefined, undefined, SignedOrZero.prototype);
  function MonoidMorphismWithDegreeChange() {
  }
  MonoidMorphismWithDegreeChange.$metadata$ = interfaceMeta('MonoidMorphismWithDegreeChange');
  function Monomial_init_$Init$(degreeGroup, indeterminateList, exponentList, $this) {
    Monomial.call($this, degreeGroup, Companion_getInstance_30().i1q(degreeGroup, indeterminateList), toIntArray(exponentList));
    return $this;
  }
  function Monomial_init_$Create$(degreeGroup, indeterminateList, exponentList) {
    return Monomial_init_$Init$(degreeGroup, indeterminateList, exponentList, Object.create(Monomial.prototype));
  }
  function Companion_30() {
    Companion_instance_30 = this;
  }
  Companion_30.prototype.y1n = function (degreeGroup, indeterminateList, indeterminate) {
    var index = indeterminateList.j2(indeterminate);
    if (index === -1)
      throw NoSuchElementException_init_$Create$('Indeterminate ' + indeterminate + ' is not contained in the indeterminate list ' + indeterminateList);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(indeterminateList, 10));
    var tmp0_iterator = indeterminateList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.Companion.fromIndeterminate.<anonymous>' call
      tmp$ret$0 = item.equals(indeterminate) ? 1 : 0;
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var exponentList = tmp$ret$2;
    return Monomial_init_$Create$(degreeGroup, indeterminateList, exponentList);
  };
  Companion_30.$metadata$ = objectMeta('Companion');
  var Companion_instance_30;
  function Companion_getInstance_31() {
    if (Companion_instance_30 == null)
      new Companion_30();
    return Companion_instance_30;
  }
  function Monomial$degree$delegate$lambda$lambda($tmp0_run, this$0) {
    return function (i, indeterminate) {
      return $tmp0_run.e1f(indeterminate.g1k_1, this$0.d1k_1[i]);
    };
  }
  function Monomial$degree$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.b1k_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.degree$delegate.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.h1f(this$0.c1k_1.a1r(Monomial$degree$delegate$lambda$lambda(tmp0_run, this$0)));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function Monomial$toString$lambda($tmp1_toString) {
    return function (_name_for_destructuring_parameter_0__wldtmu) {
      var indeterminate = _name_for_destructuring_parameter_0__wldtmu.w3();
      var exponent = _name_for_destructuring_parameter_0__wldtmu.x3();
      var tmp0_subject = exponent;
      var tmp;
      switch (tmp0_subject) {
        case 0:
          throw Exception_init_$Create$("This can't happen!");
        case 1:
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
          var tmp2__anonymous__z9zvc9 = indeterminate.f1k_1;
          tmp$ret$0 = toString(tmp2__anonymous__z9zvc9);

          tmp = tmp$ret$0;
          break;
        default:
          var tmp1_subject = $tmp1_toString;
          var tmp0 = tmp1_subject.a2_1;
          var tmp_0;
          switch (tmp0) {
            case 0:
              tmp_0 = exponent.toString();
              break;
            case 1:
              tmp_0 = '{' + exponent + '}';
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }

          var exponentStr = tmp_0;
          var tmp$ret$1;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
          var tmp3__anonymous__ufb84q = indeterminate.f1k_1;
          tmp$ret$1 = toString(tmp3__anonymous__ufb84q);

          tmp = tmp$ret$1 + '^' + exponentStr;
          break;
      }
      return tmp;
    };
  }
  function Monomial$toString$lambda_0($printConfig, $tmp1_toString) {
    return function (_name_for_destructuring_parameter_0__wldtmu) {
      var indeterminate = _name_for_destructuring_parameter_0__wldtmu.w3();
      var exponent = _name_for_destructuring_parameter_0__wldtmu.x3();
      var tmp0_subject = exponent;
      var tmp;
      switch (tmp0_subject) {
        case 0:
          throw Exception_init_$Create$("This can't happen!");
        case 1:
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
          var tmp2__anonymous__z9zvc9 = indeterminate.f1k_1;
          tmp$ret$0 = tmp2__anonymous__z9zvc9.v1a($printConfig);

          tmp = tmp$ret$0;
          break;
        default:
          var tmp1_subject = $tmp1_toString;
          var tmp0 = tmp1_subject.a2_1;
          var tmp_0;
          switch (tmp0) {
            case 0:
              tmp_0 = exponent.toString();
              break;
            case 1:
              tmp_0 = '{' + exponent + '}';
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }

          var exponentStr = tmp_0;
          var tmp$ret$1;
          // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
          var tmp3__anonymous__ufb84q = indeterminate.f1k_1;
          tmp$ret$1 = tmp3__anonymous__ufb84q.v1a($printConfig);

          tmp = tmp$ret$1 + '^' + exponentStr;
          break;
      }
      return tmp;
    };
  }
  function Monomial$toString$lambda_1($indeterminateNameToString, $printType) {
    return function (_name_for_destructuring_parameter_0__wldtmu) {
      var indeterminate = _name_for_destructuring_parameter_0__wldtmu.w3();
      var exponent = _name_for_destructuring_parameter_0__wldtmu.x3();
      var tmp0_subject = exponent;
      var tmp;
      switch (tmp0_subject) {
        case 0:
          throw Exception_init_$Create$("This can't happen!");
        case 1:
          tmp = $indeterminateNameToString(indeterminate.f1k_1);
          break;
        default:
          var tmp1_subject = $printType;
          var tmp0 = tmp1_subject.a2_1;
          var tmp_0;
          switch (tmp0) {
            case 0:
              tmp_0 = exponent.toString();
              break;
            case 1:
              tmp_0 = '{' + exponent + '}';
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }

          var exponentStr = tmp_0;
          tmp = $indeterminateNameToString(indeterminate.f1k_1) + '^' + exponentStr;
          break;
      }
      return tmp;
    };
  }
  function Monomial(degreeGroup, indeterminateList, exponentList) {
    Companion_getInstance_31();
    this.b1k_1 = degreeGroup;
    this.c1k_1 = indeterminateList;
    this.d1k_1 = exponentList;
    if (!(this.c1k_1.i() === this.d1k_1.length))
      throw new InvalidSizeException('Invalid size of the exponent list');
    var tmp = this;
    tmp.e1k_1 = lazy(Monomial$degree$delegate$lambda(this));
  }
  Monomial.prototype.m1r = function () {
    return this.d1k_1;
  };
  Monomial.prototype.b15 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = degree$factory();
    tmp$ret$0 = this.e1k_1.f1();
    return tmp$ret$0;
  };
  Monomial.prototype.t1q = function (index) {
    if (this.c1k_1.l(index).g1k_1.s1e() ? this.d1k_1[index] === 1 : false)
      return null;
    var tmp = 0;
    var tmp_0 = this.c1k_1.i();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.increaseExponentAtIndex.<anonymous>' call
      tmp$ret$0 = tmp_2 === index ? this.d1k_1[tmp_2] + 1 | 0 : this.d1k_1[tmp_2];
      tmp_1[tmp_2] = tmp$ret$0;
      tmp = tmp + 1 | 0;
    }
    var newExponents = tmp_1;
    return new Monomial(this.b1k_1, this.c1k_1, newExponents);
  };
  Monomial.prototype.z1n = function (indeterminateIndex) {
    return this.d1k_1[indeterminateIndex] > 0;
  };
  Monomial.prototype.toString = function () {
    var tmp$ret$3;
    $l$block: {
      // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString' call
      var tmp1_toString = PrintType_PLAIN_getInstance();
      var tmp$ret$2;
      // Inline function 'kotlin.collections.filter' call
      var tmp0_filter = this.c1k_1.z1q(toList_0(this.d1k_1));
      var tmp$ret$1;
      // Inline function 'kotlin.collections.filterTo' call
      var tmp0_filterTo = ArrayList_init_$Create$_0();
      var tmp0_iterator = tmp0_filter.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
        var exponent = element.x3();
        tmp$ret$0 = !(exponent === 0);
        if (tmp$ret$0) {
          tmp0_filterTo.a(element);
        }
      }
      tmp$ret$1 = tmp0_filterTo;
      tmp$ret$2 = tmp$ret$1;
      var indeterminateAndExponentList = tmp$ret$2;
      if (indeterminateAndExponentList.p()) {
        tmp$ret$3 = '1';
        break $l$block;
      }
      tmp$ret$3 = joinToString$default(indeterminateAndExponentList, '', null, null, 0, null, Monomial$toString$lambda(tmp1_toString), 30, null);
    }
    return tmp$ret$3;
  };
  Monomial.prototype.v1a = function (printConfig) {
    var tmp$ret$3;
    $l$block: {
      // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString' call
      var tmp1_toString = printConfig.t1j_1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.filter' call
      var tmp0_filter = this.c1k_1.z1q(toList_0(this.d1k_1));
      var tmp$ret$1;
      // Inline function 'kotlin.collections.filterTo' call
      var tmp0_filterTo = ArrayList_init_$Create$_0();
      var tmp0_iterator = tmp0_filter.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.free.monoid.Monomial.toString.<anonymous>' call
        var exponent = element.x3();
        tmp$ret$0 = !(exponent === 0);
        if (tmp$ret$0) {
          tmp0_filterTo.a(element);
        }
      }
      tmp$ret$1 = tmp0_filterTo;
      tmp$ret$2 = tmp$ret$1;
      var indeterminateAndExponentList = tmp$ret$2;
      if (indeterminateAndExponentList.p()) {
        tmp$ret$3 = '1';
        break $l$block;
      }
      tmp$ret$3 = joinToString$default(indeterminateAndExponentList, '', null, null, 0, null, Monomial$toString$lambda_0(printConfig, tmp1_toString), 30, null);
    }
    return tmp$ret$3;
  };
  Monomial.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof Monomial)
      other;
    else
      THROW_CCE();
    if (!this.c1k_1.equals(other.c1k_1))
      return false;
    if (!contentEquals(this.d1k_1, other.d1k_1))
      return false;
    return true;
  };
  Monomial.prototype.hashCode = function () {
    var result = this.c1k_1.hashCode();
    result = imul(31, result) + contentHashCode(this.d1k_1) | 0;
    return result;
  };
  Monomial.$metadata$ = classMeta('Monomial', [MonoidElement]);
  function degree$factory() {
    return getPropertyCallableRef('degree', 1, KProperty1, function (receiver) {
      return receiver.b15();
    }, null);
  }
  function _get_data__d5abxd($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = data$factory();
    tmp$ret$0 = $this.z1r_1.f1();
    return tmp$ret$0;
  }
  function _get_dataList__i79k6b($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = dataList$factory();
    tmp$ret$0 = $this.a1s_1.f1();
    return tmp$ret$0;
  }
  function computeData($this) {
    var dataList = _get_dataList__i79k6b($this);
    var pivots = computePivots($this, dataList);
    var rowMap = computeRowMapForRowEchelonForm($this, dataList, pivots);
    var exchangeCount = 0;
    return new SparseRowEchelonFormData(rowMap, pivots, exchangeCount);
  }
  function computeDataList($this) {
    var tmp = computeBlockList($this);
    return pmap(tmp, DecomposedSparseRowEchelonForm$computeDataList$lambda($this));
  }
  function computeBlockList($this) {
    var originalRowMap = $this.h1s_1.e1s_1;
    var rowIndices = sorted(toList_1(originalRowMap.i3()));
    var tmp$ret$10;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$7;
    // Inline function 'kotlin.collections.sortedBy' call
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(originalRowMap.i());
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = originalRowMap.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = item.e1();
      var rowInd = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = item.f1();
      var row = tmp$ret$2;
      tmp$ret$3 = new Pair(rowInd, sorted(toList_1(row.i3())));
      tmp0_mapTo.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    var tmp0_sortedBy = tmp$ret$5;
    var tmp$ret$6;
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = DecomposedSparseRowEchelonForm$computeBlockList$lambda;
    tmp$ret$6 = new sam$kotlin_Comparator$0(tmp);
    tmp$ret$7 = sortedWith(tmp0_sortedBy, tmp$ret$6);
    var tmp1_map = tmp$ret$7;
    var tmp$ret$9;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
    var tmp0_iterator_0 = tmp1_map.f();
    while (tmp0_iterator_0.g()) {
      var item_0 = tmp0_iterator_0.h();
      var tmp$ret$8;
      // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>' call
      var rowKeys = item_0.x3();
      tmp$ret$8 = rowKeys;
      tmp0_mapTo_0.a(tmp$ret$8);
    }
    tmp$ret$9 = tmp0_mapTo_0;
    tmp$ret$10 = tmp$ret$9;
    var rowKeysList = tmp$ret$10;
    var tmp_0 = withIndex(rowKeysList);
    var pairsToBeUnited = flatten(pmap(tmp_0, DecomposedSparseRowEchelonForm$computeBlockList$lambda_0(rowKeysList)));
    var unionFind = new UnionFind(rowKeysList.i());
    var tmp0_iterator_1 = pairsToBeUnited.f();
    while (tmp0_iterator_1.g()) {
      var tmp1_loop_parameter = tmp0_iterator_1.h();
      var i = tmp1_loop_parameter.w3();
      var j = tmp1_loop_parameter.x3();
      unionFind.r1s(i, j);
    }
    var tmp$ret$16;
    // Inline function 'kotlin.collections.map' call
    var tmp2_map = unionFind.s1s();
    var tmp$ret$15;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp2_map, 10));
    var tmp0_iterator_2 = tmp2_map.f();
    while (tmp0_iterator_2.g()) {
      var item_1 = tmp0_iterator_2.h();
      var tmp$ret$14;
      // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$12;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_2 = ArrayList_init_$Create$(collectionSizeOrDefault(item_1, 10));
      var tmp0_iterator_3 = item_1.f();
      while (tmp0_iterator_3.g()) {
        var item_2 = tmp0_iterator_3.h();
        var tmp$ret$11;
        // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>.<anonymous>' call
        var rowInd_0 = rowIndices.l(item_2);
        var tmp0_elvis_lhs = originalRowMap.t(rowInd_0);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          throw Exception_init_$Create$("This can't happen!");
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        var row_0 = tmp_1;
        tmp$ret$11 = new Pair(rowInd_0, row_0);
        tmp0_mapTo_2.a(tmp$ret$11);
      }
      tmp$ret$12 = tmp0_mapTo_2;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = toMap(tmp$ret$13);
      tmp0_mapTo_1.a(tmp$ret$14);
    }
    tmp$ret$15 = tmp0_mapTo_1;
    tmp$ret$16 = tmp$ret$15;
    return tmp$ret$16;
  }
  function computePivots($this, dataList) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.fold' call
    var tmp0_fold = emptyList();
    var accumulator = tmp0_fold;
    var tmp0_iterator = dataList.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computePivots.<anonymous>' call
      var tmp1__anonymous__uwfjfc = accumulator;
      tmp$ret$0 = plus(tmp1__anonymous__uwfjfc, element.u1s_1);
      accumulator = tmp$ret$0;
    }
    tmp$ret$1 = accumulator;
    return sorted(tmp$ret$1);
  }
  function computeRowMapForRowEchelonForm($this, dataList, pivots) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var rowMap = tmp$ret$0;
    var tmp0_iterator = dataList.f();
    while (tmp0_iterator.g()) {
      var data = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator_0 = data.t1s_1;
      tmp$ret$1 = tmp0_iterator_0.d1().f();
      var tmp1_iterator = tmp$ret$1;
      while (tmp1_iterator.g()) {
        var tmp2_loop_parameter = tmp1_iterator.h();
        var tmp$ret$2;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$2 = tmp2_loop_parameter.e1();
        var rowIndInBlock = tmp$ret$2;
        var tmp$ret$3;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$3 = tmp2_loop_parameter.f1();
        var row = tmp$ret$3;
        var pivot = data.u1s_1.l(rowIndInBlock);
        var rowInd = pivots.j2(pivot);
        if (rowInd === -1)
          throw Exception_init_$Create$("This can't happen!");
        // Inline function 'kotlin.collections.set' call
        rowMap.u(rowInd, row);
      }
    }
    return rowMap;
  }
  function computeReducedRowMapForRowEchelonForm($this, dataList, pivots) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var rowMap = tmp$ret$0;
    var tmp0_iterator = dataList.f();
    while (tmp0_iterator.g()) {
      var data = tmp0_iterator.h();
      var reducedRowMapOfData = $this.y1r_1.w1s(data.t1s_1, data.u1s_1);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$1 = reducedRowMapOfData.d1().f();
      var tmp1_iterator = tmp$ret$1;
      while (tmp1_iterator.g()) {
        var tmp2_loop_parameter = tmp1_iterator.h();
        var tmp$ret$2;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$2 = tmp2_loop_parameter.e1();
        var rowIndInBlock = tmp$ret$2;
        var tmp$ret$3;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$3 = tmp2_loop_parameter.f1();
        var row = tmp$ret$3;
        var pivot = data.u1s_1.l(rowIndInBlock);
        var rowInd = pivots.j2(pivot);
        if (rowInd === -1)
          throw Exception_init_$Create$("This can't happen!");
        // Inline function 'kotlin.collections.set' call
        rowMap.u(rowInd, row);
      }
    }
    return rowMap;
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.x1s_1 = function_0;
  }
  sam$kotlin_Comparator$0.prototype.x = function (a, b) {
    return this.x1s_1(a, b);
  };
  sam$kotlin_Comparator$0.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function DecomposedSparseRowEchelonForm$data$delegate$lambda(this$0) {
    return function () {
      return computeData(this$0);
    };
  }
  function DecomposedSparseRowEchelonForm$dataList$delegate$lambda(this$0) {
    return function () {
      return computeDataList(this$0);
    };
  }
  function DecomposedSparseRowEchelonForm$computeDataList$lambda(this$0) {
    return function (block) {
      return this$0.y1r_1.y1s(block, this$0.x1r_1);
    };
  }
  function DecomposedSparseRowEchelonForm$computeBlockList$lambda(a, b) {
    var tmp$ret$2;
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>' call
    var rowInd = a.w3();
    tmp$ret$0 = rowInd;
    var tmp = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'com.github.shwaka.kohomology.linalg.DecomposedSparseRowEchelonForm.computeBlockList.<anonymous>' call
    var rowInd_0 = b.w3();
    tmp$ret$1 = rowInd_0;
    tmp$ret$2 = compareValues(tmp, tmp$ret$1);
    return tmp$ret$2;
  }
  function DecomposedSparseRowEchelonForm$computeBlockList$lambda_0($rowKeysList) {
    return function (_name_for_destructuring_parameter_0__wldtmu) {
      var i = _name_for_destructuring_parameter_0__wldtmu.w3();
      var rowKeys1 = _name_for_destructuring_parameter_0__wldtmu.x3();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp$ret$0 = ArrayList_init_$Create$_0();
      var pairsToBeUnitedThreadLocal = tmp$ret$0;
      var inductionVariable = i + 1 | 0;
      var last = $rowKeysList.i();
      var tmp;
      if (inductionVariable < last) {
        do {
          var j = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var rowKeys2 = $rowKeysList.l(j);
          if (hasNonEmptyIntersection(rowKeys1, rowKeys2)) {
            pairsToBeUnitedThreadLocal.a(new Pair(i, j));
          }
        }
         while (inductionVariable < last);
        tmp = Unit_getInstance();
      }
      return pairsToBeUnitedThreadLocal;
    };
  }
  function DecomposedSparseRowEchelonForm(matrixSpace, originalMatrix) {
    RowEchelonForm.call(this, matrixSpace, originalMatrix);
    this.w1r_1 = originalMatrix.c1s_1;
    this.x1r_1 = originalMatrix.d1s_1;
    this.y1r_1 = matrixSpace.c1t();
    var tmp = this;
    tmp.z1r_1 = lazy(DecomposedSparseRowEchelonForm$data$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.a1s_1 = lazy(DecomposedSparseRowEchelonForm$dataList$delegate$lambda(this));
  }
  DecomposedSparseRowEchelonForm.prototype.d1t = function () {
    return this.h11().e1t(_get_data__d5abxd(this).t1s_1, this.w1r_1, this.x1r_1);
  };
  DecomposedSparseRowEchelonForm.prototype.f1t = function () {
    return _get_data__d5abxd(this).u1s_1;
  };
  DecomposedSparseRowEchelonForm.prototype.g1t = function () {
    throw new NotImplementedError('Computation of sign is not implemented for DecomposedSparseRowEchelonForm');
  };
  DecomposedSparseRowEchelonForm.prototype.h1t = function () {
    var reducedRowMap = computeReducedRowMapForRowEchelonForm(this, _get_dataList__i79k6b(this), this.f1t());
    return this.h11().e1t(reducedRowMap, this.w1r_1, this.x1r_1);
  };
  DecomposedSparseRowEchelonForm.$metadata$ = classMeta('DecomposedSparseRowEchelonForm', undefined, undefined, undefined, undefined, RowEchelonForm.prototype);
  function data$factory() {
    return getPropertyCallableRef('data', 1, KProperty1, function (receiver) {
      return _get_data__d5abxd(receiver);
    }, null);
  }
  function dataList$factory() {
    return getPropertyCallableRef('dataList', 1, KProperty1, function (receiver) {
      return _get_dataList__i79k6b(receiver);
    }, null);
  }
  function Companion_31() {
    Companion_instance_31 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.m1t_1 = tmp$ret$0;
  }
  Companion_31.prototype.n1t = function (numVectorSpace) {
    if (this.m1t_1.c3(numVectorSpace)) {
      var tmp = this.m1t_1.t(numVectorSpace);
      return tmp instanceof DenseMatrixSpace ? tmp : THROW_CCE();
    } else {
      var matrixSpace = new DenseMatrixSpace(numVectorSpace);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.m1t_1;
      tmp0_set.u(numVectorSpace, matrixSpace);
      return matrixSpace;
    }
  };
  Companion_31.$metadata$ = objectMeta('Companion');
  var Companion_instance_31;
  function Companion_getInstance_32() {
    if (Companion_instance_31 == null)
      new Companion_31();
    return Companion_instance_31;
  }
  function DenseMatrixSpace$fromNumVectorList$lambda(v) {
    return v.e1q();
  }
  function DenseMatrixSpace(numVectorSpace) {
    Companion_getInstance_32();
    this.q1t_1 = numVectorSpace;
    this.r1t_1 = this.q1t_1.t1t_1;
    this.s1t_1 = new MatrixContextImpl(this);
  }
  DenseMatrixSpace.prototype.j11 = function () {
    return this.q1t_1;
  };
  DenseMatrixSpace.prototype.p11 = function () {
    return this.r1t_1;
  };
  DenseMatrixSpace.prototype.t14 = function () {
    return this.s1t_1;
  };
  DenseMatrixSpace.prototype.v1t = function (matrix) {
    return equals(matrix.w1t_1, this.q1t_1);
  };
  DenseMatrixSpace.prototype.b1u = function (matrix, numVector) {
    if (!this.v1t(matrix))
      throw new IllegalContextException('The denseMatrix ' + matrix + ' does not match the context (' + this + ')');
    if (!this.q1t_1.c1u(numVector))
      throw new IllegalContextException('The numVector ' + numVector + ' does not match the context (' + this.q1t_1 + ')');
    if (!(matrix.z1t_1 === numVector.d1u()))
      throw new InvalidSizeException('Cannot multiply matrix and vector: matrix.colCount != vector.dim');
    var tmp$ret$7;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = matrix.x1t_1;
    var tmp$ret$6;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$5;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.multiply.<anonymous>' call
      var tmp$ret$4;
      // Inline function 'kotlin.run' call
      var tmp0_run = this.r1t_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.multiply.<anonymous>.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map_0 = zip(item, numVector.o1t_1);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
      var tmp0_iterator_0 = tmp0_map_0.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.multiply.<anonymous>.<anonymous>.<anonymous>' call
        tmp$ret$0 = tmp0_run.m13(item_0.v4_1, item_0.w4_1);
        tmp0_mapTo_0.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo_0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp0_run.k13(tmp$ret$2);
      tmp$ret$4 = tmp$ret$3;
      tmp$ret$5 = tmp$ret$4;
      tmp0_mapTo.a(tmp$ret$5);
    }
    tmp$ret$6 = tmp0_mapTo;
    tmp$ret$7 = tmp$ret$6;
    var valueList = tmp$ret$7;
    return this.q1t_1.e1u(valueList);
  };
  DenseMatrixSpace.prototype.f1u = function (matrix, numVector) {
    var tmp = matrix instanceof DenseMatrix ? matrix : THROW_CCE();
    return this.b1u(tmp, numVector instanceof DenseNumVector ? numVector : THROW_CCE());
  };
  DenseMatrixSpace.prototype.g1u = function (matrix) {
    var tmp0_safe_receiver = matrix.a1u_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    var rowEchelonForm = new DenseRowEchelonForm(this, matrix);
    matrix.h1u(rowEchelonForm);
    return rowEchelonForm;
  };
  DenseMatrixSpace.prototype.i1u = function (matrix) {
    return this.g1u(matrix instanceof DenseMatrix ? matrix : THROW_CCE());
  };
  DenseMatrixSpace.prototype.j1u = function (matrix) {
    var rowCount = matrix.z1t_1;
    var colCount = matrix.y1t_1;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, rowCount);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.computeTranspose.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, colCount);
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.computeTranspose.<anonymous>.<anonymous>' call
            tmp$ret$0 = matrix.k1u(item_0, item);
            tmp0_mapTo_0.a(tmp$ret$0);
          }
           while (!(item_0 === last_0));
        tmp$ret$1 = tmp0_mapTo_0;
        tmp$ret$2 = tmp$ret$1;
        tmp$ret$3 = tmp$ret$2;
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    var rowList = tmp$ret$5;
    var tmp0_numVectorSpace = this.q1t_1;
    return new DenseMatrix(tmp0_numVectorSpace, rowList, rowCount, colCount);
  };
  DenseMatrixSpace.prototype.l1u = function (matrix) {
    return this.j1u(matrix instanceof DenseMatrix ? matrix : THROW_CCE());
  };
  DenseMatrixSpace.prototype.m1u = function (rowList, colCount) {
    var rowCount = rowList.i();
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$0 = !rowList.p();
    if (tmp$ret$0) {
      tmp = rowList.l(0).i();
    } else {
      if (!(colCount == null)) {
        tmp = colCount;
      } else {
        throw IllegalArgumentException_init_$Create$('Row list is empty and colCount is not specified');
      }
    }
    var colCountNonNull = tmp;
    return new DenseMatrix(this.q1t_1, rowList, rowCount, colCountNonNull);
  };
  DenseMatrixSpace.prototype.e1t = function (rowMap, rowCount, colCount) {
    var tmp$ret$8;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, rowCount);
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.fromRowMap.<anonymous>' call
        var row = rowMap.t(item);
        var tmp;
        if (row == null) {
          var tmp$ret$2;
          // Inline function 'kotlin.collections.List' call
          var tmp$ret$1;
          // Inline function 'kotlin.collections.MutableList' call
          var list = ArrayList_init_$Create$(colCount);
          // Inline function 'kotlin.repeat' call
          // Inline function 'kotlin.contracts.contract' call
          var inductionVariable_0 = 0;
          if (inductionVariable_0 < colCount)
            do {
              var index = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              // Inline function 'kotlin.collections.MutableList.<anonymous>' call
              var tmp$ret$0;
              // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.fromRowMap.<anonymous>.<anonymous>' call
              tmp$ret$0 = this.r1t_1.x12();
              list.a(tmp$ret$0);
            }
             while (inductionVariable_0 < colCount);
          tmp$ret$1 = list;
          tmp$ret$2 = tmp$ret$1;
          tmp = tmp$ret$2;
        } else {
          var tmp$ret$5;
          // Inline function 'kotlin.collections.map' call
          var tmp0_map_0 = until(0, colCount);
          var tmp$ret$4;
          // Inline function 'kotlin.collections.mapTo' call
          var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
          var inductionVariable_1 = tmp0_map_0.h5_1;
          var last_0 = tmp0_map_0.i5_1;
          if (inductionVariable_1 <= last_0)
            do {
              var item_0 = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              var tmp$ret$3;
              // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.fromRowMap.<anonymous>.<anonymous>' call
              var tmp0_elvis_lhs = row.t(item_0);
              tmp$ret$3 = tmp0_elvis_lhs == null ? this.r1t_1.x12() : tmp0_elvis_lhs;
              tmp0_mapTo_0.a(tmp$ret$3);
            }
             while (!(item_0 === last_0));
          tmp$ret$4 = tmp0_mapTo_0;
          tmp$ret$5 = tmp$ret$4;
          tmp = tmp$ret$5;
        }
        tmp$ret$6 = tmp;
        tmp0_mapTo.a(tmp$ret$6);
      }
       while (!(item === last));
    tmp$ret$7 = tmp0_mapTo;
    tmp$ret$8 = tmp$ret$7;
    var rowList = tmp$ret$8;
    return this.m1u(rowList, colCount);
  };
  DenseMatrixSpace.prototype.o1u = function (matrix1, matrix2) {
    if (!(matrix1.y1t_1 === matrix2.y1t_1))
      throw new InvalidSizeException('Cannot join two matrices of different row counts');
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = zip(matrix1.x1t_1, matrix2.x1t_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.joinMatrices.<anonymous>' call
      var row1 = item.w3();
      var row2 = item.x3();
      tmp$ret$0 = plus(row1, row2);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var rowList = tmp$ret$2;
    var rowCount = matrix1.y1t_1;
    var colCount = matrix1.z1t_1 + matrix2.z1t_1 | 0;
    return new DenseMatrix(this.q1t_1, rowList, rowCount, colCount);
  };
  DenseMatrixSpace.prototype.p1u = function (matrix1, matrix2) {
    var tmp = matrix1 instanceof DenseMatrix ? matrix1 : THROW_CCE();
    return this.o1u(tmp, matrix2 instanceof DenseMatrix ? matrix2 : THROW_CCE());
  };
  DenseMatrixSpace.prototype.q1u = function (matrix, rowRange) {
    var rowList = slice(matrix.x1t_1, rowRange);
    return this.m1u(rowList, matrix.z1t_1);
  };
  DenseMatrixSpace.prototype.r1u = function (matrix, rowRange) {
    return this.q1u(matrix instanceof DenseMatrix ? matrix : THROW_CCE(), rowRange);
  };
  DenseMatrixSpace.prototype.s1u = function (matrix, colRange) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = matrix.x1t_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrixSpace.computeColSlice.<anonymous>' call
      tmp$ret$0 = slice(item, colRange);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var rowList = tmp$ret$2;
    return this.m1u(rowList, count(colRange));
  };
  DenseMatrixSpace.prototype.t1u = function (matrix, colRange) {
    return this.s1u(matrix instanceof DenseMatrix ? matrix : THROW_CCE(), colRange);
  };
  DenseMatrixSpace.prototype.toString = function () {
    return 'DenseMatrixSpace(' + this.r1t_1 + ')';
  };
  DenseMatrixSpace.prototype.u1u = function (numVectors, dim) {
    if (numVectors.p() ? dim == null : false)
      throw IllegalArgumentException_init_$Create$('Vector list is empty and dim is not specified');
    var colList = pmap(numVectors, DenseMatrixSpace$fromNumVectorList$lambda);
    return this.v1u(colList, dim);
  };
  DenseMatrixSpace.prototype.w1u = function (numVectors, dim) {
    return this.u1u(numVectors, dim);
  };
  DenseMatrixSpace.$metadata$ = classMeta('DenseMatrixSpace', [MatrixSpace]);
  function toStringTable($this) {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = $this.x1t_1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrix.toStringTable.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(item, 10));
      var tmp0_iterator_0 = item.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrix.toStringTable.<anonymous>.<anonymous>' call
        tmp$ret$0 = toString(item_0);
        tmp0_mapTo_0.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo_0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      tmp0_mapTo.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    var tmp = tmp$ret$5;
    return StringTable_init_$Create$(tmp, null, 2, null);
  }
  function DenseMatrix(numVectorSpace, rowList, rowCount, colCount) {
    this.w1t_1 = numVectorSpace;
    this.x1t_1 = rowList;
    this.y1t_1 = rowCount;
    this.z1t_1 = colCount;
    this.a1u_1 = null;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.x1t_1;
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseMatrix.<anonymous>' call
        tmp$ret$1 = !(element.i() === this.z1t_1);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0)
      throw new InvalidSizeException('The length of each row must be equal to colCount');
  }
  DenseMatrix.prototype.j11 = function () {
    return this.w1t_1;
  };
  DenseMatrix.prototype.z1u = function () {
    return this.y1t_1;
  };
  DenseMatrix.prototype.a1v = function () {
    return this.z1t_1;
  };
  DenseMatrix.prototype.h1u = function (value) {
    if (!(this.a1u_1 == null))
      throw IllegalStateException_init_$Create$('Cannot assign rowEchelonForm twice');
    this.a1u_1 = value;
  };
  DenseMatrix.prototype.toString = function () {
    return toStringTable(this).toString();
  };
  DenseMatrix.prototype.k1u = function (rowInd, colInd) {
    return this.x1t_1.l(rowInd).l(colInd);
  };
  DenseMatrix.prototype.hashCode = function () {
    var result = hashCode(this.w1t_1);
    result = imul(result, 31) + hashCode(this.x1t_1) | 0;
    result = imul(result, 31) + this.y1t_1 | 0;
    result = imul(result, 31) + this.z1t_1 | 0;
    return result;
  };
  DenseMatrix.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DenseMatrix))
      return false;
    var tmp0_other_with_cast = other instanceof DenseMatrix ? other : THROW_CCE();
    if (!equals(this.w1t_1, tmp0_other_with_cast.w1t_1))
      return false;
    if (!equals(this.x1t_1, tmp0_other_with_cast.x1t_1))
      return false;
    if (!(this.y1t_1 === tmp0_other_with_cast.y1t_1))
      return false;
    if (!(this.z1t_1 === tmp0_other_with_cast.z1t_1))
      return false;
    return true;
  };
  DenseMatrix.$metadata$ = classMeta('DenseMatrix', [Matrix]);
  function Companion_32() {
    Companion_instance_32 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.c1v_1 = tmp$ret$0;
  }
  Companion_32.prototype.d1v = function (field) {
    if (this.c1v_1.c3(field)) {
      var tmp = this.c1v_1.t(field);
      return tmp instanceof DenseNumVectorSpace ? tmp : THROW_CCE();
    } else {
      var numVectorSpace = new DenseNumVectorSpace(field);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.c1v_1;
      tmp0_set.u(field, numVectorSpace);
      return numVectorSpace;
    }
  };
  Companion_32.$metadata$ = objectMeta('Companion');
  var Companion_instance_32;
  function Companion_getInstance_33() {
    if (Companion_instance_32 == null)
      new Companion_32();
    return Companion_instance_32;
  }
  function DenseNumVectorSpace(field) {
    Companion_getInstance_33();
    this.t1t_1 = field;
    this.u1t_1 = new NumVectorContextImpl(this);
  }
  DenseNumVectorSpace.prototype.p11 = function () {
    return this.t1t_1;
  };
  DenseNumVectorSpace.prototype.t14 = function () {
    return this.u1t_1;
  };
  DenseNumVectorSpace.prototype.c1u = function (numVector) {
    return equals(numVector.p1t_1, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.e1v = function (a, b) {
    if (!this.c1u(a))
      throw new IllegalContextException('The denseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.c1u(b))
      throw new IllegalContextException('The denseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1u() === b.d1u()))
      throw new InvalidSizeException('Cannot add numVectors of different dim');
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$_0();
    var result = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.t1t_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = a.o1t_1.i() - 1 | 0;
    var tmp;
    if (inductionVariable <= last) {
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result.a(tmp0_run.g13(a.o1t_1.l(i), b.o1t_1.l(i)));
      }
       while (inductionVariable <= last);
      tmp = Unit_getInstance();
    }
    tmp$ret$1 = tmp;
    return new DenseNumVector(result, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.f1v = function (a, b) {
    var tmp = a instanceof DenseNumVector ? a : THROW_CCE();
    return this.e1v(tmp, b instanceof DenseNumVector ? b : THROW_CCE());
  };
  DenseNumVectorSpace.prototype.g1v = function (a, b) {
    if (!this.c1u(a))
      throw new IllegalContextException('The denseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.c1u(b))
      throw new IllegalContextException('The denseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1u() === b.d1u()))
      throw new InvalidSizeException('Cannot subtract numVectors of different dim');
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$_0();
    var result = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.t1t_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = a.o1t_1.i() - 1 | 0;
    var tmp;
    if (inductionVariable <= last) {
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result.a(tmp0_run.c13(a.o1t_1.l(i), b.o1t_1.l(i)));
      }
       while (inductionVariable <= last);
      tmp = Unit_getInstance();
    }
    tmp$ret$1 = tmp;
    return new DenseNumVector(result, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.h1v = function (a, b) {
    var tmp = a instanceof DenseNumVector ? a : THROW_CCE();
    return this.g1v(tmp, b instanceof DenseNumVector ? b : THROW_CCE());
  };
  DenseNumVectorSpace.prototype.i1v = function (scalar, numVector) {
    if (!this.c1u(numVector))
      throw new IllegalContextException('The denseNumVector ' + numVector + ' does not match the context (' + this + ')');
    if (!this.t1t_1.j1v(scalar))
      throw new IllegalContextException('The scalar ' + scalar + ' does not match the context (field = ' + this.t1t_1 + ')');
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.t1t_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.multiply.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = numVector.o1t_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.multiply.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.m13(item, scalar);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var valueList = tmp$ret$4;
    return new DenseNumVector(valueList, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.k1v = function (scalar, numVector) {
    var tmp = isInterface(scalar, Scalar) ? scalar : THROW_CCE();
    return this.i1v(tmp, numVector instanceof DenseNumVector ? numVector : THROW_CCE());
  };
  DenseNumVectorSpace.prototype.l1v = function (a, b) {
    if (!this.c1u(a))
      throw new IllegalContextException('The sparseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.c1u(b))
      throw new IllegalContextException('The sparseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1u() === b.d1u()))
      throw new InvalidSizeException('Cannot divide numVectors of different dim');
    if (b.op())
      throw ArithmeticException_init_$Create$('Division by zero numVector');
    var tmp$ret$2;
    // Inline function 'kotlin.collections.find' call
    var tmp0_find = withIndex(b.o1t_1);
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = tmp0_find.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.divideByNumVector.<anonymous>' call
        var scalar = element.x3();
        tmp$ret$0 = scalar.z17();
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    tmp$ret$2 = tmp$ret$1;
    var tmp0_safe_receiver = tmp$ret$2;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.u3_1;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      throw Exception_init_$Create$("This can't happen!");
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var index = tmp;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp1_run = this.t1t_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.divideByNumVector.<anonymous>' call
    tmp$ret$3 = tmp1_run.z12(a.o1t_1.l(index), b.o1t_1.l(index));
    tmp$ret$4 = tmp$ret$3;
    var scalar_0 = tmp$ret$4;
    var tmp_0;
    var tmp$ret$6;
    // Inline function 'kotlin.run' call
    var tmp2_run = this.u1t_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$5;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.divideByNumVector.<anonymous>' call
    tmp$ret$5 = a.equals(tmp2_run.n13(scalar_0, b));
    tmp$ret$6 = tmp$ret$5;
    if (tmp$ret$6) {
      tmp_0 = scalar_0;
    } else {
      tmp_0 = null;
    }
    return tmp_0;
  };
  DenseNumVectorSpace.prototype.m1v = function (a, b) {
    var tmp = a instanceof DenseNumVector ? a : THROW_CCE();
    return this.l1v(tmp, b instanceof DenseNumVector ? b : THROW_CCE());
  };
  DenseNumVectorSpace.prototype.n1v = function (numVector) {
    if (!this.c1u(numVector))
      throw new IllegalContextException('The denseNumVector ' + numVector + ' does not match the context (' + this + ')');
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.t1t_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.unaryMinusOf.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = numVector.o1t_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.unaryMinusOf.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.y13(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var valueList = tmp$ret$4;
    return new DenseNumVector(valueList, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.o1v = function (numVector) {
    return this.n1v(numVector instanceof DenseNumVector ? numVector : THROW_CCE());
  };
  DenseNumVectorSpace.prototype.p1v = function (numVector, ind) {
    return numVector.o1t_1.l(ind);
  };
  DenseNumVectorSpace.prototype.q1v = function (numVector, ind) {
    return this.p1v(numVector instanceof DenseNumVector ? numVector : THROW_CCE(), ind);
  };
  DenseNumVectorSpace.prototype.e1u = function (valueList) {
    return new DenseNumVector(valueList, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.r1v = function (valueMap, dim) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, dim);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.fromValueMap.<anonymous>' call
        var tmp0_elvis_lhs = valueMap.t(item);
        tmp$ret$0 = tmp0_elvis_lhs == null ? this.t1t_1.x12() : tmp0_elvis_lhs;
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var valueList = tmp$ret$2;
    return new DenseNumVector(valueList, this.t1t_1);
  };
  DenseNumVectorSpace.prototype.s1v = function (dim) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.List' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dim);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < dim)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVectorSpace.getZero.<anonymous>' call
        tmp$ret$0 = this.t1t_1.x12();
        list.a(tmp$ret$0);
      }
       while (inductionVariable < dim);
    tmp$ret$1 = list;
    tmp$ret$2 = tmp$ret$1;
    var valueList = tmp$ret$2;
    return this.e1u(valueList);
  };
  DenseNumVectorSpace.prototype.toString = function () {
    return 'DenseNumVectorSpace(' + this.t1t_1 + ')';
  };
  DenseNumVectorSpace.$metadata$ = classMeta('DenseNumVectorSpace', [NumVectorSpace]);
  function DenseNumVector(valueList, field) {
    this.o1t_1 = valueList;
    this.p1t_1 = field;
  }
  DenseNumVector.prototype.v1v = function () {
    return this.o1t_1;
  };
  DenseNumVector.prototype.d1u = function () {
    return this.o1t_1.i();
  };
  DenseNumVector.prototype.op = function () {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = this.o1t_1;
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_all.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVector.isZero.<anonymous>' call
        tmp$ret$1 = element.op();
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  DenseNumVector.prototype.e1q = function () {
    return this.o1t_1;
  };
  DenseNumVector.prototype.w1v = function () {
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp0_mapIndexedNotNull = this.o1t_1;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = tmp0_mapIndexedNotNull.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseNumVector.toMap.<anonymous>' call
      tmp$ret$0 = item.z17() ? new Pair(tmp0__anonymous__q1qw7t, item) : null;
      var tmp0_safe_receiver = tmp$ret$0;
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver);
        tmp$ret$1 = Unit_getInstance();
      }
    }
    tmp$ret$2 = tmp1_mapIndexedNotNullTo;
    tmp$ret$3 = tmp$ret$2;
    return toMap(tmp$ret$3);
  };
  DenseNumVector.prototype.toString = function () {
    return 'DenseNumVector(valueList=' + this.o1t_1 + ', field=' + this.p1t_1 + ')';
  };
  DenseNumVector.prototype.hashCode = function () {
    var result = hashCode(this.o1t_1);
    result = imul(result, 31) + hashCode(this.p1t_1) | 0;
    return result;
  };
  DenseNumVector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DenseNumVector))
      return false;
    var tmp0_other_with_cast = other instanceof DenseNumVector ? other : THROW_CCE();
    if (!equals(this.o1t_1, tmp0_other_with_cast.o1t_1))
      return false;
    if (!equals(this.p1t_1, tmp0_other_with_cast.p1t_1))
      return false;
    return true;
  };
  DenseNumVector.$metadata$ = classMeta('DenseNumVector', [NumVector]);
  function _get_data__d5abxd_0($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = data$factory_0();
    tmp$ret$0 = $this.g1w_1.f1();
    return tmp$ret$0;
  }
  function RowEchelonFormData(matrix, pivots, exchangeCount) {
    this.i1w_1 = matrix;
    this.j1w_1 = pivots;
    this.k1w_1 = exchangeCount;
  }
  RowEchelonFormData.prototype.toString = function () {
    return 'RowEchelonFormData(matrix=' + this.i1w_1 + ', pivots=' + this.j1w_1 + ', exchangeCount=' + this.k1w_1 + ')';
  };
  RowEchelonFormData.prototype.hashCode = function () {
    var result = hashCode(this.i1w_1);
    result = imul(result, 31) + hashCode(this.j1w_1) | 0;
    result = imul(result, 31) + this.k1w_1 | 0;
    return result;
  };
  RowEchelonFormData.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof RowEchelonFormData))
      return false;
    var tmp0_other_with_cast = other instanceof RowEchelonFormData ? other : THROW_CCE();
    if (!equals(this.i1w_1, tmp0_other_with_cast.i1w_1))
      return false;
    if (!equals(this.j1w_1, tmp0_other_with_cast.j1w_1))
      return false;
    if (!(this.k1w_1 === tmp0_other_with_cast.k1w_1))
      return false;
    return true;
  };
  RowEchelonFormData.$metadata$ = classMeta('RowEchelonFormData');
  function rowEchelonForm(_this__u8e3s4, $this) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.listOf' call
    tmp$ret$0 = emptyList();
    return rowEchelonFormInternal(_this__u8e3s4, $this, 0, tmp$ret$0, 0);
  }
  function rowEchelonFormInternal(_this__u8e3s4, $this, currentColInd, pivots, exchangeCount) {
    if (_this__u8e3s4.p()) {
      return new RowEchelonFormData(_this__u8e3s4, emptyList(), 0);
    }
    if (currentColInd === _this__u8e3s4.l(0).i()) {
      return new RowEchelonFormData(_this__u8e3s4, pivots, exchangeCount);
    }
    var rowInd = findNonZero(_this__u8e3s4, $this, currentColInd, pivots.i());
    var tmp;
    if (rowInd == null) {
      tmp = rowEchelonFormInternal(_this__u8e3s4, $this, currentColInd + 1 | 0, pivots, exchangeCount);
    } else {
      var newMatrix = eliminateOtherRows(_this__u8e3s4, $this, rowInd, currentColInd);
      var newExchangeCount = exchangeCount;
      if (!(rowInd === pivots.i())) {
        newMatrix = exchangeRows(newMatrix, $this, rowInd, pivots.i());
        newExchangeCount = newExchangeCount + 1 | 0;
      }
      var newPivots = plus(pivots, listOf(currentColInd));
      tmp = rowEchelonFormInternal(newMatrix, $this, currentColInd + 1 | 0, newPivots, newExchangeCount);
    }
    return tmp;
  }
  function exchangeRows(_this__u8e3s4, $this, i1, i2) {
    if (i1 === i2)
      throw IllegalArgumentException_init_$Create$('Row numbers must be distinct');
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = get_indices_0(_this__u8e3s4);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.exchangeRows.<anonymous>' call
        var tmp0_subject = item;
        tmp$ret$0 = tmp0_subject === i1 ? _this__u8e3s4.l(i2) : tmp0_subject === i2 ? _this__u8e3s4.l(i1) : _this__u8e3s4.l(item);
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function minus_4(_this__u8e3s4, $this, other) {
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.h1w_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.minus.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = zip(_this__u8e3s4, other);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.minus.<anonymous>.<anonymous>' call
      var a = item.w3();
      var b = item.x3();
      tmp$ret$0 = tmp0_run.c13(a, b);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function times_14(_this__u8e3s4, $this, other) {
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.h1w_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.times.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.times.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.m13(item, other);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function eliminateOtherRows(_this__u8e3s4, $this, rowInd, colInd) {
    if (_this__u8e3s4.l(rowInd).l(colInd).op())
      throw IllegalArgumentException_init_$Create$('Cannot eliminate since the element at (' + rowInd + ', ' + colInd + ') is zero');
    var scalarMatrix = _this__u8e3s4;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.h1w_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.eliminateOtherRows.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = get_indices_0(scalarMatrix);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.eliminateOtherRows.<anonymous>.<anonymous>' call
        var tmp0_subject = item;
        tmp$ret$0 = tmp0_subject === rowInd ? scalarMatrix.l(rowInd) : minus_4(scalarMatrix.l(item), $this, times_14(scalarMatrix.l(rowInd), $this, tmp0_run.z12(scalarMatrix.l(item).l(colInd), scalarMatrix.l(rowInd).l(colInd))));
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function findNonZero(_this__u8e3s4, $this, colInd, rowIndFrom) {
    var inductionVariable = rowIndFrom;
    var last = _this__u8e3s4.i();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (_this__u8e3s4.l(i).l(colInd).z17())
          return i;
      }
       while (inductionVariable < last);
    return null;
  }
  function DenseRowEchelonForm$data$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.h11().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.data$delegate.<anonymous>.<anonymous>' call
      tmp$ret$0 = rowEchelonForm(this$0.h1s_1.e1q(), this$0);
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function DenseRowEchelonForm(matrixSpace, originalMatrix) {
    RowEchelonForm.call(this, matrixSpace, originalMatrix);
    var tmp = this;
    tmp.g1w_1 = lazy(DenseRowEchelonForm$data$delegate$lambda(this));
    this.h1w_1 = matrixSpace.r1t_1;
  }
  DenseRowEchelonForm.prototype.d1t = function () {
    var tmp = this.h11();
    var tmp_0 = _get_data__d5abxd_0(this).i1w_1;
    return tmp.n1u(tmp_0, null, 2, null);
  };
  DenseRowEchelonForm.prototype.f1t = function () {
    return _get_data__d5abxd_0(this).j1w_1;
  };
  DenseRowEchelonForm.prototype.g1t = function () {
    return Companion_getInstance_45().l1w(_get_data__d5abxd_0(this).k1w_1);
  };
  DenseRowEchelonForm.prototype.h1t = function () {
    var rowCount = this.h1s_1.y1t_1;
    var rank = this.l1t().i();
    var rowEchelonMatrix = _get_data__d5abxd_0(this).i1w_1;
    var one = this.h11().p11().w12();
    var tmp$ret$4;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, rowCount);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$2;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.computeReducedRowEchelonForm.<anonymous>' call
        var a = item < rank ? rowEchelonMatrix.l(item).l(this.l1t().l(item)) : one;
        var tmp$ret$1;
        // Inline function 'kotlin.run' call
        var tmp0_run = this.h1w_1.t14();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.DenseRowEchelonForm.computeReducedRowEchelonForm.<anonymous>.<anonymous>' call
        tmp$ret$0 = times_14(rowEchelonMatrix.l(item), this, tmp0_run.b13(a));
        tmp$ret$1 = tmp$ret$0;
        tmp$ret$2 = tmp$ret$1;
        tmp0_mapTo.a(tmp$ret$2);
      }
       while (!(item === last));
    tmp$ret$3 = tmp0_mapTo;
    tmp$ret$4 = tmp$ret$3;
    var rawReducedMatrix = tmp$ret$4;
    var inductionVariable_0 = 0;
    if (inductionVariable_0 < rank)
      do {
        var i = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        rawReducedMatrix = eliminateOtherRows(rawReducedMatrix, this, i, this.l1t().l(i));
      }
       while (inductionVariable_0 < rank);
    return this.h11().m1u(rawReducedMatrix, this.h1s_1.z1t_1);
  };
  DenseRowEchelonForm.$metadata$ = classMeta('DenseRowEchelonForm', undefined, undefined, undefined, undefined, RowEchelonForm.prototype);
  function data$factory_0() {
    return getPropertyCallableRef('data', 1, KProperty1, function (receiver) {
      return _get_data__d5abxd_0(receiver);
    }, null);
  }
  function ScalarContext() {
  }
  ScalarContext.$metadata$ = interfaceMeta('ScalarContext');
  function ScalarContextImpl(field) {
    this.r1w_1 = field;
  }
  ScalarContextImpl.prototype.p11 = function () {
    return this.r1w_1;
  };
  ScalarContextImpl.$metadata$ = classMeta('ScalarContextImpl', [ScalarContext]);
  function Scalar() {
  }
  Scalar.$metadata$ = interfaceMeta('Scalar', [PrintableWithSign]);
  function Field() {
  }
  Field.$metadata$ = interfaceMeta('Field');
  function MatrixSpace$fromNumVectorList$lambda(i, v) {
    return v.op() ? null : new Pair(i, v.w1v());
  }
  function MatrixSpace() {
  }
  MatrixSpace.$metadata$ = interfaceMeta('MatrixSpace');
  function _get_augmentedOriginalMatrix__gimylt($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = augmentedOriginalMatrix$factory();
    tmp$ret$0 = $this.m1s_1.f1();
    return tmp$ret$0;
  }
  function RowEchelonForm$matrix$delegate$lambda(this$0) {
    return function () {
      return this$0.d1t();
    };
  }
  function RowEchelonForm$reducedMatrix$delegate$lambda(this$0) {
    return function () {
      return this$0.h1t();
    };
  }
  function RowEchelonForm$pivots$delegate$lambda(this$0) {
    return function () {
      return this$0.f1t();
    };
  }
  function RowEchelonForm$sign$delegate$lambda(this$0) {
    return function () {
      return this$0.g1t();
    };
  }
  function RowEchelonForm$augmentedOriginalMatrix$delegate$lambda(this$0) {
    return function () {
      var rowCount = this$0.h1s_1.z1u();
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.h11().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.RowEchelonForm.augmentedOriginalMatrix$delegate.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.u1w(listOf_0([this$0.h1s_1, this$0.h11().x1u(rowCount)]));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function RowEchelonForm$transformation$delegate$lambda(this$0) {
    return function () {
      var originalColCount = this$0.h1s_1.a1v();
      var augmentedColCount = _get_augmentedOriginalMatrix__gimylt(this$0).a1v();
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.h11().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.RowEchelonForm.transformation$delegate.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.w1w(tmp0_run.v1w(_get_augmentedOriginalMatrix__gimylt(this$0)).j1t(), until(originalColCount, augmentedColCount));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function RowEchelonForm$reducedTransformation$delegate$lambda(this$0) {
    return function () {
      var originalColCount = this$0.h1s_1.a1v();
      var augmentedColCount = _get_augmentedOriginalMatrix__gimylt(this$0).a1v();
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.h11().t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.RowEchelonForm.reducedTransformation$delegate.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_run.w1w(tmp0_run.v1w(_get_augmentedOriginalMatrix__gimylt(this$0)).k1t(), until(originalColCount, augmentedColCount));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function RowEchelonForm(matrixSpace, originalMatrix) {
    this.g1s_1 = matrixSpace;
    this.h1s_1 = originalMatrix;
    var tmp = this;
    tmp.i1s_1 = lazy(RowEchelonForm$matrix$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.j1s_1 = lazy(RowEchelonForm$reducedMatrix$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.k1s_1 = lazy(RowEchelonForm$pivots$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.l1s_1 = lazy(RowEchelonForm$sign$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.m1s_1 = lazy(RowEchelonForm$augmentedOriginalMatrix$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.n1s_1 = lazy(RowEchelonForm$transformation$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.o1s_1 = lazy(RowEchelonForm$reducedTransformation$delegate$lambda(this));
  }
  RowEchelonForm.prototype.h11 = function () {
    return this.g1s_1;
  };
  RowEchelonForm.prototype.i1t = function () {
    return this.h1s_1;
  };
  RowEchelonForm.prototype.j1t = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = matrix$factory();
    tmp$ret$0 = this.i1s_1.f1();
    return tmp$ret$0;
  };
  RowEchelonForm.prototype.k1t = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = reducedMatrix$factory();
    tmp$ret$0 = this.j1s_1.f1();
    return tmp$ret$0;
  };
  RowEchelonForm.prototype.l1t = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = pivots$factory();
    tmp$ret$0 = this.k1s_1.f1();
    return tmp$ret$0;
  };
  RowEchelonForm.$metadata$ = classMeta('RowEchelonForm');
  function MatrixContext() {
  }
  MatrixContext.$metadata$ = interfaceMeta('MatrixContext', [NumVectorContext]);
  function MatrixContextImpl(matrixSpace) {
    this.c1x_1 = matrixSpace;
    this.d1x_1 = new NumVectorContextImpl(matrixSpace.j11());
  }
  MatrixContextImpl.prototype.h11 = function () {
    return this.c1x_1;
  };
  MatrixContextImpl.prototype.p11 = function () {
    return this.d1x_1.p11();
  };
  MatrixContextImpl.prototype.j11 = function () {
    return this.d1x_1.h1b_1;
  };
  MatrixContextImpl.prototype.w12 = function () {
    return this.d1x_1.w12();
  };
  MatrixContextImpl.prototype.x12 = function () {
    return this.d1x_1.x12();
  };
  MatrixContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.d1x_1.z12(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.b1x = function (_this__u8e3s4, ind) {
    return this.d1x_1.b1x(_this__u8e3s4, ind);
  };
  MatrixContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.d1x_1.b13(_this__u8e3s4);
  };
  MatrixContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.d1x_1.c13(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.d1x_1.d13(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.d1x_1.g13(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.d1x_1.h13(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.d1x_1.k13(_this__u8e3s4);
  };
  MatrixContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.d1x_1.m13(_this__u8e3s4, other);
  };
  MatrixContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.d1x_1.n13(_this__u8e3s4, numVector);
  };
  MatrixContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.d1x_1.p13(_this__u8e3s4, scalar);
  };
  MatrixContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.d1x_1.y13(_this__u8e3s4);
  };
  MatrixContextImpl.$metadata$ = classMeta('MatrixContextImpl', [MatrixContext, NumVectorContext]);
  function Matrix() {
  }
  Matrix.$metadata$ = interfaceMeta('Matrix');
  function matrix$factory() {
    return getPropertyCallableRef('matrix', 1, KProperty1, function (receiver) {
      return receiver.j1t();
    }, null);
  }
  function reducedMatrix$factory() {
    return getPropertyCallableRef('reducedMatrix', 1, KProperty1, function (receiver) {
      return receiver.k1t();
    }, null);
  }
  function pivots$factory() {
    return getPropertyCallableRef('pivots', 1, KProperty1, function (receiver) {
      return receiver.l1t();
    }, null);
  }
  function augmentedOriginalMatrix$factory() {
    return getPropertyCallableRef('augmentedOriginalMatrix', 1, KProperty1, function (receiver) {
      return _get_augmentedOriginalMatrix__gimylt(receiver);
    }, null);
  }
  function NumVectorSpace() {
  }
  NumVectorSpace.$metadata$ = interfaceMeta('NumVectorSpace');
  function NumVectorContext() {
  }
  NumVectorContext.$metadata$ = interfaceMeta('NumVectorContext', [ScalarContext]);
  function NumVectorContextImpl(numVectorSpace) {
    this.h1b_1 = numVectorSpace;
    this.i1b_1 = new ScalarContextImpl(numVectorSpace.p11());
  }
  NumVectorContextImpl.prototype.j11 = function () {
    return this.h1b_1;
  };
  NumVectorContextImpl.prototype.p11 = function () {
    return this.i1b_1.r1w_1;
  };
  NumVectorContextImpl.prototype.w12 = function () {
    return this.i1b_1.w12();
  };
  NumVectorContextImpl.prototype.x12 = function () {
    return this.i1b_1.x12();
  };
  NumVectorContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.i1b_1.z12(_this__u8e3s4, other);
  };
  NumVectorContextImpl.prototype.a13 = function (_this__u8e3s4, other) {
    return this.i1b_1.a13(_this__u8e3s4, other);
  };
  NumVectorContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.i1b_1.b13(_this__u8e3s4);
  };
  NumVectorContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.i1b_1.c13(_this__u8e3s4, other);
  };
  NumVectorContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.i1b_1.g13(_this__u8e3s4, other);
  };
  NumVectorContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.i1b_1.k13(_this__u8e3s4);
  };
  NumVectorContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.i1b_1.m13(_this__u8e3s4, other);
  };
  NumVectorContextImpl.prototype.x13 = function (_this__u8e3s4) {
    return this.i1b_1.x13(_this__u8e3s4);
  };
  NumVectorContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.i1b_1.y13(_this__u8e3s4);
  };
  NumVectorContextImpl.$metadata$ = classMeta('NumVectorContextImpl', [NumVectorContext, ScalarContext]);
  function NumVector() {
  }
  NumVector.$metadata$ = interfaceMeta('NumVector');
  function SparseMatrixSpace_init_$Init$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      sparseRowEchelonFormCalculator = new InPlaceSparseRowEchelonFormCalculator(numVectorSpace.f1x_1);
    SparseMatrixSpace.call($this, numVectorSpace, sparseRowEchelonFormCalculator);
    return $this;
  }
  function SparseMatrixSpace_init_$Create$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker) {
    return SparseMatrixSpace_init_$Init$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker, Object.create(SparseMatrixSpace.prototype));
  }
  function Companion_33() {
    Companion_instance_33 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.h1x_1 = tmp$ret$0;
  }
  Companion_33.prototype.i1x = function (numVectorSpace) {
    if (this.h1x_1.c3(numVectorSpace)) {
      var tmp = this.h1x_1.t(numVectorSpace);
      return tmp instanceof SparseMatrixSpace ? tmp : THROW_CCE();
    } else {
      var matrixSpace = SparseMatrixSpace_init_$Create$(numVectorSpace, null, 2, null);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.h1x_1;
      tmp0_set.u(numVectorSpace, matrixSpace);
      return matrixSpace;
    }
  };
  Companion_33.$metadata$ = objectMeta('Companion');
  var Companion_instance_33;
  function Companion_getInstance_34() {
    if (Companion_instance_33 == null)
      new Companion_33();
    return Companion_instance_33;
  }
  function SparseMatrixSpace(numVectorSpace, sparseRowEchelonFormCalculator) {
    Companion_getInstance_34();
    AbstractSparseMatrixSpace.call(this, numVectorSpace);
    this.m1x_1 = sparseRowEchelonFormCalculator;
  }
  SparseMatrixSpace.prototype.c1t = function () {
    return this.m1x_1;
  };
  SparseMatrixSpace.prototype.n1x = function (matrix) {
    var tmp0_safe_receiver = matrix.f1s_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    var rowEchelonForm = new SparseRowEchelonForm(this, matrix);
    matrix.o1x(rowEchelonForm);
    return rowEchelonForm;
  };
  SparseMatrixSpace.prototype.i1u = function (matrix) {
    return this.n1x(matrix instanceof SparseMatrix ? matrix : THROW_CCE());
  };
  SparseMatrixSpace.prototype.toString = function () {
    return 'SparseMatrixSpace(' + this.p11() + ')';
  };
  SparseMatrixSpace.$metadata$ = classMeta('SparseMatrixSpace', undefined, undefined, undefined, undefined, AbstractSparseMatrixSpace.prototype);
  function DecomposedSparseMatrixSpace_init_$Init$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      sparseRowEchelonFormCalculator = new InPlaceSparseRowEchelonFormCalculator(numVectorSpace.f1x_1);
    DecomposedSparseMatrixSpace.call($this, numVectorSpace, sparseRowEchelonFormCalculator);
    return $this;
  }
  function DecomposedSparseMatrixSpace_init_$Create$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker) {
    return DecomposedSparseMatrixSpace_init_$Init$(numVectorSpace, sparseRowEchelonFormCalculator, $mask0, $marker, Object.create(DecomposedSparseMatrixSpace.prototype));
  }
  function Companion_34() {
    Companion_instance_34 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.v1x_1 = tmp$ret$0;
  }
  Companion_34.prototype.i1x = function (numVectorSpace) {
    if (this.v1x_1.c3(numVectorSpace)) {
      var tmp = this.v1x_1.t(numVectorSpace);
      return tmp instanceof DecomposedSparseMatrixSpace ? tmp : THROW_CCE();
    } else {
      var matrixSpace = DecomposedSparseMatrixSpace_init_$Create$(numVectorSpace, null, 2, null);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.v1x_1;
      tmp0_set.u(numVectorSpace, matrixSpace);
      return matrixSpace;
    }
  };
  Companion_34.$metadata$ = objectMeta('Companion');
  var Companion_instance_34;
  function Companion_getInstance_35() {
    if (Companion_instance_34 == null)
      new Companion_34();
    return Companion_instance_34;
  }
  function DecomposedSparseMatrixSpace(numVectorSpace, sparseRowEchelonFormCalculator) {
    Companion_getInstance_35();
    AbstractSparseMatrixSpace.call(this, numVectorSpace);
    this.z1x_1 = sparseRowEchelonFormCalculator;
  }
  DecomposedSparseMatrixSpace.prototype.c1t = function () {
    return this.z1x_1;
  };
  DecomposedSparseMatrixSpace.prototype.n1x = function (matrix) {
    var tmp0_safe_receiver = matrix.f1s_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    var rowEchelonForm = new DecomposedSparseRowEchelonForm(this, matrix);
    matrix.o1x(rowEchelonForm);
    return rowEchelonForm;
  };
  DecomposedSparseMatrixSpace.prototype.i1u = function (matrix) {
    return this.n1x(matrix instanceof SparseMatrix ? matrix : THROW_CCE());
  };
  DecomposedSparseMatrixSpace.prototype.toString = function () {
    return 'DecomposedSparseMatrixSpace(' + this.p11() + ')';
  };
  DecomposedSparseMatrixSpace.$metadata$ = classMeta('DecomposedSparseMatrixSpace', undefined, undefined, undefined, undefined, AbstractSparseMatrixSpace.prototype);
  function AbstractSparseMatrixSpace$field$delegate$lambda(this$0) {
    return function () {
      return this$0.j11().f1x_1;
    };
  }
  function AbstractSparseMatrixSpace$context$delegate$lambda(this$0) {
    return function () {
      return new MatrixContextImpl(this$0);
    };
  }
  function AbstractSparseMatrixSpace(numVectorSpace) {
    this.z1s_1 = numVectorSpace;
    var tmp = this;
    tmp.a1t_1 = lazy(AbstractSparseMatrixSpace$field$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.b1t_1 = lazy(AbstractSparseMatrixSpace$context$delegate$lambda(this));
  }
  AbstractSparseMatrixSpace.prototype.j11 = function () {
    return this.z1s_1;
  };
  AbstractSparseMatrixSpace.prototype.p11 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = field$factory();
    tmp$ret$0 = this.a1t_1.f1();
    return tmp$ret$0;
  };
  AbstractSparseMatrixSpace.prototype.t14 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = context$factory_1();
    tmp$ret$0 = this.b1t_1.f1();
    return tmp$ret$0;
  };
  AbstractSparseMatrixSpace.prototype.p1x = function (matrix) {
    return equals(matrix.b1s_1, this.j11());
  };
  AbstractSparseMatrixSpace.prototype.q1x = function (matrix, numVector) {
    if (!this.p1x(matrix))
      throw new IllegalContextException('The sparseMatrix ' + matrix + ' does not match the context (' + this + ')');
    if (!this.j11().a1y(numVector))
      throw new IllegalContextException('The numVector ' + numVector + ' does not match the context (' + this.j11() + ')');
    if (!(matrix.d1s_1 === numVector.d1y_1))
      throw new InvalidSizeException('Cannot multiply matrix and vector: matrix.colCount != vector.dim');
    var tmp$ret$13;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.p11().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$12;
    // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.multiply.<anonymous>' call
    var tmp$ret$11;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp0_mapValues = matrix.e1s_1;
    var tmp$ret$10;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues.i()));
    var tmp$ret$9;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapValues.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp = tmp$ret$0;
      var tmp$ret$8;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.multiply.<anonymous>.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$1 = element.f1();
      var row = tmp$ret$1;
      var tmp$ret$7;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$6;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(row.i());
      var tmp$ret$2;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$2 = row.d1().f();
      var tmp0_iterator_0 = tmp$ret$2;
      while (tmp0_iterator_0.g()) {
        var item = tmp0_iterator_0.h();
        var tmp$ret$5;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.multiply.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$3;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$3 = item.e1();
        var colInd = tmp$ret$3;
        var tmp$ret$4;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$4 = item.f1();
        var elm = tmp$ret$4;
        var it = numVector.b1y_1.t(colInd);
        tmp$ret$5 = (it == null ? true : equals(it, tmp0_run.x12())) ? null : tmp0_run.m13(elm, it);
        tmp0_mapTo.a(tmp$ret$5);
      }
      tmp$ret$6 = tmp0_mapTo;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp0_run.k13(filterNotNull(tmp$ret$7));
      tmp1_mapValuesTo.u(tmp, tmp$ret$8);
    }
    tmp$ret$9 = tmp1_mapValuesTo;
    tmp$ret$10 = tmp$ret$9;
    tmp$ret$11 = tmp$ret$10;
    tmp$ret$12 = tmp$ret$11;
    tmp$ret$13 = tmp$ret$12;
    var valueMap = tmp$ret$13;
    return Companion_getInstance_37().e1y(valueMap, this.p11(), matrix.c1s_1);
  };
  AbstractSparseMatrixSpace.prototype.f1u = function (matrix, numVector) {
    var tmp = matrix instanceof SparseMatrix ? matrix : THROW_CCE();
    return this.q1x(tmp, numVector instanceof SparseNumVector ? numVector : THROW_CCE());
  };
  AbstractSparseMatrixSpace.prototype.r1x = function (matrix) {
    var rowCount = matrix.d1s_1;
    var colCount = matrix.c1s_1;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var rowMap = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = matrix.e1s_1;
    tmp$ret$1 = tmp0_iterator.d1().f();
    var tmp0_iterator_0 = tmp$ret$1;
    while (tmp0_iterator_0.g()) {
      var tmp1_loop_parameter = tmp0_iterator_0.h();
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$2 = tmp1_loop_parameter.e1();
      var rowInd = tmp$ret$2;
      var tmp$ret$3;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$3 = tmp1_loop_parameter.f1();
      var row = tmp$ret$3;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$4 = row.d1().f();
      var tmp2_iterator = tmp$ret$4;
      while (tmp2_iterator.g()) {
        var tmp3_loop_parameter = tmp2_iterator.h();
        var tmp$ret$5;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$5 = tmp3_loop_parameter.e1();
        var colInd = tmp$ret$5;
        var tmp$ret$6;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$6 = tmp3_loop_parameter.f1();
        var elm = tmp$ret$6;
        var tmp$ret$9;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = rowMap.t(colInd);
        var tmp;
        if (value == null) {
          var tmp$ret$8;
          // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeTranspose.<anonymous>' call
          var tmp$ret$7;
          // Inline function 'kotlin.collections.mutableMapOf' call
          tmp$ret$7 = LinkedHashMap_init_$Create$();
          tmp$ret$8 = tmp$ret$7;
          var answer = tmp$ret$8;
          rowMap.u(colInd, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        tmp$ret$9 = tmp;
        var newRow = tmp$ret$9;
        // Inline function 'kotlin.collections.set' call
        newRow.u(rowInd, elm);
      }
    }
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCount);
  };
  AbstractSparseMatrixSpace.prototype.l1u = function (matrix) {
    return this.r1x(matrix instanceof SparseMatrix ? matrix : THROW_CCE());
  };
  AbstractSparseMatrixSpace.prototype.m1u = function (rowList, colCount) {
    var rowCount = rowList.i();
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$0 = !rowList.p();
    if (tmp$ret$0) {
      tmp = rowList.l(0).i();
    } else {
      if (!(colCount == null)) {
        tmp = colCount;
      } else {
        throw IllegalArgumentException_init_$Create$('Row list is empty and colCount is not specified');
      }
    }
    var colCountNonNull = tmp;
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = rowList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$5;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.fromRowList.<anonymous>' call
      var tmp$ret$4;
      // Inline function 'kotlin.collections.mapIndexedNotNull' call
      var tmp$ret$3;
      // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
      var tmp1_mapIndexedNotNullTo_0 = ArrayList_init_$Create$_0();
      // Inline function 'kotlin.collections.forEachIndexed' call
      var index_0 = 0;
      var tmp0_iterator_0 = item.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
        var tmp1_0 = index_0;
        index_0 = tmp1_0 + 1 | 0;
        var tmp0__anonymous__q1qw7t_0 = checkIndexOverflow(tmp1_0);
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.fromRowList.<anonymous>.<anonymous>' call
        tmp$ret$1 = item_0.op() ? null : new Pair(tmp0__anonymous__q1qw7t_0, item_0);
        var tmp0_safe_receiver = tmp$ret$1;
        if (tmp0_safe_receiver == null)
          null;
        else {
          var tmp$ret$2;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp1_mapIndexedNotNullTo_0.a(tmp0_safe_receiver);
          tmp$ret$2 = Unit_getInstance();
        }
      }
      tmp$ret$3 = tmp1_mapIndexedNotNullTo_0;
      tmp$ret$4 = tmp$ret$3;
      var newRow = toMap(tmp$ret$4);
      tmp$ret$5 = newRow.p() ? null : new Pair(tmp0__anonymous__q1qw7t, newRow);
      var tmp0_safe_receiver_0 = tmp$ret$5;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        var tmp$ret$6;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver_0);
        tmp$ret$6 = Unit_getInstance();
      }
    }
    tmp$ret$7 = tmp1_mapIndexedNotNullTo;
    tmp$ret$8 = tmp$ret$7;
    var rowMap = toMap(tmp$ret$8);
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCountNonNull);
  };
  AbstractSparseMatrixSpace.prototype.e1t = function (rowMap, rowCount, colCount) {
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCount);
  };
  AbstractSparseMatrixSpace.prototype.s1x = function (matrix1, matrix2) {
    if (!(matrix1.c1s_1 === matrix2.c1s_1))
      throw new InvalidSizeException('Cannot join two matrices of different row counts');
    var rowMap = toMutableMap(matrix1.e1s_1);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = matrix2.e1s_1;
    tmp$ret$0 = tmp0_iterator.d1().f();
    var tmp0_iterator_0 = tmp$ret$0;
    while (tmp0_iterator_0.g()) {
      var tmp1_loop_parameter = tmp0_iterator_0.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var rowInd2 = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var row2 = tmp$ret$2;
      var tmp$ret$5;
      // Inline function 'kotlin.collections.getOrElse' call
      var tmp1_getOrElse = matrix1.e1s_1;
      var tmp0_elvis_lhs = tmp1_getOrElse.t(rowInd2);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$4;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.joinMatrices.<anonymous>' call
        var tmp$ret$3;
        // Inline function 'kotlin.collections.mapOf' call
        tmp$ret$3 = emptyMap();
        tmp$ret$4 = tmp$ret$3;
        tmp = tmp$ret$4;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      tmp$ret$5 = tmp;
      var row1 = tmp$ret$5;
      var tmp$ret$11;
      // Inline function 'kotlin.collections.mapKeys' call
      var tmp$ret$10;
      // Inline function 'kotlin.collections.mapKeysTo' call
      var tmp1_mapKeysTo = LinkedHashMap_init_$Create$_0(mapCapacity(row2.i()));
      var tmp$ret$9;
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_associateByTo = row2.d1();
      var tmp0_iterator_1 = tmp0_associateByTo.f();
      while (tmp0_iterator_1.g()) {
        var element = tmp0_iterator_1.h();
        var tmp$ret$7;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.joinMatrices.<anonymous>' call
        var tmp$ret$6;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$6 = element.e1();
        var colInd = tmp$ret$6;
        tmp$ret$7 = colInd + matrix1.d1s_1 | 0;
        var tmp_0 = tmp$ret$7;
        var tmp$ret$8;
        // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
        tmp$ret$8 = element.f1();
        tmp1_mapKeysTo.u(tmp_0, tmp$ret$8);
      }
      tmp$ret$9 = tmp1_mapKeysTo;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      var newRow = plus_0(row1, tmp$ret$11);
      // Inline function 'kotlin.collections.set' call
      rowMap.u(rowInd2, newRow);
    }
    var rowCount = matrix1.c1s_1;
    var colCount = matrix1.d1s_1 + matrix2.d1s_1 | 0;
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCount);
  };
  AbstractSparseMatrixSpace.prototype.p1u = function (matrix1, matrix2) {
    var tmp = matrix1 instanceof SparseMatrix ? matrix1 : THROW_CCE();
    return this.s1x(tmp, matrix2 instanceof SparseMatrix ? matrix2 : THROW_CCE());
  };
  AbstractSparseMatrixSpace.prototype.t1x = function (matrix, rowRange) {
    var rowCount = count(rowRange);
    var colCount = matrix.d1s_1;
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapKeys' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filterKeys' call
    var tmp0_filterKeys = matrix.e1s_1;
    var result = LinkedHashMap_init_$Create$();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = tmp0_filterKeys.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var entry = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeRowSlice.<anonymous>' call
      var tmp1__anonymous__uwfjfc = entry.e1();
      var containsLower = rowRange.h5_1;
      tmp$ret$1 = tmp1__anonymous__uwfjfc <= rowRange.i5_1 ? containsLower <= tmp1__anonymous__uwfjfc : false;
      if (tmp$ret$1) {
        result.u(entry.e1(), entry.f1());
      }
    }
    tmp$ret$2 = result;
    var tmp2_mapKeys = tmp$ret$2;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapKeysTo' call
    var tmp1_mapKeysTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp2_mapKeys.i()));
    var tmp$ret$6;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp2_mapKeys.d1();
    var tmp0_iterator_0 = tmp0_associateByTo.f();
    while (tmp0_iterator_0.g()) {
      var element = tmp0_iterator_0.h();
      var tmp$ret$4;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeRowSlice.<anonymous>' call
      var tmp$ret$3;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$3 = element.e1();
      var rowInd = tmp$ret$3;
      tmp$ret$4 = rowInd - rowRange.h5_1 | 0;
      var tmp = tmp$ret$4;
      var tmp$ret$5;
      // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
      tmp$ret$5 = element.f1();
      tmp1_mapKeysTo.u(tmp, tmp$ret$5);
    }
    tmp$ret$6 = tmp1_mapKeysTo;
    tmp$ret$7 = tmp$ret$6;
    tmp$ret$8 = tmp$ret$7;
    var rowMap = tmp$ret$8;
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCount);
  };
  AbstractSparseMatrixSpace.prototype.r1u = function (matrix, rowRange) {
    return this.t1x(matrix instanceof SparseMatrix ? matrix : THROW_CCE(), rowRange);
  };
  AbstractSparseMatrixSpace.prototype.u1x = function (matrix, colRange) {
    var rowCount = matrix.c1s_1;
    var colCount = count(colRange);
    var tmp$ret$18;
    // Inline function 'kotlin.collections.filterValues' call
    var tmp$ret$14;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp0_mapValues = matrix.e1s_1;
    var tmp$ret$13;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues.i()));
    var tmp$ret$12;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapValues.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp = tmp$ret$0;
      var tmp$ret$11;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeColSlice.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$1 = element.f1();
      var row = tmp$ret$1;
      var tmp$ret$10;
      // Inline function 'kotlin.collections.mapKeys' call
      var tmp$ret$4;
      // Inline function 'kotlin.collections.filterKeys' call
      var result = LinkedHashMap_init_$Create$();
      var tmp$ret$2;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$2 = row.d1().f();
      var tmp0_iterator_0 = tmp$ret$2;
      while (tmp0_iterator_0.g()) {
        var entry = tmp0_iterator_0.h();
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeColSlice.<anonymous>.<anonymous>' call
        var tmp0__anonymous__q1qw7t = entry.e1();
        var containsLower = colRange.h5_1;
        tmp$ret$3 = tmp0__anonymous__q1qw7t <= colRange.i5_1 ? containsLower <= tmp0__anonymous__q1qw7t : false;
        if (tmp$ret$3) {
          result.u(entry.e1(), entry.f1());
        }
      }
      tmp$ret$4 = result;
      var tmp1_mapKeys = tmp$ret$4;
      var tmp$ret$9;
      // Inline function 'kotlin.collections.mapKeysTo' call
      var tmp1_mapKeysTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp1_mapKeys.i()));
      var tmp$ret$8;
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_associateByTo_0 = tmp1_mapKeys.d1();
      var tmp0_iterator_1 = tmp0_associateByTo_0.f();
      while (tmp0_iterator_1.g()) {
        var element_0 = tmp0_iterator_1.h();
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeColSlice.<anonymous>.<anonymous>' call
        var tmp$ret$5;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$5 = element_0.e1();
        var colInd = tmp$ret$5;
        tmp$ret$6 = colInd - colRange.h5_1 | 0;
        var tmp_0 = tmp$ret$6;
        var tmp$ret$7;
        // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
        tmp$ret$7 = element_0.f1();
        tmp1_mapKeysTo.u(tmp_0, tmp$ret$7);
      }
      tmp$ret$8 = tmp1_mapKeysTo;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      tmp1_mapValuesTo.u(tmp, tmp$ret$11);
    }
    tmp$ret$12 = tmp1_mapValuesTo;
    tmp$ret$13 = tmp$ret$12;
    tmp$ret$14 = tmp$ret$13;
    var tmp1_filterValues = tmp$ret$14;
    var result_0 = LinkedHashMap_init_$Create$();
    var tmp$ret$15;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$15 = tmp1_filterValues.d1().f();
    var tmp0_iterator_2 = tmp$ret$15;
    while (tmp0_iterator_2.g()) {
      var entry_0 = tmp0_iterator_2.h();
      var tmp$ret$17;
      // Inline function 'com.github.shwaka.kohomology.linalg.AbstractSparseMatrixSpace.computeColSlice.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = entry_0.f1();
      var tmp$ret$16;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$16 = !tmp2__anonymous__z9zvc9.p();
      tmp$ret$17 = tmp$ret$16;
      if (tmp$ret$17) {
        result_0.u(entry_0.e1(), entry_0.f1());
      }
    }
    tmp$ret$18 = result_0;
    var rowMap = tmp$ret$18;
    return new SparseMatrix(this.j11(), rowMap, rowCount, colCount);
  };
  AbstractSparseMatrixSpace.prototype.t1u = function (matrix, colRange) {
    return this.u1x(matrix instanceof SparseMatrix ? matrix : THROW_CCE(), colRange);
  };
  AbstractSparseMatrixSpace.$metadata$ = classMeta('AbstractSparseMatrixSpace', [MatrixSpace]);
  function toStringTable_0($this) {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, $this.c1s_1);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.toStringTable.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map_0 = until(0, $this.d1s_1);
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
        var inductionVariable_0 = tmp0_map_0.h5_1;
        var last_0 = tmp0_map_0.i5_1;
        if (inductionVariable_0 <= last_0)
          do {
            var item_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$0;
            // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.toStringTable.<anonymous>.<anonymous>' call
            tmp$ret$0 = toString($this.k1u(item, item_0));
            tmp0_mapTo_0.a(tmp$ret$0);
          }
           while (!(item_0 === last_0));
        tmp$ret$1 = tmp0_mapTo_0;
        tmp$ret$2 = tmp$ret$1;
        tmp$ret$3 = tmp$ret$2;
        tmp0_mapTo.a(tmp$ret$3);
      }
       while (!(item === last));
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    var valueList = tmp$ret$5;
    return StringTable_init_$Create$(valueList, null, 2, null);
  }
  function SparseMatrix(numVectorSpace, rowMap, rowCount, colCount) {
    this.b1s_1 = numVectorSpace;
    this.c1s_1 = rowCount;
    this.d1s_1 = colCount;
    var tmp = this;
    var tmp$ret$12;
    // Inline function 'kotlin.collections.filterValues' call
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(rowMap.i()));
    var tmp$ret$6;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = rowMap.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp_0 = tmp$ret$0;
      var tmp$ret$5;
      // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.rowMap.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$1 = element.f1();
      var row = tmp$ret$1;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.filterValues' call
      var result = LinkedHashMap_init_$Create$();
      var tmp$ret$2;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$2 = row.d1().f();
      var tmp0_iterator_0 = tmp$ret$2;
      while (tmp0_iterator_0.g()) {
        var entry = tmp0_iterator_0.h();
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.rowMap.<anonymous>.<anonymous>' call
        var tmp0__anonymous__q1qw7t = entry.f1();
        tmp$ret$3 = tmp0__anonymous__q1qw7t.z17();
        if (tmp$ret$3) {
          result.u(entry.e1(), entry.f1());
        }
      }
      tmp$ret$4 = result;
      tmp$ret$5 = tmp$ret$4;
      tmp1_mapValuesTo.u(tmp_0, tmp$ret$5);
    }
    tmp$ret$6 = tmp1_mapValuesTo;
    tmp$ret$7 = tmp$ret$6;
    tmp$ret$8 = tmp$ret$7;
    var tmp0_filterValues = tmp$ret$8;
    var result_0 = LinkedHashMap_init_$Create$();
    var tmp$ret$9;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$9 = tmp0_filterValues.d1().f();
    var tmp0_iterator_1 = tmp$ret$9;
    while (tmp0_iterator_1.g()) {
      var entry_0 = tmp0_iterator_1.h();
      var tmp$ret$11;
      // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.rowMap.<anonymous>' call
      var tmp1__anonymous__uwfjfc = entry_0.f1();
      var tmp$ret$10;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$10 = !tmp1__anonymous__uwfjfc.p();
      tmp$ret$11 = tmp$ret$10;
      if (tmp$ret$11) {
        result_0.u(entry_0.e1(), entry_0.f1());
      }
    }
    tmp$ret$12 = result_0;
    tmp.e1s_1 = tmp$ret$12;
    this.f1s_1 = null;
    var tmp$ret$13;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_2 = this.e1s_1;
    tmp$ret$13 = tmp0_iterator_2.d1().f();
    var tmp0_iterator_3 = tmp$ret$13;
    while (tmp0_iterator_3.g()) {
      var tmp1_loop_parameter = tmp0_iterator_3.h();
      var tmp$ret$14;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$14 = tmp1_loop_parameter.e1();
      var rowInd = tmp$ret$14;
      var tmp$ret$15;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$15 = tmp1_loop_parameter.f1();
      var row_0 = tmp$ret$15;
      if (rowInd < 0)
        throw IllegalArgumentException_init_$Create$('The row index ' + rowInd + ' cannot be negative');
      if (rowInd >= this.c1s_1)
        throw IllegalArgumentException_init_$Create$('The row index ' + rowInd + ' cannot be larger than the rowCount (= ' + this.c1s_1 + ') for the matrix');
      var tmp$ret$16;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$16 = row_0.d1().f();
      var tmp2_iterator = tmp$ret$16;
      while (tmp2_iterator.g()) {
        var tmp3_loop_parameter = tmp2_iterator.h();
        var tmp$ret$17;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$17 = tmp3_loop_parameter.e1();
        var colInd = tmp$ret$17;
        if (colInd < 0)
          throw IllegalArgumentException_init_$Create$('The col index ' + colInd + ' cannot be negative');
        if (colInd >= this.d1s_1)
          throw IllegalArgumentException_init_$Create$('The col index ' + colInd + ' cannot be larger than the colCount (= ' + this.d1s_1 + ') for the matrix');
      }
    }
  }
  SparseMatrix.prototype.j11 = function () {
    return this.b1s_1;
  };
  SparseMatrix.prototype.z1u = function () {
    return this.c1s_1;
  };
  SparseMatrix.prototype.a1v = function () {
    return this.d1s_1;
  };
  SparseMatrix.prototype.f1y = function () {
    return this.e1s_1;
  };
  SparseMatrix.prototype.o1x = function (value) {
    if (!(this.f1s_1 == null))
      throw IllegalStateException_init_$Create$('Cannot assign rowEchelonForm twice');
    this.f1s_1 = value;
  };
  SparseMatrix.prototype.toString = function () {
    return toStringTable_0(this).toString();
  };
  SparseMatrix.prototype.k1u = function (rowInd, colInd) {
    var tmp0_safe_receiver = this.e1s_1.t(rowInd);
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.linalg.SparseMatrix.get.<anonymous>' call
      var tmp0_safe_receiver_0 = tmp0_safe_receiver.t(colInd);
      var tmp;
      if (tmp0_safe_receiver_0 == null) {
        tmp = null;
      } else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        return tmp0_safe_receiver_0;
        tmp = tmp$ret$0;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
    }
    if (rowInd < 0 ? true : colInd < 0)
      throw IndexOutOfBoundsException_init_$Create$('Index for matrix cannot be negative');
    if (rowInd >= this.c1s_1 ? true : colInd >= this.d1s_1)
      throw IndexOutOfBoundsException_init_$Create$('Given index (' + rowInd + ', ' + colInd + ') is not contained in the size (' + this.c1s_1 + ', ' + this.d1s_1 + ')');
    return this.b1s_1.f1x_1.x12();
  };
  SparseMatrix.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof SparseMatrix)
      other;
    else
      THROW_CCE();
    if (!equals(this.b1s_1, other.b1s_1))
      return false;
    if (!(this.c1s_1 === other.c1s_1))
      return false;
    if (!(this.d1s_1 === other.d1s_1))
      return false;
    if (!equals(this.e1s_1, other.e1s_1))
      return false;
    return true;
  };
  SparseMatrix.prototype.hashCode = function () {
    var result = hashCode(this.b1s_1);
    result = imul(31, result) + this.c1s_1 | 0;
    result = imul(31, result) + this.d1s_1 | 0;
    result = imul(31, result) + hashCode(this.e1s_1) | 0;
    return result;
  };
  SparseMatrix.$metadata$ = classMeta('SparseMatrix', [Matrix]);
  function field$factory() {
    return getPropertyCallableRef('field', 1, KProperty1, function (receiver) {
      return receiver.p11();
    }, null);
  }
  function context$factory_1() {
    return getPropertyCallableRef('context', 1, KProperty1, function (receiver) {
      return receiver.t14();
    }, null);
  }
  function Companion_35() {
    Companion_instance_35 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.g1y_1 = tmp$ret$0;
  }
  Companion_35.prototype.d1v = function (field) {
    if (this.g1y_1.c3(field)) {
      var tmp = this.g1y_1.t(field);
      return tmp instanceof SparseNumVectorSpace ? tmp : THROW_CCE();
    } else {
      var numVectorSpace = new SparseNumVectorSpace(field);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.g1y_1;
      tmp0_set.u(field, numVectorSpace);
      return numVectorSpace;
    }
  };
  Companion_35.$metadata$ = objectMeta('Companion');
  var Companion_instance_35;
  function Companion_getInstance_36() {
    if (Companion_instance_35 == null)
      new Companion_35();
    return Companion_instance_35;
  }
  function SparseNumVectorSpace(field) {
    Companion_getInstance_36();
    this.f1x_1 = field;
    this.g1x_1 = new NumVectorContextImpl(this);
  }
  SparseNumVectorSpace.prototype.p11 = function () {
    return this.f1x_1;
  };
  SparseNumVectorSpace.prototype.t14 = function () {
    return this.g1x_1;
  };
  SparseNumVectorSpace.prototype.a1y = function (numVector) {
    return equals(numVector.c1y_1, this.f1x_1);
  };
  SparseNumVectorSpace.prototype.h1y = function (a, b) {
    if (!this.a1y(a))
      throw new IllegalContextException('The sparseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.a1y(b))
      throw new IllegalContextException('The sparseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1y_1 === b.d1y_1))
      throw new InvalidSizeException('Cannot add numVectors of different dim');
    var valueMap = toMutableMap(a.b1y_1);
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.f1x_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = b.b1y_1;
    tmp$ret$0 = tmp0_iterator.d1().f();
    var tmp0_iterator_0 = tmp$ret$0;
    while (tmp0_iterator_0.g()) {
      var tmp1_loop_parameter = tmp0_iterator_0.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var i = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var value = tmp$ret$2;
      // Inline function 'kotlin.collections.set' call
      var valueFromA = valueMap.t(i);
      var tmp1_set = valueFromA == null ? value : tmp0_run.g13(valueFromA, value);
      valueMap.u(i, tmp1_set);
    }
    tmp$ret$3 = Unit_getInstance();
    return Companion_getInstance_37().e1y(valueMap, this.f1x_1, a.d1y_1);
  };
  SparseNumVectorSpace.prototype.f1v = function (a, b) {
    var tmp = a instanceof SparseNumVector ? a : THROW_CCE();
    return this.h1y(tmp, b instanceof SparseNumVector ? b : THROW_CCE());
  };
  SparseNumVectorSpace.prototype.i1y = function (a, b) {
    if (!this.a1y(a))
      throw new IllegalContextException('The sparseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.a1y(b))
      throw new IllegalContextException('The sparseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1y_1 === b.d1y_1))
      throw new InvalidSizeException('Cannot add numVectors of different dim');
    var valueMap = toMutableMap(a.b1y_1);
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.f1x_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = b.b1y_1;
    tmp$ret$0 = tmp0_iterator.d1().f();
    var tmp0_iterator_0 = tmp$ret$0;
    while (tmp0_iterator_0.g()) {
      var tmp1_loop_parameter = tmp0_iterator_0.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var i = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var value = tmp$ret$2;
      // Inline function 'kotlin.collections.set' call
      var valueFromA = valueMap.t(i);
      var tmp1_set = valueFromA == null ? tmp0_run.y13(value) : tmp0_run.c13(valueFromA, value);
      valueMap.u(i, tmp1_set);
    }
    tmp$ret$3 = Unit_getInstance();
    return Companion_getInstance_37().e1y(valueMap, this.f1x_1, a.d1y_1);
  };
  SparseNumVectorSpace.prototype.h1v = function (a, b) {
    var tmp = a instanceof SparseNumVector ? a : THROW_CCE();
    return this.i1y(tmp, b instanceof SparseNumVector ? b : THROW_CCE());
  };
  SparseNumVectorSpace.prototype.j1y = function (scalar, numVector) {
    if (!this.a1y(numVector))
      throw new IllegalContextException('The sparseNumVector ' + numVector + ' does not match the context (' + this + ')');
    if (!this.f1x_1.j1v(scalar))
      throw new IllegalContextException('The scalar ' + scalar + ' does not match the context (field = ' + this.f1x_1 + ')');
    if (scalar.op()) {
      var tmp = Companion_getInstance_37();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapOf' call
      tmp$ret$0 = emptyMap();
      return tmp.e1y(tmp$ret$0, this.f1x_1, numVector.d1y_1);
    }
    var tmp$ret$8;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.f1x_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$7;
    // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.multiply.<anonymous>' call
    var tmp$ret$6;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp0_mapValues = numVector.b1y_1;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues.i()));
    var tmp$ret$4;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapValues.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$1 = element.e1();
      var tmp_0 = tmp$ret$1;
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.multiply.<anonymous>.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = element.f1();
      var value = tmp$ret$2;
      tmp$ret$3 = tmp0_run.m13(scalar, value);
      tmp1_mapValuesTo.u(tmp_0, tmp$ret$3);
    }
    tmp$ret$4 = tmp1_mapValuesTo;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    tmp$ret$8 = tmp$ret$7;
    var valueMap = tmp$ret$8;
    return Companion_getInstance_37().k1y(valueMap, this.f1x_1, numVector.d1y_1);
  };
  SparseNumVectorSpace.prototype.k1v = function (scalar, numVector) {
    var tmp = isInterface(scalar, Scalar) ? scalar : THROW_CCE();
    return this.j1y(tmp, numVector instanceof SparseNumVector ? numVector : THROW_CCE());
  };
  SparseNumVectorSpace.prototype.l1y = function (a, b) {
    if (!this.a1y(a))
      throw new IllegalContextException('The sparseNumVector ' + a + ' does not match the context (' + this + ')');
    if (!this.a1y(b))
      throw new IllegalContextException('The sparseNumVector ' + b + ' does not match the context (' + this + ')');
    if (!(a.d1y_1 === b.d1y_1))
      throw new InvalidSizeException('Cannot divide numVectors of different dim');
    if (b.op())
      throw ArithmeticException_init_$Create$('Division by zero numVector');
    var index = first(b.b1y_1.i3());
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.f1x_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.divideByNumVector.<anonymous>' call
    tmp$ret$0 = tmp0_run.z12(this.m1y(a, index), this.m1y(b, index));
    tmp$ret$1 = tmp$ret$0;
    var scalar = tmp$ret$1;
    var tmp;
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp1_run = this.g1x_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.divideByNumVector.<anonymous>' call
    tmp$ret$2 = a.equals(tmp1_run.n13(scalar, b));
    tmp$ret$3 = tmp$ret$2;
    if (tmp$ret$3) {
      tmp = scalar;
    } else {
      tmp = null;
    }
    return tmp;
  };
  SparseNumVectorSpace.prototype.m1v = function (a, b) {
    var tmp = a instanceof SparseNumVector ? a : THROW_CCE();
    return this.l1y(tmp, b instanceof SparseNumVector ? b : THROW_CCE());
  };
  SparseNumVectorSpace.prototype.n1y = function (numVector) {
    if (!this.a1y(numVector))
      throw new IllegalContextException('The sparseNumVector ' + numVector + ' does not match the context (' + this + ')');
    var tmp$ret$7;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.f1x_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$6;
    // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.unaryMinusOf.<anonymous>' call
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp0_mapValues = numVector.b1y_1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues.i()));
    var tmp$ret$3;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapValues.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp = tmp$ret$0;
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVectorSpace.unaryMinusOf.<anonymous>.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$1 = element.f1();
      var value = tmp$ret$1;
      tmp$ret$2 = tmp0_run.y13(value);
      tmp1_mapValuesTo.u(tmp, tmp$ret$2);
    }
    tmp$ret$3 = tmp1_mapValuesTo;
    tmp$ret$4 = tmp$ret$3;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    var valueMap = tmp$ret$7;
    return Companion_getInstance_37().k1y(valueMap, this.f1x_1, numVector.d1y_1);
  };
  SparseNumVectorSpace.prototype.o1v = function (numVector) {
    return this.n1y(numVector instanceof SparseNumVector ? numVector : THROW_CCE());
  };
  SparseNumVectorSpace.prototype.m1y = function (numVector, ind) {
    var tmp0_safe_receiver = numVector.b1y_1.t(ind);
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    return this.f1x_1.x12();
  };
  SparseNumVectorSpace.prototype.q1v = function (numVector, ind) {
    return this.m1y(numVector instanceof SparseNumVector ? numVector : THROW_CCE(), ind);
  };
  SparseNumVectorSpace.prototype.e1u = function (valueList) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var valueMap = tmp$ret$0;
    var iterator = valueList.f();
    var index = 0;
    while (iterator.g()) {
      var i = index;
      index = index + 1 | 0;
      var value = iterator.h();
      if (value.z17()) {
        // Inline function 'kotlin.collections.set' call
        valueMap.u(i, value);
      }
    }
    return Companion_getInstance_37().e1y(valueMap, this.f1x_1, valueList.i());
  };
  SparseNumVectorSpace.prototype.r1v = function (valueMap, dim) {
    return Companion_getInstance_37().e1y(valueMap, this.f1x_1, dim);
  };
  SparseNumVectorSpace.prototype.u1v = function (valueMap, dim) {
    // Inline function 'com.github.shwaka.kococo.debugOnly' call
    return Companion_getInstance_37().k1y(valueMap, this.f1x_1, dim);
  };
  SparseNumVectorSpace.prototype.s1v = function (dim) {
    var tmp = Companion_getInstance_37();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapOf' call
    tmp$ret$0 = emptyMap();
    return tmp.e1y(tmp$ret$0, this.f1x_1, dim);
  };
  SparseNumVectorSpace.prototype.toString = function () {
    return 'SparseNumVectorSpace(' + this.f1x_1 + ')';
  };
  SparseNumVectorSpace.$metadata$ = classMeta('SparseNumVectorSpace', [NumVectorSpace]);
  function Companion_36() {
    Companion_instance_36 = this;
  }
  Companion_36.prototype.e1y = function (valueMap, field, dim) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filterValues' call
    var result = LinkedHashMap_init_$Create$();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = valueMap.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var entry = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.linalg.Companion.invoke.<anonymous>' call
      var tmp0__anonymous__q1qw7t = entry.f1();
      tmp$ret$1 = tmp0__anonymous__q1qw7t.z17();
      if (tmp$ret$1) {
        result.u(entry.e1(), entry.f1());
      }
    }
    tmp$ret$2 = result;
    var filteredValueMap = tmp$ret$2;
    return new SparseNumVector(filteredValueMap, field, dim);
  };
  Companion_36.prototype.k1y = function (valueMap, field, dim) {
    return new SparseNumVector(valueMap, field, dim);
  };
  Companion_36.$metadata$ = objectMeta('Companion');
  var Companion_instance_36;
  function Companion_getInstance_37() {
    if (Companion_instance_36 == null)
      new Companion_36();
    return Companion_instance_36;
  }
  function SparseNumVector(valueMap, field, dim) {
    Companion_getInstance_37();
    this.b1y_1 = valueMap;
    this.c1y_1 = field;
    this.d1y_1 = dim;
  }
  SparseNumVector.prototype.o1y = function () {
    return this.b1y_1;
  };
  SparseNumVector.prototype.p11 = function () {
    return this.c1y_1;
  };
  SparseNumVector.prototype.d1u = function () {
    return this.d1y_1;
  };
  SparseNumVector.prototype.op = function () {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = this.b1y_1;
      if (tmp0_all.p()) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$1 = tmp0_all.d1().f();
      var tmp0_iterator = tmp$ret$1;
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$3;
        // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVector.isZero.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$2 = element.f1();
        var value = tmp$ret$2;
        tmp$ret$3 = value.op();
        if (!tmp$ret$3) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  SparseNumVector.prototype.toString = function () {
    return 'SparseNumVector(valueMap=' + this.b1y_1 + ', field=' + this.c1y_1 + ', dim=' + this.d1y_1 + ')';
  };
  SparseNumVector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof SparseNumVector)
      other;
    else
      THROW_CCE();
    if (!equals(this.b1y_1, other.b1y_1))
      return false;
    if (!equals(this.c1y_1, other.c1y_1))
      return false;
    if (!(this.d1y_1 === other.d1y_1))
      return false;
    return true;
  };
  SparseNumVector.prototype.hashCode = function () {
    var result = hashCode(this.b1y_1);
    result = imul(31, result) + hashCode(this.c1y_1) | 0;
    result = imul(31, result) + this.d1y_1 | 0;
    return result;
  };
  SparseNumVector.prototype.e1q = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = until(0, this.d1y_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var inductionVariable = tmp0_map.h5_1;
    var last = tmp0_map.i5_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.linalg.SparseNumVector.toList.<anonymous>' call
        var tmp0_elvis_lhs = this.b1y_1.t(item);
        tmp$ret$0 = tmp0_elvis_lhs == null ? this.c1y_1.x12() : tmp0_elvis_lhs;
        tmp0_mapTo.a(tmp$ret$0);
      }
       while (!(item === last));
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  SparseNumVector.prototype.w1v = function () {
    return this.b1y_1;
  };
  SparseNumVector.$metadata$ = classMeta('SparseNumVector', [NumVector]);
  function _get_data__d5abxd_1($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = data$factory_1();
    tmp$ret$0 = $this.b1z_1.f1();
    return tmp$ret$0;
  }
  function SparseRowEchelonForm$data$delegate$lambda(this$0) {
    return function () {
      return this$0.a1z_1.y1s(this$0.h1s_1.e1s_1, this$0.z1y_1);
    };
  }
  function SparseRowEchelonForm(matrixSpace, originalMatrix) {
    RowEchelonForm.call(this, matrixSpace, originalMatrix);
    this.y1y_1 = originalMatrix.c1s_1;
    this.z1y_1 = originalMatrix.d1s_1;
    this.a1z_1 = matrixSpace.c1t();
    var tmp = this;
    tmp.b1z_1 = lazy(SparseRowEchelonForm$data$delegate$lambda(this));
  }
  SparseRowEchelonForm.prototype.d1t = function () {
    return this.h11().e1t(_get_data__d5abxd_1(this).t1s_1, this.y1y_1, this.z1y_1);
  };
  SparseRowEchelonForm.prototype.f1t = function () {
    return _get_data__d5abxd_1(this).u1s_1;
  };
  SparseRowEchelonForm.prototype.g1t = function () {
    return Companion_getInstance_45().l1w(_get_data__d5abxd_1(this).v1s_1);
  };
  SparseRowEchelonForm.prototype.h1t = function () {
    var reducedRowMap = this.a1z_1.w1s(_get_data__d5abxd_1(this).t1s_1, _get_data__d5abxd_1(this).u1s_1);
    return this.h11().e1t(reducedRowMap, this.y1y_1, this.z1y_1);
  };
  SparseRowEchelonForm.$metadata$ = classMeta('SparseRowEchelonForm', undefined, undefined, undefined, undefined, RowEchelonForm.prototype);
  function data$factory_1() {
    return getPropertyCallableRef('data', 1, KProperty1, function (receiver) {
      return _get_data__d5abxd_1(receiver);
    }, null);
  }
  function SparseRowEchelonFormCalculator() {
  }
  SparseRowEchelonFormCalculator.$metadata$ = interfaceMeta('SparseRowEchelonFormCalculator');
  function toMutableMapDeeply(_this__u8e3s4, $this) {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(_this__u8e3s4.i()));
    var tmp$ret$3;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = _this__u8e3s4.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp = tmp$ret$0;
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.linalg.InPlaceSparseRowEchelonFormCalculator.toMutableMapDeeply.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$1 = element.f1();
      var row = tmp$ret$1;
      tmp$ret$2 = toMutableMap(row);
      tmp1_mapValuesTo.u(tmp, tmp$ret$2);
    }
    tmp$ret$3 = tmp1_mapValuesTo;
    tmp$ret$4 = tmp$ret$3;
    tmp$ret$5 = tmp$ret$4;
    return toMutableMap(tmp$ret$5);
  }
  function replace(_this__u8e3s4, $this, getNewValue) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var mapIterator = tmp$ret$0;
    while (mapIterator.g()) {
      var mapEntry = mapIterator.h();
      var newValue = getNewValue(mapEntry.e1(), mapEntry.f1());
      mapEntry.o9(newValue);
    }
  }
  function subtract_1(_this__u8e3s4, $this, other, scalar) {
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.c1z_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = other.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var i = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var value = tmp$ret$2;
      var valueFromThis = _this__u8e3s4.t(i);
      if (valueFromThis == null) {
        // Inline function 'kotlin.collections.set' call
        var tmp0_set = tmp0_run.m13(tmp0_run.y13(value), scalar);
        _this__u8e3s4.u(i, tmp0_set);
      } else {
        var newValue = tmp0_run.c13(valueFromThis, tmp0_run.m13(value, scalar));
        if (newValue.op()) {
          _this__u8e3s4.u9(i);
        } else {
          // Inline function 'kotlin.collections.set' call
          _this__u8e3s4.u(i, newValue);
        }
      }
    }
    tmp$ret$3 = Unit_getInstance();
  }
  function multiply_3(_this__u8e3s4, $this, scalar) {
    if (scalar.op()) {
      _this__u8e3s4.v8();
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.run' call
      var tmp0_run = $this.c1z_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      replace(_this__u8e3s4, $this, InPlaceSparseRowEchelonFormCalculator$multiply$lambda(tmp0_run, scalar));
      tmp$ret$0 = Unit_getInstance();
    }
  }
  function eliminateOtherRows_0(_this__u8e3s4, $this, rowInd, colInd) {
    var tmp0_elvis_lhs = _this__u8e3s4.t(rowInd);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$('Cannot eliminate since the row ' + rowInd + ' is zero');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mainRow = tmp;
    var elm = mainRow.t(colInd);
    if (elm == null ? true : elm.op())
      throw IllegalArgumentException_init_$Create$('Cannot eliminate since the element at (' + rowInd + ', ' + colInd + ') is zero');
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp0_run = $this.c1z_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var mapIterator = tmp$ret$0;
    while (mapIterator.g()) {
      var mapEntry = mapIterator.h();
      var tmp0_container = mapEntry;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp0_container.e1();
      var i = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp0_container.f1();
      var row = tmp$ret$2;
      if (!(i === rowInd)) {
        var coeff = row.t(colInd);
        if (!(coeff == null)) {
          subtract_1(row, $this, mainRow, tmp0_run.z12(coeff, elm));
          if (row.p()) {
            mapIterator.x7();
          }
        }
      }
    }
    tmp$ret$3 = Unit_getInstance();
  }
  function findNonZero_0(_this__u8e3s4, $this, colInd, rowIndFrom) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filter' call
    var tmp0_filter = _this__u8e3s4.i3();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$_0();
    var tmp0_iterator = tmp0_filter.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.linalg.InPlaceSparseRowEchelonFormCalculator.findNonZero.<anonymous>' call
      tmp$ret$0 = element >= rowIndFrom;
      if (tmp$ret$0) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$1 = tmp0_filterTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp0_iterator_0 = tmp$ret$2.f();
    while (tmp0_iterator_0.g()) {
      var i = tmp0_iterator_0.h();
      var tmp1_safe_receiver = _this__u8e3s4.t(i);
      if (tmp1_safe_receiver == null)
        null;
      else {
        var tmp$ret$5;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$4;
        // Inline function 'com.github.shwaka.kohomology.linalg.InPlaceSparseRowEchelonFormCalculator.findNonZero.<anonymous>' call
        var tmp0_safe_receiver = tmp1_safe_receiver.t(colInd);
        var tmp;
        if (tmp0_safe_receiver == null) {
          tmp = null;
        } else {
          var tmp$ret$3;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp_0;
          if (tmp0_safe_receiver.z17()) {
            return i;
          }
          tmp$ret$3 = tmp_0;
          tmp = Unit_getInstance();
        }
        tmp$ret$4 = tmp;
        tmp$ret$5 = tmp$ret$4;
      }
    }
    return null;
  }
  function InPlaceSparseRowEchelonFormCalculator$multiply$lambda($tmp0_run, $scalar) {
    return function (_anonymous_parameter_0__qggqh8, value) {
      return $tmp0_run.m13(value, $scalar);
    };
  }
  function InPlaceSparseRowEchelonFormCalculator(field) {
    this.c1z_1 = field;
  }
  InPlaceSparseRowEchelonFormCalculator.prototype.y1s = function (matrix, colCount) {
    var currentColInd = 0;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$_0();
    var pivots = tmp$ret$0;
    var exchangeCount = 0;
    var currentMatrix = toMutableMapDeeply(matrix, this);
    $l$loop: while (currentColInd < colCount) {
      var rowInd = findNonZero_0(currentMatrix, this, currentColInd, pivots.i());
      if (rowInd == null) {
        var tmp0 = currentColInd;
        currentColInd = tmp0 + 1 | 0;
        continue $l$loop;
      } else {
        eliminateOtherRows_0(currentMatrix, this, rowInd, currentColInd);
        if (!(rowInd === pivots.i())) {
          exchange(currentMatrix, rowInd, pivots.i());
          var tmp1 = exchangeCount;
          exchangeCount = tmp1 + 1 | 0;
        }
        pivots.a(currentColInd);
        var tmp2 = currentColInd;
        currentColInd = tmp2 + 1 | 0;
      }
    }
    return new SparseRowEchelonFormData(currentMatrix, pivots, exchangeCount);
  };
  InPlaceSparseRowEchelonFormCalculator.prototype.w1s = function (rowEchelonRowMap, pivots) {
    var rank = pivots.i();
    var reducedRowMap = toMutableMapDeeply(rowEchelonRowMap, this);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = reducedRowMap.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var i = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var row = tmp$ret$2;
      var tmp2_elvis_lhs = row.t(pivots.l(i));
      var tmp;
      if (tmp2_elvis_lhs == null) {
        throw Exception_init_$Create$("This can't happen!");
      } else {
        tmp = tmp2_elvis_lhs;
      }
      var elm = tmp;
      var tmp$ret$4;
      // Inline function 'kotlin.run' call
      var tmp0_run = this.c1z_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.linalg.InPlaceSparseRowEchelonFormCalculator.reduce.<anonymous>' call
      tmp$ret$3 = tmp0_run.b13(elm);
      tmp$ret$4 = tmp$ret$3;
      var elmInv = tmp$ret$4;
      multiply_3(row, this, elmInv);
    }
    var inductionVariable = 0;
    if (inductionVariable < rank)
      do {
        var i_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        eliminateOtherRows_0(reducedRowMap, this, i_0, pivots.l(i_0));
      }
       while (inductionVariable < rank);
    return reducedRowMap;
  };
  InPlaceSparseRowEchelonFormCalculator.$metadata$ = classMeta('InPlaceSparseRowEchelonFormCalculator', [SparseRowEchelonFormCalculator]);
  function SparseRowEchelonFormData(rowMap, pivots, exchangeCount) {
    this.t1s_1 = rowMap;
    this.u1s_1 = pivots;
    this.v1s_1 = exchangeCount;
  }
  SparseRowEchelonFormData.prototype.l1t = function () {
    return this.u1s_1;
  };
  SparseRowEchelonFormData.prototype.toString = function () {
    return 'SparseRowEchelonFormData(rowMap=' + this.t1s_1 + ', pivots=' + this.u1s_1 + ', exchangeCount=' + this.v1s_1 + ')';
  };
  SparseRowEchelonFormData.prototype.hashCode = function () {
    var result = hashCode(this.t1s_1);
    result = imul(result, 31) + hashCode(this.u1s_1) | 0;
    result = imul(result, 31) + this.v1s_1 | 0;
    return result;
  };
  SparseRowEchelonFormData.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SparseRowEchelonFormData))
      return false;
    var tmp0_other_with_cast = other instanceof SparseRowEchelonFormData ? other : THROW_CCE();
    if (!equals(this.t1s_1, tmp0_other_with_cast.t1s_1))
      return false;
    if (!equals(this.u1s_1, tmp0_other_with_cast.u1s_1))
      return false;
    if (!(this.v1s_1 === tmp0_other_with_cast.v1s_1))
      return false;
    return true;
  };
  SparseRowEchelonFormData.$metadata$ = classMeta('SparseRowEchelonFormData');
  function getShiftString($this, shift, showShiftExponent) {
    if (shift.op()) {
      return '';
    } else if (!showShiftExponent) {
      return 's';
    }
    var shiftIdentifierName = shift.p1e().d1z_1;
    return shiftIdentifierName === '1' ? 's' : 's_' + shiftIdentifierName;
  }
  function getIdentifier($this, original, shift, index, showShiftExponent) {
    var tmp0_safe_receiver = index;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();
    var indexString = tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs;
    var shiftString = getShiftString($this, shift, showShiftExponent);
    var originalName = original.p1e().a1o_1;
    return new Identifier_0(shiftString + originalName + indexString);
  }
  function CopiedName$Companion$getInternalPrintConfig$lambda(coeff, withSign) {
    return coeff.t1w(PrintType_PLAIN_getInstance(), withSign);
  }
  function CopiedName$Companion$getInternalPrintConfig$lambda_0($printConfig) {
    return function (monomial) {
      return monomial.v1a($printConfig);
    };
  }
  function CopiedName$Companion$getInternalPrintConfig$lambda_1(coeff, withSign) {
    return coeff.t1w(PrintType_TEX_getInstance(), withSign);
  }
  function CopiedName$Companion$getInternalPrintConfig$lambda_2($printConfig) {
    return function (monomial) {
      return monomial.v1a($printConfig);
    };
  }
  function toPlain($this, showShift) {
    var tmp0_safe_receiver = $this.g1z_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();
    var indexString = tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs;
    var tmp2_subject = showShift;
    var tmp0 = tmp2_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = $this.f1z_1.op() ? '' : '_';
        break;
      case 1:
        tmp = $this.f1z_1.op() ? '' : 's';
        break;
      case 2:
        var tmp_0;
        if ($this.f1z_1.op()) {
          tmp_0 = '';
        } else if ($this.f1z_1.q1e()) {
          tmp_0 = 's';
        } else {
          var shiftStr = toString($this.f1z_1);
          var tmp_1;
          if (shiftStr.length === 1) {
            tmp_1 = 's^' + shiftStr;
          } else {
            tmp_1 = 's^{' + shiftStr + '}';
          }
          tmp_0 = tmp_1;
        }

        tmp = tmp_0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    var shiftString = tmp;
    var tmp_2 = PrintType_PLAIN_getInstance();
    return shiftString + $this.e1z_1.v1a(PrintConfig_init_$Create$(tmp_2, null, null, null, null, 30, null)) + indexString;
  }
  function toTex($this, showShift) {
    var tmp0_safe_receiver = $this.g1z_1;
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();
    var tmp;
    if (tmp1_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.model.CopiedName.toTex.<anonymous>' call
      tmp$ret$0 = '_{(' + tmp1_safe_receiver + ')}';
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp2_elvis_lhs = tmp;
    var indexString = tmp2_elvis_lhs == null ? '' : tmp2_elvis_lhs;
    var tmp3_subject = showShift;
    var tmp0 = tmp3_subject.a2_1;
    var tmp_0;
    switch (tmp0) {
      case 0:
        tmp_0 = $this.f1z_1.op() ? '' : '\\bar';
        break;
      case 1:
        tmp_0 = $this.f1z_1.op() ? '' : 's';
        break;
      case 2:
        tmp_0 = $this.f1z_1.op() ? '' : $this.f1z_1.q1e() ? 's' : 's^{' + $this.f1z_1 + '}';
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    var shiftString = tmp_0;
    var tmp_1 = PrintType_TEX_getInstance();
    return shiftString + '{' + $this.e1z_1.v1a(PrintConfig_init_$Create$(tmp_1, null, null, null, null, 30, null)) + '}' + indexString;
  }
  function Companion_37() {
    Companion_instance_37 = this;
  }
  Companion_37.prototype.i1z = function (printConfig) {
    var tmp0_subject = printConfig.t1j_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        var tmp_0 = CopiedName$Companion$getInternalPrintConfig$lambda;
        var tmp_1 = CopiedName$Companion$getInternalPrintConfig$lambda_0(printConfig);
        tmp = InternalPrintConfig_init_$Create$(tmp_0, tmp_1, null, 4, null);
        break;
      case 1:
        var tmp_2 = CopiedName$Companion$getInternalPrintConfig$lambda_1;
        var tmp_3 = CopiedName$Companion$getInternalPrintConfig$lambda_2(printConfig);
        tmp = InternalPrintConfig_init_$Create$(tmp_2, tmp_3, null, 4, null);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  Companion_37.$metadata$ = objectMeta('Companion');
  var Companion_instance_37;
  function Companion_getInstance_38() {
    if (Companion_instance_37 == null)
      new Companion_37();
    return Companion_instance_37;
  }
  function CopiedName(original, shift, index, showShiftExponentInIdentifier) {
    Companion_getInstance_38();
    this.e1z_1 = original;
    this.f1z_1 = shift;
    this.g1z_1 = index;
    this.h1z_1 = getIdentifier(Companion_getInstance_38(), this.e1z_1, this.f1z_1, this.g1z_1, showShiftExponentInIdentifier);
  }
  CopiedName.prototype.p1e = function () {
    return this.h1z_1;
  };
  CopiedName.prototype.toString = function () {
    return toPlain(this, ShowShift_S_WITH_DEGREE_getInstance());
  };
  CopiedName.prototype.v1a = function (printConfig) {
    var tmp0_subject = printConfig.t1j_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = toPlain(this, printConfig.x1j_1);
        break;
      case 1:
        tmp = toTex(this, printConfig.x1j_1);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  CopiedName.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof CopiedName)
      other;
    else
      THROW_CCE();
    if (!equals(this.e1z_1, other.e1z_1))
      return false;
    if (!equals(this.f1z_1, other.f1z_1))
      return false;
    if (!(this.g1z_1 == other.g1z_1))
      return false;
    return true;
  };
  CopiedName.prototype.hashCode = function () {
    var result = hashCode(this.e1z_1);
    result = imul(31, result) + hashCode(this.f1z_1) | 0;
    var tmp = imul(31, result);
    var tmp0_elvis_lhs = this.g1z_1;
    result = tmp + (tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs) | 0;
    return result;
  };
  CopiedName.$metadata$ = classMeta('CopiedName', [IndeterminateName]);
  function copy(_this__u8e3s4, degreeGroup, shift, index, showShiftExponentInIdentifier) {
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = degreeGroup.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.model.copy.<anonymous>' call
    tmp$ret$0 = tmp0_run.z19(_this__u8e3s4.g1k_1, shift);
    tmp$ret$1 = tmp$ret$0;
    var newDegree = tmp$ret$1;
    return new Indeterminate(new CopiedName(_this__u8e3s4.f1k_1, shift, index, showShiftExponentInIdentifier), newDegree);
  }
  function copy$default(_this__u8e3s4, degreeGroup, shift, index, showShiftExponentInIdentifier, $mask0, $handler) {
    if (!(($mask0 & 4) === 0))
      index = null;
    if (!(($mask0 & 8) === 0))
      showShiftExponentInIdentifier = true;
    return copy(_this__u8e3s4, degreeGroup, shift, index, showShiftExponentInIdentifier);
  }
  function Companion_38() {
    Companion_instance_38 = this;
  }
  Companion_38.prototype.j1z = function (freeDGAlgebra) {
    return new CyclicModel(new CyclicModelFactory(freeDGAlgebra, StringIndeterminateName_init_$Create$('u', null, 2, null)));
  };
  Companion_38.$metadata$ = objectMeta('Companion');
  var Companion_instance_38;
  function Companion_getInstance_39() {
    if (Companion_instance_38 == null)
      new Companion_38();
    return Companion_instance_38;
  }
  function CyclicModel$inclusion$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_2().u14(this$0.r1z_1.k1z_1, this$0, this$0.r1z_1.q1z_1);
    };
  }
  function CyclicModel(factory) {
    Companion_getInstance_39();
    this.r1z_1 = factory;
    this.s1z_1 = Companion_getInstance_1().c11(factory.n1z_1, factory.o1z_1);
    this.t1z_1 = new FreeDGAlgebraContextImpl(this);
    this.u1z_1 = this.r1z_1.k1z_1.s14();
    this.v1z_1 = this.r1z_1.n1z_1;
    this.w1z_1 = this.r1z_1.n1z_1.c1g();
    this.x1z_1 = this.r1z_1.n1z_1.p1l();
    this.y1z_1 = this.r1z_1.p1z_1;
    var tmp = this;
    tmp.z1z_1 = lazy(CyclicModel$inclusion$delegate$lambda(this));
  }
  CyclicModel.prototype.o11 = function () {
    return this.s1z_1.o11();
  };
  CyclicModel.prototype.e11 = function () {
    return this.s1z_1.e11();
  };
  CyclicModel.prototype.g11 = function () {
    return this.s1z_1.g11();
  };
  CyclicModel.prototype.p11 = function () {
    return this.s1z_1.p11();
  };
  CyclicModel.prototype.k11 = function () {
    return this.s1z_1.k11();
  };
  CyclicModel.prototype.f12 = function () {
    return this.s1z_1.f12();
  };
  CyclicModel.prototype.l11 = function () {
    return this.s1z_1.l11();
  };
  CyclicModel.prototype.h11 = function () {
    return this.s1z_1.h11();
  };
  CyclicModel.prototype.f11 = function () {
    return this.s1z_1.f11();
  };
  CyclicModel.prototype.xb = function () {
    return this.s1z_1.xb();
  };
  CyclicModel.prototype.j11 = function () {
    return this.s1z_1.j11();
  };
  CyclicModel.prototype.n11 = function () {
    return this.s1z_1.n11();
  };
  CyclicModel.prototype.e12 = function () {
    return this.s1z_1.e12();
  };
  CyclicModel.prototype.d12 = function () {
    return this.s1z_1.d12();
  };
  CyclicModel.prototype.a20 = function (a, b) {
    return this.s1z_1.x11(a, b);
  };
  CyclicModel.prototype.x11 = function (a, b) {
    return this.a20(a, b);
  };
  CyclicModel.prototype.r1l = function (a, b) {
    return this.a20(a, b);
  };
  CyclicModel.prototype.q1l = function (a, b) {
    return this.a20(a, b);
  };
  CyclicModel.prototype.b20 = function (cocycle) {
    return this.s1z_1.i11(cocycle);
  };
  CyclicModel.prototype.i11 = function (cocycle) {
    return this.b20(cocycle);
  };
  CyclicModel.prototype.c20 = function (cocycle) {
    return this.b20(cocycle);
  };
  CyclicModel.prototype.d20 = function (gVector) {
    return this.s1z_1.w11(gVector);
  };
  CyclicModel.prototype.w11 = function (gVector) {
    return this.d20(gVector);
  };
  CyclicModel.prototype.t1l = function (gVector) {
    return this.d20(gVector);
  };
  CyclicModel.prototype.s1l = function (gVector) {
    return this.d20(gVector);
  };
  CyclicModel.prototype.e20 = function (gVectorOrZero, degree) {
    return this.s1z_1.v11(gVectorOrZero, degree);
  };
  CyclicModel.prototype.v11 = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.v1l = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.u1l = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.f20 = function (gVector) {
    return this.s1z_1.g12(gVector);
  };
  CyclicModel.prototype.g12 = function (gVector) {
    return this.f20(gVector);
  };
  CyclicModel.prototype.l1o = function (gVector) {
    return this.f20(gVector);
  };
  CyclicModel.prototype.k1o = function (gVector) {
    return this.f20(gVector);
  };
  CyclicModel.prototype.g20 = function (a, b) {
    return this.s1z_1.c12(a, b);
  };
  CyclicModel.prototype.c12 = function (a, b) {
    return this.g20(a, b);
  };
  CyclicModel.prototype.x1l = function (a, b) {
    return this.g20(a, b);
  };
  CyclicModel.prototype.w1l = function (a, b) {
    return this.g20(a, b);
  };
  CyclicModel.prototype.h20 = function (basisName, degree) {
    return this.s1z_1.s11(basisName, degree);
  };
  CyclicModel.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.h20(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.z1l = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.h20(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.y1l = function (basisName, degree) {
    return this.h20(basisName, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.i20 = function (vector, degree) {
    return this.s1z_1.q11(vector, degree);
  };
  CyclicModel.prototype.q11 = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.b1m = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.a1m = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  CyclicModel.prototype.j20 = function (vector, degree) {
    return this.s1z_1.r11(vector, degree);
  };
  CyclicModel.prototype.r11 = function (vector, degree) {
    return this.j20(vector, degree);
  };
  CyclicModel.prototype.d1m = function (vector, degree) {
    return this.j20(vector, degree);
  };
  CyclicModel.prototype.c1m = function (vector, degree) {
    return this.j20(vector, degree);
  };
  CyclicModel.prototype.m11 = function (degree) {
    return this.s1z_1.m11(degree);
  };
  CyclicModel.prototype.t11 = function (degree) {
    return this.s1z_1.t11(degree);
  };
  CyclicModel.prototype.u11 = function (degree) {
    return this.s1z_1.u11(degree);
  };
  CyclicModel.prototype.k20 = function (scalar, gVector) {
    return this.s1z_1.z11(scalar, gVector);
  };
  CyclicModel.prototype.z11 = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  CyclicModel.prototype.f1m = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  CyclicModel.prototype.e1m = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  CyclicModel.prototype.l20 = function (a, b) {
    return this.s1z_1.a12(a, b);
  };
  CyclicModel.prototype.a12 = function (a, b) {
    return this.l20(a, b);
  };
  CyclicModel.prototype.n1o = function (a, b) {
    return this.l20(a, b);
  };
  CyclicModel.prototype.m1o = function (a, b) {
    return this.l20(a, b);
  };
  CyclicModel.prototype.m20 = function (a, b) {
    return this.s1z_1.b12(a, b);
  };
  CyclicModel.prototype.b12 = function (a, b) {
    return this.m20(a, b);
  };
  CyclicModel.prototype.p1o = function (a, b) {
    return this.m20(a, b);
  };
  CyclicModel.prototype.o1o = function (a, b) {
    return this.m20(a, b);
  };
  CyclicModel.prototype.n20 = function (generators, text) {
    return this.s1z_1.h12(generators, text);
  };
  CyclicModel.prototype.h12 = function (generators, text) {
    return this.n20(generators, text);
  };
  CyclicModel.prototype.r1o = function (generators, text) {
    return this.n20(generators, text);
  };
  CyclicModel.prototype.q1o = function (generators, text) {
    return this.n20(generators, text);
  };
  CyclicModel.prototype.o20 = function (a, b) {
    return this.s1z_1.y11(a, b);
  };
  CyclicModel.prototype.y11 = function (a, b) {
    return this.o20(a, b);
  };
  CyclicModel.prototype.h1m = function (a, b) {
    return this.o20(a, b);
  };
  CyclicModel.prototype.g1m = function (a, b) {
    return this.o20(a, b);
  };
  CyclicModel.prototype.t14 = function () {
    return this.t1z_1;
  };
  CyclicModel.prototype.s14 = function () {
    return this.u1z_1;
  };
  CyclicModel.prototype.y1j = function () {
    return this.v1z_1;
  };
  CyclicModel.prototype.c1g = function () {
    return this.w1z_1;
  };
  CyclicModel.prototype.p1l = function () {
    return this.x1z_1;
  };
  CyclicModel.prototype.toString = function () {
    return '(' + this.v1z_1 + ', d)';
  };
  CyclicModel.$metadata$ = classMeta('CyclicModel', [FreeDGAlgebra, DGAlgebra]);
  function CyclicModelFactory(freeDGAlgebra, periodicity) {
    this.k1z_1 = freeDGAlgebra;
    this.l1z_1 = periodicity;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.k1z_1.c1g();
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>' call
        tmp$ret$1 = equals(element.f1k_1, this.l1z_1);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0) {
      throw IllegalArgumentException_init_$Create$('The free DGA ' + this.k1z_1 + " contains an indeterminate '" + this.l1z_1 + "', " + 'which is given as the generator for periodicity');
    }
    this.m1z_1 = this.k1z_1.h11();
    var tmp_0 = this;
    var tmp$ret$6;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$5;
    // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.cyclicGAlgebra.<anonymous>' call
    var degreeGroup = this.k1z_1.s14();
    var tmp_1 = new Indeterminate(this.l1z_1, degreeGroup.zn(2));
    var tmp_2 = degreeGroup.x12();
    var tmp_3 = listOf(copy$default(tmp_1, degreeGroup, tmp_2, null, false, 12, null));
    var tmp$ret$4;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.k1z_1.c1g();
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator_0 = tmp0_map.f();
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.cyclicGAlgebra.<anonymous>.<anonymous>' call
      var tmp_4 = degreeGroup.zn(1);
      var tmp_5 = copy$default(item, degreeGroup, tmp_4, null, false, 12, null);
      var tmp_6 = degreeGroup.x12();
      tmp$ret$2 = listOf_0([tmp_5, copy$default(item, degreeGroup, tmp_6, null, false, 12, null)]);
      tmp0_mapTo.a(tmp$ret$2);
    }
    tmp$ret$3 = tmp0_mapTo;
    tmp$ret$4 = tmp$ret$3;
    var loopSpaceIndeterminateList = plus(tmp_3, flatten(tmp$ret$4));
    var tmp_7 = Companion_getInstance_26();
    tmp$ret$5 = tmp_7.s1n(this.m1z_1, degreeGroup, loopSpaceIndeterminateList, null, 8, null);
    tmp$ret$6 = tmp$ret$5;
    tmp_0.n1z_1 = tmp$ret$6;
    var n = this.k1z_1.c1g().i();
    var cyclicGeneratorList = this.n1z_1.d1g();
    var tmp_8 = this;
    var tmp$ret$11;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$10;
    // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>' call
    var tmp_9 = listOf(this.n1z_1.d12());
    var tmp$ret$9;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map_0 = until(0, n);
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
    var inductionVariable = tmp0_map_0.h5_1;
    var last = tmp0_map_0.i5_1;
    if (inductionVariable <= last)
      do {
        var item_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$7;
        // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>.<anonymous>' call
        tmp$ret$7 = listOf_0([this.n1z_1.d12(), cyclicGeneratorList.l(imul(2, item_0) + 1 | 0)]);
        tmp0_mapTo_0.a(tmp$ret$7);
      }
       while (!(item_0 === last));
    tmp$ret$8 = tmp0_mapTo_0;
    tmp$ret$9 = tmp$ret$8;
    var suspensionValueList = plus(tmp_9, flatten(tmp$ret$9));
    tmp$ret$10 = this.n1z_1.t1k(suspensionValueList, -1);
    tmp$ret$11 = tmp$ret$10;
    tmp_8.p1z_1 = tmp$ret$11;
    var tmp_10 = this;
    var tmp$ret$14;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map_1 = until(0, n);
    var tmp$ret$13;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_1, 10));
    var inductionVariable_0 = tmp0_map_1.h5_1;
    var last_0 = tmp0_map_1.i5_1;
    if (inductionVariable_0 <= last_0)
      do {
        var item_1 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var tmp$ret$12;
        // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>' call
        tmp$ret$12 = cyclicGeneratorList.l(imul(2, item_1) + 2 | 0);
        tmp0_mapTo_1.a(tmp$ret$12);
      }
       while (!(item_1 === last_0));
    tmp$ret$13 = tmp0_mapTo_1;
    tmp$ret$14 = tmp$ret$13;
    tmp_10.q1z_1 = this.k1z_1.z1k(this.n1z_1, tmp$ret$14);
    var tmp$ret$23;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$22;
    // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>' call
    var u = cyclicGeneratorList.l(0);
    var baseSpaceGeneratorList = this.k1z_1.d1g();
    var tmp_11 = listOf(this.n1z_1.d12());
    var tmp$ret$21;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$20;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_2 = ArrayList_init_$Create$(collectionSizeOrDefault(baseSpaceGeneratorList, 10));
    var tmp0_iterator_1 = baseSpaceGeneratorList.f();
    while (tmp0_iterator_1.g()) {
      var item_2 = tmp0_iterator_1.h();
      var tmp$ret$19;
      // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>.<anonymous>' call
      var tmp$ret$16;
      // Inline function 'kotlin.run' call
      var tmp0_run = this.k1z_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$15;
      // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$15 = tmp0_run.l12().e15(item_2);
      tmp$ret$16 = tmp$ret$15;
      var dv = tmp$ret$16;
      var tmp$ret$18;
      // Inline function 'kotlin.run' call
      var tmp1_run = this.n1z_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$17;
      // Inline function 'com.github.shwaka.kohomology.model.CyclicModelFactory.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$17 = listOf_0([tmp1_run.z13(this.p1z_1.e15(this.q1z_1.e15(dv))), tmp1_run.i13(this.q1z_1.e15(dv), tmp1_run.r13(u, this.p1z_1.e15(this.q1z_1.e15(item_2))))]);
      tmp$ret$18 = tmp$ret$17;
      tmp$ret$19 = tmp$ret$18;
      tmp0_mapTo_2.a(tmp$ret$19);
    }
    tmp$ret$20 = tmp0_mapTo_2;
    tmp$ret$21 = tmp$ret$20;
    tmp$ret$22 = plus(tmp_11, flatten(tmp$ret$21));
    tmp$ret$23 = tmp$ret$22;
    var differentialValueList = tmp$ret$23;
    this.o1z_1 = this.n1z_1.t1k(differentialValueList, 1);
  }
  CyclicModelFactory.prototype.z1i = function () {
    return this.k1z_1;
  };
  CyclicModelFactory.prototype.p20 = function () {
    return this.l1z_1;
  };
  CyclicModelFactory.prototype.h11 = function () {
    return this.m1z_1;
  };
  CyclicModelFactory.prototype.q20 = function () {
    return this.n1z_1;
  };
  CyclicModelFactory.prototype.r20 = function () {
    return this.p1z_1;
  };
  CyclicModelFactory.prototype.s20 = function () {
    return this.q1z_1;
  };
  CyclicModelFactory.$metadata$ = classMeta('CyclicModelFactory');
  function withShiftDegreeForMultiDegree($this, freeDGAlgebra) {
    var degreeGroup = freeDGAlgebra.s14();
    if (!(degreeGroup instanceof MultiDegreeGroup))
      throw new NotImplementedError('not supported!');
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = degreeGroup.p1f_1;
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'com.github.shwaka.kohomology.model.Companion.withShiftDegreeForMultiDegree.<anonymous>' call
        tmp$ret$1 = element.a1g_1 === 'S';
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0)
      throw IllegalArgumentException_init_$Create$('indeterminateList cannot contain an indeterminate of name "S"');
    var newDegreeGroup = new MultiDegreeGroup(plus(degreeGroup.p1f_1, listOf(new DegreeIndeterminate('S', 0))));
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp1_run = newDegreeGroup.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'com.github.shwaka.kohomology.model.Companion.withShiftDegreeForMultiDegree.<anonymous>' call
    var s = last(newDegreeGroup.d1g());
    tmp$ret$2 = tmp1_run.d1f(tmp1_run.f1f(-2, s), 1);
    tmp$ret$3 = tmp$ret$2;
    var shiftDegree = tmp$ret$3;
    var degreeMorphism = new MultiDegreeMorphism(degreeGroup, newDegreeGroup, dropLast(newDegreeGroup.d1g(), 1));
    var tmp0_container = freeDGAlgebra.y1k(degreeMorphism);
    var newFreeDGAlgebra = tmp0_container.w3();
    return FreeLoopSpace_init_$Create$(newFreeDGAlgebra, shiftDegree);
  }
  function withShiftDegreeForIntDegree($this, freeDGAlgebra) {
    var degreeGroup = freeDGAlgebra.s14();
    if (!(degreeGroup instanceof IntDegreeGroup))
      throw new NotImplementedError('not supported!');
    var newDegreeGroup = new MultiDegreeGroup(listOf(new DegreeIndeterminate('S', 0)));
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = newDegreeGroup.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.model.Companion.withShiftDegreeForIntDegree.<anonymous>' call
    var s = last(newDegreeGroup.d1g());
    tmp$ret$0 = tmp0_run.d1f(tmp0_run.f1f(-2, s), 1);
    tmp$ret$1 = tmp$ret$0;
    var shiftDegree = tmp$ret$1;
    var degreeMorphism = new InclusionFromIntDegreeToMultiDegree(newDegreeGroup);
    var tmp0_container = freeDGAlgebra.y1k(degreeMorphism);
    var newFreeDGAlgebra = tmp0_container.w3();
    return FreeLoopSpace_init_$Create$(newFreeDGAlgebra, shiftDegree);
  }
  function FreeLoopSpace_init_$Init$(freeDGAlgebra, shiftDegree, $this) {
    FreeLoopSpace.call($this, new FreeLoopSpaceFactory(freeDGAlgebra, shiftDegree));
    return $this;
  }
  function FreeLoopSpace_init_$Create$(freeDGAlgebra, shiftDegree) {
    return FreeLoopSpace_init_$Init$(freeDGAlgebra, shiftDegree, Object.create(FreeLoopSpace.prototype));
  }
  function Companion_39() {
    Companion_instance_39 = this;
    this.t20_1 = 'S';
  }
  Companion_39.prototype.u20 = function (freeDGAlgebra) {
    var tmp0_subject = freeDGAlgebra.s14();
    var tmp;
    if (tmp0_subject instanceof IntDegreeGroup) {
      tmp = withShiftDegreeForIntDegree(this, isInterface(freeDGAlgebra, FreeDGAlgebra) ? freeDGAlgebra : THROW_CCE());
    } else {
      if (tmp0_subject instanceof MultiDegreeGroup) {
        tmp = withShiftDegreeForMultiDegree(this, isInterface(freeDGAlgebra, FreeDGAlgebra) ? freeDGAlgebra : THROW_CCE());
      } else {
        throw UnsupportedOperationException_init_$Create$('withShiftDegree is supported only for IntDegree and MultiDegree');
      }
    }
    return tmp;
  };
  Companion_39.$metadata$ = objectMeta('Companion');
  var Companion_instance_39;
  function Companion_getInstance_40() {
    if (Companion_instance_39 == null)
      new Companion_39();
    return Companion_instance_39;
  }
  function FreeLoopSpace$inclusion$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_2().u14(this$0.c21_1.v20_1, this$0, this$0.c21_1.b21_1);
    };
  }
  function FreeLoopSpace(factory) {
    Companion_getInstance_40();
    this.c21_1 = factory;
    this.d21_1 = Companion_getInstance_1().c11(factory.y20_1, factory.z20_1);
    this.e21_1 = new FreeDGAlgebraContextImpl(this);
    this.f21_1 = this.c21_1.v20_1.s14();
    this.g21_1 = this.c21_1.y20_1;
    this.h21_1 = this.c21_1.y20_1.c1g();
    this.i21_1 = this.c21_1.y20_1.p1l();
    this.j21_1 = Companion_getInstance_3().g15(this, this.c21_1.a21_1);
    var tmp = this;
    tmp.k21_1 = lazy(FreeLoopSpace$inclusion$delegate$lambda(this));
    this.l21_1 = this.c21_1.x20_1;
    this.m21_1 = this.c21_1.v20_1;
  }
  FreeLoopSpace.prototype.o11 = function () {
    return this.d21_1.o11();
  };
  FreeLoopSpace.prototype.e11 = function () {
    return this.d21_1.e11();
  };
  FreeLoopSpace.prototype.g11 = function () {
    return this.d21_1.g11();
  };
  FreeLoopSpace.prototype.p11 = function () {
    return this.d21_1.p11();
  };
  FreeLoopSpace.prototype.k11 = function () {
    return this.d21_1.k11();
  };
  FreeLoopSpace.prototype.f12 = function () {
    return this.d21_1.f12();
  };
  FreeLoopSpace.prototype.l11 = function () {
    return this.d21_1.l11();
  };
  FreeLoopSpace.prototype.h11 = function () {
    return this.d21_1.h11();
  };
  FreeLoopSpace.prototype.f11 = function () {
    return this.d21_1.f11();
  };
  FreeLoopSpace.prototype.xb = function () {
    return this.d21_1.xb();
  };
  FreeLoopSpace.prototype.j11 = function () {
    return this.d21_1.j11();
  };
  FreeLoopSpace.prototype.n11 = function () {
    return this.d21_1.n11();
  };
  FreeLoopSpace.prototype.e12 = function () {
    return this.d21_1.e12();
  };
  FreeLoopSpace.prototype.d12 = function () {
    return this.d21_1.d12();
  };
  FreeLoopSpace.prototype.a20 = function (a, b) {
    return this.d21_1.x11(a, b);
  };
  FreeLoopSpace.prototype.x11 = function (a, b) {
    return this.a20(a, b);
  };
  FreeLoopSpace.prototype.r1l = function (a, b) {
    return this.a20(a, b);
  };
  FreeLoopSpace.prototype.q1l = function (a, b) {
    return this.a20(a, b);
  };
  FreeLoopSpace.prototype.b20 = function (cocycle) {
    return this.d21_1.i11(cocycle);
  };
  FreeLoopSpace.prototype.i11 = function (cocycle) {
    return this.b20(cocycle);
  };
  FreeLoopSpace.prototype.c20 = function (cocycle) {
    return this.b20(cocycle);
  };
  FreeLoopSpace.prototype.d20 = function (gVector) {
    return this.d21_1.w11(gVector);
  };
  FreeLoopSpace.prototype.w11 = function (gVector) {
    return this.d20(gVector);
  };
  FreeLoopSpace.prototype.t1l = function (gVector) {
    return this.d20(gVector);
  };
  FreeLoopSpace.prototype.s1l = function (gVector) {
    return this.d20(gVector);
  };
  FreeLoopSpace.prototype.e20 = function (gVectorOrZero, degree) {
    return this.d21_1.v11(gVectorOrZero, degree);
  };
  FreeLoopSpace.prototype.v11 = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.v1l = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.u1l = function (gVectorOrZero, degree) {
    return this.e20(gVectorOrZero, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.f20 = function (gVector) {
    return this.d21_1.g12(gVector);
  };
  FreeLoopSpace.prototype.g12 = function (gVector) {
    return this.f20(gVector);
  };
  FreeLoopSpace.prototype.l1o = function (gVector) {
    return this.f20(gVector);
  };
  FreeLoopSpace.prototype.k1o = function (gVector) {
    return this.f20(gVector);
  };
  FreeLoopSpace.prototype.g20 = function (a, b) {
    return this.d21_1.c12(a, b);
  };
  FreeLoopSpace.prototype.c12 = function (a, b) {
    return this.g20(a, b);
  };
  FreeLoopSpace.prototype.x1l = function (a, b) {
    return this.g20(a, b);
  };
  FreeLoopSpace.prototype.w1l = function (a, b) {
    return this.g20(a, b);
  };
  FreeLoopSpace.prototype.h20 = function (basisName, degree) {
    return this.d21_1.s11(basisName, degree);
  };
  FreeLoopSpace.prototype.s11 = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.h20(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.z1l = function (basisName, degree) {
    var tmp = basisName instanceof Monomial ? basisName : THROW_CCE();
    return this.h20(tmp, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.y1l = function (basisName, degree) {
    return this.h20(basisName, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.i20 = function (vector, degree) {
    return this.d21_1.q11(vector, degree);
  };
  FreeLoopSpace.prototype.q11 = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.b1m = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.a1m = function (vector, degree) {
    return this.i20(vector, isInterface(degree, Degree) ? degree : THROW_CCE());
  };
  FreeLoopSpace.prototype.j20 = function (vector, degree) {
    return this.d21_1.r11(vector, degree);
  };
  FreeLoopSpace.prototype.r11 = function (vector, degree) {
    return this.j20(vector, degree);
  };
  FreeLoopSpace.prototype.d1m = function (vector, degree) {
    return this.j20(vector, degree);
  };
  FreeLoopSpace.prototype.c1m = function (vector, degree) {
    return this.j20(vector, degree);
  };
  FreeLoopSpace.prototype.m11 = function (degree) {
    return this.d21_1.m11(degree);
  };
  FreeLoopSpace.prototype.t11 = function (degree) {
    return this.d21_1.t11(degree);
  };
  FreeLoopSpace.prototype.u11 = function (degree) {
    return this.d21_1.u11(degree);
  };
  FreeLoopSpace.prototype.k20 = function (scalar, gVector) {
    return this.d21_1.z11(scalar, gVector);
  };
  FreeLoopSpace.prototype.z11 = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeLoopSpace.prototype.f1m = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeLoopSpace.prototype.e1m = function (scalar, gVector) {
    return this.k20(isInterface(scalar, Scalar) ? scalar : THROW_CCE(), gVector);
  };
  FreeLoopSpace.prototype.l20 = function (a, b) {
    return this.d21_1.a12(a, b);
  };
  FreeLoopSpace.prototype.a12 = function (a, b) {
    return this.l20(a, b);
  };
  FreeLoopSpace.prototype.n1o = function (a, b) {
    return this.l20(a, b);
  };
  FreeLoopSpace.prototype.m1o = function (a, b) {
    return this.l20(a, b);
  };
  FreeLoopSpace.prototype.m20 = function (a, b) {
    return this.d21_1.b12(a, b);
  };
  FreeLoopSpace.prototype.b12 = function (a, b) {
    return this.m20(a, b);
  };
  FreeLoopSpace.prototype.p1o = function (a, b) {
    return this.m20(a, b);
  };
  FreeLoopSpace.prototype.o1o = function (a, b) {
    return this.m20(a, b);
  };
  FreeLoopSpace.prototype.n20 = function (generators, text) {
    return this.d21_1.h12(generators, text);
  };
  FreeLoopSpace.prototype.h12 = function (generators, text) {
    return this.n20(generators, text);
  };
  FreeLoopSpace.prototype.r1o = function (generators, text) {
    return this.n20(generators, text);
  };
  FreeLoopSpace.prototype.q1o = function (generators, text) {
    return this.n20(generators, text);
  };
  FreeLoopSpace.prototype.o20 = function (a, b) {
    return this.d21_1.y11(a, b);
  };
  FreeLoopSpace.prototype.y11 = function (a, b) {
    return this.o20(a, b);
  };
  FreeLoopSpace.prototype.h1m = function (a, b) {
    return this.o20(a, b);
  };
  FreeLoopSpace.prototype.g1m = function (a, b) {
    return this.o20(a, b);
  };
  FreeLoopSpace.prototype.t14 = function () {
    return this.e21_1;
  };
  FreeLoopSpace.prototype.s14 = function () {
    return this.f21_1;
  };
  FreeLoopSpace.prototype.y1j = function () {
    return this.g21_1;
  };
  FreeLoopSpace.prototype.c1g = function () {
    return this.h21_1;
  };
  FreeLoopSpace.prototype.p1l = function () {
    return this.i21_1;
  };
  FreeLoopSpace.prototype.toString = function () {
    return '(' + this.g21_1 + ', d)';
  };
  FreeLoopSpace.$metadata$ = classMeta('FreeLoopSpace', [FreeDGAlgebra, DGAlgebra]);
  function CopiedName$Companion$getInternalPrintConfig$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.i1z(p0);
    };
    l.callableName = 'getInternalPrintConfig';
    return l;
  }
  function FreeLoopSpaceFactory(freeDGAlgebra, shiftDegree) {
    this.v20_1 = freeDGAlgebra;
    this.w20_1 = this.v20_1.h11();
    var tmp = this;
    var tmp0_elvis_lhs = shiftDegree;
    tmp.x20_1 = tmp0_elvis_lhs == null ? this.v20_1.s14().zn(1) : tmp0_elvis_lhs;
    var tmp_0 = this;
    var tmp$ret$9;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$8;
    // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.loopSpaceGAlgebra.<anonymous>' call
    var degreeGroup = this.v20_1.s14();
    var shift = this.x20_1;
    var tmp$ret$7;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.v20_1.c1g();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$6;
    // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.loopSpaceGAlgebra.<anonymous>.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_let, 10));
    var tmp0_iterator = tmp0_let.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.loopSpaceGAlgebra.<anonymous>.<anonymous>.<anonymous>' call
      var tmp_1 = degreeGroup.x12();
      tmp$ret$0 = copy$default(item, degreeGroup, tmp_1, null, false, 12, null);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp_2 = tmp$ret$2;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_let, 10));
    var tmp0_iterator_0 = tmp0_let.f();
    while (tmp0_iterator_0.g()) {
      var item_0 = tmp0_iterator_0.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.loopSpaceGAlgebra.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$3 = copy$default(item_0, degreeGroup, shift, null, false, 4, null);
      tmp0_mapTo_0.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo_0;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = plus(tmp_2, tmp$ret$5);
    tmp$ret$7 = tmp$ret$6;
    var loopSpaceIndeterminateList = tmp$ret$7;
    var tmp_3 = Companion_getInstance_26();
    tmp$ret$8 = tmp_3.s1k(this.w20_1, degreeGroup, loopSpaceIndeterminateList, CopiedName$Companion$getInternalPrintConfig$ref(Companion_getInstance_38()));
    tmp$ret$9 = tmp$ret$8;
    tmp_0.y20_1 = tmp$ret$9;
    var n = this.v20_1.c1g().i();
    var loopSpaceGeneratorList = this.y20_1.d1g();
    var tmp_4 = this;
    var tmp$ret$16;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$15;
    // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>' call
    var tmp$ret$11;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.v20_1.s14().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$10;
    // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>' call
    tmp$ret$10 = tmp0_run.g1f(this.x20_1);
    tmp$ret$11 = tmp$ret$10;
    var suspensionDegree = tmp$ret$11;
    var tmp_5 = takeLast(loopSpaceGeneratorList, n);
    var tmp$ret$14;
    // Inline function 'kotlin.collections.List' call
    var tmp$ret$13;
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(n);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < n)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        var tmp$ret$12;
        // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>' call
        tmp$ret$12 = this.y20_1.d12();
        list.a(tmp$ret$12);
      }
       while (inductionVariable < n);
    tmp$ret$13 = list;
    tmp$ret$14 = tmp$ret$13;
    var suspensionValueList = plus(tmp_5, tmp$ret$14);
    tmp$ret$15 = this.y20_1.h1k(suspensionValueList, suspensionDegree);
    tmp$ret$16 = tmp$ret$15;
    tmp_4.a21_1 = tmp$ret$16;
    this.b21_1 = this.v20_1.z1k(this.y20_1, take(loopSpaceGeneratorList, n));
    var tmp$ret$30;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$29;
    // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>' call
    var baseSpaceGeneratorList = this.v20_1.d1g();
    var tmp$ret$21;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$20;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(baseSpaceGeneratorList, 10));
    var tmp0_iterator_1 = baseSpaceGeneratorList.f();
    while (tmp0_iterator_1.g()) {
      var item_1 = tmp0_iterator_1.h();
      var tmp$ret$19;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>' call
      var tmp$ret$18;
      // Inline function 'kotlin.run' call
      var tmp0_run_0 = this.v20_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$17;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$17 = this.b21_1.e15(tmp0_run_0.l12().e15(item_1));
      tmp$ret$18 = tmp$ret$17;
      tmp$ret$19 = tmp$ret$18;
      tmp0_mapTo_1.a(tmp$ret$19);
    }
    tmp$ret$20 = tmp0_mapTo_1;
    tmp$ret$21 = tmp$ret$20;
    var valueList1 = tmp$ret$21;
    var tmp$ret$28;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$27;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_2 = ArrayList_init_$Create$(collectionSizeOrDefault(baseSpaceGeneratorList, 10));
    var tmp0_iterator_2 = baseSpaceGeneratorList.f();
    while (tmp0_iterator_2.g()) {
      var item_2 = tmp0_iterator_2.h();
      var tmp$ret$26;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>' call
      var tmp$ret$23;
      // Inline function 'kotlin.run' call
      var tmp0_run_1 = this.v20_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$22;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$22 = tmp0_run_1.l12().e15(item_2);
      tmp$ret$23 = tmp$ret$22;
      var dv = tmp$ret$23;
      var tmp$ret$25;
      // Inline function 'kotlin.run' call
      var tmp1_run = this.y20_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$24;
      // Inline function 'com.github.shwaka.kohomology.model.FreeLoopSpaceFactory.<anonymous>.<anonymous>.<anonymous>' call
      tmp$ret$24 = tmp1_run.z13(this.a21_1.e15(this.b21_1.e15(dv)));
      tmp$ret$25 = tmp$ret$24;
      tmp$ret$26 = tmp$ret$25;
      tmp0_mapTo_2.a(tmp$ret$26);
    }
    tmp$ret$27 = tmp0_mapTo_2;
    tmp$ret$28 = tmp$ret$27;
    var valueList2 = tmp$ret$28;
    tmp$ret$29 = plus(valueList1, valueList2);
    tmp$ret$30 = tmp$ret$29;
    var differentialValueList = tmp$ret$30;
    this.z20_1 = this.y20_1.t1k(differentialValueList, 1);
  }
  FreeLoopSpaceFactory.prototype.z1i = function () {
    return this.v20_1;
  };
  FreeLoopSpaceFactory.prototype.h11 = function () {
    return this.w20_1;
  };
  FreeLoopSpaceFactory.prototype.n21 = function () {
    return this.x20_1;
  };
  FreeLoopSpaceFactory.prototype.o21 = function () {
    return this.y20_1;
  };
  FreeLoopSpaceFactory.prototype.r20 = function () {
    return this.a21_1;
  };
  FreeLoopSpaceFactory.prototype.s20 = function () {
    return this.b21_1;
  };
  FreeLoopSpaceFactory.$metadata$ = classMeta('FreeLoopSpaceFactory');
  function Companion_40() {
    Companion_instance_40 = this;
  }
  Companion_40.prototype.p21 = function (numerator, denominator) {
    if (numerator.op())
      return KotlinRationalField_getInstance().s21_1;
    if (numerator.equals(denominator))
      return KotlinRationalField_getInstance().t21_1;
    var red = reduce(numerator, denominator);
    return new KotlinRational(red.v4_1, red.w4_1);
  };
  Companion_40.prototype.y21 = function (numerator, denominator) {
    return Companion_getInstance_41().p21(BigInteger_init_$Create$(numerator), BigInteger_init_$Create$(denominator));
  };
  Companion_40.prototype.z21 = function (numerator, denominator) {
    if (numerator.op())
      return KotlinRationalField_getInstance().s21_1;
    if (numerator.equals(denominator))
      return KotlinRationalField_getInstance().t21_1;
    // Inline function 'com.github.shwaka.kococo.debugOnly' call
    return new KotlinRational(numerator, denominator);
  };
  Companion_40.prototype.a22 = function (numerator, denominator) {
    // Inline function 'com.github.shwaka.kococo.debugOnly' call
    return new KotlinRational(BigInteger_init_$Create$(numerator), BigInteger_init_$Create$(denominator));
  };
  Companion_40.$metadata$ = objectMeta('Companion');
  var Companion_instance_40;
  function Companion_getInstance_41() {
    if (Companion_instance_40 == null)
      new Companion_40();
    return Companion_instance_40;
  }
  function toStringWithoutSign($this) {
    var numeratorAbs = $this.b22_1.np();
    return $this.b22_1.equals(Companion_getInstance().gp_1) ? '0' : $this.c22_1.equals(Companion_getInstance().hp_1) ? numeratorAbs.toString() : '' + numeratorAbs + '/' + $this.c22_1;
  }
  function toTexWithoutSign($this) {
    var numeratorAbs = $this.b22_1.np();
    return $this.b22_1.equals(Companion_getInstance().gp_1) ? '0' : $this.c22_1.equals(Companion_getInstance().hp_1) ? numeratorAbs.toString() : '\\frac{' + numeratorAbs + '}{' + $this.c22_1 + '}';
  }
  function toTex_0($this) {
    var tmp;
    if ($this.b22_1.equals(Companion_getInstance().gp_1)) {
      tmp = '0';
    } else if ($this.c22_1.equals(Companion_getInstance().hp_1)) {
      tmp = $this.b22_1.toString();
    } else {
      var sign = $this.b22_1.ko() ? '-' : '';
      tmp = sign + '\\frac{' + $this.b22_1.np() + '}{' + $this.c22_1 + '}';
    }
    return tmp;
  }
  function KotlinRational(numerator, denominator) {
    Companion_getInstance_41();
    this.b22_1 = numerator;
    this.c22_1 = denominator;
  }
  KotlinRational.prototype.op = function () {
    return this.b22_1.op();
  };
  KotlinRational.prototype.s1w = function () {
    return this.b22_1.lo() ? true : this.b22_1.op();
  };
  KotlinRational.prototype.d22 = function (printConfig, withSign) {
    var tmp0_subject = printConfig.t1j_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = withSign ? this.toString() : toStringWithoutSign(this);
        break;
      case 1:
        tmp = withSign ? toTex_0(this) : toTexWithoutSign(this);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  KotlinRational.prototype.toString = function () {
    return this.b22_1.equals(Companion_getInstance().gp_1) ? '0' : this.c22_1.equals(Companion_getInstance().hp_1) ? this.b22_1.toString() : '' + this.b22_1 + '/' + this.c22_1;
  };
  KotlinRational.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof KotlinRational)
      other;
    else
      THROW_CCE();
    if (!this.b22_1.equals(other.b22_1))
      return false;
    if (!this.c22_1.equals(other.c22_1))
      return false;
    return true;
  };
  KotlinRational.prototype.hashCode = function () {
    var result = this.b22_1.hashCode();
    result = imul(31, result) + this.c22_1.hashCode() | 0;
    return result;
  };
  KotlinRational.$metadata$ = classMeta('KotlinRational', [Scalar]);
  function KotlinRationalField() {
    KotlinRationalField_instance = this;
    this.q21_1 = 0;
    this.r21_1 = new ScalarContextImpl(this);
    this.s21_1 = this.zn(0);
    this.t21_1 = this.zn(1);
    this.u21_1 = this.zn(2);
    this.v21_1 = this.zn(3);
    this.w21_1 = this.zn(4);
    this.x21_1 = this.zn(5);
  }
  KotlinRationalField.prototype.t14 = function () {
    return this.r21_1;
  };
  KotlinRationalField.prototype.e22 = function (scalar) {
    return true;
  };
  KotlinRationalField.prototype.j1v = function (scalar) {
    return this.e22(scalar instanceof KotlinRational ? scalar : THROW_CCE());
  };
  KotlinRationalField.prototype.f22 = function (a, b) {
    var numerator = a.b22_1.qo(b.c22_1).oo(b.b22_1.qo(a.c22_1));
    var denominator = a.c22_1.qo(b.c22_1);
    return Companion_getInstance_41().p21(numerator, denominator);
  };
  KotlinRationalField.prototype.m1w = function (a, b) {
    var tmp = a instanceof KotlinRational ? a : THROW_CCE();
    return this.f22(tmp, b instanceof KotlinRational ? b : THROW_CCE());
  };
  KotlinRationalField.prototype.g22 = function (a, b) {
    var numerator = a.b22_1.qo(b.c22_1).po(b.b22_1.qo(a.c22_1));
    var denominator = a.c22_1.qo(b.c22_1);
    return Companion_getInstance_41().p21(numerator, denominator);
  };
  KotlinRationalField.prototype.n1w = function (a, b) {
    var tmp = a instanceof KotlinRational ? a : THROW_CCE();
    return this.g22(tmp, b instanceof KotlinRational ? b : THROW_CCE());
  };
  KotlinRationalField.prototype.h22 = function (a, b) {
    return Companion_getInstance_41().p21(a.b22_1.qo(b.b22_1), a.c22_1.qo(b.c22_1));
  };
  KotlinRationalField.prototype.o1w = function (a, b) {
    var tmp = a instanceof KotlinRational ? a : THROW_CCE();
    return this.h22(tmp, b instanceof KotlinRational ? b : THROW_CCE());
  };
  KotlinRationalField.prototype.i22 = function (a, b) {
    if (b.equals(Companion_getInstance_41().y21(0, 1))) {
      throw ArithmeticException_init_$Create$('division by zero (KotlinRational(0, 1))');
    }
    return Companion_getInstance_41().p21(a.b22_1.qo(b.c22_1), a.c22_1.qo(b.b22_1));
  };
  KotlinRationalField.prototype.q1w = function (a, b) {
    var tmp = a instanceof KotlinRational ? a : THROW_CCE();
    return this.i22(tmp, b instanceof KotlinRational ? b : THROW_CCE());
  };
  KotlinRationalField.prototype.j22 = function (scalar) {
    return Companion_getInstance_41().z21(scalar.b22_1.t5(), scalar.c22_1);
  };
  KotlinRationalField.prototype.p1w = function (scalar) {
    return this.j22(scalar instanceof KotlinRational ? scalar : THROW_CCE());
  };
  KotlinRationalField.prototype.zn = function (n) {
    return Companion_getInstance_41().a22(n, 1);
  };
  KotlinRationalField.prototype.x12 = function () {
    return this.s21_1;
  };
  KotlinRationalField.prototype.w12 = function () {
    return this.t21_1;
  };
  KotlinRationalField.prototype.toString = function () {
    return 'RationalField';
  };
  KotlinRationalField.$metadata$ = objectMeta('KotlinRationalField', [Field]);
  var KotlinRationalField_instance;
  function KotlinRationalField_getInstance() {
    if (KotlinRationalField_instance == null)
      new KotlinRationalField();
    return KotlinRationalField_instance;
  }
  function reduce(numerator, denominator) {
    if (numerator.equals(Companion_getInstance().gp_1))
      return new Pair(Companion_getInstance().gp_1, Companion_getInstance().hp_1);
    var g = gcd(numerator, denominator);
    var tmp0_subject = denominator.jo();
    var tmp;
    switch (tmp0_subject) {
      case 1:
        tmp = numerator.ro(g);
        break;
      case -1:
        tmp = numerator.t5().ro(g);
        break;
      default:
        throw Exception_init_$Create$("This can't happen!");
    }
    var num = tmp;
    var den = denominator.np().ro(g);
    return new Pair(num, den);
  }
  function gcd(a, b) {
    if (a.equals(Companion_getInstance().gp_1) ? true : b.equals(Companion_getInstance().gp_1)) {
      throw ArithmeticException_init_$Create$('gcd not defined for 0');
    }
    var aAbs = a.np();
    var bAbs = b.np();
    var tmp;
    if (aAbs.pp(bAbs) >= 0) {
      tmp = gcdInternal(aAbs, bAbs);
    } else {
      tmp = gcdInternal(bAbs, aAbs);
    }
    return tmp;
  }
  function gcdInternal(a, b) {
    var a_0 = a;
    var b_0 = b;
    $l$1: do {
      $l$0: do {
        if (b_0.equals(Companion_getInstance().gp_1))
          return a_0;
        var tmp0 = b_0;
        var tmp1 = a_0.so(b_0);
        a_0 = tmp0;
        b_0 = tmp1;
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function get_DenseNumVectorSpaceOverRational() {
    init_properties_Rational_kt_p9ja98();
    return DenseNumVectorSpaceOverRational;
  }
  var DenseNumVectorSpaceOverRational;
  function get_DenseMatrixSpaceOverRational() {
    init_properties_Rational_kt_p9ja98();
    return DenseMatrixSpaceOverRational;
  }
  var DenseMatrixSpaceOverRational;
  function get_SparseNumVectorSpaceOverRational() {
    init_properties_Rational_kt_p9ja98();
    return SparseNumVectorSpaceOverRational;
  }
  var SparseNumVectorSpaceOverRational;
  function get_SparseMatrixSpaceOverRational() {
    init_properties_Rational_kt_p9ja98();
    return SparseMatrixSpaceOverRational;
  }
  var SparseMatrixSpaceOverRational;
  function get_DecomposedSparseMatrixSpaceOverRational() {
    init_properties_Rational_kt_p9ja98();
    return DecomposedSparseMatrixSpaceOverRational;
  }
  var DecomposedSparseMatrixSpaceOverRational;
  var DenseNumVectorSpaceOverBigRational$delegate;
  var DenseMatrixSpaceOverBigRational$delegate;
  var SparseNumVectorSpaceOverBigRational$delegate;
  var SparseMatrixSpaceOverBigRational$delegate;
  var DecomposedSparseMatrixSpaceOverBigRational$delegate;
  function DenseNumVectorSpaceOverRational$factory() {
    return getPropertyCallableRef('DenseNumVectorSpaceOverRational', 0, KProperty0, function () {
      return get_DenseNumVectorSpaceOverRational();
    }, null);
  }
  function DenseMatrixSpaceOverRational$factory() {
    return getPropertyCallableRef('DenseMatrixSpaceOverRational', 0, KProperty0, function () {
      return get_DenseMatrixSpaceOverRational();
    }, null);
  }
  function SparseNumVectorSpaceOverRational$factory() {
    return getPropertyCallableRef('SparseNumVectorSpaceOverRational', 0, KProperty0, function () {
      return get_SparseNumVectorSpaceOverRational();
    }, null);
  }
  function SparseMatrixSpaceOverRational$factory() {
    return getPropertyCallableRef('SparseMatrixSpaceOverRational', 0, KProperty0, function () {
      return get_SparseMatrixSpaceOverRational();
    }, null);
  }
  function DecomposedSparseMatrixSpaceOverRational$factory() {
    return getPropertyCallableRef('DecomposedSparseMatrixSpaceOverRational', 0, KProperty0, function () {
      return get_DecomposedSparseMatrixSpaceOverRational();
    }, null);
  }
  var properties_initialized_Rational_kt_ue1234;
  function init_properties_Rational_kt_p9ja98() {
    if (properties_initialized_Rational_kt_ue1234) {
    } else {
      properties_initialized_Rational_kt_ue1234 = true;
      DenseNumVectorSpaceOverRational = Companion_getInstance_33().d1v(KotlinRationalField_getInstance());
      DenseMatrixSpaceOverRational = Companion_getInstance_32().n1t(get_DenseNumVectorSpaceOverRational());
      SparseNumVectorSpaceOverRational = Companion_getInstance_36().d1v(KotlinRationalField_getInstance());
      SparseMatrixSpaceOverRational = Companion_getInstance_34().i1x(get_SparseNumVectorSpaceOverRational());
      DecomposedSparseMatrixSpaceOverRational = Companion_getInstance_35().i1x(get_SparseNumVectorSpaceOverRational());
      DenseNumVectorSpaceOverBigRational$delegate = DenseNumVectorSpaceOverRational$factory();
      DenseMatrixSpaceOverBigRational$delegate = DenseMatrixSpaceOverRational$factory();
      SparseNumVectorSpaceOverBigRational$delegate = SparseNumVectorSpaceOverRational$factory();
      SparseMatrixSpaceOverBigRational$delegate = SparseMatrixSpaceOverRational$factory();
      DecomposedSparseMatrixSpaceOverBigRational$delegate = DecomposedSparseMatrixSpaceOverRational$factory();
    }
  }
  function get_alphabeticalCategories() {
    init_properties_Identifier_kt_wq1bbl();
    return alphabeticalCategories;
  }
  var alphabeticalCategories;
  function get_numericalCategories() {
    init_properties_Identifier_kt_wq1bbl();
    return numericalCategories;
  }
  var numericalCategories;
  function get_punctuationCategories() {
    init_properties_Identifier_kt_wq1bbl();
    return punctuationCategories;
  }
  var punctuationCategories;
  function PartialIdentifier$Companion$fromIntList$lambda(it) {
    return Companion_getInstance_42().zn(it).d1z_1;
  }
  function Companion_41() {
    Companion_instance_41 = this;
    this.j1f_1 = plus(plus(get_alphabeticalCategories(), get_punctuationCategories()), get_numericalCategories());
  }
  Companion_41.prototype.zn = function (int) {
    var tmp;
    if (int >= 0) {
      tmp = new PartialIdentifier(int.toString());
    } else {
      var withoutSign = removePrefix(int.toString(), '-');
      tmp = new PartialIdentifier('m' + withoutSign);
    }
    return tmp;
  };
  Companion_41.prototype.z1f = function (intList) {
    var name = joinToString$default(intList, '_', null, null, 0, null, PartialIdentifier$Companion$fromIntList$lambda, 30, null);
    return new PartialIdentifier(name);
  };
  Companion_41.prototype.k22 = function (char) {
    return this.j1f_1.u1(get_category(char));
  };
  Companion_41.prototype.l22 = function (name, className) {
    var indexedObject = name;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var c = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'kotlin.require' call
      var tmp0_require = this.k22(c);
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.util.Companion.validateName.<anonymous>' call
        var tmp0_elvis_lhs = className;
        tmp$ret$0 = (tmp0_elvis_lhs == null ? 'Identifier' : tmp0_elvis_lhs) + ' name (' + name + ') can only contain ' + 'alphabets (including greeks), numbers or underscore, ' + ('but it contains "' + new Char(c) + '".');
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  Companion_41.prototype.m22 = function (name, className, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      className = getKClass(PartialIdentifier).pb();
    return this.l22(name, className);
  };
  Companion_41.$metadata$ = objectMeta('Companion');
  var Companion_instance_41;
  function Companion_getInstance_42() {
    if (Companion_instance_41 == null)
      new Companion_41();
    return Companion_instance_41;
  }
  function PartialIdentifier(value) {
    Companion_getInstance_42();
    this.d1z_1 = value;
    var tmp = Companion_getInstance_42();
    tmp.m22(this.d1z_1, null, 2, null);
  }
  PartialIdentifier.prototype.toString = function () {
    return 'PartialIdentifier(value=' + this.d1z_1 + ')';
  };
  PartialIdentifier.prototype.hashCode = function () {
    return getStringHashCode(this.d1z_1);
  };
  PartialIdentifier.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof PartialIdentifier))
      return false;
    var tmp0_other_with_cast = other instanceof PartialIdentifier ? other : THROW_CCE();
    if (!(this.d1z_1 === tmp0_other_with_cast.d1z_1))
      return false;
    return true;
  };
  PartialIdentifier.$metadata$ = classMeta('PartialIdentifier');
  function Companion_42() {
    Companion_instance_42 = this;
    this.u1h_1 = plus(get_alphabeticalCategories(), get_punctuationCategories());
  }
  Companion_42.prototype.n22 = function (char) {
    return this.u1h_1.u1(get_category(char));
  };
  Companion_42.prototype.o22 = function (name) {
    // Inline function 'kotlin.require' call
    var tmp$ret$0;
    // Inline function 'kotlin.text.isNotEmpty' call
    tmp$ret$0 = charSequenceLength(name) > 0;
    var tmp0_require = tmp$ret$0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.util.Companion.validateName.<anonymous>' call
      tmp$ret$1 = 'Identifier name (' + name + ') must be non-empty.';
      var message = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = this.n22(charSequenceGet(name, 0));
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.util.Companion.validateName.<anonymous>' call
      tmp$ret$2 = 'Identifier name (' + name + ') must start with ' + 'alphabets (including greeks) or underscore, ' + ('but it starts with "' + new Char(charSequenceGet(name, 0)) + '".');
      var message_0 = tmp$ret$2;
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    Companion_getInstance_42().l22(name, getKClass(Identifier_0).pb());
  };
  Companion_42.$metadata$ = objectMeta('Companion');
  var Companion_instance_42;
  function Companion_getInstance_43() {
    if (Companion_instance_42 == null)
      new Companion_42();
    return Companion_instance_42;
  }
  function Identifier_0(value) {
    Companion_getInstance_43();
    this.a1o_1 = value;
    Companion_getInstance_43().o22(this.a1o_1);
  }
  Identifier_0.prototype.f1 = function () {
    return this.a1o_1;
  };
  Identifier_0.prototype.toString = function () {
    return 'Identifier(value=' + this.a1o_1 + ')';
  };
  Identifier_0.prototype.hashCode = function () {
    return getStringHashCode(this.a1o_1);
  };
  Identifier_0.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Identifier_0))
      return false;
    var tmp0_other_with_cast = other instanceof Identifier_0 ? other : THROW_CCE();
    if (!(this.a1o_1 === tmp0_other_with_cast.a1o_1))
      return false;
    return true;
  };
  Identifier_0.$metadata$ = classMeta('Identifier');
  var properties_initialized_Identifier_kt_ehem2z;
  function init_properties_Identifier_kt_wq1bbl() {
    if (properties_initialized_Identifier_kt_ehem2z) {
    } else {
      properties_initialized_Identifier_kt_ehem2z = true;
      alphabeticalCategories = listOf_0([CharCategory_LOWERCASE_LETTER_getInstance(), CharCategory_UPPERCASE_LETTER_getInstance(), CharCategory_OTHER_LETTER_getInstance()]);
      numericalCategories = listOf(CharCategory_DECIMAL_DIGIT_NUMBER_getInstance());
      punctuationCategories = listOf(CharCategory_CONNECTOR_PUNCTUATION_getInstance());
    }
  }
  function isOdd_0(_this__u8e3s4) {
    return !((_this__u8e3s4 % 2 | 0) === 0);
  }
  function isEven(_this__u8e3s4) {
    return (_this__u8e3s4 % 2 | 0) === 0;
  }
  function PrintConfig_init_$Init$(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      printType = PrintType_PLAIN_getInstance();
    if (!(($mask0 & 2) === 0))
      beforeSign = ' ';
    if (!(($mask0 & 4) === 0))
      afterSign = ' ';
    if (!(($mask0 & 8) === 0))
      afterCoeff = ' ';
    if (!(($mask0 & 16) === 0))
      showShift = ShowShift_S_WITH_DEGREE_getInstance();
    PrintConfig.call($this, printType, beforeSign, afterSign, afterCoeff, showShift);
    return $this;
  }
  function PrintConfig_init_$Create$(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker) {
    return PrintConfig_init_$Init$(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker, Object.create(PrintConfig.prototype));
  }
  function PrintConfig(printType, beforeSign, afterSign, afterCoeff, showShift) {
    this.t1j_1 = printType;
    this.u1j_1 = beforeSign;
    this.v1j_1 = afterSign;
    this.w1j_1 = afterCoeff;
    this.x1j_1 = showShift;
  }
  PrintConfig.prototype.toString = function () {
    return 'PrintConfig(printType=' + this.t1j_1 + ', beforeSign=' + this.u1j_1 + ', afterSign=' + this.v1j_1 + ', afterCoeff=' + this.w1j_1 + ', showShift=' + this.x1j_1 + ')';
  };
  PrintConfig.prototype.hashCode = function () {
    var result = this.t1j_1.hashCode();
    result = imul(result, 31) + getStringHashCode(this.u1j_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.v1j_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.w1j_1) | 0;
    result = imul(result, 31) + this.x1j_1.hashCode() | 0;
    return result;
  };
  PrintConfig.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof PrintConfig))
      return false;
    var tmp0_other_with_cast = other instanceof PrintConfig ? other : THROW_CCE();
    if (!this.t1j_1.equals(tmp0_other_with_cast.t1j_1))
      return false;
    if (!(this.u1j_1 === tmp0_other_with_cast.u1j_1))
      return false;
    if (!(this.v1j_1 === tmp0_other_with_cast.v1j_1))
      return false;
    if (!(this.w1j_1 === tmp0_other_with_cast.w1j_1))
      return false;
    if (!this.x1j_1.equals(tmp0_other_with_cast.x1j_1))
      return false;
    return true;
  };
  PrintConfig.$metadata$ = classMeta('PrintConfig');
  var PrintType_PLAIN_instance;
  var PrintType_TEX_instance;
  var PrintType_entriesInitialized;
  function PrintType_initEntries() {
    if (PrintType_entriesInitialized)
      return Unit_getInstance();
    PrintType_entriesInitialized = true;
    PrintType_PLAIN_instance = new PrintType('PLAIN', 0);
    PrintType_TEX_instance = new PrintType('TEX', 1);
  }
  function PrintType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  PrintType.$metadata$ = classMeta('PrintType', undefined, undefined, undefined, undefined, Enum.prototype);
  var ShowShift_BAR_instance;
  var ShowShift_S_instance;
  var ShowShift_S_WITH_DEGREE_instance;
  var ShowShift_entriesInitialized;
  function ShowShift_initEntries() {
    if (ShowShift_entriesInitialized)
      return Unit_getInstance();
    ShowShift_entriesInitialized = true;
    ShowShift_BAR_instance = new ShowShift('BAR', 0);
    ShowShift_S_instance = new ShowShift('S', 1);
    ShowShift_S_WITH_DEGREE_instance = new ShowShift('S_WITH_DEGREE', 2);
  }
  function ShowShift(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  ShowShift.$metadata$ = classMeta('ShowShift', undefined, undefined, undefined, undefined, Enum.prototype);
  function PrintableWithSign() {
  }
  PrintableWithSign.$metadata$ = interfaceMeta('PrintableWithSign', [Printable]);
  function Printable() {
  }
  Printable.$metadata$ = interfaceMeta('Printable');
  function Printer_init_$Init$(printConfig, $this) {
    Printer.call($this, printConfig, '');
    return $this;
  }
  function Printer_init_$Create$(printConfig) {
    return Printer_init_$Init$(printConfig, Object.create(Printer.prototype));
  }
  function Printer_init_$Init$_0(printType, beforeSign, afterSign, afterCoeff, showShift, $this) {
    Printer_init_$Init$(new PrintConfig(printType, beforeSign, afterSign, afterCoeff, showShift), $this);
    return $this;
  }
  function Printer_init_$Init$_1(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      printType = PrintType_PLAIN_getInstance();
    if (!(($mask0 & 2) === 0))
      beforeSign = ' ';
    if (!(($mask0 & 4) === 0))
      afterSign = ' ';
    if (!(($mask0 & 8) === 0))
      afterCoeff = ' ';
    if (!(($mask0 & 16) === 0))
      showShift = ShowShift_S_WITH_DEGREE_getInstance();
    Printer_init_$Init$_0(printType, beforeSign, afterSign, afterCoeff, showShift, $this);
    return $this;
  }
  function Printer_init_$Create$_0(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker) {
    return Printer_init_$Init$_1(printType, beforeSign, afterSign, afterCoeff, showShift, $mask0, $marker, Object.create(Printer.prototype));
  }
  function Printer(printConfig, value) {
    this.i1k_1 = printConfig;
    this.j1k_1 = value;
  }
  Printer.prototype.toString = function () {
    return this.j1k_1;
  };
  Printer.prototype.k1k = function (printable) {
    var tmp0_safe_receiver = printable;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.v1a(this.i1k_1);
    var stringFromPrintable = tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
    return this.j1k_1 + stringFromPrintable;
  };
  Printer.$metadata$ = classMeta('Printer');
  function InternalPrintConfig$Companion$default$lambda($printConfig) {
    return function (coeff, withSign) {
      return coeff.d22($printConfig, withSign);
    };
  }
  function InternalPrintConfig$Companion$default$lambda_0($printConfig) {
    return function (it) {
      return it.v1a($printConfig);
    };
  }
  function InternalPrintConfig_init_$Init$(coeffToString, basisToString, basisComparator, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0)) {
      coeffToString = InternalPrintConfig$_init_$lambda_u75kft;
    }
    if (!(($mask0 & 2) === 0)) {
      basisToString = InternalPrintConfig$_init_$lambda_u75kft_0;
    }
    if (!(($mask0 & 4) === 0))
      basisComparator = null;
    InternalPrintConfig.call($this, coeffToString, basisToString, basisComparator);
    return $this;
  }
  function InternalPrintConfig_init_$Create$(coeffToString, basisToString, basisComparator, $mask0, $marker) {
    return InternalPrintConfig_init_$Init$(coeffToString, basisToString, basisComparator, $mask0, $marker, Object.create(InternalPrintConfig.prototype));
  }
  function Companion_43() {
    Companion_instance_43 = this;
  }
  Companion_43.prototype.h19 = function (printConfig) {
    var tmp = InternalPrintConfig$Companion$default$lambda(printConfig);
    var tmp_0 = InternalPrintConfig$Companion$default$lambda_0(printConfig);
    return InternalPrintConfig_init_$Create$(tmp, tmp_0, null, 4, null);
  };
  Companion_43.$metadata$ = objectMeta('Companion');
  var Companion_instance_43;
  function Companion_getInstance_44() {
    if (Companion_instance_43 == null)
      new Companion_43();
    return Companion_instance_43;
  }
  function InternalPrintConfig$_init_$lambda_u75kft(coeff, withSign) {
    return coeff.t1w(PrintType_PLAIN_getInstance(), withSign);
  }
  function InternalPrintConfig$_init_$lambda_u75kft_0(it) {
    return toString_0(it);
  }
  function InternalPrintConfig(coeffToString, basisToString, basisComparator) {
    Companion_getInstance_44();
    this.p22_1 = coeffToString;
    this.q22_1 = basisToString;
    this.r22_1 = basisComparator;
  }
  InternalPrintConfig.prototype.s22 = function () {
    return this.r22_1;
  };
  InternalPrintConfig.prototype.toString = function () {
    return 'InternalPrintConfig(coeffToString=' + this.p22_1 + ', basisToString=' + this.q22_1 + ', basisComparator=' + this.r22_1 + ')';
  };
  InternalPrintConfig.prototype.hashCode = function () {
    var result = hashCode(this.p22_1);
    result = imul(result, 31) + hashCode(this.q22_1) | 0;
    result = imul(result, 31) + (this.r22_1 == null ? 0 : hashCode(this.r22_1)) | 0;
    return result;
  };
  InternalPrintConfig.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof InternalPrintConfig))
      return false;
    var tmp0_other_with_cast = other instanceof InternalPrintConfig ? other : THROW_CCE();
    if (!equals(this.p22_1, tmp0_other_with_cast.p22_1))
      return false;
    if (!equals(this.q22_1, tmp0_other_with_cast.q22_1))
      return false;
    if (!equals(this.r22_1, tmp0_other_with_cast.r22_1))
      return false;
    return true;
  };
  InternalPrintConfig.$metadata$ = classMeta('InternalPrintConfig');
  function PrintType_PLAIN_getInstance() {
    PrintType_initEntries();
    return PrintType_PLAIN_instance;
  }
  function PrintType_TEX_getInstance() {
    PrintType_initEntries();
    return PrintType_TEX_instance;
  }
  function ShowShift_BAR_getInstance() {
    ShowShift_initEntries();
    return ShowShift_BAR_instance;
  }
  function ShowShift_S_WITH_DEGREE_getInstance() {
    ShowShift_initEntries();
    return ShowShift_S_WITH_DEGREE_instance;
  }
  var Sign_PLUS_instance;
  var Sign_MINUS_instance;
  function Companion_44() {
    Companion_instance_44 = this;
  }
  Companion_44.prototype.l1w = function (n) {
    var tmp;
    if (isEven(n)) {
      tmp = Sign_PLUS_getInstance();
    } else {
      tmp = Sign_MINUS_getInstance();
    }
    return tmp;
  };
  Companion_44.prototype.u1e = function (even) {
    var tmp;
    if (even) {
      tmp = Sign_PLUS_getInstance();
    } else {
      tmp = Sign_MINUS_getInstance();
    }
    return tmp;
  };
  Companion_44.$metadata$ = objectMeta('Companion');
  var Companion_instance_44;
  function Companion_getInstance_45() {
    Sign_initEntries();
    if (Companion_instance_44 == null)
      new Companion_44();
    return Companion_instance_44;
  }
  var Sign_entriesInitialized;
  function Sign_initEntries() {
    if (Sign_entriesInitialized)
      return Unit_getInstance();
    Sign_entriesInitialized = true;
    Sign_PLUS_instance = new Sign('PLUS', 0, 1);
    Sign_MINUS_instance = new Sign('MINUS', 1, -1);
    Companion_getInstance_45();
  }
  function Sign(name, ordinal, intValue) {
    Enum.call(this, name, ordinal);
    this.m1q_1 = intValue;
  }
  Sign.prototype.t5 = function () {
    var tmp0_subject = this;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = Sign_MINUS_getInstance();
        break;
      case 1:
        tmp = Sign_PLUS_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  Sign.$metadata$ = classMeta('Sign', undefined, undefined, undefined, undefined, Enum.prototype);
  function Sign_PLUS_getInstance() {
    Sign_initEntries();
    return Sign_PLUS_instance;
  }
  function Sign_MINUS_getInstance() {
    Sign_initEntries();
    return Sign_MINUS_instance;
  }
  function get_PrettyParen() {
    init_properties_StringTable_kt_q4vxyh();
    return PrettyParen;
  }
  var PrettyParen;
  function StringTable_init_$Init$(data, paren, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      paren = get_PrettyParen();
    StringTable.call($this, data, paren);
    return $this;
  }
  function StringTable_init_$Create$(data, paren, $mask0, $marker) {
    return StringTable_init_$Init$(data, paren, $mask0, $marker, Object.create(StringTable.prototype));
  }
  function StringTable(data, paren) {
    this.t22_1 = data;
    this.u22_1 = paren;
  }
  StringTable.prototype.toString = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.t22_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.util.StringTable.toString.<anonymous>' call
      tmp$ret$0 = toString(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var rowStringList = tmp$ret$2;
    var joinedRowStrings = joinToString$default(rowStringList, this.u22_1.d23_1, null, null, 0, null, null, 62, null);
    return this.u22_1.y22_1 + ' ' + joinedRowStrings + ' ' + this.u22_1.c23_1;
  };
  StringTable.$metadata$ = classMeta('StringTable');
  function Paren_init_$Init$(upperLeft, left, lowerLeft, leftOneRow, upperRight, right, lowerRight, rightOneRow, separator, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      upperLeft = '[';
    if (!(($mask0 & 2) === 0))
      left = '[';
    if (!(($mask0 & 4) === 0))
      lowerLeft = '[';
    if (!(($mask0 & 8) === 0))
      leftOneRow = '[';
    if (!(($mask0 & 16) === 0))
      upperRight = ']';
    if (!(($mask0 & 32) === 0))
      right = ']';
    if (!(($mask0 & 64) === 0))
      lowerRight = ']';
    if (!(($mask0 & 128) === 0))
      rightOneRow = ']';
    if (!(($mask0 & 256) === 0))
      separator = ' ';
    Paren.call($this, upperLeft, left, lowerLeft, leftOneRow, upperRight, right, lowerRight, rightOneRow, separator);
    return $this;
  }
  function Paren_init_$Create$(upperLeft, left, lowerLeft, leftOneRow, upperRight, right, lowerRight, rightOneRow, separator, $mask0, $marker) {
    return Paren_init_$Init$(upperLeft, left, lowerLeft, leftOneRow, upperRight, right, lowerRight, rightOneRow, separator, $mask0, $marker, Object.create(Paren.prototype));
  }
  function Paren(upperLeft, left, lowerLeft, leftOneRow, upperRight, right, lowerRight, rightOneRow, separator) {
    this.v22_1 = upperLeft;
    this.w22_1 = left;
    this.x22_1 = lowerLeft;
    this.y22_1 = leftOneRow;
    this.z22_1 = upperRight;
    this.a23_1 = right;
    this.b23_1 = lowerRight;
    this.c23_1 = rightOneRow;
    this.d23_1 = separator;
  }
  Paren.prototype.toString = function () {
    return 'Paren(upperLeft=' + this.v22_1 + ', left=' + this.w22_1 + ', lowerLeft=' + this.x22_1 + ', leftOneRow=' + this.y22_1 + ', upperRight=' + this.z22_1 + ', right=' + this.a23_1 + ', lowerRight=' + this.b23_1 + ', rightOneRow=' + this.c23_1 + ', separator=' + this.d23_1 + ')';
  };
  Paren.prototype.hashCode = function () {
    var result = getStringHashCode(this.v22_1);
    result = imul(result, 31) + getStringHashCode(this.w22_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.x22_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.y22_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.z22_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.a23_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.b23_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.c23_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.d23_1) | 0;
    return result;
  };
  Paren.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Paren))
      return false;
    var tmp0_other_with_cast = other instanceof Paren ? other : THROW_CCE();
    if (!(this.v22_1 === tmp0_other_with_cast.v22_1))
      return false;
    if (!(this.w22_1 === tmp0_other_with_cast.w22_1))
      return false;
    if (!(this.x22_1 === tmp0_other_with_cast.x22_1))
      return false;
    if (!(this.y22_1 === tmp0_other_with_cast.y22_1))
      return false;
    if (!(this.z22_1 === tmp0_other_with_cast.z22_1))
      return false;
    if (!(this.a23_1 === tmp0_other_with_cast.a23_1))
      return false;
    if (!(this.b23_1 === tmp0_other_with_cast.b23_1))
      return false;
    if (!(this.c23_1 === tmp0_other_with_cast.c23_1))
      return false;
    if (!(this.d23_1 === tmp0_other_with_cast.d23_1))
      return false;
    return true;
  };
  Paren.$metadata$ = classMeta('Paren');
  var properties_initialized_StringTable_kt_23rfzn;
  function init_properties_StringTable_kt_q4vxyh() {
    if (properties_initialized_StringTable_kt_23rfzn) {
    } else {
      properties_initialized_StringTable_kt_23rfzn = true;
      PrettyParen = Paren_init_$Create$('\u23A1', '\u23A5', '\u23A3', null, '\u23A4', '\u23A5', '\u23A6', null, null, 392, null);
    }
  }
  function UnionFind(size) {
    this.p1s_1 = size;
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.MutableList' call
    var tmp0_MutableList = this.p1s_1;
    var list = ArrayList_init_$Create$(tmp0_MutableList);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < tmp0_MutableList)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.util.UnionFind.parent.<anonymous>' call
        tmp$ret$0 = index;
        list.a(tmp$ret$0);
      }
       while (inductionVariable < tmp0_MutableList);
    tmp$ret$1 = list;
    tmp.q1s_1 = tmp$ret$1;
  }
  UnionFind.prototype.e23 = function (index) {
    var tmp;
    if (this.q1s_1.l(index) === index) {
      tmp = index;
    } else {
      this.q1s_1.t8(index, this.e23(this.q1s_1.l(index)));
      tmp = this.q1s_1.l(index);
    }
    return tmp;
  };
  UnionFind.prototype.r1s = function (index1, index2) {
    var root1 = this.e23(index1);
    var root2 = this.e23(index2);
    if (!(root1 === root2)) {
      this.q1s_1.t8(root1, root2);
    }
  };
  UnionFind.prototype.s1s = function () {
    var tmp$ret$4;
    // Inline function 'kotlin.collections.groupBy' call
    var tmp0_groupBy = until(0, this.p1s_1);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.groupByTo' call
    var tmp0_groupByTo = LinkedHashMap_init_$Create$();
    var inductionVariable = tmp0_groupBy.h5_1;
    var last = tmp0_groupBy.i5_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.util.UnionFind.groups.<anonymous>' call
        tmp$ret$0 = this.e23(element);
        var key = tmp$ret$0;
        var tmp$ret$2;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = tmp0_groupByTo.t(key);
        var tmp;
        if (value == null) {
          var tmp$ret$1;
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          tmp$ret$1 = ArrayList_init_$Create$_0();
          var answer = tmp$ret$1;
          tmp0_groupByTo.u(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        tmp$ret$2 = tmp;
        var list = tmp$ret$2;
        list.a(element);
      }
       while (!(element === last));
    tmp$ret$3 = tmp0_groupByTo;
    tmp$ret$4 = tmp$ret$3;
    return toList_1(tmp$ret$4.j3());
  };
  UnionFind.$metadata$ = classMeta('UnionFind');
  function hasNonEmptyIntersection(_this__u8e3s4, other) {
    return !hasEmptyIntersection(_this__u8e3s4, other);
  }
  function hasEmptyIntersection(_this__u8e3s4, other) {
    var i = 0;
    var j = 0;
    while (i < _this__u8e3s4.i() ? j < other.i() : false) {
      if (equals(_this__u8e3s4.l(i), other.l(j)))
        return false;
      else if (compareTo(_this__u8e3s4.l(i), other.l(j)) > 0) {
        var tmp0 = j;
        j = tmp0 + 1 | 0;
      } else if (compareTo(_this__u8e3s4.l(i), other.l(j)) < 0) {
        var tmp1 = i;
        i = tmp1 + 1 | 0;
      } else
        throw Exception_init_$Create$("This can't happen!");
    }
    return true;
  }
  function exchange(_this__u8e3s4, key1, key2) {
    // Inline function 'kotlin.require' call
    var tmp0_require = !equals(key1, key2);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.util.exchange.<anonymous>' call
      tmp$ret$0 = 'key1 and key2 must be distinct, but both are ' + key1;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var row1 = _this__u8e3s4.t(key1);
    if (row1 == null) {
      var row2 = _this__u8e3s4.t(key2);
      if (row2 == null)
        return Unit_getInstance();
      else {
        // Inline function 'kotlin.collections.set' call
        _this__u8e3s4.u(key1, row2);
        _this__u8e3s4.u9(key2);
      }
    } else {
      var row2_0 = _this__u8e3s4.t(key2);
      if (row2_0 == null) {
        // Inline function 'kotlin.collections.set' call
        _this__u8e3s4.u(key2, row1);
        _this__u8e3s4.u9(key1);
      } else {
        // Inline function 'kotlin.collections.set' call
        _this__u8e3s4.u(key1, row2_0);
        // Inline function 'kotlin.collections.set' call
        _this__u8e3s4.u(key2, row1);
      }
    }
  }
  function BilinearMap() {
  }
  BilinearMap.$metadata$ = interfaceMeta('BilinearMap');
  function getInducedMap($this, bilinearMap, source1SubQuot, source2SubQuot, targetSubQuot) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = source1SubQuot.z1a();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.getInducedMap.<anonymous>' call
      tmp$ret$0 = source1SubQuot.o1e().b1a(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var basisLift1 = tmp$ret$2;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp1_map = source2SubQuot.z1a();
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
    var tmp0_iterator_0 = tmp1_map.f();
    while (tmp0_iterator_0.g()) {
      var item_0 = tmp0_iterator_0.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.getInducedMap.<anonymous>' call
      tmp$ret$3 = source2SubQuot.o1e().b1a(item_0);
      tmp0_mapTo_0.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo_0;
    tmp$ret$5 = tmp$ret$4;
    var basisLift2 = tmp$ret$5;
    var tmp$ret$11;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$10;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(basisLift1, 10));
    var tmp0_iterator_1 = basisLift1.f();
    while (tmp0_iterator_1.g()) {
      var item_1 = tmp0_iterator_1.h();
      var tmp$ret$9;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.getInducedMap.<anonymous>' call
      var tmp$ret$8;
      // Inline function 'kotlin.collections.map' call
      var tmp$ret$7;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_2 = ArrayList_init_$Create$(collectionSizeOrDefault(basisLift2, 10));
      var tmp0_iterator_2 = basisLift2.f();
      while (tmp0_iterator_2.g()) {
        var item_2 = tmp0_iterator_2.h();
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.getInducedMap.<anonymous>.<anonymous>' call
        tmp$ret$6 = targetSubQuot.z16().b1a(bilinearMap.g19(item_1, item_2));
        tmp0_mapTo_2.a(tmp$ret$6);
      }
      tmp$ret$7 = tmp0_mapTo_2;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp0_mapTo_1.a(tmp$ret$9);
    }
    tmp$ret$10 = tmp0_mapTo_1;
    tmp$ret$11 = tmp$ret$10;
    var valueList = tmp$ret$11;
    return new ValueBilinearMap(source1SubQuot, source2SubQuot, targetSubQuot, bilinearMap.h11(), valueList);
  }
  function ValueBilinearMap_init_$Init$(source1, source2, target, matrixSpace, getValue, $this) {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = source1.s19();
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.vectsp.ValueBilinearMap.<init>.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map_0 = source2.s19();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
      var tmp0_iterator_0 = tmp0_map_0.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.ValueBilinearMap.<init>.<anonymous>.<anonymous>' call
        tmp$ret$0 = getValue(item, item_0);
        tmp0_mapTo_0.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo_0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      tmp0_mapTo.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo;
    tmp$ret$5 = tmp$ret$4;
    ValueBilinearMap.call($this, source1, source2, target, matrixSpace, tmp$ret$5);
    return $this;
  }
  function ValueBilinearMap_init_$Create$(source1, source2, target, matrixSpace, getValue) {
    return ValueBilinearMap_init_$Init$(source1, source2, target, matrixSpace, getValue, Object.create(ValueBilinearMap.prototype));
  }
  function Companion_45() {
    Companion_instance_45 = this;
  }
  Companion_45.$metadata$ = objectMeta('Companion');
  var Companion_instance_45;
  function Companion_getInstance_46() {
    if (Companion_instance_45 == null)
      new Companion_45();
    return Companion_instance_45;
  }
  function ValueBilinearMap(source1, source2, target, matrixSpace, values) {
    Companion_getInstance_46();
    this.f23_1 = source1;
    this.g23_1 = source2;
    this.h23_1 = target;
    this.i23_1 = matrixSpace;
    this.j23_1 = values;
  }
  ValueBilinearMap.prototype.b19 = function () {
    return this.f23_1;
  };
  ValueBilinearMap.prototype.c19 = function () {
    return this.g23_1;
  };
  ValueBilinearMap.prototype.h11 = function () {
    return this.i23_1;
  };
  ValueBilinearMap.prototype.g19 = function (vector1, vector2) {
    var tmp$ret$15;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.h23_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$14;
    // Inline function 'com.github.shwaka.kohomology.vectsp.ValueBilinearMap.invoke.<anonymous>' call
    var tmp$ret$13;
    // Inline function 'kotlin.collections.mapValues' call
    var tmp0_mapValues = vector1.e19_1.w1v();
    var tmp$ret$12;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues.i()));
    var tmp$ret$11;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapValues.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      var tmp = tmp$ret$0;
      var tmp$ret$10;
      // Inline function 'com.github.shwaka.kohomology.vectsp.ValueBilinearMap.invoke.<anonymous>.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = element.e1();
      var ind1 = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = element.f1();
      var coeff1 = tmp$ret$2;
      var tmp$ret$9;
      // Inline function 'kotlin.collections.mapValues' call
      var tmp0_mapValues_0 = vector2.e19_1.w1v();
      var tmp$ret$8;
      // Inline function 'kotlin.collections.mapValuesTo' call
      var tmp1_mapValuesTo_0 = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapValues_0.i()));
      var tmp$ret$7;
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_associateByTo_0 = tmp0_mapValues_0.d1();
      var tmp0_iterator_0 = tmp0_associateByTo_0.f();
      while (tmp0_iterator_0.g()) {
        var element_0 = tmp0_iterator_0.h();
        var tmp$ret$3;
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        tmp$ret$3 = element_0.e1();
        var tmp_0 = tmp$ret$3;
        var tmp$ret$6;
        // Inline function 'com.github.shwaka.kohomology.vectsp.ValueBilinearMap.invoke.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$4;
        // Inline function 'kotlin.collections.component1' call
        tmp$ret$4 = element_0.e1();
        var ind2 = tmp$ret$4;
        var tmp$ret$5;
        // Inline function 'kotlin.collections.component2' call
        tmp$ret$5 = element_0.f1();
        var coeff2 = tmp$ret$5;
        tmp$ret$6 = tmp0_run.k23(tmp0_run.k23(this.j23_1.l(ind1).l(ind2), coeff1), coeff2);
        tmp1_mapValuesTo_0.u(tmp_0, tmp$ret$6);
      }
      tmp$ret$7 = tmp1_mapValuesTo_0;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp0_run.l23(tmp$ret$9.j3());
      tmp1_mapValuesTo.u(tmp, tmp$ret$10);
    }
    tmp$ret$11 = tmp1_mapValuesTo;
    tmp$ret$12 = tmp$ret$11;
    tmp$ret$13 = tmp$ret$12;
    tmp$ret$14 = tmp0_run.l23(tmp$ret$13.j3());
    tmp$ret$15 = tmp$ret$14;
    return tmp$ret$15;
  };
  ValueBilinearMap.prototype.a19 = function (source1SubQuot, source2SubQuot, targetSubQuot) {
    return getInducedMap(Companion_getInstance_46(), this, source1SubQuot, source2SubQuot, targetSubQuot);
  };
  ValueBilinearMap.$metadata$ = classMeta('ValueBilinearMap', [BilinearMap]);
  function DirectSumBasis(index, basisName) {
    this.z1j_1 = index;
    this.a1k_1 = basisName;
  }
  DirectSumBasis.prototype.m23 = function () {
    return this.a1k_1;
  };
  DirectSumBasis.prototype.toString = function () {
    return 'DirectSumBasis(index=' + this.z1j_1 + ', basisName=' + this.a1k_1 + ')';
  };
  DirectSumBasis.prototype.hashCode = function () {
    var result = this.z1j_1;
    result = imul(result, 31) + (this.a1k_1 == null ? 0 : hashCode(this.a1k_1)) | 0;
    return result;
  };
  DirectSumBasis.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DirectSumBasis))
      return false;
    var tmp0_other_with_cast = other instanceof DirectSumBasis ? other : THROW_CCE();
    if (!(this.z1j_1 === tmp0_other_with_cast.z1j_1))
      return false;
    if (!equals(this.a1k_1, tmp0_other_with_cast.a1k_1))
      return false;
    return true;
  };
  DirectSumBasis.$metadata$ = classMeta('DirectSumBasis', [BasisName]);
  function _get_basisNameToIndex__26cf4t($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisNameToIndex$factory();
    tmp$ret$0 = $this.m1j_1.f1();
    return tmp$ret$0;
  }
  function DirectSum_init_$Init$(vectorSpaceList, matrixSpace, getInternalPrintConfig, $this) {
    DirectSum.call($this, new DirectSumFactory(vectorSpaceList, matrixSpace, getInternalPrintConfig));
    return $this;
  }
  function DirectSum_init_$Create$(vectorSpaceList, matrixSpace, getInternalPrintConfig) {
    return DirectSum_init_$Init$(vectorSpaceList, matrixSpace, getInternalPrintConfig, Object.create(DirectSum.prototype));
  }
  function _get_inclusionList__tlg4i1($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = inclusionList$factory();
    tmp$ret$0 = $this.q1j_1.f1();
    return tmp$ret$0;
  }
  function DirectSum$basisNameToIndex$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.mapIndexed' call
      var tmp0_mapIndexed = this$0.j1j_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_mapIndexed, 10));
      var index = 0;
      var tmp0_iterator = tmp0_mapIndexed.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.basisNameToIndex$delegate.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
        tmp$ret$0 = new Pair(item, tmp1__anonymous__uwfjfc);
        tmp0_mapIndexedTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapIndexedTo;
      tmp$ret$2 = tmp$ret$1;
      return toMap(tmp$ret$2);
    };
  }
  function DirectSum$inclusionList$delegate$lambda(this$0) {
    return function () {
      var one = this$0.o1j_1.p11().w12();
      var tmp$ret$8;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = until(0, this$0.p1j_1);
      var tmp$ret$7;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var inductionVariable = tmp0_map.h5_1;
      var last = tmp0_map.i5_1;
      if (inductionVariable <= last)
        do {
          var item = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$6;
          // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.inclusionList$delegate.<anonymous>.<anonymous>' call
          var tmp$ret$2;
          // Inline function 'kotlin.collections.map' call
          var tmp0_map_0 = until(0, item);
          var tmp$ret$1;
          // Inline function 'kotlin.collections.mapTo' call
          var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map_0, 10));
          var inductionVariable_0 = tmp0_map_0.h5_1;
          var last_0 = tmp0_map_0.i5_1;
          if (inductionVariable_0 <= last_0)
            do {
              var item_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var tmp$ret$0;
              // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.inclusionList$delegate.<anonymous>.<anonymous>.<anonymous>' call
              tmp$ret$0 = this$0.n1j_1.l(item_0).d1u();
              tmp0_mapTo_0.a(tmp$ret$0);
            }
             while (!(item_0 === last_0));
          tmp$ret$1 = tmp0_mapTo_0;
          tmp$ret$2 = tmp$ret$1;
          var accumulatedDim = sum(tmp$ret$2);
          var currentDim = this$0.n1j_1.l(item).d1u();
          var tmp$ret$5;
          // Inline function 'kotlin.collections.map' call
          var tmp1_map = until(0, currentDim);
          var tmp$ret$4;
          // Inline function 'kotlin.collections.mapTo' call
          var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
          var inductionVariable_1 = tmp1_map.h5_1;
          var last_1 = tmp1_map.i5_1;
          if (inductionVariable_1 <= last_1)
            do {
              var item_1 = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              var tmp$ret$3;
              // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.inclusionList$delegate.<anonymous>.<anonymous>.<anonymous>' call
              tmp$ret$3 = new Pair(accumulatedDim + item_1 | 0, mapOf(to(item_1, one)));
              tmp0_mapTo_1.a(tmp$ret$3);
            }
             while (!(item_1 === last_1));
          tmp$ret$4 = tmp0_mapTo_1;
          tmp$ret$5 = tmp$ret$4;
          var rowMap = toMap(tmp$ret$5);
          var matrix = this$0.o1j_1.e1t(rowMap, this$0.d1u(), currentDim);
          tmp$ret$6 = Companion_getInstance_47().n23(this$0.n1j_1.l(item), this$0, this$0.o1j_1, matrix);
          tmp0_mapTo.a(tmp$ret$6);
        }
         while (!(item === last));
      tmp$ret$7 = tmp0_mapTo;
      tmp$ret$8 = tmp$ret$7;
      return tmp$ret$8;
    };
  }
  function DirectSum$projectionList$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$4;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = until(0, this$0.p1j_1);
      var tmp$ret$3;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var inductionVariable = tmp0_map.h5_1;
      var last = tmp0_map.i5_1;
      if (inductionVariable <= last)
        do {
          var item = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$2;
          // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.projectionList$delegate.<anonymous>.<anonymous>' call
          var tmp$ret$1;
          // Inline function 'kotlin.run' call
          var tmp0_run = this$0.o1j_1.t14();
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$0;
          // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.projectionList$delegate.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = tmp0_run.z1w(_get_inclusionList__tlg4i1(this$0).l(item).y19_1);
          tmp$ret$1 = tmp$ret$0;
          var matrix = tmp$ret$1;
          tmp$ret$2 = Companion_getInstance_47().n23(this$0, this$0.n1j_1.l(item), this$0.o1j_1, matrix);
          tmp0_mapTo.a(tmp$ret$2);
        }
         while (!(item === last));
      tmp$ret$3 = tmp0_mapTo;
      tmp$ret$4 = tmp$ret$3;
      return tmp$ret$4;
    };
  }
  function DirectSum$toString$lambda(it) {
    return toString(it);
  }
  function DirectSum(factory) {
    this.i1j_1 = factory.r23_1;
    this.j1j_1 = factory.s23_1;
    this.k1j_1 = factory.q23_1;
    this.l1j_1 = new VectorContextImpl(this);
    var tmp = this;
    tmp.m1j_1 = lazy(DirectSum$basisNameToIndex$delegate$lambda(this));
    this.n1j_1 = factory.o23_1;
    this.o1j_1 = factory.p23_1;
    this.p1j_1 = this.n1j_1.i();
    var tmp_0 = this;
    tmp_0.q1j_1 = lazy(DirectSum$inclusionList$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.r1j_1 = lazy(DirectSum$projectionList$delegate$lambda(this));
  }
  DirectSum.prototype.j11 = function () {
    return this.i1j_1;
  };
  DirectSum.prototype.s19 = function () {
    return this.j1j_1;
  };
  DirectSum.prototype.k11 = function () {
    return this.k1j_1;
  };
  DirectSum.prototype.t14 = function () {
    return this.l1j_1;
  };
  DirectSum.prototype.t23 = function (basisName) {
    var tmp0_elvis_lhs = _get_basisNameToIndex__26cf4t(this).t(basisName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw NoSuchElementException_init_$Create$('' + basisName + ' is not a name of basis element of the vector space ' + this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  DirectSum.prototype.u23 = function (basisName) {
    return this.t23(basisName instanceof DirectSumBasis ? basisName : THROW_CCE());
  };
  DirectSum.prototype.v23 = function () {
    return this.n1j_1;
  };
  DirectSum.prototype.h11 = function () {
    return this.o1j_1;
  };
  DirectSum.prototype.w23 = function (index) {
    if (index < 0)
      throw IndexOutOfBoundsException_init_$Create$('index must be non-negative');
    if (index >= this.p1j_1)
      throw IndexOutOfBoundsException_init_$Create$('index must be smaller than the number of vector spaces in the direct sum');
    return _get_inclusionList__tlg4i1(this).l(index);
  };
  DirectSum.prototype.s1j = function (vectorList) {
    if (!(vectorList.i() === this.p1j_1))
      throw IllegalArgumentException_init_$Create$('The size (' + vectorList.i() + ') of vectorList must be equal to the number (' + this.p1j_1 + ') of vector spaces in the direct sum');
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapIndexed' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(vectorList, 10));
    var index = 0;
    var tmp0_iterator = vectorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.fromVectorList.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      tmp$ret$0 = this.w23(tmp0__anonymous__q1qw7t).b1a(item);
      tmp0_mapIndexedTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapIndexedTo;
    tmp$ret$2 = tmp$ret$1;
    var vectorListInDirectSum = tmp$ret$2;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp1_run = this.l1j_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSum.fromVectorList.<anonymous>' call
    tmp$ret$3 = tmp1_run.l23(vectorListInDirectSum);
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  };
  DirectSum.prototype.toString = function () {
    return 'DirectSum(' + joinToString$default(this.n1j_1, ', ', null, null, 0, null, DirectSum$toString$lambda, 30, null) + ')';
  };
  DirectSum.$metadata$ = classMeta('DirectSum', [VectorSpace]);
  function DirectSumFactory(vectorSpaceList, matrixSpace, getInternalPrintConfig) {
    this.o23_1 = vectorSpaceList;
    this.p23_1 = matrixSpace;
    this.q23_1 = getInternalPrintConfig;
    this.r23_1 = this.p23_1.j11();
    var tmp = this;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapIndexed' call
    var tmp0_mapIndexed = this.o23_1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_mapIndexed, 10));
    var index = 0;
    var tmp0_iterator = tmp0_mapIndexed.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSumFactory.basisNames.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
      var tmp$ret$2;
      // Inline function 'kotlin.collections.map' call
      var tmp0_map = item.s19();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapTo' call
      var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
      var tmp0_iterator_0 = tmp0_map.f();
      while (tmp0_iterator_0.g()) {
        var item_0 = tmp0_iterator_0.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.DirectSumFactory.basisNames.<anonymous>.<anonymous>' call
        tmp$ret$0 = new DirectSumBasis(tmp1__anonymous__uwfjfc, item_0);
        tmp0_mapTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapTo;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      tmp0_mapIndexedTo.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapIndexedTo;
    tmp$ret$5 = tmp$ret$4;
    tmp.s23_1 = flatten(tmp$ret$5);
  }
  DirectSumFactory.$metadata$ = classMeta('DirectSumFactory');
  function basisNameToIndex$factory() {
    return getPropertyCallableRef('basisNameToIndex', 1, KProperty1, function (receiver) {
      return _get_basisNameToIndex__26cf4t(receiver);
    }, null);
  }
  function inclusionList$factory() {
    return getPropertyCallableRef('inclusionList', 1, KProperty1, function (receiver) {
      return _get_inclusionList__tlg4i1(receiver);
    }, null);
  }
  function Companion_46() {
    Companion_instance_46 = this;
  }
  Companion_46.prototype.n23 = function (source, target, matrixSpace, matrix) {
    return new LinearMap(matrixSpace, source, target, matrix);
  };
  Companion_46.prototype.t19 = function (source, target, matrixSpace, vectors) {
    if (!(vectors.i() === source.d1u()))
      throw new InvalidSizeException('The number of vectors must be the same as the dimension of the source vector space');
    var tmp0_iterator = vectors.f();
    while (tmp0_iterator.g()) {
      var vector = tmp0_iterator.h();
      if (!equals(vector.f19_1, target))
        throw IllegalArgumentException_init_$Create$('The vector space for each vector must be the same as the target vector space');
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(vectors, 10));
    var tmp0_iterator_0 = vectors.f();
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.fromVectors.<anonymous>' call
      tmp$ret$0 = item.d24();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var numVectors = tmp$ret$2;
    var matrix = matrixSpace.w1u(numVectors, target.d1u());
    return new LinearMap(matrixSpace, source, target, matrix);
  };
  Companion_46.$metadata$ = objectMeta('Companion');
  var Companion_instance_46;
  function Companion_getInstance_47() {
    if (Companion_instance_46 == null)
      new Companion_46();
    return Companion_instance_46;
  }
  function LinearMap(matrixSpace, source, target, matrix) {
    Companion_getInstance_47();
    this.v19_1 = matrixSpace;
    this.w19_1 = source;
    this.x19_1 = target;
    this.y19_1 = matrix;
    // Inline function 'kotlin.require' call
    var tmp0_require = this.y19_1.a1v() === this.w19_1.d1u();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.<anonymous>' call
      tmp$ret$0 = 'The matrix has ' + this.y19_1.a1v() + ' columns, ' + ('but the source vector space has dimension ' + this.w19_1.d1u() + '.');
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = this.y19_1.z1u() === this.x19_1.d1u();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.<anonymous>' call
      tmp$ret$1 = 'The matrix has ' + this.y19_1.z1u() + ' rows, ' + ('but the target vector space has dimension ' + this.x19_1.d1u() + '.');
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  LinearMap.prototype.z14 = function () {
    return this.w19_1;
  };
  LinearMap.prototype.a15 = function () {
    return this.x19_1;
  };
  LinearMap.prototype.j1t = function () {
    return this.y19_1;
  };
  LinearMap.prototype.b1a = function (vector) {
    if (!this.w19_1.x23(vector))
      throw IllegalArgumentException_init_$Create$('Invalid vector is given as an argument of LinearMap: ' + vector + ' is not an element of ' + this.w19_1);
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.v19_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.invoke.<anonymous>' call
    tmp$ret$0 = tmp0_run.x1w(this.y19_1, vector.e19_1);
    tmp$ret$1 = tmp$ret$0;
    var numVector = tmp$ret$1;
    return this.x19_1.b24(numVector);
  };
  LinearMap.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof LinearMap)
      other;
    else
      THROW_CCE();
    if (!equals(this.w19_1, other.w19_1))
      return false;
    if (!equals(this.x19_1, other.x19_1))
      return false;
    if (!equals(this.y19_1, other.y19_1))
      return false;
    return true;
  };
  LinearMap.prototype.hashCode = function () {
    var result = hashCode(this.w19_1);
    result = imul(31, result) + hashCode(this.x19_1) | 0;
    result = imul(31, result) + hashCode(this.y19_1) | 0;
    return result;
  };
  LinearMap.prototype.e24 = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.v19_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.kernelBasis.<anonymous>' call
    tmp$ret$0 = tmp0_run.a1x(this.y19_1);
    tmp$ret$1 = tmp$ret$0;
    var numVectorList = tmp$ret$1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(numVectorList, 10));
    var tmp0_iterator = numVectorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.kernelBasis.<anonymous>' call
      tmp$ret$2 = this.w19_1.b24(item);
      tmp0_mapTo.a(tmp$ret$2);
    }
    tmp$ret$3 = tmp0_mapTo;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  };
  LinearMap.prototype.f15 = function () {
    return Companion_getInstance_51().f24(this.v19_1, this.w19_1, this.e24());
  };
  LinearMap.prototype.g24 = function () {
    var numVectorList = this.y19_1.b1v();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(numVectorList, 10));
    var tmp0_iterator = numVectorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.imageGenerator.<anonymous>' call
      tmp$ret$0 = this.x19_1.b24(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  LinearMap.prototype.c15 = function () {
    return Companion_getInstance_51().f24(this.v19_1, this.x19_1, this.g24());
  };
  LinearMap.prototype.a1a = function (sourceSubQuot, targetSubQuot) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = sourceSubQuot.z1a();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.induce.<anonymous>' call
      tmp$ret$0 = sourceSubQuot.o1e().b1a(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var basisLift = tmp$ret$2;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(basisLift, 10));
    var tmp0_iterator_0 = basisLift.f();
    while (tmp0_iterator_0.g()) {
      var item_0 = tmp0_iterator_0.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.vectsp.LinearMap.induce.<anonymous>' call
      tmp$ret$3 = targetSubQuot.z16().b1a(this.b1a(item_0));
      tmp0_mapTo_0.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo_0;
    tmp$ret$5 = tmp$ret$4;
    var vectors = tmp$ret$5;
    return Companion_getInstance_47().t19(sourceSubQuot, targetSubQuot, this.v19_1, vectors);
  };
  LinearMap.$metadata$ = classMeta('LinearMap');
  function SubQuotBasis$Companion$convertGetInternalPrintConfig$lambda$lambda($printer) {
    return function (basisName) {
      return '[' + $printer.k1k(basisName.h24_1) + ']';
    };
  }
  function SubQuotBasis$Companion$convertGetInternalPrintConfig$lambda($getInternalPrintConfig) {
    return function (printConfig) {
      var internalPrintConfig = $getInternalPrintConfig(printConfig);
      var printer = Printer_init_$Create$(printConfig);
      return new InternalPrintConfig(internalPrintConfig.p22_1, SubQuotBasis$Companion$convertGetInternalPrintConfig$lambda$lambda(printer), null);
    };
  }
  function Companion_47() {
    Companion_instance_47 = this;
  }
  Companion_47.prototype.m1c = function (getInternalPrintConfig) {
    return SubQuotBasis$Companion$convertGetInternalPrintConfig$lambda(getInternalPrintConfig);
  };
  Companion_47.$metadata$ = objectMeta('Companion');
  var Companion_instance_47;
  function Companion_getInstance_48() {
    if (Companion_instance_47 == null)
      new Companion_47();
    return Companion_instance_47;
  }
  function SubQuotBasis(vector) {
    Companion_getInstance_48();
    this.h24_1 = vector;
  }
  SubQuotBasis.prototype.toString = function () {
    return '[' + this.h24_1 + ']';
  };
  SubQuotBasis.prototype.hashCode = function () {
    return this.h24_1.hashCode();
  };
  SubQuotBasis.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SubQuotBasis))
      return false;
    var tmp0_other_with_cast = other instanceof SubQuotBasis ? other : THROW_CCE();
    if (!this.h24_1.equals(tmp0_other_with_cast.h24_1))
      return false;
    return true;
  };
  SubQuotBasis.$metadata$ = classMeta('SubQuotBasis', [BasisName]);
  function _get_basisNameToIndex__26cf4t_0($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisNameToIndex$factory_0();
    tmp$ret$0 = $this.v1d_1.f1();
    return tmp$ret$0;
  }
  function Companion_48() {
    Companion_instance_48 = this;
  }
  Companion_48.prototype.m1d = function (matrixSpace, totalVectorSpace, subspaceGenerator, quotientGenerator) {
    var factory = new SubQuotFactory(matrixSpace, totalVectorSpace, subspaceGenerator.i24(), quotientGenerator.i24());
    return new SubQuotVectorSpace(factory);
  };
  Companion_48.$metadata$ = objectMeta('Companion');
  var Companion_instance_48;
  function Companion_getInstance_49() {
    if (Companion_instance_48 == null)
      new Companion_48();
    return Companion_instance_48;
  }
  function SubQuotVectorSpace$basisNameToIndex$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.mapIndexed' call
      var tmp0_mapIndexed = this$0.r1d_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_mapIndexed, 10));
      var index = 0;
      var tmp0_iterator = tmp0_mapIndexed.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotVectorSpace.basisNameToIndex$delegate.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
        tmp$ret$0 = new Pair(item, tmp1__anonymous__uwfjfc);
        tmp0_mapIndexedTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapIndexedTo;
      tmp$ret$2 = tmp$ret$1;
      return toMap(tmp$ret$2);
    };
  }
  function SubQuotVectorSpace$projection$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_47().n23(this$0.p1d_1.k24_1, this$0, this$0.p1d_1.j24_1, this$0.p1d_1.q24_1);
    };
  }
  function SubQuotVectorSpace$section$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_47().n23(this$0, this$0.p1d_1.k24_1, this$0.p1d_1.j24_1, this$0.p1d_1.r24_1);
    };
  }
  function SubQuotVectorSpace$toString$lambda(it) {
    return it.toString();
  }
  function SubQuotVectorSpace(factory) {
    Companion_getInstance_49();
    this.p1d_1 = factory;
    this.q1d_1 = this.p1d_1.n24_1;
    this.r1d_1 = this.p1d_1.o24_1;
    this.s1d_1 = Companion_getInstance_48().m1c(this.p1d_1.k24_1.k11());
    this.t1d_1 = new VectorContextImpl(this);
    this.u1d_1 = this.p1d_1.k24_1;
    var tmp = this;
    tmp.v1d_1 = lazy(SubQuotVectorSpace$basisNameToIndex$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.w1d_1 = lazy(SubQuotVectorSpace$projection$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.x1d_1 = lazy(SubQuotVectorSpace$section$delegate$lambda(this));
  }
  SubQuotVectorSpace.prototype.j11 = function () {
    return this.q1d_1;
  };
  SubQuotVectorSpace.prototype.s19 = function () {
    return this.r1d_1;
  };
  SubQuotVectorSpace.prototype.k11 = function () {
    return this.s1d_1;
  };
  SubQuotVectorSpace.prototype.t14 = function () {
    return this.t1d_1;
  };
  SubQuotVectorSpace.prototype.u24 = function (basisName) {
    var tmp0_elvis_lhs = _get_basisNameToIndex__26cf4t_0(this).t(basisName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw NoSuchElementException_init_$Create$('' + basisName + ' is not a name of basis element of the vector space ' + this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  SubQuotVectorSpace.prototype.u23 = function (basisName) {
    return this.u24(basisName instanceof SubQuotBasis ? basisName : THROW_CCE());
  };
  SubQuotVectorSpace.prototype.z16 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = projection$factory_0();
    tmp$ret$0 = this.w1d_1.f1();
    return tmp$ret$0;
  };
  SubQuotVectorSpace.prototype.o1e = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = section$factory();
    tmp$ret$0 = this.x1d_1.f1();
    return tmp$ret$0;
  };
  SubQuotVectorSpace.prototype.y1d = function (vector) {
    return this.p1d_1.y1d(vector);
  };
  SubQuotVectorSpace.prototype.toString = function () {
    var basisNamesString = joinToString$default(this.r1d_1, ', ', null, null, 0, null, SubQuotVectorSpace$toString$lambda, 30, null);
    return 'SubQuotVectorSpace(' + basisNamesString + ')';
  };
  SubQuotVectorSpace.$metadata$ = classMeta('SubQuotVectorSpace', [VectorSpace]);
  function Companion_49() {
    Companion_instance_49 = this;
  }
  Companion_49.prototype.v24 = function (_this__u8e3s4, vectors, dim) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(vectors, 10));
    var tmp0_iterator = vectors.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.fromVectors.<anonymous>' call
      tmp$ret$0 = item.d24();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var numVectorList = tmp$ret$2;
    return _this__u8e3s4.w1u(numVectorList, dim);
  };
  Companion_49.$metadata$ = objectMeta('Companion');
  var Companion_instance_49;
  function Companion_getInstance_50() {
    if (Companion_instance_49 == null)
      new Companion_49();
    return Companion_instance_49;
  }
  function SubQuotFactory(matrixSpace, totalVectorSpace, subspaceGenerator, quotientGenerator) {
    Companion_getInstance_50();
    this.j24_1 = matrixSpace;
    this.k24_1 = totalVectorSpace;
    this.l24_1 = subspaceGenerator;
    this.m24_1 = quotientGenerator;
    this.n24_1 = this.j24_1.j11();
    var tmp0_iterator = plus(this.l24_1, this.m24_1).f();
    while (tmp0_iterator.g()) {
      var vector = tmp0_iterator.h();
      // Inline function 'kotlin.require' call
      var tmp0_require = this.k24_1.x23(vector);
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
        tmp$ret$0 = 'The vector ' + vector + ' is not contained in the vector space ' + this.k24_1;
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
    // Inline function 'com.github.shwaka.kococo.debugOnly' call
    var tmp$ret$2;
    // Inline function 'kotlin.run' call
    var tmp1_run = this.j24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
    var quotientMatrix = Companion_getInstance_50().v24(tmp1_run.h11(), this.m24_1, this.k24_1.d1u());
    var subspaceMatrix = Companion_getInstance_50().v24(tmp1_run.h11(), this.l24_1, this.k24_1.d1u());
    var id = tmp1_run.h11().x1u(this.k24_1.d1u());
    tmp$ret$1 = tmp1_run.u1w(listOf_0([quotientMatrix, subspaceMatrix, id]));
    tmp$ret$2 = tmp$ret$1;
    var joinedMatrix = tmp$ret$2;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    var tmp2_run = this.j24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
    tmp$ret$3 = tmp2_run.v1w(joinedMatrix);
    tmp$ret$4 = tmp$ret$3;
    var rowEchelonForm = tmp$ret$4;
    var tmp = this;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.filter' call
    var tmp3_filter = rowEchelonForm.l1t();
    var tmp$ret$6;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = tmp3_filter.f();
    while (tmp0_iterator_0.g()) {
      var element = tmp0_iterator_0.h();
      var tmp$ret$5;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
      tmp$ret$5 = element < this.m24_1.i();
      if (tmp$ret$5) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$6 = tmp0_filterTo;
    tmp$ret$7 = tmp$ret$6;
    tmp.s24_1 = tmp$ret$7.i();
    var tmp_0 = this;
    var tmp$ret$10;
    // Inline function 'kotlin.collections.filter' call
    var tmp4_filter = rowEchelonForm.l1t();
    var tmp$ret$9;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo_0 = ArrayList_init_$Create$_0();
    var tmp0_iterator_1 = tmp4_filter.f();
    while (tmp0_iterator_1.g()) {
      var element_0 = tmp0_iterator_1.h();
      var tmp$ret$8;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
      tmp$ret$8 = this.m24_1.i() <= element_0 ? element_0 < (this.m24_1.i() + this.l24_1.i() | 0) : false;
      if (tmp$ret$8) {
        tmp0_filterTo_0.a(element_0);
      }
    }
    tmp$ret$9 = tmp0_filterTo_0;
    tmp$ret$10 = tmp$ret$9;
    tmp_0.t24_1 = tmp$ret$10.i();
    var basisIndices = slice(rowEchelonForm.l1t(), until(this.s24_1, this.s24_1 + this.t24_1 | 0));
    var tmp_1 = this;
    var tmp$ret$16;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$13;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$12;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(basisIndices, 10));
    var tmp0_iterator_2 = basisIndices.f();
    while (tmp0_iterator_2.g()) {
      var item = tmp0_iterator_2.h();
      var tmp$ret$11;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
      tmp$ret$11 = this.l24_1.l(item - this.m24_1.i() | 0);
      tmp0_mapTo.a(tmp$ret$11);
    }
    tmp$ret$12 = tmp0_mapTo;
    tmp$ret$13 = tmp$ret$12;
    var tmp5_map = tmp$ret$13;
    var tmp$ret$15;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp5_map, 10));
    var tmp0_iterator_3 = tmp5_map.f();
    while (tmp0_iterator_3.g()) {
      var item_0 = tmp0_iterator_3.h();
      var tmp$ret$14;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
      tmp$ret$14 = new SubQuotBasis(item_0);
      tmp0_mapTo_0.a(tmp$ret$14);
    }
    tmp$ret$15 = tmp0_mapTo_0;
    tmp$ret$16 = tmp$ret$15;
    tmp_1.o24_1 = tmp$ret$16;
    var tmp_2 = this;
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    var tmp6_run = this.j24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
    var size = rowEchelonForm.k1t().a1v();
    var dim = this.k24_1.d1u();
    tmp$ret$17 = tmp6_run.w1w(rowEchelonForm.k1t(), until(size - dim | 0, size));
    tmp$ret$18 = tmp$ret$17;
    tmp_2.p24_1 = tmp$ret$18;
    var tmp_3 = this;
    var tmp$ret$20;
    // Inline function 'kotlin.run' call
    var tmp7_run = this.j24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$19;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
    tmp$ret$19 = tmp7_run.y1w(this.p24_1, until(this.s24_1, this.s24_1 + this.t24_1 | 0));
    tmp$ret$20 = tmp$ret$19;
    tmp_3.q24_1 = tmp$ret$20;
    var tmp_4 = this;
    var tmp_5 = Companion_getInstance_50();
    var tmp$ret$23;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$22;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_1 = ArrayList_init_$Create$(collectionSizeOrDefault(basisIndices, 10));
    var tmp0_iterator_4 = basisIndices.f();
    while (tmp0_iterator_4.g()) {
      var item_1 = tmp0_iterator_4.h();
      var tmp$ret$21;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.<anonymous>' call
      tmp$ret$21 = this.l24_1.l(item_1 - this.m24_1.i() | 0);
      tmp0_mapTo_1.a(tmp$ret$21);
    }
    tmp$ret$22 = tmp0_mapTo_1;
    tmp$ret$23 = tmp$ret$22;
    tmp_4.r24_1 = tmp_5.v24(this.j24_1, tmp$ret$23, this.k24_1.d1u());
  }
  SubQuotFactory.prototype.h11 = function () {
    return this.j24_1;
  };
  SubQuotFactory.prototype.w24 = function () {
    return this.k24_1;
  };
  SubQuotFactory.prototype.y1d = function (vector) {
    var tmp$ret$3;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.j24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.subspaceContains.<anonymous>' call
    var numVector = tmp0_run.x1w(this.p24_1, vector.e19_1);
    var start = this.s24_1 + this.t24_1 | 0;
    var limit = this.k24_1.d1u();
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = until(start, limit);
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var inductionVariable = tmp0_all.h5_1;
      var last = tmp0_all.i5_1;
      if (inductionVariable <= last)
        do {
          var element = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$1;
          // Inline function 'com.github.shwaka.kohomology.vectsp.SubQuotFactory.subspaceContains.<anonymous>.<anonymous>' call
          tmp$ret$1 = tmp0_run.b1x(numVector, element).op();
          if (!tmp$ret$1) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
         while (!(element === last));
      tmp$ret$0 = true;
    }
    tmp$ret$2 = tmp$ret$0;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  };
  SubQuotFactory.$metadata$ = classMeta('SubQuotFactory');
  function basisNameToIndex$factory_0() {
    return getPropertyCallableRef('basisNameToIndex', 1, KProperty1, function (receiver) {
      return _get_basisNameToIndex__26cf4t_0(receiver);
    }, null);
  }
  function projection$factory_0() {
    return getPropertyCallableRef('projection', 1, KProperty1, function (receiver) {
      return receiver.z16();
    }, null);
  }
  function section$factory() {
    return getPropertyCallableRef('section', 1, KProperty1, function (receiver) {
      return receiver.o1e();
    }, null);
  }
  function Companion_50() {
    Companion_instance_50 = this;
  }
  Companion_50.prototype.f24 = function (matrixSpace, totalVectorSpace, generator) {
    var factory = new SubFactory(matrixSpace, totalVectorSpace, generator);
    return new SubVectorSpaceImpl(factory);
  };
  Companion_50.$metadata$ = objectMeta('Companion');
  var Companion_instance_50;
  function Companion_getInstance_51() {
    if (Companion_instance_50 == null)
      new Companion_50();
    return Companion_instance_50;
  }
  function SubVectorSpace() {
  }
  SubVectorSpace.$metadata$ = interfaceMeta('SubVectorSpace', [VectorSpace]);
  function SubBasis$Companion$convertGetInternalPrintConfig$lambda$lambda($printer) {
    return function (basisName) {
      return '(' + $printer.k1k(basisName.x24_1) + ')';
    };
  }
  function SubBasis$Companion$convertGetInternalPrintConfig$lambda($getInternalPrintConfig) {
    return function (printConfig) {
      var internalPrintConfig = $getInternalPrintConfig(printConfig);
      var printer = Printer_init_$Create$(printConfig);
      return new InternalPrintConfig(internalPrintConfig.p22_1, SubBasis$Companion$convertGetInternalPrintConfig$lambda$lambda(printer), null);
    };
  }
  function Companion_51() {
    Companion_instance_51 = this;
  }
  Companion_51.prototype.m1c = function (getInternalPrintConfig) {
    return SubBasis$Companion$convertGetInternalPrintConfig$lambda(getInternalPrintConfig);
  };
  Companion_51.$metadata$ = objectMeta('Companion');
  var Companion_instance_51;
  function Companion_getInstance_52() {
    if (Companion_instance_51 == null)
      new Companion_51();
    return Companion_instance_51;
  }
  function SubBasis(vector) {
    Companion_getInstance_52();
    this.x24_1 = vector;
  }
  SubBasis.prototype.toString = function () {
    return '(' + this.x24_1 + ')';
  };
  SubBasis.prototype.hashCode = function () {
    return this.x24_1.hashCode();
  };
  SubBasis.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SubBasis))
      return false;
    var tmp0_other_with_cast = other instanceof SubBasis ? other : THROW_CCE();
    if (!this.x24_1.equals(tmp0_other_with_cast.x24_1))
      return false;
    return true;
  };
  SubBasis.$metadata$ = classMeta('SubBasis', [BasisName]);
  function _get_rowEchelonForm__ymu65r($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = rowEchelonForm$factory();
    tmp$ret$0 = $this.c25_1.f1();
    return tmp$ret$0;
  }
  function _get_basisIndices__7ymdcu($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisIndices$factory();
    tmp$ret$0 = $this.e25_1.f1();
    return tmp$ret$0;
  }
  function _get_transformationMatrix__anz1r3($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = transformationMatrix$factory();
    tmp$ret$0 = $this.f25_1.f1();
    return tmp$ret$0;
  }
  function Companion_52() {
    Companion_instance_52 = this;
  }
  Companion_52.prototype.v24 = function (_this__u8e3s4, vectors, dim) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(vectors, 10));
    var tmp0_iterator = vectors.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Companion.fromVectors.<anonymous>' call
      tmp$ret$0 = item.d24();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var numVectorList = tmp$ret$2;
    return _this__u8e3s4.w1u(numVectorList, dim);
  };
  Companion_52.$metadata$ = objectMeta('Companion');
  var Companion_instance_52;
  function Companion_getInstance_53() {
    if (Companion_instance_52 == null)
      new Companion_52();
    return Companion_instance_52;
  }
  function SubFactory$rowEchelonForm$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$3;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.y24_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.rowEchelonForm$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.rowEchelonForm$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var subspaceMatrix = Companion_getInstance_53().v24(tmp0_run.h11(), this$0.a25_1, this$0.z24_1.d1u());
      var id = tmp0_run.h11().x1u(this$0.z24_1.d1u());
      tmp$ret$0 = tmp0_run.u1w(listOf_0([subspaceMatrix, id]));
      tmp$ret$1 = tmp$ret$0;
      var joinedMatrix = tmp$ret$1;
      tmp$ret$2 = tmp0_run.v1w(joinedMatrix);
      tmp$ret$3 = tmp$ret$2;
      return tmp$ret$3;
    };
  }
  function SubFactory$dim$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.filter' call
      var tmp0_filter = _get_rowEchelonForm__ymu65r(this$0).l1t();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.filterTo' call
      var tmp0_filterTo = ArrayList_init_$Create$_0();
      var tmp0_iterator = tmp0_filter.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.dim$delegate.<anonymous>.<anonymous>' call
        tmp$ret$0 = element < this$0.a25_1.i();
        if (tmp$ret$0) {
          tmp0_filterTo.a(element);
        }
      }
      tmp$ret$1 = tmp0_filterTo;
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2.i();
    };
  }
  function SubFactory$basisIndices$delegate$lambda(this$0) {
    return function () {
      return slice(_get_rowEchelonForm__ymu65r(this$0).l1t(), until(0, this$0.d1u()));
    };
  }
  function SubFactory$transformationMatrix$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.y24_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.transformationMatrix$delegate.<anonymous>.<anonymous>' call
      var size = _get_rowEchelonForm__ymu65r(this$0).k1t().a1v();
      var dim = this$0.z24_1.d1u();
      tmp$ret$0 = tmp0_run.w1w(_get_rowEchelonForm__ymu65r(this$0).k1t(), until(size - dim | 0, size));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function SubFactory(matrixSpace, totalVectorSpace, generator) {
    Companion_getInstance_53();
    this.y24_1 = matrixSpace;
    this.z24_1 = totalVectorSpace;
    this.a25_1 = generator;
    this.b25_1 = this.y24_1.j11();
    var tmp = this;
    tmp.c25_1 = lazy(SubFactory$rowEchelonForm$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.d25_1 = lazy(SubFactory$dim$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.e25_1 = lazy(SubFactory$basisIndices$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.f25_1 = lazy(SubFactory$transformationMatrix$delegate$lambda(this));
    var tmp0_iterator = this.a25_1.f();
    while (tmp0_iterator.g()) {
      var vector = tmp0_iterator.h();
      // Inline function 'kotlin.require' call
      var tmp0_require = this.z24_1.x23(vector);
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.<anonymous>' call
        tmp$ret$0 = 'The vector ' + vector + ' is not contained in the vector space ' + this.z24_1;
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  }
  SubFactory.prototype.w24 = function () {
    return this.z24_1;
  };
  SubFactory.prototype.i24 = function () {
    return this.a25_1;
  };
  SubFactory.prototype.d1u = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = dim$factory();
    tmp$ret$0 = this.d25_1.f1();
    return tmp$ret$0;
  };
  SubFactory.prototype.g25 = function () {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = _get_basisIndices__7ymdcu(this);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.getBasisNames.<anonymous>' call
      tmp$ret$0 = this.a25_1.l(item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp1_map = tmp$ret$2;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp1_map, 10));
    var tmp0_iterator_0 = tmp1_map.f();
    while (tmp0_iterator_0.g()) {
      var item_0 = tmp0_iterator_0.h();
      var tmp$ret$3;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.getBasisNames.<anonymous>' call
      tmp$ret$3 = new SubBasis(item_0);
      tmp0_mapTo_0.a(tmp$ret$3);
    }
    tmp$ret$4 = tmp0_mapTo_0;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  };
  SubFactory.prototype.h25 = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = _get_basisIndices__7ymdcu(this);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.getInclusionMatrix.<anonymous>' call
      tmp$ret$0 = this.a25_1.l(item).d24();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return this.y24_1.w1u(tmp$ret$2, this.z24_1.d1u());
  };
  SubFactory.prototype.i25 = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run = this.y24_1.t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.github.shwaka.kohomology.vectsp.SubFactory.getRetractionMatrix.<anonymous>' call
    tmp$ret$0 = tmp0_run.y1w(_get_transformationMatrix__anz1r3(this), until(0, this.d1u()));
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  SubFactory.$metadata$ = classMeta('SubFactory');
  function _get_basisNameToIndex__26cf4t_1($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisNameToIndex$factory_1();
    tmp$ret$0 = $this.q25_1.f1();
    return tmp$ret$0;
  }
  function SubVectorSpaceImpl$basisNames$delegate$lambda(this$0) {
    return function () {
      return this$0.j25_1.g25();
    };
  }
  function SubVectorSpaceImpl$basisNameToIndex$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.mapIndexed' call
      var tmp0_mapIndexed = this$0.s19();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_mapIndexed, 10));
      var index = 0;
      var tmp0_iterator = tmp0_mapIndexed.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.SubVectorSpaceImpl.basisNameToIndex$delegate.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
        tmp$ret$0 = new Pair(item, tmp1__anonymous__uwfjfc);
        tmp0_mapIndexedTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapIndexedTo;
      tmp$ret$2 = tmp$ret$1;
      return toMap(tmp$ret$2);
    };
  }
  function SubVectorSpaceImpl$inclusion$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_47().n23(this$0, this$0.j25_1.z24_1, this$0.j25_1.y24_1, this$0.j25_1.h25());
    };
  }
  function SubVectorSpaceImpl$retraction$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_47().n23(this$0.j25_1.z24_1, this$0, this$0.j25_1.y24_1, this$0.j25_1.i25());
    };
  }
  function SubVectorSpaceImpl$toString$lambda(it) {
    return it.toString();
  }
  function SubVectorSpaceImpl(factory) {
    this.j25_1 = factory;
    this.k25_1 = this.j25_1.b25_1;
    var tmp = this;
    tmp.l25_1 = lazy(SubVectorSpaceImpl$basisNames$delegate$lambda(this));
    this.m25_1 = this.j25_1.z24_1;
    this.n25_1 = this.j25_1.a25_1;
    this.o25_1 = Companion_getInstance_52().m1c(this.m25_1.k11());
    this.p25_1 = new VectorContextImpl(this);
    var tmp_0 = this;
    tmp_0.q25_1 = lazy(SubVectorSpaceImpl$basisNameToIndex$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.r25_1 = lazy(SubVectorSpaceImpl$inclusion$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.s25_1 = lazy(SubVectorSpaceImpl$retraction$delegate$lambda(this));
  }
  SubVectorSpaceImpl.prototype.j11 = function () {
    return this.k25_1;
  };
  SubVectorSpaceImpl.prototype.s19 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisNames$factory();
    tmp$ret$0 = this.l25_1.f1();
    return tmp$ret$0;
  };
  SubVectorSpaceImpl.prototype.i24 = function () {
    return this.n25_1;
  };
  SubVectorSpaceImpl.prototype.k11 = function () {
    return this.o25_1;
  };
  SubVectorSpaceImpl.prototype.t14 = function () {
    return this.p25_1;
  };
  SubVectorSpaceImpl.prototype.t25 = function (basisName) {
    var tmp0_elvis_lhs = _get_basisNameToIndex__26cf4t_1(this).t(basisName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw NoSuchElementException_init_$Create$('' + basisName + ' is not a name of basis element of the vector space ' + this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  SubVectorSpaceImpl.prototype.u23 = function (basisName) {
    return this.t25(basisName instanceof SubBasis ? basisName : THROW_CCE());
  };
  SubVectorSpaceImpl.prototype.k1c = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = inclusion$factory();
    tmp$ret$0 = this.r25_1.f1();
    return tmp$ret$0;
  };
  SubVectorSpaceImpl.prototype.l1c = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = retraction$factory();
    tmp$ret$0 = this.s25_1.f1();
    return tmp$ret$0;
  };
  SubVectorSpaceImpl.prototype.toString = function () {
    var tmp = this.s19();
    var basisNamesString = joinToString$default(tmp, ', ', null, null, 0, null, SubVectorSpaceImpl$toString$lambda, 30, null);
    return 'SubVectorSpace(' + basisNamesString + ')';
  };
  SubVectorSpaceImpl.$metadata$ = classMeta('SubVectorSpaceImpl', [SubVectorSpace]);
  function rowEchelonForm$factory() {
    return getPropertyCallableRef('rowEchelonForm', 1, KProperty1, function (receiver) {
      return _get_rowEchelonForm__ymu65r(receiver);
    }, null);
  }
  function dim$factory() {
    return getPropertyCallableRef('dim', 1, KProperty1, function (receiver) {
      return receiver.d1u();
    }, null);
  }
  function basisIndices$factory() {
    return getPropertyCallableRef('basisIndices', 1, KProperty1, function (receiver) {
      return _get_basisIndices__7ymdcu(receiver);
    }, null);
  }
  function transformationMatrix$factory() {
    return getPropertyCallableRef('transformationMatrix', 1, KProperty1, function (receiver) {
      return _get_transformationMatrix__anz1r3(receiver);
    }, null);
  }
  function basisNames$factory() {
    return getPropertyCallableRef('basisNames', 1, KProperty1, function (receiver) {
      return receiver.s19();
    }, null);
  }
  function basisNameToIndex$factory_1() {
    return getPropertyCallableRef('basisNameToIndex', 1, KProperty1, function (receiver) {
      return _get_basisNameToIndex__26cf4t_1(receiver);
    }, null);
  }
  function inclusion$factory() {
    return getPropertyCallableRef('inclusion', 1, KProperty1, function (receiver) {
      return receiver.k1c();
    }, null);
  }
  function retraction$factory() {
    return getPropertyCallableRef('retraction', 1, KProperty1, function (receiver) {
      return receiver.l1c();
    }, null);
  }
  function BasisName() {
  }
  BasisName.$metadata$ = interfaceMeta('BasisName', [Printable]);
  function firstTermToString($this, coeff, basisName, printConfig, internalPrintConfig) {
    var basisNameString = internalPrintConfig.q22_1(basisName);
    var coeffString = internalPrintConfig.p22_1(coeff, true);
    if (basisNameString === '1') {
      return coeffString;
    }
    var tmp0_subject = coeffString;
    switch (tmp0_subject) {
      case '1':
        return basisNameString;
      case '-1':
        return '-' + printConfig.v1j_1 + basisNameString;
      default:
        return coeffString + printConfig.w1j_1 + basisNameString;
    }
  }
  function nonFirstTermToString($this, coeff, basisName, printConfig, internalPrintConfig) {
    var basisNameString = internalPrintConfig.q22_1(basisName);
    var coeffString = internalPrintConfig.p22_1(coeff, false);
    var sign = coeff.s1w() ? '+' : '-';
    if (basisNameString === '1') {
      return printConfig.u1j_1 + sign + printConfig.v1j_1 + coeffString;
    }
    var tmp0_subject = coeffString;
    var str = tmp0_subject === '1' ? basisNameString : coeffString + printConfig.w1j_1 + basisNameString;
    return printConfig.u1j_1 + sign + printConfig.v1j_1 + str;
  }
  function Companion_53() {
    Companion_instance_53 = this;
  }
  Companion_53.$metadata$ = objectMeta('Companion');
  var Companion_instance_53;
  function Companion_getInstance_54() {
    if (Companion_instance_53 == null)
      new Companion_53();
    return Companion_instance_53;
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.u25_1 = function_0;
  }
  sam$kotlin_Comparator$0_0.prototype.x = function (a, b) {
    return this.u25_1(a, b);
  };
  sam$kotlin_Comparator$0_0.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0_0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function Vector$print$lambda($tmp1_compareBy) {
    return function (a, b) {
      var tmp$ret$2;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Vector.print.<anonymous>.<anonymous>' call
      tmp$ret$0 = a.w4_1;
      var tmp = tmp$ret$0;
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Vector.print.<anonymous>.<anonymous>' call
      tmp$ret$1 = b.w4_1;
      tmp$ret$2 = $tmp1_compareBy.compare(tmp, tmp$ret$1);
      return tmp$ret$2;
    };
  }
  function Vector$print$lambda_0($printConfig, $internalPrintConfig) {
    return function (_name_for_destructuring_parameter_0__wldtmu) {
      var index = _name_for_destructuring_parameter_0__wldtmu.w3();
      var coeffAndBasisName = _name_for_destructuring_parameter_0__wldtmu.x3();
      var tmp0_container = coeffAndBasisName;
      var coeff = tmp0_container.w3();
      var basisName = tmp0_container.x3();
      var tmp1_subject = index;
      return tmp1_subject === 0 ? firstTermToString(Companion_getInstance_54(), coeff, basisName, $printConfig, $internalPrintConfig) : nonFirstTermToString(Companion_getInstance_54(), coeff, basisName, $printConfig, $internalPrintConfig);
    };
  }
  function Vector(numVector, vectorSpace) {
    Companion_getInstance_54();
    this.e19_1 = numVector;
    this.f19_1 = vectorSpace;
    if (!(this.e19_1.d1u() === this.f19_1.d1u()))
      throw new InvalidSizeException('Dimension of the numerical vector does not match the dimension of the vector space');
  }
  Vector.prototype.v25 = function () {
    return this.e19_1;
  };
  Vector.prototype.w25 = function () {
    return this.f19_1;
  };
  Vector.prototype.d24 = function () {
    return this.e19_1;
  };
  Vector.prototype.op = function () {
    return this.e19_1.op();
  };
  Vector.prototype.t1a = function () {
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mapKeys' call
    var tmp0_mapKeys = this.e19_1.w1v();
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapKeysTo' call
    var tmp1_mapKeysTo = LinkedHashMap_init_$Create$_0(mapCapacity(tmp0_mapKeys.i()));
    var tmp$ret$3;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = tmp0_mapKeys.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Vector.toBasisMap.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$0 = element.e1();
      var index = tmp$ret$0;
      tmp$ret$1 = this.f19_1.s19().l(index);
      var tmp = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
      tmp$ret$2 = element.f1();
      tmp1_mapKeysTo.u(tmp, tmp$ret$2);
    }
    tmp$ret$3 = tmp1_mapKeysTo;
    tmp$ret$4 = tmp$ret$3;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  };
  Vector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof Vector)
      other;
    else
      THROW_CCE();
    if (!equals(this.e19_1, other.e19_1))
      return false;
    if (!equals(this.f19_1, other.f19_1))
      return false;
    return true;
  };
  Vector.prototype.hashCode = function () {
    var result = hashCode(this.e19_1);
    result = imul(31, result) + hashCode(this.f19_1) | 0;
    return result;
  };
  Vector.prototype.toString = function () {
    return this.v1a(PrintConfig_init_$Create$(null, null, null, null, null, 31, null));
  };
  Vector.prototype.v1a = function (printConfig) {
    var internalPrintConfig = this.f19_1.k11()(printConfig);
    return this.w1a(printConfig, internalPrintConfig);
  };
  Vector.prototype.w1a = function (printConfig, internalPrintConfig) {
    var tmp$ret$5;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$4;
    // Inline function 'com.github.shwaka.kohomology.vectsp.Vector.print.<anonymous>' call
    var coeffList = this.e19_1.e1q();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filter' call
    var tmp0_filter = zip(coeffList, this.f19_1.s19());
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$_0();
    var tmp0_iterator = tmp0_filter.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.shwaka.kohomology.vectsp.Vector.print.<anonymous>.<anonymous>' call
      var coeff = element.w3();
      tmp$ret$0 = coeff.z17();
      if (tmp$ret$0) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$1 = tmp0_filterTo;
    tmp$ret$2 = tmp$ret$1;
    var basisWithCoeff = tmp$ret$2;
    var tmp;
    if (internalPrintConfig.r22_1 == null) {
      tmp = basisWithCoeff;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp1_compareBy = internalPrintConfig.r22_1;
      var tmp_0 = Vector$print$lambda(tmp1_compareBy);
      tmp$ret$3 = new sam$kotlin_Comparator$0_0(tmp_0);
      tmp = sortedWith(basisWithCoeff, tmp$ret$3);
    }
    tmp$ret$4 = tmp;
    tmp$ret$5 = tmp$ret$4;
    var sortedBasisWithCoeff = tmp$ret$5;
    var tmp_1;
    if (sortedBasisWithCoeff.p()) {
      tmp_1 = '0';
    } else {
      var tmp_2 = withIndex(sortedBasisWithCoeff);
      tmp_1 = joinToString$default(tmp_2, '', null, null, 0, null, Vector$print$lambda_0(printConfig, internalPrintConfig), 30, null);
    }
    return tmp_1;
  };
  Vector.$metadata$ = classMeta('Vector', [Printable]);
  function InternalPrintConfig$Companion$default$ref_1($boundThis) {
    var l = function (p0) {
      return $boundThis.h19(p0);
    };
    l.callableName = 'default';
    return l;
  }
  function Companion_54() {
    Companion_instance_54 = this;
  }
  Companion_54.prototype.x25 = function (numVectorSpace, basisNames, getInternalPrintConfig) {
    return new VectorSpaceImpl(numVectorSpace, basisNames, getInternalPrintConfig);
  };
  Companion_54.prototype.n1p = function (numVectorSpace, basisNames, getInternalPrintConfig, $mask0, $handler) {
    if (!(($mask0 & 4) === 0)) {
      getInternalPrintConfig = InternalPrintConfig$Companion$default$ref_1(Companion_getInstance_44());
    }
    return this.x25(numVectorSpace, basisNames, getInternalPrintConfig);
  };
  Companion_54.$metadata$ = objectMeta('Companion');
  var Companion_instance_54;
  function Companion_getInstance_55() {
    if (Companion_instance_54 == null)
      new Companion_54();
    return Companion_instance_54;
  }
  function VectorSpace() {
  }
  VectorSpace.$metadata$ = interfaceMeta('VectorSpace');
  function VectorContext() {
  }
  VectorContext.$metadata$ = interfaceMeta('VectorContext', [NumVectorContext]);
  function _get_basisNameToIndex__26cf4t_2($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = basisNameToIndex$factory_2();
    tmp$ret$0 = $this.c26_1.f1();
    return tmp$ret$0;
  }
  function VectorSpaceImpl$basisNameToIndex$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.mapIndexed' call
      var tmp0_mapIndexed = this$0.z25_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var tmp0_mapIndexedTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_mapIndexed, 10));
      var index = 0;
      var tmp0_iterator = tmp0_mapIndexed.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'com.github.shwaka.kohomology.vectsp.VectorSpaceImpl.basisNameToIndex$delegate.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var tmp1__anonymous__uwfjfc = checkIndexOverflow(tmp1);
        tmp$ret$0 = new Pair(item, tmp1__anonymous__uwfjfc);
        tmp0_mapIndexedTo.a(tmp$ret$0);
      }
      tmp$ret$1 = tmp0_mapIndexedTo;
      tmp$ret$2 = tmp$ret$1;
      return toMap(tmp$ret$2);
    };
  }
  function VectorSpaceImpl$toString$lambda(it) {
    return toString(it);
  }
  function VectorSpaceImpl(numVectorSpace, basisNames, getInternalPrintConfig) {
    this.y25_1 = numVectorSpace;
    this.z25_1 = basisNames;
    this.a26_1 = getInternalPrintConfig;
    this.b26_1 = new VectorContextImpl(this);
    var tmp = this;
    tmp.c26_1 = lazy(VectorSpaceImpl$basisNameToIndex$delegate$lambda(this));
  }
  VectorSpaceImpl.prototype.j11 = function () {
    return this.y25_1;
  };
  VectorSpaceImpl.prototype.s19 = function () {
    return this.z25_1;
  };
  VectorSpaceImpl.prototype.k11 = function () {
    return this.a26_1;
  };
  VectorSpaceImpl.prototype.t14 = function () {
    return this.b26_1;
  };
  VectorSpaceImpl.prototype.u23 = function (basisName) {
    var tmp0_elvis_lhs = _get_basisNameToIndex__26cf4t_2(this).t(basisName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw NoSuchElementException_init_$Create$('' + basisName + ' is not a name of basis element of the vector space ' + this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  VectorSpaceImpl.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other == null) ? isInterface(other, VectorSpace) : false)
      other;
    else
      THROW_CCE();
    if (!equals(this.y25_1, other.j11()))
      return false;
    if (!(this.d1u() === other.d1u()))
      return false;
    if (!equals(this.z25_1, other.s19()))
      return false;
    return true;
  };
  VectorSpaceImpl.prototype.hashCode = function () {
    var result = hashCode(this.y25_1);
    result = imul(31, result) + this.d1u() | 0;
    result = imul(31, result) + hashCode(this.z25_1) | 0;
    return result;
  };
  VectorSpaceImpl.prototype.toString = function () {
    var basisNamesString = joinToString$default(this.z25_1, ', ', null, null, 0, null, VectorSpaceImpl$toString$lambda, 30, null);
    return 'VectorSpace(' + basisNamesString + ')';
  };
  VectorSpaceImpl.$metadata$ = classMeta('VectorSpaceImpl', [VectorSpace]);
  function VectorContextImpl(vectorSpace) {
    this.d26_1 = vectorSpace;
    this.e26_1 = new NumVectorContextImpl(vectorSpace.j11());
  }
  VectorContextImpl.prototype.w25 = function () {
    return this.d26_1;
  };
  VectorContextImpl.prototype.p11 = function () {
    return this.e26_1.p11();
  };
  VectorContextImpl.prototype.j11 = function () {
    return this.e26_1.h1b_1;
  };
  VectorContextImpl.prototype.w12 = function () {
    return this.e26_1.w12();
  };
  VectorContextImpl.prototype.x12 = function () {
    return this.e26_1.x12();
  };
  VectorContextImpl.prototype.z12 = function (_this__u8e3s4, other) {
    return this.e26_1.z12(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.b13 = function (_this__u8e3s4) {
    return this.e26_1.b13(_this__u8e3s4);
  };
  VectorContextImpl.prototype.c13 = function (_this__u8e3s4, other) {
    return this.e26_1.c13(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.d13 = function (_this__u8e3s4, other) {
    return this.e26_1.d13(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.g13 = function (_this__u8e3s4, other) {
    return this.e26_1.g13(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.h13 = function (_this__u8e3s4, other) {
    return this.e26_1.h13(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.k13 = function (_this__u8e3s4) {
    return this.e26_1.k13(_this__u8e3s4);
  };
  VectorContextImpl.prototype.m13 = function (_this__u8e3s4, other) {
    return this.e26_1.m13(_this__u8e3s4, other);
  };
  VectorContextImpl.prototype.n13 = function (_this__u8e3s4, numVector) {
    return this.e26_1.n13(_this__u8e3s4, numVector);
  };
  VectorContextImpl.prototype.p13 = function (_this__u8e3s4, scalar) {
    return this.e26_1.p13(_this__u8e3s4, scalar);
  };
  VectorContextImpl.prototype.y13 = function (_this__u8e3s4) {
    return this.e26_1.y13(_this__u8e3s4);
  };
  VectorContextImpl.prototype.e1x = function (_this__u8e3s4) {
    return this.e26_1.e1x(_this__u8e3s4);
  };
  VectorContextImpl.$metadata$ = classMeta('VectorContextImpl', [VectorContext, NumVectorContext]);
  function basisNameToIndex$factory_2() {
    return getPropertyCallableRef('basisNameToIndex', 1, KProperty1, function (receiver) {
      return _get_basisNameToIndex__26cf4t_2(receiver);
    }, null);
  }
  //region block: post-declaration
  DGAlgebraContextImpl.prototype.c14 = pow;
  DGAlgebraContextImpl.prototype.d14 = pow_0;
  DGAlgebraContextImpl.prototype.e14 = toScalar_0;
  DGAlgebraContextImpl.prototype.f14 = product;
  DGAlgebraContextImpl.prototype.e12 = get_unit;
  DGAlgebraImpl.prototype.i11 = cohomologyClassOf;
  DGAlgebraImpl.prototype.a12 = multiply_0;
  DGAlgebraImpl.prototype.b12 = multiply_1;
  DGAlgebraImpl.prototype.g12 = convertToScalar;
  DGAlgebraImpl.prototype.h12 = parse;
  DGLieAlgebraImpl.prototype.i11 = cohomologyClassOf;
  DGLieAlgebraImpl.prototype.a12 = multiply_0;
  DGLieAlgebraImpl.prototype.b12 = multiply_1;
  DGLieAlgebraContextImpl.prototype.a16 = ad;
  DGMagmaContextImpl.prototype.r13 = times_10;
  DGMagmaContextImpl.prototype.q13 = times_2;
  DGMagmaContextImpl.prototype.o13 = times_3;
  DGMagmaContextImpl.prototype.w13 = times_4;
  DGMagmaContextImpl.prototype.t13 = times_5;
  DGMagmaContextImpl.prototype.s13 = times_6;
  DGMagmaContextImpl.prototype.v13 = times_7;
  DGMagmaContextImpl.prototype.p13 = times_0;
  DGMagmaContextImpl.prototype.n13 = times_1;
  DGMagmaContextImpl.prototype.m13 = times;
  DGMagmaContextImpl.prototype.u13 = times_9;
  DGMagmaContextImpl.prototype.l12 = get_d;
  DGMagmaContextImpl.prototype.y12 = cohomologyClass;
  DGMagmaContextImpl.prototype.i13 = plus_3;
  DGMagmaContextImpl.prototype.j13 = plus_4;
  DGMagmaContextImpl.prototype.h13 = plus_2;
  DGMagmaContextImpl.prototype.g13 = plus_1;
  DGMagmaContextImpl.prototype.e13 = minus_1;
  DGMagmaContextImpl.prototype.f13 = minus_2;
  DGMagmaContextImpl.prototype.d13 = minus_0;
  DGMagmaContextImpl.prototype.c13 = minus;
  DGMagmaContextImpl.prototype.z13 = unaryMinus_1;
  DGMagmaContextImpl.prototype.a14 = unaryMinus_2;
  DGMagmaContextImpl.prototype.y13 = unaryMinus;
  DGMagmaContextImpl.prototype.l13 = sum_1;
  DGMagmaContextImpl.prototype.k13 = sum_0;
  DGMagmaContextImpl.prototype.z12 = div;
  DGMagmaContextImpl.prototype.a13 = div_0;
  DGMagmaContextImpl.prototype.b13 = inv;
  DGMagmaContextImpl.prototype.x13 = toScalar;
  DGMagmaContextImpl.prototype.x12 = get_zero;
  DGMagmaContextImpl.prototype.w12 = get_one;
  DGMagmaImpl.prototype.i11 = cohomologyClassOf;
  DGMagmaImpl.prototype.a12 = multiply_0;
  DGMagmaImpl.prototype.b12 = multiply_1;
  DGVectorSpaceImpl.prototype.i11 = cohomologyClassOf;
  GAlgebraContextImpl.prototype.e12 = get_unit;
  GAlgebraContextImpl.prototype.c14 = pow;
  GAlgebraContextImpl.prototype.d14 = pow_0;
  GAlgebraContextImpl.prototype.e14 = toScalar_0;
  GAlgebraContextImpl.prototype.f14 = product;
  GLieAlgebraContextImpl.prototype.a16 = ad;
  GLieAlgebraImpl.prototype.a12 = multiply_0;
  GLieAlgebraImpl.prototype.b12 = multiply_1;
  GLinearMapImpl.prototype.s14 = get_degreeGroup;
  GLinearMapImpl.prototype.e15 = invoke;
  GLinearMapImpl.prototype.f15 = kernel;
  GLinearMapImpl.prototype.c15 = image;
  GLinearMapImpl.prototype.d15 = induce;
  GMagmaContextImpl.prototype.r13 = times_8;
  GMagmaContextImpl.prototype.u13 = times_9;
  GVector.prototype.z17 = isNotZero;
  GVectorContextImpl.prototype.i13 = plus_3;
  GVectorContextImpl.prototype.j13 = plus_4;
  GVectorContextImpl.prototype.e13 = minus_1;
  GVectorContextImpl.prototype.f13 = minus_2;
  GVectorContextImpl.prototype.q13 = times_2;
  GVectorContextImpl.prototype.o13 = times_3;
  GVectorContextImpl.prototype.w13 = times_4;
  GVectorContextImpl.prototype.t13 = times_5;
  GVectorContextImpl.prototype.s13 = times_6;
  GVectorContextImpl.prototype.v13 = times_7;
  GVectorContextImpl.prototype.z13 = unaryMinus_1;
  GVectorContextImpl.prototype.a14 = unaryMinus_2;
  GVectorContextImpl.prototype.l13 = sum_1;
  GVectorSpaceImpl.prototype.p11 = get_field;
  GVectorSpaceImpl.prototype.q11 = fromVector;
  GVectorSpaceImpl.prototype.r11 = fromVector_0;
  GVectorSpaceImpl.prototype.s11 = fromBasisName;
  GVectorSpaceImpl.prototype.t11 = getBasis;
  GVectorSpaceImpl.prototype.u11 = getZero;
  GVectorSpaceImpl.prototype.v11 = convertToGVector;
  GVectorSpaceImpl.prototype.w11 = contains;
  GVectorSpaceImpl.prototype.x11 = add;
  GVectorSpaceImpl.prototype.y11 = subtract;
  GVectorSpaceImpl.prototype.z11 = multiply;
  GVectorSpaceImpl.prototype.c12 = divideByGVector;
  SubGVectorSpaceImpl.prototype.p11 = get_field;
  SubGVectorSpaceImpl.prototype.q11 = fromVector;
  SubGVectorSpaceImpl.prototype.r11 = fromVector_0;
  SubGVectorSpaceImpl.prototype.s11 = fromBasisName;
  SubGVectorSpaceImpl.prototype.t11 = getBasis;
  SubGVectorSpaceImpl.prototype.u11 = getZero;
  SubGVectorSpaceImpl.prototype.v11 = convertToGVector;
  SubGVectorSpaceImpl.prototype.w11 = contains;
  SubGVectorSpaceImpl.prototype.x11 = add;
  SubGVectorSpaceImpl.prototype.y11 = subtract;
  SubGVectorSpaceImpl.prototype.z11 = multiply;
  SubGVectorSpaceImpl.prototype.c12 = divideByGVector;
  SubQuotGAlgebraImpl.prototype.g12 = convertToScalar;
  SubQuotGAlgebraImpl.prototype.a12 = multiply_0;
  SubQuotGAlgebraImpl.prototype.b12 = multiply_1;
  SubQuotGLieAlgebraImpl.prototype.a12 = multiply_0;
  SubQuotGLieAlgebraImpl.prototype.b12 = multiply_1;
  SubQuotGMagmaImpl.prototype.a12 = multiply_0;
  SubQuotGMagmaImpl.prototype.b12 = multiply_1;
  SubQuotGVectorSpaceImpl.prototype.y16 = subspaceContains;
  SubQuotGVectorSpaceImpl.prototype.p11 = get_field;
  SubQuotGVectorSpaceImpl.prototype.q11 = fromVector;
  SubQuotGVectorSpaceImpl.prototype.r11 = fromVector_0;
  SubQuotGVectorSpaceImpl.prototype.s11 = fromBasisName;
  SubQuotGVectorSpaceImpl.prototype.t11 = getBasis;
  SubQuotGVectorSpaceImpl.prototype.c1b = getBasis_0;
  SubQuotGVectorSpaceImpl.prototype.a1b = getBasisForAugmentedDegree;
  SubQuotGVectorSpaceImpl.prototype.u11 = getZero;
  SubQuotGVectorSpaceImpl.prototype.v11 = convertToGVector;
  SubQuotGVectorSpaceImpl.prototype.w11 = contains;
  SubQuotGVectorSpaceImpl.prototype.x11 = add;
  SubQuotGVectorSpaceImpl.prototype.y11 = subtract;
  SubQuotGVectorSpaceImpl.prototype.z11 = multiply;
  SubQuotGVectorSpaceImpl.prototype.c12 = divideByGVector;
  IntDegree.prototype.z17 = isNotZero_0;
  IntDegree.prototype.s1e = isOdd;
  IntDegree.prototype.t1e = koszulSign;
  IntDegreeGroup.prototype.x12 = get_zero_0;
  MultiDegree.prototype.z17 = isNotZero_0;
  MultiDegree.prototype.s1e = isOdd;
  MultiDegree.prototype.t1e = koszulSign;
  MultiDegreeGroup.prototype.x12 = get_zero_0;
  FreeDGAlgebraImpl.prototype.v1a = toString_2;
  FreeDGAlgebraImpl.prototype.y1k = convertDegree_0;
  FreeDGAlgebraImpl.prototype.i11 = cohomologyClassOf;
  FreeDGAlgebraImpl.prototype.a12 = multiply_0;
  FreeDGAlgebraImpl.prototype.b12 = multiply_1;
  FreeDGAlgebraImpl.prototype.g12 = convertToScalar;
  FreeDGAlgebraImpl.prototype.h12 = parse;
  FreeDGAlgebraImpl.prototype.p1k = parse_0;
  FreeDGAlgebraImpl.prototype.d1g = get_generatorList;
  FreeDGAlgebraImpl.prototype.h1k = getDerivation;
  FreeDGAlgebraImpl.prototype.t1k = getDerivation_0;
  FreeDGAlgebraImpl.prototype.z1k = getGAlgebraMap;
  FreeDGAlgebraImpl.prototype.u1k = containsIndeterminate;
  FreeDGAlgebraImpl.prototype.a1l = getGeneratorsForParser;
  FreeDGAlgebraContextImpl.prototype.p1k = parse_1;
  FreeGAlgebraImpl.prototype.d1g = get_generatorList;
  FreeGAlgebraImpl.prototype.h1k = getDerivation;
  FreeGAlgebraImpl.prototype.t1k = getDerivation_0;
  FreeGAlgebraImpl.prototype.u1k = containsIndeterminate;
  FreeGAlgebraImpl.prototype.p1k = parse_0;
  FreeGAlgebraImpl.prototype.a1l = getGeneratorsForParser;
  FreeGAlgebraImpl.prototype.y1k = convertDegree;
  FreeGAlgebraImpl.prototype.v1a = toString_1;
  FreeGAlgebraContextImpl.prototype.p1k = parse_1;
  MonoidGAlgebraImpl.prototype.g12 = convertToScalar;
  MonoidGAlgebraImpl.prototype.h12 = parse;
  MonoidGAlgebraImpl.prototype.a12 = multiply_0;
  MonoidGAlgebraImpl.prototype.b12 = multiply_1;
  DenseMatrixSpace.prototype.n1u = fromRowList$default;
  DenseMatrixSpace.prototype.x1u = getIdentity;
  DenseMatrixSpace.prototype.v1u = fromColList;
  DenseMatrixSpace.prototype.y1u = fromColMap;
  DenseMatrix.prototype.e1q = toList_2;
  DenseMatrix.prototype.b1v = toNumVectorList;
  DenseNumVectorSpace.prototype.t1v = getOneAtIndex;
  DenseNumVectorSpace.prototype.u1v = fromReducedValueMap;
  ScalarContextImpl.prototype.g13 = plus_1;
  ScalarContextImpl.prototype.c13 = minus;
  ScalarContextImpl.prototype.m13 = times;
  ScalarContextImpl.prototype.y13 = unaryMinus;
  ScalarContextImpl.prototype.z12 = div;
  ScalarContextImpl.prototype.a13 = div_0;
  ScalarContextImpl.prototype.b13 = inv;
  ScalarContextImpl.prototype.x13 = toScalar;
  ScalarContextImpl.prototype.x12 = get_zero;
  ScalarContextImpl.prototype.w12 = get_one;
  ScalarContextImpl.prototype.k13 = sum_0;
  MatrixContextImpl.prototype.x1w = times_11;
  MatrixContextImpl.prototype.v1w = get_rowEchelonForm;
  MatrixContextImpl.prototype.y1w = rowSlice;
  MatrixContextImpl.prototype.w1w = colSlice;
  MatrixContextImpl.prototype.u1w = join;
  MatrixContextImpl.prototype.z1w = transpose;
  MatrixContextImpl.prototype.a1x = computeKernelBasis;
  NumVectorContextImpl.prototype.h13 = plus_2;
  NumVectorContextImpl.prototype.d13 = minus_0;
  NumVectorContextImpl.prototype.p13 = times_0;
  NumVectorContextImpl.prototype.n13 = times_1;
  NumVectorContextImpl.prototype.e1x = unaryMinus_0;
  NumVectorContextImpl.prototype.b1x = get;
  AbstractSparseMatrixSpace.prototype.n1u = fromRowList$default;
  AbstractSparseMatrixSpace.prototype.x1u = getIdentity;
  AbstractSparseMatrixSpace.prototype.y1u = fromColMap;
  AbstractSparseMatrixSpace.prototype.w1u = fromNumVectorList;
  SparseMatrixSpace.prototype.n1u = fromRowList$default;
  SparseMatrixSpace.prototype.x1u = getIdentity;
  SparseMatrixSpace.prototype.y1u = fromColMap;
  SparseMatrixSpace.prototype.w1u = fromNumVectorList;
  DecomposedSparseMatrixSpace.prototype.n1u = fromRowList$default;
  DecomposedSparseMatrixSpace.prototype.x1u = getIdentity;
  DecomposedSparseMatrixSpace.prototype.y1u = fromColMap;
  DecomposedSparseMatrixSpace.prototype.w1u = fromNumVectorList;
  SparseMatrix.prototype.b1v = toNumVectorList;
  SparseNumVectorSpace.prototype.t1v = getOneAtIndex;
  CyclicModel.prototype.v1a = toString_2;
  CyclicModel.prototype.y1k = convertDegree_0;
  CyclicModel.prototype.p1k = parse_0;
  CyclicModel.prototype.d1g = get_generatorList;
  CyclicModel.prototype.h1k = getDerivation;
  CyclicModel.prototype.t1k = getDerivation_0;
  CyclicModel.prototype.z1k = getGAlgebraMap;
  CyclicModel.prototype.u1k = containsIndeterminate;
  CyclicModel.prototype.a1l = getGeneratorsForParser;
  FreeLoopSpace.prototype.v1a = toString_2;
  FreeLoopSpace.prototype.y1k = convertDegree_0;
  FreeLoopSpace.prototype.p1k = parse_0;
  FreeLoopSpace.prototype.d1g = get_generatorList;
  FreeLoopSpace.prototype.h1k = getDerivation;
  FreeLoopSpace.prototype.t1k = getDerivation_0;
  FreeLoopSpace.prototype.z1k = getGAlgebraMap;
  FreeLoopSpace.prototype.u1k = containsIndeterminate;
  FreeLoopSpace.prototype.a1l = getGeneratorsForParser;
  KotlinRational.prototype.z17 = isNotZero_1;
  KotlinRational.prototype.t1w = toString_5;
  KotlinRational.prototype.v1a = toString_6;
  DirectSumBasis.prototype.v1a = toString_4;
  DirectSum.prototype.d1u = get_dim;
  DirectSum.prototype.p11 = get_field_0;
  DirectSum.prototype.x23 = contains_0;
  DirectSum.prototype.y23 = add_0;
  DirectSum.prototype.z23 = subtract_0;
  DirectSum.prototype.a24 = multiply_2;
  DirectSum.prototype.g1b = divideByVector;
  DirectSum.prototype.b24 = fromNumVector;
  DirectSum.prototype.c24 = fromCoeffList;
  DirectSum.prototype.y1a = fromBasisName_0;
  DirectSum.prototype.b1b = get_zeroVector;
  DirectSum.prototype.z1a = getBasis_1;
  SubQuotBasis.prototype.v1a = toString_4;
  SubQuotVectorSpace.prototype.d1u = get_dim;
  SubQuotVectorSpace.prototype.p11 = get_field_0;
  SubQuotVectorSpace.prototype.x23 = contains_0;
  SubQuotVectorSpace.prototype.y23 = add_0;
  SubQuotVectorSpace.prototype.z23 = subtract_0;
  SubQuotVectorSpace.prototype.a24 = multiply_2;
  SubQuotVectorSpace.prototype.g1b = divideByVector;
  SubQuotVectorSpace.prototype.b24 = fromNumVector;
  SubQuotVectorSpace.prototype.c24 = fromCoeffList;
  SubQuotVectorSpace.prototype.y1a = fromBasisName_0;
  SubQuotVectorSpace.prototype.b1b = get_zeroVector;
  SubQuotVectorSpace.prototype.z1a = getBasis_1;
  SubBasis.prototype.v1a = toString_4;
  SubVectorSpaceImpl.prototype.d1u = get_dim;
  SubVectorSpaceImpl.prototype.p11 = get_field_0;
  SubVectorSpaceImpl.prototype.x23 = contains_0;
  SubVectorSpaceImpl.prototype.y23 = add_0;
  SubVectorSpaceImpl.prototype.z23 = subtract_0;
  SubVectorSpaceImpl.prototype.a24 = multiply_2;
  SubVectorSpaceImpl.prototype.g1b = divideByVector;
  SubVectorSpaceImpl.prototype.b24 = fromNumVector;
  SubVectorSpaceImpl.prototype.c24 = fromCoeffList;
  SubVectorSpaceImpl.prototype.y1a = fromBasisName_0;
  SubVectorSpaceImpl.prototype.b1b = get_zeroVector;
  SubVectorSpaceImpl.prototype.z1a = getBasis_1;
  VectorSpaceImpl.prototype.d1u = get_dim;
  VectorSpaceImpl.prototype.p11 = get_field_0;
  VectorSpaceImpl.prototype.x23 = contains_0;
  VectorSpaceImpl.prototype.y23 = add_0;
  VectorSpaceImpl.prototype.z23 = subtract_0;
  VectorSpaceImpl.prototype.a24 = multiply_2;
  VectorSpaceImpl.prototype.g1b = divideByVector;
  VectorSpaceImpl.prototype.b24 = fromNumVector;
  VectorSpaceImpl.prototype.c24 = fromCoeffList;
  VectorSpaceImpl.prototype.y1a = fromBasisName_0;
  VectorSpaceImpl.prototype.b1b = get_zeroVector;
  VectorSpaceImpl.prototype.z1a = getBasis_1;
  VectorContextImpl.prototype.d1b = plus_5;
  VectorContextImpl.prototype.e1b = minus_3;
  VectorContextImpl.prototype.k23 = times_12;
  VectorContextImpl.prototype.f1b = times_13;
  VectorContextImpl.prototype.s1p = unaryMinus_3;
  VectorContextImpl.prototype.l23 = sum_2;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = IntDegreeGroup;
  _.$_$.b = GVector;
  _.$_$.c = ZeroGVector;
  _.$_$.d = Indeterminate_0;
  _.$_$.e = FreeDGAlgebra;
  _.$_$.f = get_SparseMatrixSpaceOverRational;
  _.$_$.g = Printable;
  _.$_$.h = PrintType_TEX_getInstance;
  _.$_$.i = ShowShift_BAR_getInstance;
  _.$_$.j = Printer_init_$Create$;
  _.$_$.k = StringIndeterminateName_init_$Create$;
  _.$_$.l = PrintConfig_init_$Create$;
  _.$_$.m = Printer_init_$Create$_0;
  _.$_$.n = Companion_getInstance_22;
  _.$_$.o = Companion_getInstance_24;
  _.$_$.p = Companion_getInstance_26;
  _.$_$.q = Companion_getInstance_25;
  _.$_$.r = Companion_getInstance_39;
  _.$_$.s = Companion_getInstance_40;
  //endregion
  return _;
}));

//# sourceMappingURL=kohomology-js-ir.js.map


/***/ }),

/***/ 617:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72), __webpack_require__(851), __webpack_require__(639), __webpack_require__(15), __webpack_require__(683)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin, kotlin_com_github_shwaka_kohomology_kohomology, kotlin_com_github_h0tk3y_betterParse_better_parse, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var Exception_init_$Create$ = kotlin_kotlin.$_$.a1;
  var Companion_getInstance = kotlin_com_github_shwaka_kohomology_kohomology.$_$.s;
  var Companion_getInstance_0 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.r;
  var Companion_getInstance_1 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.n;
  var PrintType_TEX_getInstance = kotlin_com_github_shwaka_kohomology_kohomology.$_$.h;
  var Printer_init_$Create$ = kotlin_com_github_shwaka_kohomology_kohomology.$_$.m;
  var plus = kotlin_kotlin.$_$.n4;
  var Companion_getInstance_2 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.o;
  var get_SparseMatrixSpaceOverRational = kotlin_com_github_shwaka_kohomology_kohomology.$_$.f;
  var lazy = kotlin_kotlin.$_$.y7;
  var joinToString$default = kotlin_kotlin.$_$.h;
  var FreeDGAlgebra = kotlin_com_github_shwaka_kohomology_kohomology.$_$.e;
  var isInterface = kotlin_kotlin.$_$.x5;
  var classMeta = kotlin_kotlin.$_$.o5;
  var IntDegreeGroup = kotlin_com_github_shwaka_kohomology_kohomology.$_$.a;
  var ShowShift_BAR_getInstance = kotlin_com_github_shwaka_kohomology_kohomology.$_$.i;
  var PrintConfig_init_$Create$ = kotlin_com_github_shwaka_kohomology_kohomology.$_$.l;
  var Printer_init_$Create$_0 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.j;
  var ParseException = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.n;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.z7;
  var GVector = kotlin_com_github_shwaka_kohomology_kohomology.$_$.b;
  var ZeroGVector = kotlin_com_github_shwaka_kohomology_kohomology.$_$.c;
  var dropLast = kotlin_kotlin.$_$.s3;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.g3;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.n;
  var flatten = kotlin_kotlin.$_$.z3;
  var last = kotlin_kotlin.$_$.g4;
  var endsWith$default = kotlin_kotlin.$_$.j;
  var startsWith$default = kotlin_kotlin.$_$.l;
  var Printable = kotlin_com_github_shwaka_kohomology_kohomology.$_$.g;
  var KProperty1 = kotlin_kotlin.$_$.p6;
  var getPropertyCallableRef = kotlin_kotlin.$_$.s5;
  var NoMatchingToken = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.m;
  var Collection = kotlin_kotlin.$_$.x2;
  var AlternativesFailure = kotlin_com_github_h0tk3y_betterParse_better_parse.$_$.l;
  var prependIndent = kotlin_kotlin.$_$.v6;
  var objectMeta = kotlin_kotlin.$_$.g6;
  var PluginGeneratedSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v;
  var StringSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i;
  var IntSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h;
  var UnknownFieldException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c;
  var typeParametersSerializers = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s;
  var GeneratedSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.t;
  var throwMissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.x;
  var getStringHashCode = kotlin_kotlin.$_$.t5;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var JsonTransformingSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.d;
  var to = kotlin_kotlin.$_$.b8;
  var mapOf = kotlin_kotlin.$_$.l4;
  var JsonObject = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.c;
  var JsonArray = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.b;
  var Default_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.a;
  var ListSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j;
  var Companion_getInstance_3 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.q;
  var Enum = kotlin_kotlin.$_$.i7;
  var copyToArray = kotlin_kotlin.$_$.p3;
  var listOf = kotlin_kotlin.$_$.h4;
  var Exception = kotlin_kotlin.$_$.j7;
  var StringIndeterminateName_init_$Create$ = kotlin_com_github_shwaka_kohomology_kohomology.$_$.k;
  var IllegalArgumentException = kotlin_kotlin.$_$.k7;
  var Indeterminate = kotlin_com_github_shwaka_kohomology_kohomology.$_$.d;
  var Companion_getInstance_4 = kotlin_com_github_shwaka_kohomology_kohomology.$_$.p;
  //endregion
  //region block: pre-declaration
  GeneratorSerializer.prototype = Object.create(JsonTransformingSerializer.prototype);
  GeneratorSerializer.prototype.constructor = GeneratorSerializer;
  StringType.prototype = Object.create(Enum.prototype);
  StringType.prototype.constructor = StringType;
  MessageType.prototype = Object.create(Enum.prototype);
  MessageType.prototype.constructor = MessageType;
  ValidationResultType.prototype = Object.create(Enum.prototype);
  ValidationResultType.prototype.constructor = ValidationResultType;
  Success.prototype = Object.create(ValidationResultInternal.prototype);
  Success.prototype.constructor = Success;
  Error_0.prototype = Object.create(ValidationResultInternal.prototype);
  Error_0.prototype.constructor = Error_0;
  //endregion
  function _get_freeLoopSpace__mpio85($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = freeLoopSpace$factory();
    tmp$ret$0 = $this.g26_1.f1();
    return tmp$ret$0;
  }
  function _get_cyclicModel__pgehsx($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = cyclicModel$factory();
    tmp$ret$0 = $this.h26_1.f1();
    return tmp$ret$0;
  }
  function _get_derivationLieAlgebra__ahlx7w($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = derivationLieAlgebra$factory();
    tmp$ret$0 = $this.i26_1.f1();
    return tmp$ret$0;
  }
  function getDGVectorSpace($this, name) {
    var tmp0_subject = name;
    var tmp;
    switch (tmp0_subject) {
      case 'self':
        tmp = $this.f26_1;
        break;
      case 'freeLoopSpace':
        tmp = _get_freeLoopSpace__mpio85($this);
        break;
      case 'cyclic':
        tmp = _get_cyclicModel__pgehsx($this);
        break;
      case 'derivation':
        tmp = _get_derivationLieAlgebra__ahlx7w($this);
        break;
      default:
        throw Exception_init_$Create$('Invalid name: ' + name);
    }
    return tmp;
  }
  function FreeDGAWrapper$freeLoopSpace$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance().u20(this$0.f26_1);
    };
  }
  function FreeDGAWrapper$cyclicModel$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_0().j1z(this$0.f26_1);
    };
  }
  function FreeDGAWrapper$derivationLieAlgebra$delegate$lambda(this$0) {
    return function () {
      return Companion_getInstance_1().y1h(this$0.f26_1);
    };
  }
  function FreeDGAWrapper$dgaInfo$lambda(it) {
    return '\\deg{' + it.f1k_1 + '} = ' + it.g1k_1;
  }
  function FreeDGAWrapper$dgaInfo$lambda_0(this$0) {
    return function (it) {
      var tmp = PrintType_TEX_getInstance();
      var p = Printer_init_$Create$(tmp, null, null, null, null, 30, null);
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      var tmp0_run = this$0.f26_1.t14();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'FreeDGAWrapper.dgaInfo.<anonymous>.<anonymous>' call
      tmp$ret$0 = 'd' + it + ' = ' + p.k1k(tmp0_run.l12().e15(it));
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function FreeDGAWrapper$dgaInfo$lambda_1($freeDGAString) {
    return function ($this$styledMessage) {
      return plus($this$styledMessage.j26('(\\Lambda V, d) = '), $this$styledMessage.j26($freeDGAString));
    };
  }
  function FreeDGAWrapper$dgaInfo$lambda_2($degreeString) {
    return function ($this$styledMessage) {
      return $this$styledMessage.j26($degreeString);
    };
  }
  function FreeDGAWrapper$dgaInfo$lambda_3($differentialString) {
    return function ($this$styledMessage) {
      return $this$styledMessage.j26($differentialString);
    };
  }
  function FreeDGAWrapper$computeCohomologyDim$lambda($degree, $dim) {
    return function ($this$styledMessage) {
      return $this$styledMessage.j26('\\mathrm{dim}H^{' + $degree + '} = ' + $dim);
    };
  }
  function FreeDGAWrapper$computeCohomologyClass$lambda($targetName) {
    return function ($this$styledMessage) {
      return $this$styledMessage.k26('Cannot compute class for ' + $targetName);
    };
  }
  function FreeDGAWrapper(json) {
    this.f26_1 = Companion_getInstance_2().x1k(get_SparseMatrixSpaceOverRational(), jsonToGeneratorList(json));
    var tmp = this;
    tmp.g26_1 = lazy(FreeDGAWrapper$freeLoopSpace$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.h26_1 = lazy(FreeDGAWrapper$cyclicModel$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.i26_1 = lazy(FreeDGAWrapper$derivationLieAlgebra$delegate$lambda(this));
  }
  FreeDGAWrapper.prototype.dgaInfo = function () {
    var freeDGAString = this.f26_1.toString();
    var tmp = this.f26_1.c1g();
    var degreeString = joinToString$default(tmp, ', ', null, null, 0, null, FreeDGAWrapper$dgaInfo$lambda, 30, null);
    var tmp_0 = this.f26_1.d1g();
    var differentialString = joinToString$default(tmp_0, ', ', null, null, 0, null, FreeDGAWrapper$dgaInfo$lambda_0(this), 30, null);
    var tmp$ret$2;
    // Inline function 'kotlin.arrayOf' call
    var tmp_1 = MessageType_SUCCESS_getInstance();
    var tmp_2 = styledMessage(tmp_1, FreeDGAWrapper$dgaInfo$lambda_1(freeDGAString)).n26();
    var tmp_3 = MessageType_SUCCESS_getInstance();
    var tmp_4 = styledMessage(tmp_3, FreeDGAWrapper$dgaInfo$lambda_2(degreeString)).n26();
    var tmp_5 = MessageType_SUCCESS_getInstance();
    var tmp0_arrayOf = [tmp_2, tmp_4, styledMessage(tmp_5, FreeDGAWrapper$dgaInfo$lambda_3(differentialString)).n26()];
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_arrayOf;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  FreeDGAWrapper.prototype.computationHeader = function (targetName, minDegree, maxDegree) {
    var targetDGVectorSpace = getDGVectorSpace(this, targetName);
    return computationHeader(targetDGVectorSpace, minDegree, maxDegree).n26();
  };
  FreeDGAWrapper.prototype.computeCohomology = function (targetName, degree) {
    var targetDGVectorSpace = getDGVectorSpace(this, targetName);
    return computeCohomology(targetDGVectorSpace, degree).n26();
  };
  FreeDGAWrapper.prototype.computeCohomologyDim = function (targetName, degree) {
    var targetDGVectorSpace = getDGVectorSpace(this, targetName);
    var dim = getBasis(targetDGVectorSpace, degree).i();
    var tmp = MessageType_SUCCESS_getInstance();
    return styledMessage(tmp, FreeDGAWrapper$computeCohomologyDim$lambda(degree, dim)).n26();
  };
  FreeDGAWrapper.prototype.computeCohomologyClass = function (targetName, cocycleString, showBasis) {
    var targetDGVectorSpace = getDGVectorSpace(this, targetName);
    var tmp;
    if (isInterface(targetDGVectorSpace, FreeDGAlgebra)) {
      tmp = computeCohomologyClass(targetDGVectorSpace, cocycleString, showBasis).n26();
    } else {
      var tmp_0 = MessageType_ERROR_getInstance();
      tmp = styledMessage(tmp_0, FreeDGAWrapper$computeCohomologyClass$lambda(targetName)).n26();
    }
    return tmp;
  };
  FreeDGAWrapper.$metadata$ = classMeta('FreeDGAWrapper');
  function getBasis(dgVectorSpace, degree) {
    var tmp;
    var tmp_0 = dgVectorSpace.s14();
    if (tmp_0 instanceof IntDegreeGroup) {
      tmp = dgVectorSpace.e11().c1b(degree);
    } else {
      tmp = dgVectorSpace.e11().a1b(degree);
    }
    return tmp;
  }
  function computeCohomologyInternal(dgVectorSpace, degree) {
    var tmp = PrintType_TEX_getInstance();
    var p = Printer_init_$Create$_0(PrintConfig_init_$Create$(tmp, null, null, null, ShowShift_BAR_getInstance(), 14, null));
    var basis = getBasis(dgVectorSpace, degree);
    var tmp_0 = MessageType_SUCCESS_getInstance();
    return styledMessage(tmp_0, computeCohomologyInternal$lambda(basis, p, degree));
  }
  function computeCohomology(dgVectorSpace, degree) {
    return computeCohomologyInternal(dgVectorSpace, degree);
  }
  function computationHeader(dgVectorSpace, minDegree, maxDegree) {
    var tmp = MessageType_SUCCESS_getInstance();
    return styledMessage(tmp, computationHeader$lambda(dgVectorSpace, minDegree, maxDegree));
  }
  function computeCohomologyClass(freeDGAlgebra, cocycleString, showBasis) {
    var tmp;
    try {
      tmp = freeDGAlgebra.p1k(cocycleString);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof ParseException) {
        var tmp_1 = MessageType_ERROR_getInstance();
        return styledMessage(tmp_1, computeCohomologyClass$lambda(freeDGAlgebra, $p));
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var cocycle = tmp;
    var tmp0_subject = cocycle;
    var tmp_2;
    if (tmp0_subject instanceof ZeroGVector) {
      var tmp_3 = MessageType_SUCCESS_getInstance();
      tmp_2 = styledMessage(tmp_3, computeCohomologyClass$lambda_0);
    } else {
      if (tmp0_subject instanceof GVector) {
        tmp_2 = computeCohomologyClass_0(freeDGAlgebra, cocycle, showBasis);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp_2;
  }
  function computeCohomologyClass_0(freeDGAlgebra, cocycle, showBasis) {
    var tmp = PrintType_TEX_getInstance();
    var p = Printer_init_$Create$(tmp, null, null, null, ShowShift_BAR_getInstance(), 14, null);
    var tmp$ret$2;
    // Inline function 'kotlin.run' call
    var tmp0_run = freeDGAlgebra.t14();
    // Inline function 'kotlin.contracts.contract' call
    if (tmp0_run.l12().e15(cocycle).z17()) {
      var tmp_0 = MessageType_ERROR_getInstance();
      return styledMessage(tmp_0, computeCohomologyClass$lambda_1(p, cocycle, tmp0_run));
    }
    var tmp$ret$1;
    // Inline function 'kotlin.run' call
    var tmp0_run_0 = freeDGAlgebra.s14().t14();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'computeCohomologyClass.<anonymous>.<anonymous>' call
    tmp$ret$0 = tmp0_run_0.a1f(cocycle.x17_1);
    tmp$ret$1 = tmp$ret$0;
    var degree = tmp$ret$1;
    var tmp_1 = MessageType_SUCCESS_getInstance();
    return styledMessage(tmp_1, computeCohomologyClass$lambda_2(showBasis, freeDGAlgebra, degree, p, cocycle, tmp0_run));
  }
  function computeCohomologyInternal$lambda($basis, $p, $degree) {
    return function ($this$styledMessage) {
      var tmp;
      if ($basis.p()) {
        tmp = $this$styledMessage.j26('0');
      } else {
        var tmp_0 = $this$styledMessage.j26('\\mathbb{Q}\\{');
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp0_map = dropLast($basis, 1);
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
        var tmp0_iterator = tmp0_map.f();
        while (tmp0_iterator.g()) {
          var item = tmp0_iterator.h();
          var tmp$ret$0;
          // Inline function 'computeCohomologyInternal.<anonymous>.<anonymous>' call
          tmp$ret$0 = $this$styledMessage.j26($p.k1k(item) + ',\\ ');
          tmp0_mapTo.a(tmp$ret$0);
        }
        tmp$ret$1 = tmp0_mapTo;
        tmp$ret$2 = tmp$ret$1;
        tmp = plus(plus(plus(tmp_0, flatten(tmp$ret$2)), $this$styledMessage.j26($p.k1k(last($basis)))), $this$styledMessage.j26('\\}'));
      }
      var vectorSpace = tmp;
      return plus($this$styledMessage.j26('H^{' + $degree + '} =\\ '), vectorSpace);
    };
  }
  function computationHeader$lambda($dgVectorSpace, $minDegree, $maxDegree) {
    return function ($this$styledMessage) {
      var tmp;
      if (isInterface($dgVectorSpace, Printable)) {
        var tmp_0 = PrintType_TEX_getInstance();
        var p = Printer_init_$Create$(tmp_0, null, null, null, ShowShift_BAR_getInstance(), 14, null);
        var dgVectorSpaceString = p.k1k($dgVectorSpace);
        var tmp_1;
        var tmp_2;
        if (startsWith$default(dgVectorSpaceString, '(', false, 2, null)) {
          tmp_2 = endsWith$default(dgVectorSpaceString, ')', false, 2, null);
        } else {
          tmp_2 = false;
        }
        if (tmp_2) {
          tmp_1 = $this$styledMessage.j26('H^n' + p.k1k($dgVectorSpace));
        } else {
          tmp_1 = $this$styledMessage.j26('H^n(' + p.k1k($dgVectorSpace) + ')');
        }
        tmp = tmp_1;
      } else {
        tmp = $this$styledMessage.k26('H^n(' + $dgVectorSpace + ')');
      }
      var printed = tmp;
      return plus(plus(plus($this$styledMessage.k26('Computing '), printed), $this$styledMessage.k26(' for ')), $this$styledMessage.j26('' + $minDegree + ' \\leq n \\leq ' + $maxDegree));
    };
  }
  function computeCohomologyClass$lambda$lambda(it) {
    return it.v4_1;
  }
  function computeCohomologyClass$lambda($freeDGAlgebra, $e) {
    return function ($this$styledMessage) {
      var tmp = $freeDGAlgebra.a1l();
      var generatorsString = joinToString$default(tmp, ', ', null, null, 0, null, computeCohomologyClass$lambda$lambda, 30, null);
      return plus(plus($this$styledMessage.k26('[Error] Parse failed.\n'), $this$styledMessage.k26('Note: Current generators are ' + generatorsString + '\n')), $this$styledMessage.k26('' + $e.t10_1 + '\n'));
    };
  }
  function computeCohomologyClass$lambda_0($this$styledMessage) {
    return $this$styledMessage.k26('The cocycle is zero.');
  }
  function computeCohomologyClass$lambda_1($p, $cocycle, $tmp0_run) {
    return function ($this$styledMessage) {
      return plus(plus($this$styledMessage.j26($p.k1k($cocycle)), $this$styledMessage.k26(' is not a cocycle: ')), $this$styledMessage.j26('d(' + $p.k1k($cocycle) + ') = ' + $p.k1k($tmp0_run.l12().e15($cocycle))));
    };
  }
  function computeCohomologyClass$lambda_2($showBasis, $freeDGAlgebra, $degree, $p, $cocycle, $tmp0_run) {
    return function ($this$styledMessage) {
      var tmp;
      if ($showBasis) {
        tmp = computeCohomologyInternal($freeDGAlgebra, $degree).m26_1;
      } else {
        tmp = $this$styledMessage.j26('H^' + $degree);
      }
      var cohomologyString = tmp;
      return plus($this$styledMessage.j26('[' + $p.k1k($cocycle) + '] = ' + $p.k1k($tmp0_run.y12($cocycle)) + ' \\in '), cohomologyString);
    };
  }
  function freeLoopSpace$factory() {
    return getPropertyCallableRef('freeLoopSpace', 1, KProperty1, function (receiver) {
      return _get_freeLoopSpace__mpio85(receiver);
    }, null);
  }
  function cyclicModel$factory() {
    return getPropertyCallableRef('cyclicModel', 1, KProperty1, function (receiver) {
      return _get_cyclicModel__pgehsx(receiver);
    }, null);
  }
  function derivationLieAlgebra$factory() {
    return getPropertyCallableRef('derivationLieAlgebra', 1, KProperty1, function (receiver) {
      return _get_derivationLieAlgebra__ahlx7w(receiver);
    }, null);
  }
  function isFailureAtTheBeginning(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof AlternativesFailure) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = _this__u8e3s4.u10_1;
        var tmp_0;
        if (isInterface(tmp0_all, Collection)) {
          tmp_0 = tmp0_all.p();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = tmp0_all.f();
        while (tmp0_iterator.g()) {
          var element = tmp0_iterator.h();
          var tmp$ret$1;
          // Inline function 'isFailureAtTheBeginning.<anonymous>' call
          tmp$ret$1 = isFailureAtTheBeginning(element);
          if (!tmp$ret$1) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      tmp = tmp$ret$0;
    } else {
      if (tmp0_subject instanceof NoMatchingToken) {
        tmp = _this__u8e3s4.q10_1.c10_1 === 0;
      } else {
        tmp = false;
      }
    }
    return tmp;
  }
  function isFailureAtTheBeginning_0(_this__u8e3s4) {
    return isFailureAtTheBeginning(_this__u8e3s4.t10_1);
  }
  function format(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof AlternativesFailure) {
      tmp = 'AlternativesFailure(errors=[\n' + joinToString$default(_this__u8e3s4.u10_1, ',\n', null, null, 0, null, format$lambda, 30, null) + '\n])';
    } else {
      tmp = _this__u8e3s4.toString();
    }
    return tmp;
  }
  function format_0(_this__u8e3s4) {
    return format(_this__u8e3s4.t10_1);
  }
  function format$lambda(it) {
    return prependIndent(format(it), '  ');
  }
  function Companion() {
    Companion_instance = this;
  }
  Companion.prototype.o26 = function () {
    return $serializer_getInstance();
  };
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance_5() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function $serializer() {
    $serializer_instance = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('SerializableGenerator', this, 3);
    tmp0_serialDesc.ui('name', false);
    tmp0_serialDesc.ui('degree', false);
    tmp0_serialDesc.ui('differentialValue', false);
    this.p26_1 = tmp0_serialDesc;
  }
  $serializer.prototype.cg = function () {
    return this.p26_1;
  };
  $serializer.prototype.ri = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.arrayOf' call
    var tmp0_arrayOf = [StringSerializer_getInstance(), IntSerializer_getInstance(), StringSerializer_getInstance()];
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_arrayOf;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  $serializer.prototype.dg = function (decoder) {
    var tmp0_desc = this.p26_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = null;
    var tmp7_input = decoder.tg(tmp0_desc);
    if (tmp7_input.ah()) {
      tmp4_local0 = tmp7_input.wg(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp7_input.vg(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp7_input.wg(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp7_input.bh(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp7_input.wg(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp7_input.vg(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp7_input.wg(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp7_input.ug(tmp0_desc);
    return SerializableGenerator_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, null);
  };
  $serializer.$metadata$ = objectMeta('$serializer', [GeneratedSerializer]);
  var $serializer_instance;
  function $serializer_getInstance() {
    if ($serializer_instance == null)
      new $serializer();
    return $serializer_instance;
  }
  function SerializableGenerator_init_$Init$(seen1, name, degree, differentialValue, serializationConstructorMarker, $this) {
    if (!(7 === (7 & seen1))) {
      throwMissingFieldException(seen1, 7, $serializer_getInstance().p26_1);
    }
    $this.q26_1 = name;
    $this.r26_1 = degree;
    $this.s26_1 = differentialValue;
    return $this;
  }
  function SerializableGenerator_init_$Create$(seen1, name, degree, differentialValue, serializationConstructorMarker) {
    return SerializableGenerator_init_$Init$(seen1, name, degree, differentialValue, serializationConstructorMarker, Object.create(SerializableGenerator.prototype));
  }
  function SerializableGenerator() {
  }
  SerializableGenerator.prototype.xb = function () {
    return this.q26_1;
  };
  SerializableGenerator.prototype.b15 = function () {
    return this.r26_1;
  };
  SerializableGenerator.prototype.c1l = function () {
    return this.s26_1;
  };
  SerializableGenerator.prototype.toString = function () {
    return 'SerializableGenerator(name=' + this.q26_1 + ', degree=' + this.r26_1 + ', differentialValue=' + this.s26_1 + ')';
  };
  SerializableGenerator.prototype.hashCode = function () {
    var result = getStringHashCode(this.q26_1);
    result = imul(result, 31) + this.r26_1 | 0;
    result = imul(result, 31) + getStringHashCode(this.s26_1) | 0;
    return result;
  };
  SerializableGenerator.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SerializableGenerator))
      return false;
    var tmp0_other_with_cast = other instanceof SerializableGenerator ? other : THROW_CCE();
    if (!(this.q26_1 === tmp0_other_with_cast.q26_1))
      return false;
    if (!(this.r26_1 === tmp0_other_with_cast.r26_1))
      return false;
    if (!(this.s26_1 === tmp0_other_with_cast.s26_1))
      return false;
    return true;
  };
  SerializableGenerator.$metadata$ = classMeta('SerializableGenerator', undefined, undefined, {0: $serializer_getInstance});
  function GeneratorSerializer() {
    GeneratorSerializer_instance = this;
    JsonTransformingSerializer.call(this, Companion_getInstance_5().o26());
  }
  GeneratorSerializer.prototype.hl = function (element) {
    var tmp;
    if (element instanceof JsonArray) {
      tmp = new JsonObject(mapOf([to('name', element.l(0)), to('degree', element.l(1)), to('differentialValue', element.l(2))]));
    } else {
      tmp = element;
    }
    return tmp;
  };
  GeneratorSerializer.$metadata$ = objectMeta('GeneratorSerializer', undefined, undefined, undefined, undefined, JsonTransformingSerializer.prototype);
  var GeneratorSerializer_instance;
  function GeneratorSerializer_getInstance() {
    if (GeneratorSerializer_instance == null)
      new GeneratorSerializer();
    return GeneratorSerializer_instance;
  }
  function jsonToSerializableGeneratorList(json) {
    return Default_getInstance().sj(ListSerializer(GeneratorSerializer_getInstance()), json);
  }
  function jsonToGeneratorList(json) {
    var serializableGeneratorList = jsonToSerializableGeneratorList(json);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(serializableGeneratorList, 10));
    var tmp0_iterator = serializableGeneratorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'jsonToGeneratorList.<anonymous>' call
      tmp$ret$0 = Companion_getInstance_3().b1l(item.q26_1, item.r26_1, item.s26_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function StyledStringKt(stringType, content) {
    this.u26_1 = stringType;
    this.v26_1 = content;
  }
  StyledStringKt.prototype.w26 = function () {
    return this.u26_1;
  };
  StyledStringKt.prototype.cl = function () {
    return this.v26_1;
  };
  StyledStringKt.$metadata$ = classMeta('StyledStringKt');
  Object.defineProperty(StyledStringKt.prototype, 'stringType', {
    configurable: true,
    get: StyledStringKt.prototype.w26
  });
  Object.defineProperty(StyledStringKt.prototype, 'content', {
    configurable: true,
    get: StyledStringKt.prototype.cl
  });
  function StyledMessageKt(messageType, strings) {
    this.x26_1 = messageType;
    this.y26_1 = strings;
  }
  StyledMessageKt.prototype.z26 = function () {
    return this.x26_1;
  };
  StyledMessageKt.prototype.a27 = function () {
    return this.y26_1;
  };
  StyledMessageKt.$metadata$ = classMeta('StyledMessageKt');
  Object.defineProperty(StyledMessageKt.prototype, 'messageType', {
    configurable: true,
    get: StyledMessageKt.prototype.z26
  });
  Object.defineProperty(StyledMessageKt.prototype, 'strings', {
    configurable: true,
    get: StyledMessageKt.prototype.a27
  });
  var StringType_TEXT_instance;
  var StringType_MATH_instance;
  var StringType_entriesInitialized;
  function StringType_initEntries() {
    if (StringType_entriesInitialized)
      return Unit_getInstance();
    StringType_entriesInitialized = true;
    StringType_TEXT_instance = new StringType('TEXT', 0, 'text');
    StringType_MATH_instance = new StringType('MATH', 1, 'math');
  }
  function StringType(name, ordinal, typeName) {
    Enum.call(this, name, ordinal);
    this.d27_1 = typeName;
  }
  StringType.$metadata$ = classMeta('StringType', undefined, undefined, undefined, undefined, Enum.prototype);
  function StyledStringInternal(stringType, content) {
    this.e27_1 = stringType;
    this.f27_1 = content;
  }
  StyledStringInternal.prototype.n26 = function () {
    return new StyledStringKt(this.e27_1.d27_1, this.f27_1);
  };
  StyledStringInternal.$metadata$ = classMeta('StyledStringInternal');
  var MessageType_SUCCESS_instance;
  var MessageType_ERROR_instance;
  var MessageType_entriesInitialized;
  function MessageType_initEntries() {
    if (MessageType_entriesInitialized)
      return Unit_getInstance();
    MessageType_entriesInitialized = true;
    MessageType_SUCCESS_instance = new MessageType('SUCCESS', 0, 'success');
    MessageType_ERROR_instance = new MessageType('ERROR', 1, 'error');
  }
  function MessageType(name, ordinal, typeName) {
    Enum.call(this, name, ordinal);
    this.i27_1 = typeName;
  }
  MessageType.$metadata$ = classMeta('MessageType', undefined, undefined, undefined, undefined, Enum.prototype);
  function StyledMessageInternal(messageType, strings) {
    this.l26_1 = messageType;
    this.m26_1 = strings;
  }
  StyledMessageInternal.prototype.n26 = function () {
    var tmp$ret$3;
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = this.m26_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'StyledMessageInternal.export.<anonymous>' call
      tmp$ret$0 = item.n26();
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp1_toTypedArray = tmp$ret$2;
    tmp$ret$3 = copyToArray(tmp1_toTypedArray);
    var strings = tmp$ret$3;
    return new StyledMessageKt(this.l26_1.i27_1, strings);
  };
  StyledMessageInternal.$metadata$ = classMeta('StyledMessageInternal');
  function StyledStringListBuilder() {
    StyledStringListBuilder_instance = this;
  }
  StyledStringListBuilder.prototype.k26 = function (_this__u8e3s4) {
    return listOf(new StyledStringInternal(StringType_TEXT_getInstance(), _this__u8e3s4));
  };
  StyledStringListBuilder.prototype.j26 = function (_this__u8e3s4) {
    return listOf(new StyledStringInternal(StringType_MATH_getInstance(), _this__u8e3s4));
  };
  StyledStringListBuilder.$metadata$ = objectMeta('StyledStringListBuilder');
  var StyledStringListBuilder_instance;
  function StyledStringListBuilder_getInstance() {
    if (StyledStringListBuilder_instance == null)
      new StyledStringListBuilder();
    return StyledStringListBuilder_instance;
  }
  function styledMessage(messageType, block) {
    return new StyledMessageInternal(messageType, block(StyledStringListBuilder_getInstance()));
  }
  function StringType_TEXT_getInstance() {
    StringType_initEntries();
    return StringType_TEXT_instance;
  }
  function StringType_MATH_getInstance() {
    StringType_initEntries();
    return StringType_MATH_instance;
  }
  function MessageType_SUCCESS_getInstance() {
    MessageType_initEntries();
    return MessageType_SUCCESS_instance;
  }
  function MessageType_ERROR_getInstance() {
    MessageType_initEntries();
    return MessageType_ERROR_instance;
  }
  function ValidationResult(type, message) {
    this.j27_1 = type;
    this.k27_1 = message;
  }
  ValidationResult.prototype.l27 = function () {
    return this.j27_1;
  };
  ValidationResult.prototype.s1 = function () {
    return this.k27_1;
  };
  ValidationResult.prototype.component1 = function () {
    return this.j27_1;
  };
  ValidationResult.prototype.component2 = function () {
    return this.k27_1;
  };
  ValidationResult.prototype.copy = function (type, message) {
    return this.m27(type === void 1 ? this.j27_1 : type, message === void 1 ? this.k27_1 : message);
  };
  ValidationResult.prototype.m27 = function (type, message) {
    return new ValidationResult(type, message);
  };
  ValidationResult.prototype.n27 = function (type, message, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      type = this.j27_1;
    if (!(($mask0 & 2) === 0))
      message = this.k27_1;
    return this.m27(type, message);
  };
  ValidationResult.prototype.toString = function () {
    return 'ValidationResult(type=' + this.j27_1 + ', message=' + this.k27_1 + ')';
  };
  ValidationResult.prototype.hashCode = function () {
    var result = getStringHashCode(this.j27_1);
    result = imul(result, 31) + getStringHashCode(this.k27_1) | 0;
    return result;
  };
  ValidationResult.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ValidationResult))
      return false;
    var tmp0_other_with_cast = other instanceof ValidationResult ? other : THROW_CCE();
    if (!(this.j27_1 === tmp0_other_with_cast.j27_1))
      return false;
    if (!(this.k27_1 === tmp0_other_with_cast.k27_1))
      return false;
    return true;
  };
  ValidationResult.$metadata$ = classMeta('ValidationResult');
  Object.defineProperty(ValidationResult.prototype, 'type', {
    configurable: true,
    get: ValidationResult.prototype.l27
  });
  Object.defineProperty(ValidationResult.prototype, 'message', {
    configurable: true,
    get: ValidationResult.prototype.s1
  });
  function validateJson(json) {
    try {
      new FreeDGAWrapper(json);
      return (new Success()).n26();
    } catch ($p) {
      if ($p instanceof Exception) {
        var tmp0_elvis_lhs = $p.message;
        var message = tmp0_elvis_lhs == null ? $p.toString() : tmp0_elvis_lhs;
        return (new Error_0(message)).n26();
      } else {
        throw $p;
      }
    }
  }
  function validateDifferentialValueOfTheLast(generatorsJson) {
    var generatorList = jsonToGeneratorList(generatorsJson);
    var previousGeneratorList = dropLast(generatorList, 1);
    var currentGenerator = last(generatorList);
    var tmp0_safe_receiver = assertDegreeOfDifferentialValue(previousGeneratorList, currentGenerator);
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver.n26();
    }
    var tmp1_safe_receiver = assertSquareOfDifferentialIsZero(previousGeneratorList, currentGenerator);
    if (tmp1_safe_receiver == null)
      null;
    else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp1_safe_receiver.n26();
    }
    return (new Success()).n26();
  }
  function validateGeneratorName(generatorName) {
    var tmp;
    try {
      StringIndeterminateName_init_$Create$(generatorName, null, 2, null);
      tmp = (new Success()).n26();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof IllegalArgumentException) {
        var tmp0_elvis_lhs = $p.message;
        tmp_0 = (new Error_0(tmp0_elvis_lhs == null ? $p.toString() : tmp0_elvis_lhs)).n26();
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  var ValidationResultType_SUCCESS_instance;
  var ValidationResultType_ERROR_instance;
  var ValidationResultType_entriesInitialized;
  function ValidationResultType_initEntries() {
    if (ValidationResultType_entriesInitialized)
      return Unit_getInstance();
    ValidationResultType_entriesInitialized = true;
    ValidationResultType_SUCCESS_instance = new ValidationResultType('SUCCESS', 0, 'success');
    ValidationResultType_ERROR_instance = new ValidationResultType('ERROR', 1, 'error');
  }
  function ValidationResultType(name, ordinal, typeName) {
    Enum.call(this, name, ordinal);
    this.s27_1 = typeName;
  }
  ValidationResultType.$metadata$ = classMeta('ValidationResultType', undefined, undefined, undefined, undefined, Enum.prototype);
  function Success() {
    ValidationResultInternal.call(this, ValidationResultType_SUCCESS_getInstance(), '');
  }
  Success.$metadata$ = classMeta('Success', undefined, undefined, undefined, undefined, ValidationResultInternal.prototype);
  function Error_0(message) {
    ValidationResultInternal.call(this, ValidationResultType_ERROR_getInstance(), message);
  }
  Error_0.$metadata$ = classMeta('Error', undefined, undefined, undefined, undefined, ValidationResultInternal.prototype);
  function ValidationResultInternal(type, message) {
    this.o27_1 = type;
    this.p27_1 = message;
  }
  ValidationResultInternal.prototype.n26 = function () {
    return new ValidationResult(this.o27_1.s27_1, this.p27_1);
  };
  ValidationResultInternal.$metadata$ = classMeta('ValidationResultInternal');
  function getErrorMessageForPreviousGenerators(generatorList) {
    var generatorsString = joinToString$default(generatorList, ', ', null, null, 0, null, getErrorMessageForPreviousGenerators$lambda, 30, null);
    return 'Please fix errors for generators (' + generatorsString + ') above this.';
  }
  function assertDegreeOfDifferentialValue(generatorList, currentGenerator) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(generatorList, 10));
    var tmp0_iterator = generatorList.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'assertDegreeOfDifferentialValue.<anonymous>' call
      tmp$ret$0 = Indeterminate(item.m1k_1, item.n1k_1);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var indeterminateList = tmp$ret$2;
    var tmp;
    try {
      tmp = Companion_getInstance_4().t1n(get_SparseMatrixSpaceOverRational(), indeterminateList);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Exception) {
        var message = getErrorMessageForPreviousGenerators(generatorList);
        return new Error_0(message);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var freeGAlgebra = tmp;
    var differentialValue = currentGenerator.o1k_1;
    var tmp_1;
    try {
      tmp_1 = freeGAlgebra.p1k(differentialValue);
    } catch ($p) {
      var tmp_2;
      if ($p instanceof ParseException) {
        var tmp_3;
        if (isFailureAtTheBeginning_0($p)) {
          tmp_3 = 'Failed to parse the value "' + differentialValue + '" of the differential. ' + 'No matching token at the beginning.';
        } else {
          tmp_3 = 'Failed to parse the value "' + differentialValue + '" of the differential ' + ('with the following error message:\n' + format_0($p));
        }
        var message_0 = tmp_3;
        return new Error_0(message_0);
      } else {
        if ($p instanceof Exception) {
          var tmp0_elvis_lhs = $p.message;
          var message_1 = tmp0_elvis_lhs == null ? $p.toString() : tmp0_elvis_lhs;
          return new Error_0(message_1);
        } else {
          throw $p;
        }
      }
      tmp_1 = tmp_2;
    }
    var gVector = tmp_1;
    var expectedDegree = currentGenerator.n1k_1.i1f_1 + 1 | 0;
    var tmp_4;
    if (gVector instanceof GVector) {
      tmp_4 = !(gVector.x17_1.i1f_1 === expectedDegree);
    } else {
      tmp_4 = false;
    }
    if (tmp_4) {
      var name = currentGenerator.m1k_1;
      var message_2 = 'The degree of d(' + name + ') is expected to be deg(' + name + ')+1=' + expectedDegree + ', ' + ('but the given value ' + differentialValue + ' has degree ' + gVector.x17_1.i1f_1 + '.');
      return new Error_0(message_2);
    }
    return null;
  }
  function assertSquareOfDifferentialIsZero(generatorList, currentGenerator) {
    var differentialValue = currentGenerator.o1k_1;
    var tmp;
    try {
      tmp = Companion_getInstance_2().x1k(get_SparseMatrixSpaceOverRational(), generatorList);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Exception) {
        var message = getErrorMessageForPreviousGenerators(generatorList);
        return new Error_0(message);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var freeDGAlgebra = tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.run' call
    var tmp0_run = freeDGAlgebra.t14();
    // Inline function 'kotlin.contracts.contract' call
    var gVector = freeDGAlgebra.p1k(differentialValue);
    var tmp_1;
    if (gVector instanceof ZeroGVector) {
      tmp_1 = null;
    } else {
      if (gVector instanceof GVector) {
        var gVectorWhichShouldBeZero = tmp0_run.l12().e15(gVector);
        var tmp0_subject = gVectorWhichShouldBeZero.op();
        var tmp_2;
        switch (tmp0_subject) {
          case true:
            tmp_2 = null;
            break;
          case false:
            tmp_2 = new Error_0('d(d(' + currentGenerator.m1k_1 + ')) must be zero, but was ' + gVectorWhichShouldBeZero);
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp_1 = tmp_2;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp_1;
  }
  function getErrorMessageForPreviousGenerators$lambda(it) {
    return it.m1k_1;
  }
  function ValidationResultType_SUCCESS_getInstance() {
    ValidationResultType_initEntries();
    return ValidationResultType_SUCCESS_instance;
  }
  function ValidationResultType_ERROR_getInstance() {
    ValidationResultType_initEntries();
    return ValidationResultType_ERROR_instance;
  }
  //region block: post-declaration
  $serializer.prototype.si = typeParametersSerializers;
  //endregion
  //region block: exports
  function $jsExportAll$(_) {
    _.FreeDGAWrapper = FreeDGAWrapper;
    _.StyledStringKt = StyledStringKt;
    _.StyledMessageKt = StyledMessageKt;
    _.ValidationResult = ValidationResult;
    _.validateJson = validateJson;
    _.validateDifferentialValueOfTheLast = validateDifferentialValueOfTheLast;
    _.validateGeneratorName = validateGeneratorName;
  }
  $jsExportAll$(_);
  //endregion
  return _;
}));

//# sourceMappingURL=kohomology-js.js.map


/***/ }),

/***/ 72:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//region block: polyfills
if (typeof ArrayBuffer.isView === 'undefined') {
  ArrayBuffer.isView = function (a) {
    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
  };
}
if (typeof Math.log10 === 'undefined') {
  Math.log10 = function (x) {
    return Math.log(x) * Math.LOG10E;
  };
}
if (typeof String.prototype.startsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'startsWith', {value: function (searchString, position) {
    position = position || 0;
    return this.lastIndexOf(searchString, position) === position;
  }});
}
if (typeof String.prototype.endsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'endsWith', {value: function (searchString, position) {
    var subjectString = this.toString();
    if (position === undefined || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  }});
}
if (typeof Math.imul === 'undefined') {
  Math.imul = function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  };
}
//endregion
(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var isView = ArrayBuffer.isView;
  var log10 = Math.log10;
  //endregion
  //region block: pre-declaration
  Exception.prototype = Object.create(Error.prototype);
  Exception.prototype.constructor = Exception;
  RuntimeException.prototype = Object.create(Exception.prototype);
  RuntimeException.prototype.constructor = RuntimeException;
  KotlinNothingValueException.prototype = Object.create(RuntimeException.prototype);
  KotlinNothingValueException.prototype.constructor = KotlinNothingValueException;
  State.prototype = Object.create(Enum.prototype);
  State.prototype.constructor = State;
  AbstractList.prototype = Object.create(AbstractCollection.prototype);
  AbstractList.prototype.constructor = AbstractList;
  SubList.prototype = Object.create(AbstractList.prototype);
  SubList.prototype.constructor = SubList;
  ListIteratorImpl.prototype = Object.create(IteratorImpl.prototype);
  ListIteratorImpl.prototype.constructor = ListIteratorImpl;
  AbstractSet.prototype = Object.create(AbstractCollection.prototype);
  AbstractSet.prototype.constructor = AbstractSet;
  AbstractMap$keys$1.prototype = Object.create(AbstractSet.prototype);
  AbstractMap$keys$1.prototype.constructor = AbstractMap$keys$1;
  AbstractMap$values$1.prototype = Object.create(AbstractCollection.prototype);
  AbstractMap$values$1.prototype.constructor = AbstractMap$values$1;
  IntRange.prototype = Object.create(IntProgression.prototype);
  IntRange.prototype.constructor = IntRange;
  IntProgressionIterator.prototype = Object.create(IntIterator.prototype);
  IntProgressionIterator.prototype.constructor = IntProgressionIterator;
  Error_0.prototype = Object.create(Error.prototype);
  Error_0.prototype.constructor = Error_0;
  NotImplementedError.prototype = Object.create(Error_0.prototype);
  NotImplementedError.prototype.constructor = NotImplementedError;
  AbstractMutableCollection.prototype = Object.create(AbstractCollection.prototype);
  AbstractMutableCollection.prototype.constructor = AbstractMutableCollection;
  ListIteratorImpl_0.prototype = Object.create(IteratorImpl_0.prototype);
  ListIteratorImpl_0.prototype.constructor = ListIteratorImpl_0;
  AbstractMutableList.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableList.prototype.constructor = AbstractMutableList;
  SubList_0.prototype = Object.create(AbstractMutableList.prototype);
  SubList_0.prototype.constructor = SubList_0;
  AbstractMutableSet.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableSet.prototype.constructor = AbstractMutableSet;
  AbstractEntrySet.prototype = Object.create(AbstractMutableSet.prototype);
  AbstractEntrySet.prototype.constructor = AbstractEntrySet;
  AbstractMutableMap$keys$1.prototype = Object.create(AbstractMutableSet.prototype);
  AbstractMutableMap$keys$1.prototype.constructor = AbstractMutableMap$keys$1;
  AbstractMutableMap$values$1.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableMap$values$1.prototype.constructor = AbstractMutableMap$values$1;
  AbstractMutableMap.prototype = Object.create(AbstractMap.prototype);
  AbstractMutableMap.prototype.constructor = AbstractMutableMap;
  ArrayList.prototype = Object.create(AbstractMutableList.prototype);
  ArrayList.prototype.constructor = ArrayList;
  EntrySet.prototype = Object.create(AbstractEntrySet.prototype);
  EntrySet.prototype.constructor = EntrySet;
  HashMap.prototype = Object.create(AbstractMutableMap.prototype);
  HashMap.prototype.constructor = HashMap;
  HashSet.prototype = Object.create(AbstractMutableSet.prototype);
  HashSet.prototype.constructor = HashSet;
  function createJsMap() {
    var result = Object.create(null);
    result['foo'] = 1;
    jsDeleteProperty(result, 'foo');
    return result;
  }
  ChainEntry.prototype = Object.create(SimpleEntry.prototype);
  ChainEntry.prototype.constructor = ChainEntry;
  EntrySet_0.prototype = Object.create(AbstractEntrySet.prototype);
  EntrySet_0.prototype.constructor = EntrySet_0;
  LinkedHashMap.prototype = Object.create(HashMap.prototype);
  LinkedHashMap.prototype.constructor = LinkedHashMap;
  LinkedHashSet.prototype = Object.create(HashSet.prototype);
  LinkedHashSet.prototype.constructor = LinkedHashSet;
  NodeJsOutput.prototype = Object.create(BaseOutput.prototype);
  NodeJsOutput.prototype.constructor = NodeJsOutput;
  BufferedOutput.prototype = Object.create(BaseOutput.prototype);
  BufferedOutput.prototype.constructor = BufferedOutput;
  BufferedOutputToConsoleLog.prototype = Object.create(BufferedOutput.prototype);
  BufferedOutputToConsoleLog.prototype.constructor = BufferedOutputToConsoleLog;
  PrimitiveKClassImpl.prototype = Object.create(KClassImpl.prototype);
  PrimitiveKClassImpl.prototype.constructor = PrimitiveKClassImpl;
  NothingKClassImpl.prototype = Object.create(KClassImpl.prototype);
  NothingKClassImpl.prototype.constructor = NothingKClassImpl;
  SimpleKClassImpl.prototype = Object.create(KClassImpl.prototype);
  SimpleKClassImpl.prototype.constructor = SimpleKClassImpl;
  CharCategory.prototype = Object.create(Enum.prototype);
  CharCategory.prototype.constructor = CharCategory;
  findNext$1$groups$1.prototype = Object.create(AbstractCollection.prototype);
  findNext$1$groups$1.prototype.constructor = findNext$1$groups$1;
  Long.prototype = Object.create(Number_0.prototype);
  Long.prototype.constructor = Long;
  asList$1.prototype = Object.create(AbstractList.prototype);
  asList$1.prototype.constructor = asList$1;
  IllegalArgumentException.prototype = Object.create(RuntimeException.prototype);
  IllegalArgumentException.prototype.constructor = IllegalArgumentException;
  IllegalStateException.prototype = Object.create(RuntimeException.prototype);
  IllegalStateException.prototype.constructor = IllegalStateException;
  NoSuchElementException.prototype = Object.create(RuntimeException.prototype);
  NoSuchElementException.prototype.constructor = NoSuchElementException;
  IndexOutOfBoundsException.prototype = Object.create(RuntimeException.prototype);
  IndexOutOfBoundsException.prototype.constructor = IndexOutOfBoundsException;
  UnsupportedOperationException.prototype = Object.create(RuntimeException.prototype);
  UnsupportedOperationException.prototype.constructor = UnsupportedOperationException;
  NumberFormatException.prototype = Object.create(IllegalArgumentException.prototype);
  NumberFormatException.prototype.constructor = NumberFormatException;
  ArithmeticException.prototype = Object.create(RuntimeException.prototype);
  ArithmeticException.prototype.constructor = ArithmeticException;
  NullPointerException.prototype = Object.create(RuntimeException.prototype);
  NullPointerException.prototype.constructor = NullPointerException;
  NoWhenBranchMatchedException.prototype = Object.create(RuntimeException.prototype);
  NoWhenBranchMatchedException.prototype.constructor = NoWhenBranchMatchedException;
  ClassCastException.prototype = Object.create(RuntimeException.prototype);
  ClassCastException.prototype.constructor = ClassCastException;
  //endregion
  function get_indices(_this__u8e3s4) {
    return new IntRange(0, get_lastIndex(_this__u8e3s4));
  }
  function single(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.length;
    var tmp;
    switch (tmp0_subject) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Array is empty.');
      case 1:
        tmp = _this__u8e3s4[0];
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Array has more than one element.');
    }
    return tmp;
  }
  function any(_this__u8e3s4, predicate) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (predicate(new Char_0(element)))
        return true;
    }
    return false;
  }
  function get_lastIndex(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function indexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = 0;
      var last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (inductionVariable <= last);
    } else {
      var inductionVariable_0 = 0;
      var last_0 = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals_0(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (inductionVariable_0 <= last_0);
    }
    return -1;
  }
  function toCollection(_this__u8e3s4, destination) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.a(item);
    }
    return destination;
  }
  function contains(_this__u8e3s4, element) {
    return indexOf_0(_this__u8e3s4, element) >= 0;
  }
  function indexOfLast(_this__u8e3s4, predicate) {
    var inductionVariable = _this__u8e3s4.length - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (predicate(_this__u8e3s4[index])) {
          return index;
        }
      }
       while (0 <= inductionVariable);
    return -1;
  }
  function get_lastIndex_0(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function contains_0(_this__u8e3s4, element) {
    return indexOf_1(_this__u8e3s4, element) >= 0;
  }
  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinToString$default(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function isEmpty(_this__u8e3s4) {
    return _this__u8e3s4.length === 0;
  }
  function contains_1(_this__u8e3s4, element) {
    return indexOf(_this__u8e3s4, element) >= 0;
  }
  function indexOf_0(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element.equals(_this__u8e3s4[index])) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function get_indices_0(_this__u8e3s4) {
    return new IntRange(0, get_lastIndex_0(_this__u8e3s4));
  }
  function indexOf_1(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.b(prefix);
    var count = 0;
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    $l$loop: while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.b(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.b(truncated);
    }
    buffer.b(postfix);
    return buffer;
  }
  function firstOrNull(_this__u8e3s4, predicate) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (predicate(element))
        return element;
    }
    return null;
  }
  function map(_this__u8e3s4, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(_this__u8e3s4.length);
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      tmp0_mapTo.a(transform(item));
    }
    tmp$ret$0 = tmp0_mapTo;
    return tmp$ret$0;
  }
  function toList(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.length;
    switch (tmp0_subject) {
      case 0:
        return emptyList();
      case 1:
        return listOf_1(_this__u8e3s4[0]);
      default:
        return toMutableList(_this__u8e3s4);
    }
  }
  function all(_this__u8e3s4, predicate) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (!predicate(element))
        return false;
    }
    return true;
  }
  function isEmpty_0(_this__u8e3s4) {
    return _this__u8e3s4.length === 0;
  }
  function mapIndexed(_this__u8e3s4, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$_0(_this__u8e3s4.length);
    var index = 0;
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      tmp0_mapIndexedTo.a(transform(tmp1, item));
    }
    tmp$ret$0 = tmp0_mapIndexedTo;
    return tmp$ret$0;
  }
  function mapTo(_this__u8e3s4, destination, transform) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.a(transform(item));
    }
    return destination;
  }
  function toMutableList(_this__u8e3s4) {
    var list = ArrayList_init_$Create$_0(_this__u8e3s4.length);
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      list.a(item);
    }
    return list;
  }
  function mapIndexedTo(_this__u8e3s4, destination, transform) {
    var index = 0;
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      destination.a(transform(tmp1, item));
    }
    return destination;
  }
  function map_0(_this__u8e3s4, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(_this__u8e3s4, 10));
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      tmp0_mapTo.a(transform(item));
    }
    tmp$ret$0 = tmp0_mapTo;
    return tmp$ret$0;
  }
  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinToString$default_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function fold(_this__u8e3s4, initial, operation) {
    var accumulator = initial;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      accumulator = operation(accumulator, element);
    }
    return accumulator;
  }
  function firstOrNull_0(_this__u8e3s4, predicate) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element))
        return element;
    }
    return null;
  }
  function plus(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection)) {
      var result = ArrayList_init_$Create$_0(_this__u8e3s4.i() + elements.i() | 0);
      result.j(_this__u8e3s4);
      result.j(elements);
      return result;
    } else {
      var result_0 = ArrayList_init_$Create$_1(_this__u8e3s4);
      addAll(result_0, elements);
      return result_0;
    }
  }
  function asIterable(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function takeLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.takeLast.<anonymous>' call
      tmp$ret$0 = 'Requested element count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    if (n === 0)
      return emptyList();
    var size = _this__u8e3s4.i();
    if (n >= size)
      return toList_0(_this__u8e3s4);
    if (n === 1)
      return listOf_1(last(_this__u8e3s4));
    var list = ArrayList_init_$Create$_0(n);
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      var inductionVariable = size - n | 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          list.a(_this__u8e3s4.l(index));
        }
         while (inductionVariable < size);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      var tmp1_iterator = _this__u8e3s4.k(size - n | 0);
      tmp$ret$1 = tmp1_iterator;
      var tmp1_iterator_0 = tmp$ret$1;
      while (tmp1_iterator_0.g()) {
        var item = tmp1_iterator_0.h();
        list.a(item);
      }
    }
    return list;
  }
  function toList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp0_subject = _this__u8e3s4.i();
      var tmp;
      switch (tmp0_subject) {
        case 0:
          tmp = emptyList();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List_0)) {
            tmp_0 = _this__u8e3s4.l(0);
          } else {
            tmp_0 = _this__u8e3s4.f().h();
          }

          tmp = listOf_1(tmp_0);
          break;
        default:
          tmp = toMutableList_1(_this__u8e3s4);
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyList(toMutableList_0(_this__u8e3s4));
  }
  function dropLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.dropLast.<anonymous>' call
      tmp$ret$0 = 'Requested element count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    return take(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.i() - n | 0, 0));
  }
  function toSet(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp0_subject = _this__u8e3s4.i();
      var tmp;
      switch (tmp0_subject) {
        case 0:
          tmp = emptySet();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List_0)) {
            tmp_0 = _this__u8e3s4.l(0);
          } else {
            tmp_0 = _this__u8e3s4.f().h();
          }

          tmp = setOf(tmp_0);
          break;
        default:
          tmp = toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.i())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlySet(toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$()));
  }
  function mapNotNull(_this__u8e3s4, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapNotNullTo' call
    var tmp0_mapNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
      var tmp0_safe_receiver = transform(element);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp0_mapNotNullTo.a(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    tmp$ret$1 = tmp0_mapNotNullTo;
    return tmp$ret$1;
  }
  function filter(_this__u8e3s4, predicate) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element)) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$0 = tmp0_filterTo;
    return tmp$ret$0;
  }
  function mapIndexedNotNull(_this__u8e3s4, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = transform(tmp0__anonymous__q1qw7t, item);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    tmp$ret$1 = tmp1_mapIndexedNotNullTo;
    return tmp$ret$1;
  }
  function count(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return _this__u8e3s4.i();
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      count = count + 1 | 0;
      checkCountOverflow(count);
    }
    return count;
  }
  function first(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    if (isInterface(tmp0_subject, List_0))
      return first_0(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.f();
      if (!iterator.g())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      return iterator.h();
    }
  }
  function withIndex(_this__u8e3s4) {
    return new IndexingIterable(withIndex$lambda(_this__u8e3s4));
  }
  function toMutableSet(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (isInterface(tmp0_subject, Collection)) {
      tmp = LinkedHashSet_init_$Create$_0(_this__u8e3s4);
    } else {
      tmp = toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$());
    }
    return tmp;
  }
  function zip(_this__u8e3s4, other) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.zip' call
    var first = _this__u8e3s4.f();
    var second = other.f();
    var tmp$ret$0;
    // Inline function 'kotlin.comparisons.minOf' call
    var tmp0_minOf = collectionSizeOrDefault(_this__u8e3s4, 10);
    var tmp1_minOf = collectionSizeOrDefault(other, 10);
    tmp$ret$0 = Math.min(tmp0_minOf, tmp1_minOf);
    var list = ArrayList_init_$Create$_0(tmp$ret$0);
    while (first.g() ? second.g() : false) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.zip.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = first.h();
      var tmp3__anonymous__ufb84q = second.h();
      tmp$ret$1 = to(tmp2__anonymous__z9zvc9, tmp3__anonymous__ufb84q);
      list.a(tmp$ret$1);
    }
    tmp$ret$2 = list;
    return tmp$ret$2;
  }
  function slice(_this__u8e3s4, indices) {
    if (indices.p()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.listOf' call
      tmp$ret$0 = emptyList();
      return tmp$ret$0;
    }
    return toList_0(_this__u8e3s4.s(indices.q(), indices.r() + 1 | 0));
  }
  function find(_this__u8e3s4, predicate) {
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = _this__u8e3s4.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        if (predicate(element)) {
          tmp$ret$0 = element;
          break $l$block;
        }
      }
      tmp$ret$0 = null;
    }
    return tmp$ret$0;
  }
  function all_0(_this__u8e3s4, predicate) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.p();
    } else {
      tmp = false;
    }
    if (tmp)
      return true;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (!predicate(element))
        return false;
    }
    return true;
  }
  function any_0(_this__u8e3s4, predicate) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.p();
    } else {
      tmp = false;
    }
    if (tmp)
      return false;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element))
        return true;
    }
    return false;
  }
  function filterNotNull(_this__u8e3s4) {
    return filterNotNullTo(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function reduce(_this__u8e3s4, operation) {
    var iterator = _this__u8e3s4.f();
    if (!iterator.g())
      throw UnsupportedOperationException_init_$Create$_0("Empty collection can't be reduced.");
    var accumulator = iterator.h();
    while (iterator.g()) {
      accumulator = operation(accumulator, iterator.h());
    }
    return accumulator;
  }
  function mapIndexed_0(_this__u8e3s4, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var tmp0_mapIndexedTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(_this__u8e3s4, 10));
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      tmp0_mapIndexedTo.a(transform(checkIndexOverflow(tmp1), item));
    }
    tmp$ret$0 = tmp0_mapIndexedTo;
    return tmp$ret$0;
  }
  function sorted(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.i() <= 1)
        return toList_0(_this__u8e3s4);
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp0_toTypedArray = _this__u8e3s4;
      tmp$ret$0 = copyToArray(tmp0_toTypedArray);
      var tmp = tmp$ret$0;
      var tmp1_apply = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.sorted.<anonymous>' call
      sort_0(tmp1_apply);
      tmp$ret$1 = tmp1_apply;
      return asList(tmp$ret$1);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.apply' call
    var tmp2_apply = toMutableList_0(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.sorted.<anonymous>' call
    sort(tmp2_apply);
    tmp$ret$2 = tmp2_apply;
    return tmp$ret$2;
  }
  function sortedBy(_this__u8e3s4, selector) {
    var tmp$ret$0;
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = sortedBy$lambda(selector);
    tmp$ret$0 = new sam$kotlin_Comparator$0(tmp);
    return sortedWith(_this__u8e3s4, tmp$ret$0);
  }
  function groupBy(_this__u8e3s4, keySelector) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.groupByTo' call
    var tmp0_groupByTo = LinkedHashMap_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var key = keySelector(element);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = tmp0_groupByTo.t(key);
      var tmp;
      if (value == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        tmp$ret$0 = ArrayList_init_$Create$();
        var answer = tmp$ret$0;
        tmp0_groupByTo.u(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      tmp$ret$1 = tmp;
      var list = tmp$ret$1;
      list.a(element);
    }
    tmp$ret$2 = tmp0_groupByTo;
    return tmp$ret$2;
  }
  function last(_this__u8e3s4) {
    if (_this__u8e3s4.p())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.l(get_lastIndex_1(_this__u8e3s4));
  }
  function associateByTo(_this__u8e3s4, destination, keySelector, valueTransform) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      destination.u(keySelector(element), valueTransform(element));
    }
    return destination;
  }
  function toCollection_0(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      destination.a(item);
    }
    return destination;
  }
  function mapTo_0(_this__u8e3s4, destination, transform) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      destination.a(transform(item));
    }
    return destination;
  }
  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.b(prefix);
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    $l$loop: while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.b(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.b(truncated);
    }
    buffer.b(postfix);
    return buffer;
  }
  function joinTo$default(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      separator = ', ';
    if (!(($mask0 & 4) === 0))
      prefix = '';
    if (!(($mask0 & 8) === 0))
      postfix = '';
    if (!(($mask0 & 16) === 0))
      limit = -1;
    if (!(($mask0 & 32) === 0))
      truncated = '...';
    if (!(($mask0 & 64) === 0))
      transform = null;
    return joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform);
  }
  function toMutableList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return toMutableList_1(_this__u8e3s4);
    return toCollection_0(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function toMutableList_1(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(_this__u8e3s4);
  }
  function take(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.take.<anonymous>' call
      tmp$ret$0 = 'Requested element count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    if (n === 0)
      return emptyList();
    if (isInterface(_this__u8e3s4, Collection)) {
      if (n >= _this__u8e3s4.i())
        return toList_0(_this__u8e3s4);
      if (n === 1)
        return listOf_1(first(_this__u8e3s4));
    }
    var count = 0;
    var list = ArrayList_init_$Create$_0(n);
    var tmp0_iterator = _this__u8e3s4.f();
    $l$loop: while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      list.a(item);
      count = count + 1 | 0;
      if (count === n)
        break $l$loop;
    }
    return optimizeReadOnlyList(list);
  }
  function mapNotNullTo(_this__u8e3s4, destination, transform) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
      var tmp0_safe_receiver = transform(element);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination.a(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    return destination;
  }
  function filterTo(_this__u8e3s4, destination, predicate) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element)) {
        destination.a(element);
      }
    }
    return destination;
  }
  function mapIndexedNotNullTo(_this__u8e3s4, destination, transform) {
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = transform(tmp0__anonymous__q1qw7t, item);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination.a(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    return destination;
  }
  function first_0(_this__u8e3s4) {
    if (_this__u8e3s4.p())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.l(0);
  }
  function zip_0(_this__u8e3s4, other, transform) {
    var first = _this__u8e3s4.f();
    var second = other.f();
    var tmp$ret$0;
    // Inline function 'kotlin.comparisons.minOf' call
    var tmp0_minOf = collectionSizeOrDefault(_this__u8e3s4, 10);
    var tmp1_minOf = collectionSizeOrDefault(other, 10);
    tmp$ret$0 = Math.min(tmp0_minOf, tmp1_minOf);
    var list = ArrayList_init_$Create$_0(tmp$ret$0);
    while (first.g() ? second.g() : false) {
      list.a(transform(first.h(), second.h()));
    }
    return list;
  }
  function filterNotNullTo(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (!(element == null)) {
        destination.a(element);
      }
    }
    return destination;
  }
  function mapIndexedTo_0(_this__u8e3s4, destination, transform) {
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      destination.a(transform(checkIndexOverflow(tmp1), item));
    }
    return destination;
  }
  function sortedWith(_this__u8e3s4, comparator) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.i() <= 1)
        return toList_0(_this__u8e3s4);
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp0_toTypedArray = _this__u8e3s4;
      tmp$ret$0 = copyToArray(tmp0_toTypedArray);
      var tmp = tmp$ret$0;
      var tmp1_apply = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
      sortWith_0(tmp1_apply, comparator);
      tmp$ret$1 = tmp1_apply;
      return asList(tmp$ret$1);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.apply' call
    var tmp2_apply = toMutableList_0(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
    sortWith(tmp2_apply, comparator);
    tmp$ret$2 = tmp2_apply;
    return tmp$ret$2;
  }
  function groupByTo(_this__u8e3s4, destination, keySelector) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var key = keySelector(element);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination.t(key);
      var tmp;
      if (value == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        tmp$ret$0 = ArrayList_init_$Create$();
        var answer = tmp$ret$0;
        destination.u(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      tmp$ret$1 = tmp;
      var list = tmp$ret$1;
      list.a(element);
    }
    return destination;
  }
  function forEach(_this__u8e3s4, action) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      action(element);
    }
  }
  function forEachIndexed(_this__u8e3s4, action) {
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      action(checkIndexOverflow(tmp1), item);
    }
  }
  function indexOfFirst(_this__u8e3s4, predicate) {
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      if (predicate(item))
        return index;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
    }
    return -1;
  }
  function single_0(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    if (isInterface(tmp0_subject, List_0))
      return single_1(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.f();
      if (!iterator.g())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var single = iterator.h();
      if (iterator.g())
        throw IllegalArgumentException_init_$Create$_0('Collection has more than one element.');
      return single;
    }
  }
  function single_1(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.i();
    var tmp;
    switch (tmp0_subject) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('List is empty.');
      case 1:
        tmp = _this__u8e3s4.l(0);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('List has more than one element.');
    }
    return tmp;
  }
  function sum(_this__u8e3s4) {
    var sum = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      sum = sum + element | 0;
    }
    return sum;
  }
  function toIntArray(_this__u8e3s4) {
    var result = new Int32Array(_this__u8e3s4.i());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function any_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return !_this__u8e3s4.p();
    return _this__u8e3s4.f().g();
  }
  function groupingBy(_this__u8e3s4, keySelector) {
    return new _no_name_provided__qut3iv(_this__u8e3s4, keySelector);
  }
  function distinct(_this__u8e3s4) {
    return toList_0(toMutableSet(_this__u8e3s4));
  }
  function minOrNull(_this__u8e3s4) {
    var iterator = _this__u8e3s4.f();
    if (!iterator.g())
      return null;
    var min = iterator.h();
    while (iterator.g()) {
      var e = iterator.h();
      if (compareTo_0(min, e) > 0)
        min = e;
    }
    return min;
  }
  function asSequence(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.Sequence' call
    tmp$ret$0 = new _no_name_provided__qut3iv_0(_this__u8e3s4);
    return tmp$ret$0;
  }
  function lastOrNull(_this__u8e3s4) {
    return _this__u8e3s4.p() ? null : _this__u8e3s4.l(_this__u8e3s4.i() - 1 | 0);
  }
  function distinctBy(_this__u8e3s4, selector) {
    var set = HashSet_init_$Create$();
    var list = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var e = tmp0_iterator.h();
      var key = selector(e);
      if (set.a(key)) {
        list.a(e);
      }
    }
    return list;
  }
  function component1(_this__u8e3s4) {
    return _this__u8e3s4.l(0);
  }
  function component2(_this__u8e3s4) {
    return _this__u8e3s4.l(1);
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.w_1 = function_0;
  }
  sam$kotlin_Comparator$0.prototype.x = function (a, b) {
    return this.w_1(a, b);
  };
  sam$kotlin_Comparator$0.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function withIndex$lambda($this_withIndex) {
    return function () {
      return $this_withIndex.f();
    };
  }
  function sortedBy$lambda($selector) {
    return function (a, b) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      tmp$ret$0 = compareValues($selector(a), $selector(b));
      return tmp$ret$0;
    };
  }
  function _no_name_provided__qut3iv($this_groupingBy, $keySelector) {
    this.y_1 = $this_groupingBy;
    this.z_1 = $keySelector;
  }
  _no_name_provided__qut3iv.prototype.a1 = function () {
    return this.y_1.f();
  };
  _no_name_provided__qut3iv.prototype.b1 = function (element) {
    return this.z_1(element);
  };
  _no_name_provided__qut3iv.$metadata$ = classMeta(undefined, [Grouping]);
  function _no_name_provided__qut3iv_0($this_asSequence) {
    this.c1_1 = $this_asSequence;
  }
  _no_name_provided__qut3iv_0.prototype.f = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    tmp$ret$0 = this.c1_1.f();
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv_0.$metadata$ = classMeta(undefined, [Sequence]);
  function all_1(_this__u8e3s4, predicate) {
    if (_this__u8e3s4.p())
      return true;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (!predicate(element))
        return false;
    }
    return true;
  }
  function map_1(_this__u8e3s4, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(_this__u8e3s4.i());
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      tmp0_mapTo.a(transform(item));
    }
    tmp$ret$1 = tmp0_mapTo;
    return tmp$ret$1;
  }
  function mapTo_1(_this__u8e3s4, destination, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      destination.a(transform(item));
    }
    return destination;
  }
  function any_2(_this__u8e3s4, predicate) {
    if (_this__u8e3s4.p())
      return false;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element))
        return true;
    }
    return false;
  }
  function toList_1(_this__u8e3s4) {
    if (_this__u8e3s4.i() === 0)
      return emptyList();
    var iterator = _this__u8e3s4.d1().f();
    if (!iterator.g())
      return emptyList();
    var first = iterator.h();
    if (!iterator.g()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.toPair' call
      tmp$ret$0 = new Pair(first.e1(), first.f1());
      return listOf_1(tmp$ret$0);
    }
    var result = ArrayList_init_$Create$_0(_this__u8e3s4.i());
    var tmp$ret$1;
    // Inline function 'kotlin.collections.toPair' call
    tmp$ret$1 = new Pair(first.e1(), first.f1());
    result.a(tmp$ret$1);
    do {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.toPair' call
      var tmp0_toPair = iterator.h();
      tmp$ret$2 = new Pair(tmp0_toPair.e1(), tmp0_toPair.f1());
      result.a(tmp$ret$2);
    }
     while (iterator.g());
    return result;
  }
  function until(_this__u8e3s4, to) {
    if (to <= IntCompanionObject_getInstance().h1_1)
      return Companion_getInstance_2().g1_1;
    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
  }
  function coerceAtLeast(_this__u8e3s4, minimumValue) {
    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
  }
  function downTo(_this__u8e3s4, to) {
    return Companion_getInstance_3().l1(_this__u8e3s4, to, -1);
  }
  function coerceAtMost(_this__u8e3s4, maximumValue) {
    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
  }
  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function asIterable_0(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Iterable' call
    tmp$ret$0 = new _no_name_provided__qut3iv_1(_this__u8e3s4);
    return tmp$ret$0;
  }
  function joinToString_1(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return joinTo_1(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinToString$default_1(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return joinToString_1(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function map_2(_this__u8e3s4, transform) {
    return new TransformingSequence(_this__u8e3s4, transform);
  }
  function joinTo_1(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.b(prefix);
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    $l$loop: while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.b(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.b(truncated);
    }
    buffer.b(postfix);
    return buffer;
  }
  function toList_2(_this__u8e3s4) {
    return optimizeReadOnlyList(toMutableList_2(_this__u8e3s4));
  }
  function toMutableList_2(_this__u8e3s4) {
    return toCollection_1(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function toCollection_1(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      destination.a(item);
    }
    return destination;
  }
  function _no_name_provided__qut3iv_1($this_asIterable) {
    this.m1_1 = $this_asIterable;
  }
  _no_name_provided__qut3iv_1.prototype.f = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.asIterable.<anonymous>' call
    tmp$ret$0 = this.m1_1.f();
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv_1.$metadata$ = classMeta(undefined, [Iterable_0]);
  function forEach_0(_this__u8e3s4, action) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(indexedObject)) {
      var element = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      action(new Char_0(element));
    }
  }
  function reversed(_this__u8e3s4) {
    return toString_3(reversed_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE()));
  }
  function dropLastWhile(_this__u8e3s4, predicate) {
    var inductionVariable = get_lastIndex_2(_this__u8e3s4);
    if (0 <= inductionVariable)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (!predicate(new Char_0(charSequenceGet(_this__u8e3s4, index)))) {
          var tmp$ret$1;
          // Inline function 'kotlin.text.substring' call
          var tmp0_substring = index + 1 | 0;
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = _this__u8e3s4;
          tmp$ret$1 = tmp$ret$0.substring(0, tmp0_substring);
          return tmp$ret$1;
        }
      }
       while (0 <= inductionVariable);
    return '';
  }
  function indexOfFirst_0(_this__u8e3s4, predicate) {
    var inductionVariable = 0;
    var last = charSequenceLength(_this__u8e3s4) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (predicate(new Char_0(charSequenceGet(_this__u8e3s4, index)))) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOfLast_0(_this__u8e3s4, predicate) {
    var inductionVariable = charSequenceLength(_this__u8e3s4) - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (predicate(new Char_0(charSequenceGet(_this__u8e3s4, index)))) {
          return index;
        }
      }
       while (0 <= inductionVariable);
    return -1;
  }
  function getOrElse(_this__u8e3s4, index, defaultValue) {
    return (index >= 0 ? index <= get_lastIndex_2(_this__u8e3s4) : false) ? charSequenceGet(_this__u8e3s4, index) : defaultValue(index).n1_1;
  }
  function reversed_0(_this__u8e3s4) {
    return StringBuilder_init_$Create$_0(_this__u8e3s4).p1();
  }
  function drop(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.drop.<anonymous>' call
      tmp$ret$0 = 'Requested character count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    var tmp$ret$2;
    // Inline function 'kotlin.text.substring' call
    var tmp1_substring = coerceAtMost(n, _this__u8e3s4.length);
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = _this__u8e3s4;
    tmp$ret$2 = tmp$ret$1.substring(tmp1_substring);
    return tmp$ret$2;
  }
  function copyOfRange(_this__u8e3s4, fromIndex, toIndex) {
    return _ULongArray___init__impl__twm1l3(copyOfRange_1(_ULongArray___get_storage__impl__28e64j(_this__u8e3s4), fromIndex, toIndex));
  }
  function copyInto(_this__u8e3s4, destination, destinationOffset, startIndex, endIndex) {
    var tmp$ret$4;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = _ULongArray___get_storage__impl__28e64j(_this__u8e3s4);
    var tmp1_copyInto = _ULongArray___get_storage__impl__28e64j(destination);
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyInto;
    tmp$ret$1 = tmp$ret$0;
    var tmp = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = tmp1_copyInto;
    tmp$ret$3 = tmp$ret$2;
    arrayCopy(tmp, tmp$ret$3, destinationOffset, startIndex, endIndex);
    tmp$ret$4 = tmp1_copyInto;
    return destination;
  }
  function forEachIndexed_0(_this__u8e3s4, action) {
    var index = 0;
    var tmp0_iterator = ULongArray__iterator_impl_cq4d2h(_this__u8e3s4);
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h().q1_1;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      action(tmp1, new ULong(item));
    }
  }
  function slice_0(_this__u8e3s4, indices) {
    if (indices.p()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.listOf' call
      tmp$ret$0 = emptyList();
      return tmp$ret$0;
    }
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyOfRange' call
    var tmp0_copyOfRange = indices.q();
    var tmp1_copyOfRange = indices.r() + 1 | 0;
    tmp$ret$1 = _ULongArray___init__impl__twm1l3(copyOfRange_1(_ULongArray___get_storage__impl__28e64j(_this__u8e3s4), tmp0_copyOfRange, tmp1_copyOfRange));
    return asList_0(tmp$ret$1);
  }
  function copyOf(_this__u8e3s4) {
    return _ULongArray___init__impl__twm1l3(copyOf_1(_ULongArray___get_storage__impl__28e64j(_this__u8e3s4)));
  }
  function indexOfLast_1(_this__u8e3s4, predicate) {
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var tmp0_indexOfLast = _UIntArray___get_storage__impl__92a0v0(_this__u8e3s4);
      var inductionVariable = tmp0_indexOfLast.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$1;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          var tmp1__anonymous__uwfjfc = tmp0_indexOfLast[index];
          var tmp$ret$0;
          // Inline function 'kotlin.toUInt' call
          tmp$ret$0 = _UInt___init__impl__l7qpdl(tmp1__anonymous__uwfjfc);
          tmp$ret$1 = predicate(new UInt(tmp$ret$0));
          if (tmp$ret$1) {
            tmp$ret$2 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$2 = -1;
    }
    return tmp$ret$2;
  }
  function copyOfRange_0(_this__u8e3s4, fromIndex, toIndex) {
    return _UIntArray___init__impl__ghjpc6(copyOfRange_2(_UIntArray___get_storage__impl__92a0v0(_this__u8e3s4), fromIndex, toIndex));
  }
  function filter_0(_this__u8e3s4, predicate) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = UIntArray__iterator_impl_tkdv7k(_this__u8e3s4);
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h().r1_1;
      if (predicate(new UInt(element))) {
        tmp0_filterTo.a(new UInt(element));
      }
    }
    tmp$ret$0 = tmp0_filterTo;
    return tmp$ret$0;
  }
  function filterTo_0(_this__u8e3s4, destination, predicate) {
    var tmp0_iterator = UIntArray__iterator_impl_tkdv7k(_this__u8e3s4);
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h().r1_1;
      if (predicate(new UInt(element))) {
        destination.a(new UInt(element));
      }
    }
    return destination;
  }
  function indexOf_2(_this__u8e3s4, element) {
    var tmp = _ULongArray___get_storage__impl__28e64j(_this__u8e3s4);
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(element);
    return indexOf_0(tmp, tmp$ret$0);
  }
  function toULongArray(_this__u8e3s4) {
    var result = _ULongArray___init__impl__twm1l3_0(_this__u8e3s4.i());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h().q1_1;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      ULongArray__set_impl_z19mvh(result, tmp1, element);
    }
    return result;
  }
  function KotlinNothingValueException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    KotlinNothingValueException.call($this);
    return $this;
  }
  function KotlinNothingValueException_init_$Create$() {
    var tmp = KotlinNothingValueException_init_$Init$(Object.create(KotlinNothingValueException.prototype));
    captureStack(tmp, KotlinNothingValueException_init_$Create$);
    return tmp;
  }
  function KotlinNothingValueException() {
    captureStack(this, KotlinNothingValueException);
  }
  KotlinNothingValueException.$metadata$ = classMeta('KotlinNothingValueException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function get_code(_this__u8e3s4) {
    return Char__toInt_impl_vasixd(_this__u8e3s4);
  }
  function Char(code) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    Companion_getInstance_8();
    var tmp0__get_code__88qj9g = _Char___init__impl__6a9atx(0);
    tmp$ret$0 = Char__toInt_impl_vasixd(tmp0__get_code__88qj9g);
    if (code < tmp$ret$0) {
      tmp = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.code' call
      Companion_getInstance_8();
      var tmp1__get_code__adl84j = _Char___init__impl__6a9atx(65535);
      tmp$ret$1 = Char__toInt_impl_vasixd(tmp1__get_code__adl84j);
      tmp = code > tmp$ret$1;
    }
    if (tmp) {
      throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + code);
    }
    return numberToChar(code);
  }
  function AbstractCollection$toString$lambda(this$0) {
    return function (it) {
      return it === this$0 ? '(this Collection)' : toString_2(it);
    };
  }
  function AbstractCollection() {
  }
  AbstractCollection.prototype.u1 = function (element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(this, Collection)) {
        tmp = this.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this.f();
      while (tmp0_iterator.g()) {
        var element_0 = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractCollection.contains.<anonymous>' call
        tmp$ret$1 = equals_0(element_0, element);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  AbstractCollection.prototype.v1 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractCollection.containsAll.<anonymous>' call
        tmp$ret$1 = this.u1(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  AbstractCollection.prototype.p = function () {
    return this.i() === 0;
  };
  AbstractCollection.prototype.toString = function () {
    return joinToString$default_0(this, ', ', '[', ']', 0, null, AbstractCollection$toString$lambda(this), 24, null);
  };
  AbstractCollection.prototype.toArray = function () {
    return copyToArrayImpl(this);
  };
  AbstractCollection.$metadata$ = classMeta('AbstractCollection', [Collection]);
  function tryToComputeNext($this) {
    $this.w1_1 = State_Failed_getInstance();
    $this.y1();
    return $this.w1_1.equals(State_Ready_getInstance());
  }
  function AbstractIterator() {
    this.w1_1 = State_NotReady_getInstance();
    this.x1_1 = null;
  }
  AbstractIterator.prototype.g = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = !this.w1_1.equals(State_Failed_getInstance());
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    var tmp0_subject = this.w1_1;
    var tmp0 = tmp0_subject.a2_1;
    switch (tmp0) {
      case 2:
        return false;
      case 0:
        return true;
      default:
        return tryToComputeNext(this);
    }
  };
  AbstractIterator.prototype.h = function () {
    if (!this.g())
      throw NoSuchElementException_init_$Create$();
    this.w1_1 = State_NotReady_getInstance();
    var tmp = this.x1_1;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  AbstractIterator.prototype.b2 = function (value) {
    this.x1_1 = value;
    this.w1_1 = State_Ready_getInstance();
  };
  AbstractIterator.prototype.c2 = function () {
    this.w1_1 = State_Done_getInstance();
  };
  AbstractIterator.$metadata$ = classMeta('AbstractIterator', [Iterator_1]);
  var State_Ready_instance;
  var State_NotReady_instance;
  var State_Done_instance;
  var State_Failed_instance;
  var State_entriesInitialized;
  function State_initEntries() {
    if (State_entriesInitialized)
      return Unit_getInstance();
    State_entriesInitialized = true;
    State_Ready_instance = new State('Ready', 0);
    State_NotReady_instance = new State('NotReady', 1);
    State_Done_instance = new State('Done', 2);
    State_Failed_instance = new State('Failed', 3);
  }
  function State(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  State.$metadata$ = classMeta('State', undefined, undefined, undefined, undefined, Enum.prototype);
  function State_Ready_getInstance() {
    State_initEntries();
    return State_Ready_instance;
  }
  function State_NotReady_getInstance() {
    State_initEntries();
    return State_NotReady_instance;
  }
  function State_Done_getInstance() {
    State_initEntries();
    return State_Done_instance;
  }
  function State_Failed_getInstance() {
    State_initEntries();
    return State_Failed_instance;
  }
  function SubList(list, fromIndex, toIndex) {
    AbstractList.call(this);
    this.e2_1 = list;
    this.f2_1 = fromIndex;
    this.g2_1 = 0;
    Companion_getInstance().h2(this.f2_1, toIndex, this.e2_1.i());
    this.g2_1 = toIndex - this.f2_1 | 0;
  }
  SubList.prototype.l = function (index) {
    Companion_getInstance().i2(index, this.g2_1);
    return this.e2_1.l(this.f2_1 + index | 0);
  };
  SubList.prototype.i = function () {
    return this.g2_1;
  };
  SubList.$metadata$ = classMeta('SubList', [RandomAccess], undefined, undefined, undefined, AbstractList.prototype);
  function IteratorImpl($outer) {
    this.l2_1 = $outer;
    this.k2_1 = 0;
  }
  IteratorImpl.prototype.g = function () {
    return this.k2_1 < this.l2_1.i();
  };
  IteratorImpl.prototype.h = function () {
    if (!this.g())
      throw NoSuchElementException_init_$Create$();
    var tmp0_this = this;
    var tmp1 = tmp0_this.k2_1;
    tmp0_this.k2_1 = tmp1 + 1 | 0;
    return this.l2_1.l(tmp1);
  };
  IteratorImpl.$metadata$ = classMeta('IteratorImpl', [Iterator_1]);
  function ListIteratorImpl($outer, index) {
    this.o2_1 = $outer;
    IteratorImpl.call(this, $outer);
    Companion_getInstance().p2(index, this.o2_1.i());
    this.k2_1 = index;
  }
  ListIteratorImpl.$metadata$ = classMeta('ListIteratorImpl', [ListIterator], undefined, undefined, undefined, IteratorImpl.prototype);
  function Companion() {
    Companion_instance = this;
  }
  Companion.prototype.i2 = function (index, size) {
    if (index < 0 ? true : index >= size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  Companion.prototype.p2 = function (index, size) {
    if (index < 0 ? true : index > size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  Companion.prototype.h2 = function (fromIndex, toIndex, size) {
    if (fromIndex < 0 ? true : toIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
    }
    if (fromIndex > toIndex) {
      throw IllegalArgumentException_init_$Create$_0('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
    }
  };
  Companion.prototype.q2 = function (startIndex, endIndex, size) {
    if (startIndex < 0 ? true : endIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$('startIndex: ' + startIndex + ', endIndex: ' + endIndex + ', size: ' + size);
    }
    if (startIndex > endIndex) {
      throw IllegalArgumentException_init_$Create$_0('startIndex: ' + startIndex + ' > endIndex: ' + endIndex);
    }
  };
  Companion.prototype.r2 = function (c) {
    var hashCode = 1;
    var tmp0_iterator = c.f();
    while (tmp0_iterator.g()) {
      var e = tmp0_iterator.h();
      var tmp = imul(31, hashCode);
      var tmp1_safe_receiver = e;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : hashCode_0(tmp1_safe_receiver);
      hashCode = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode;
  };
  Companion.prototype.s2 = function (c, other) {
    if (!(c.i() === other.i()))
      return false;
    var otherIterator = other.f();
    var tmp0_iterator = c.f();
    while (tmp0_iterator.g()) {
      var elem = tmp0_iterator.h();
      var elemOther = otherIterator.h();
      if (!equals_0(elem, elemOther)) {
        return false;
      }
    }
    return true;
  };
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function AbstractList() {
    Companion_getInstance();
    AbstractCollection.call(this);
  }
  AbstractList.prototype.f = function () {
    return new IteratorImpl(this);
  };
  AbstractList.prototype.j2 = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var tmp0_iterator = this.f();
      while (tmp0_iterator.g()) {
        var item = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'kotlin.collections.AbstractList.indexOf.<anonymous>' call
        tmp$ret$0 = equals_0(item, element);
        if (tmp$ret$0) {
          tmp$ret$1 = index;
          break $l$block;
        }
        var tmp1 = index;
        index = tmp1 + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  AbstractList.prototype.k = function (index) {
    return new ListIteratorImpl(this, index);
  };
  AbstractList.prototype.s = function (fromIndex, toIndex) {
    return new SubList(this, fromIndex, toIndex);
  };
  AbstractList.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List_0) : false))
      return false;
    return Companion_getInstance().s2(this, other);
  };
  AbstractList.prototype.hashCode = function () {
    return Companion_getInstance().r2(this);
  };
  AbstractList.$metadata$ = classMeta('AbstractList', [List_0], undefined, undefined, undefined, AbstractCollection.prototype);
  function AbstractMap$keys$1$iterator$1($entryIterator) {
    this.t2_1 = $entryIterator;
  }
  AbstractMap$keys$1$iterator$1.prototype.g = function () {
    return this.t2_1.g();
  };
  AbstractMap$keys$1$iterator$1.prototype.h = function () {
    return this.t2_1.h().e1();
  };
  AbstractMap$keys$1$iterator$1.$metadata$ = classMeta(undefined, [Iterator_1]);
  function AbstractMap$values$1$iterator$1($entryIterator) {
    this.u2_1 = $entryIterator;
  }
  AbstractMap$values$1$iterator$1.prototype.g = function () {
    return this.u2_1.g();
  };
  AbstractMap$values$1$iterator$1.prototype.h = function () {
    return this.u2_1.h().f1();
  };
  AbstractMap$values$1$iterator$1.$metadata$ = classMeta(undefined, [Iterator_1]);
  function toString($this, o) {
    return o === $this ? '(this Map)' : toString_2(o);
  }
  function implFindEntry($this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_firstOrNull = $this.d1();
      var tmp0_iterator = tmp0_firstOrNull.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$0;
        // Inline function 'kotlin.collections.AbstractMap.implFindEntry.<anonymous>' call
        tmp$ret$0 = equals_0(element.e1(), key);
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function Companion_0() {
    Companion_instance_0 = this;
  }
  Companion_0.prototype.v2 = function (e) {
    var tmp$ret$1;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Companion.entryHashCode.<anonymous>' call
    var tmp2_safe_receiver = e.e1();
    var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : hashCode_0(tmp2_safe_receiver);
    var tmp = tmp3_elvis_lhs == null ? 0 : tmp3_elvis_lhs;
    var tmp0_safe_receiver = e.f1();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp ^ (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_0.prototype.w2 = function (e) {
    var tmp$ret$1;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Companion.entryToString.<anonymous>' call
    tmp$ret$0 = toString_2(e.e1()) + '=' + toString_2(e.f1());
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_0.prototype.x2 = function (e, other) {
    if (!(!(other == null) ? isInterface(other, Entry) : false))
      return false;
    return equals_0(e.e1(), other.e1()) ? equals_0(e.f1(), other.f1()) : false;
  };
  Companion_0.$metadata$ = objectMeta('Companion');
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function AbstractMap$keys$1(this$0) {
    this.y2_1 = this$0;
    AbstractSet.call(this);
  }
  AbstractMap$keys$1.prototype.z2 = function (element) {
    return this.y2_1.c3(element);
  };
  AbstractMap$keys$1.prototype.u1 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.z2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMap$keys$1.prototype.f = function () {
    var entryIterator = this.y2_1.d1().f();
    return new AbstractMap$keys$1$iterator$1(entryIterator);
  };
  AbstractMap$keys$1.prototype.i = function () {
    return this.y2_1.i();
  };
  AbstractMap$keys$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractSet.prototype);
  function AbstractMap$toString$lambda(this$0) {
    return function (it) {
      return this$0.d3(it);
    };
  }
  function AbstractMap$values$1(this$0) {
    this.e3_1 = this$0;
    AbstractCollection.call(this);
  }
  AbstractMap$values$1.prototype.f3 = function (element) {
    return this.e3_1.g3(element);
  };
  AbstractMap$values$1.prototype.u1 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.f3((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMap$values$1.prototype.f = function () {
    var entryIterator = this.e3_1.d1().f();
    return new AbstractMap$values$1$iterator$1(entryIterator);
  };
  AbstractMap$values$1.prototype.i = function () {
    return this.e3_1.i();
  };
  AbstractMap$values$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractCollection.prototype);
  function AbstractMap() {
    Companion_getInstance_0();
    this.a3_1 = null;
    this.b3_1 = null;
  }
  AbstractMap.prototype.c3 = function (key) {
    return !(implFindEntry(this, key) == null);
  };
  AbstractMap.prototype.g3 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.d1();
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractMap.containsValue.<anonymous>' call
        tmp$ret$1 = equals_0(element.f1(), value);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  AbstractMap.prototype.h3 = function (entry) {
    if (!(!(entry == null) ? isInterface(entry, Entry) : false))
      return false;
    var key = entry.e1();
    var value = entry.f1();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.get' call
    tmp$ret$0 = (isInterface(this, Map) ? this : THROW_CCE()).t(key);
    var ourValue = tmp$ret$0;
    if (!equals_0(value, ourValue)) {
      return false;
    }
    var tmp;
    if (ourValue == null) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.containsKey' call
      tmp$ret$1 = (isInterface(this, Map) ? this : THROW_CCE()).c3(key);
      tmp = !tmp$ret$1;
    } else {
      tmp = false;
    }
    if (tmp) {
      return false;
    }
    return true;
  };
  AbstractMap.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Map) : false))
      return false;
    if (!(this.i() === other.i()))
      return false;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = other.d1();
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_all.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractMap.equals.<anonymous>' call
        tmp$ret$1 = this.h3(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  AbstractMap.prototype.t = function (key) {
    var tmp0_safe_receiver = implFindEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.f1();
  };
  AbstractMap.prototype.hashCode = function () {
    return hashCode_0(this.d1());
  };
  AbstractMap.prototype.p = function () {
    return this.i() === 0;
  };
  AbstractMap.prototype.i = function () {
    return this.d1().i();
  };
  AbstractMap.prototype.i3 = function () {
    if (this.a3_1 == null) {
      var tmp = this;
      tmp.a3_1 = new AbstractMap$keys$1(this);
    }
    return ensureNotNull(this.a3_1);
  };
  AbstractMap.prototype.toString = function () {
    var tmp = this.d1();
    return joinToString$default_0(tmp, ', ', '{', '}', 0, null, AbstractMap$toString$lambda(this), 24, null);
  };
  AbstractMap.prototype.d3 = function (entry) {
    return toString(this, entry.e1()) + '=' + toString(this, entry.f1());
  };
  AbstractMap.prototype.j3 = function () {
    if (this.b3_1 == null) {
      var tmp = this;
      tmp.b3_1 = new AbstractMap$values$1(this);
    }
    return ensureNotNull(this.b3_1);
  };
  AbstractMap.$metadata$ = classMeta('AbstractMap', [Map]);
  function Companion_1() {
    Companion_instance_1 = this;
  }
  Companion_1.prototype.k3 = function (c) {
    var hashCode = 0;
    var tmp0_iterator = c.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp = hashCode;
      var tmp1_safe_receiver = element;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : hashCode_0(tmp1_safe_receiver);
      hashCode = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode;
  };
  Companion_1.prototype.l3 = function (c, other) {
    if (!(c.i() === other.i()))
      return false;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.containsAll' call
    tmp$ret$0 = c.v1(other);
    return tmp$ret$0;
  };
  Companion_1.$metadata$ = objectMeta('Companion');
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function AbstractSet() {
    Companion_getInstance_1();
    AbstractCollection.call(this);
  }
  AbstractSet.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Set) : false))
      return false;
    return Companion_getInstance_1().l3(this, other);
  };
  AbstractSet.prototype.hashCode = function () {
    return Companion_getInstance_1().k3(this);
  };
  AbstractSet.$metadata$ = classMeta('AbstractSet', [Set], undefined, undefined, undefined, AbstractCollection.prototype);
  function emptyList() {
    return EmptyList_getInstance();
  }
  function isNullOrEmpty(_this__u8e3s4) {
    // Inline function 'kotlin.contracts.contract' call
    return _this__u8e3s4 == null ? true : _this__u8e3s4.p();
  }
  function listOf(elements) {
    return elements.length > 0 ? asList(elements) : emptyList();
  }
  function mutableListOf() {
    return ArrayList_init_$Create$();
  }
  function arrayListOf() {
    return ArrayList_init_$Create$();
  }
  function isNotEmpty(_this__u8e3s4) {
    return !_this__u8e3s4.p();
  }
  function get_indices_1(_this__u8e3s4) {
    return numberRangeToNumber(0, _this__u8e3s4.i() - 1 | 0);
  }
  function List(size, init) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$_0(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        list.a(init(index));
      }
       while (inductionVariable < size);
    tmp$ret$0 = list;
    return tmp$ret$0;
  }
  function listOf_0() {
    return emptyList();
  }
  function MutableList(size, init) {
    var list = ArrayList_init_$Create$_0(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        list.a(init(index));
      }
       while (inductionVariable < size);
    return list;
  }
  function EmptyList() {
    EmptyList_instance = this;
    this.m3_1 = new Long(-1478467534, -1720727600);
  }
  EmptyList.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, List_0) : false) {
      tmp = other.p();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptyList.prototype.hashCode = function () {
    return 1;
  };
  EmptyList.prototype.toString = function () {
    return '[]';
  };
  EmptyList.prototype.i = function () {
    return 0;
  };
  EmptyList.prototype.p = function () {
    return true;
  };
  EmptyList.prototype.n3 = function (element) {
    return false;
  };
  EmptyList.prototype.u1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.n3(tmp);
  };
  EmptyList.prototype.o3 = function (elements) {
    return elements.p();
  };
  EmptyList.prototype.v1 = function (elements) {
    return this.o3(elements);
  };
  EmptyList.prototype.l = function (index) {
    throw IndexOutOfBoundsException_init_$Create$("Empty list doesn't contain element at index " + index + '.');
  };
  EmptyList.prototype.p3 = function (element) {
    return -1;
  };
  EmptyList.prototype.j2 = function (element) {
    if (true)
      return -1;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.p3(tmp);
  };
  EmptyList.prototype.f = function () {
    return EmptyIterator_getInstance();
  };
  EmptyList.prototype.k = function (index) {
    if (!(index === 0))
      throw IndexOutOfBoundsException_init_$Create$('Index: ' + index);
    return EmptyIterator_getInstance();
  };
  EmptyList.prototype.s = function (fromIndex, toIndex) {
    if (fromIndex === 0 ? toIndex === 0 : false)
      return this;
    throw IndexOutOfBoundsException_init_$Create$('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex);
  };
  EmptyList.$metadata$ = objectMeta('EmptyList', [List_0, Serializable, RandomAccess]);
  var EmptyList_instance;
  function EmptyList_getInstance() {
    if (EmptyList_instance == null)
      new EmptyList();
    return EmptyList_instance;
  }
  function EmptyIterator() {
    EmptyIterator_instance = this;
  }
  EmptyIterator.prototype.g = function () {
    return false;
  };
  EmptyIterator.prototype.h = function () {
    throw NoSuchElementException_init_$Create$();
  };
  EmptyIterator.$metadata$ = objectMeta('EmptyIterator', [ListIterator]);
  var EmptyIterator_instance;
  function EmptyIterator_getInstance() {
    if (EmptyIterator_instance == null)
      new EmptyIterator();
    return EmptyIterator_instance;
  }
  function get_lastIndex_1(_this__u8e3s4) {
    return _this__u8e3s4.i() - 1 | 0;
  }
  function optimizeReadOnlyList(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.i();
    switch (tmp0_subject) {
      case 0:
        return emptyList();
      case 1:
        return listOf_1(_this__u8e3s4.l(0));
      default:
        return _this__u8e3s4;
    }
  }
  function arrayListOf_0(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function throwIndexOverflow() {
    throw ArithmeticException_init_$Create$('Index overflow has happened.');
  }
  function throwCountOverflow() {
    throw ArithmeticException_init_$Create$('Count overflow has happened.');
  }
  function ArrayAsCollection(values, isVarargs) {
    this.q3_1 = values;
    this.r3_1 = isVarargs;
  }
  ArrayAsCollection.prototype.i = function () {
    return this.q3_1.length;
  };
  ArrayAsCollection.prototype.p = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isEmpty' call
    var tmp0_isEmpty = this.q3_1;
    tmp$ret$0 = tmp0_isEmpty.length === 0;
    return tmp$ret$0;
  };
  ArrayAsCollection.prototype.s3 = function (element) {
    return contains_1(this.q3_1, element);
  };
  ArrayAsCollection.prototype.t3 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.ArrayAsCollection.containsAll.<anonymous>' call
        tmp$ret$1 = this.s3(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  ArrayAsCollection.prototype.v1 = function (elements) {
    return this.t3(elements);
  };
  ArrayAsCollection.prototype.f = function () {
    return arrayIterator(this.q3_1);
  };
  ArrayAsCollection.$metadata$ = classMeta('ArrayAsCollection', [Collection]);
  function containsAll(_this__u8e3s4, elements) {
    return _this__u8e3s4.v1(elements);
  }
  function orEmpty(_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4;
    return tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
  }
  function Grouping() {
  }
  Grouping.$metadata$ = interfaceMeta('Grouping');
  function fold_0(_this__u8e3s4, initialValue, operation) {
    var tmp$ret$4;
    // Inline function 'kotlin.collections.aggregate' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.aggregateTo' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var tmp2_aggregateTo = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = _this__u8e3s4.a1();
    tmp$ret$1 = tmp0_iterator;
    var tmp0_iterator_0 = tmp$ret$1;
    while (tmp0_iterator_0.g()) {
      var e = tmp0_iterator_0.h();
      var key = _this__u8e3s4.b1(e);
      var accumulator = tmp2_aggregateTo.t(key);
      // Inline function 'kotlin.collections.set' call
      var tmp$ret$2;
      // Inline function 'kotlin.collections.fold.<anonymous>' call
      var tmp3__anonymous__ufb84q = accumulator == null ? !tmp2_aggregateTo.c3(key) : false;
      var tmp;
      if (tmp3__anonymous__ufb84q) {
        tmp = initialValue;
      } else {
        tmp = (accumulator == null ? true : isObject(accumulator)) ? accumulator : THROW_CCE();
      }
      tmp$ret$2 = operation(tmp, e);
      var tmp1_set = tmp$ret$2;
      tmp2_aggregateTo.u(key, tmp1_set);
    }
    tmp$ret$3 = tmp2_aggregateTo;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function aggregate(_this__u8e3s4, operation) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.aggregateTo' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var tmp2_aggregateTo = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = _this__u8e3s4.a1();
    tmp$ret$1 = tmp0_iterator;
    var tmp0_iterator_0 = tmp$ret$1;
    while (tmp0_iterator_0.g()) {
      var e = tmp0_iterator_0.h();
      var key = _this__u8e3s4.b1(e);
      var accumulator = tmp2_aggregateTo.t(key);
      // Inline function 'kotlin.collections.set' call
      var tmp1_set = operation(key, accumulator, e, accumulator == null ? !tmp2_aggregateTo.c3(key) : false);
      tmp2_aggregateTo.u(key, tmp1_set);
    }
    tmp$ret$2 = tmp2_aggregateTo;
    return tmp$ret$2;
  }
  function aggregateTo(_this__u8e3s4, destination, operation) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = _this__u8e3s4.a1();
    tmp$ret$0 = tmp0_iterator;
    var tmp0_iterator_0 = tmp$ret$0;
    while (tmp0_iterator_0.g()) {
      var e = tmp0_iterator_0.h();
      var key = _this__u8e3s4.b1(e);
      var accumulator = destination.t(key);
      // Inline function 'kotlin.collections.set' call
      var tmp1_set = operation(key, accumulator, e, accumulator == null ? !destination.c3(key) : false);
      destination.u(key, tmp1_set);
    }
    return destination;
  }
  function IndexedValue(index, value) {
    this.u3_1 = index;
    this.v3_1 = value;
  }
  IndexedValue.prototype.w3 = function () {
    return this.u3_1;
  };
  IndexedValue.prototype.x3 = function () {
    return this.v3_1;
  };
  IndexedValue.prototype.toString = function () {
    return 'IndexedValue(index=' + this.u3_1 + ', value=' + this.v3_1 + ')';
  };
  IndexedValue.prototype.hashCode = function () {
    var result = this.u3_1;
    result = imul(result, 31) + (this.v3_1 == null ? 0 : hashCode_0(this.v3_1)) | 0;
    return result;
  };
  IndexedValue.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof IndexedValue))
      return false;
    var tmp0_other_with_cast = other instanceof IndexedValue ? other : THROW_CCE();
    if (!(this.u3_1 === tmp0_other_with_cast.u3_1))
      return false;
    if (!equals_0(this.v3_1, tmp0_other_with_cast.v3_1))
      return false;
    return true;
  };
  IndexedValue.$metadata$ = classMeta('IndexedValue');
  function Iterable(iterator) {
    return new _no_name_provided__qut3iv_2(iterator);
  }
  function flatten(_this__u8e3s4) {
    var result = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      addAll(result, element);
    }
    return result;
  }
  function IndexingIterable(iteratorFactory) {
    this.y3_1 = iteratorFactory;
  }
  IndexingIterable.prototype.f = function () {
    return new IndexingIterator(this.y3_1());
  };
  IndexingIterable.$metadata$ = classMeta('IndexingIterable', [Iterable_0]);
  function collectionSizeOrDefault(_this__u8e3s4, default_0) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.i();
    } else {
      tmp = default_0;
    }
    return tmp;
  }
  function _no_name_provided__qut3iv_2($iterator) {
    this.z3_1 = $iterator;
  }
  _no_name_provided__qut3iv_2.prototype.f = function () {
    return this.z3_1();
  };
  _no_name_provided__qut3iv_2.$metadata$ = classMeta(undefined, [Iterable_0]);
  function iterator(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function IndexingIterator(iterator) {
    this.a4_1 = iterator;
    this.b4_1 = 0;
  }
  IndexingIterator.prototype.g = function () {
    return this.a4_1.g();
  };
  IndexingIterator.prototype.h = function () {
    var tmp0_this = this;
    var tmp1 = tmp0_this.b4_1;
    tmp0_this.b4_1 = tmp1 + 1 | 0;
    return new IndexedValue(checkIndexOverflow(tmp1), this.a4_1.h());
  };
  IndexingIterator.$metadata$ = classMeta('IndexingIterator', [Iterator_1]);
  function getOrImplicitDefault(_this__u8e3s4, key) {
    if (isInterface(_this__u8e3s4, MapWithDefault))
      return _this__u8e3s4.c4(key);
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.getOrElseNullable' call
      var value = _this__u8e3s4.t(key);
      if (value == null ? !_this__u8e3s4.c3(key) : false) {
        throw NoSuchElementException_init_$Create$_0('Key ' + key + ' is missing in the map.');
      } else {
        tmp$ret$0 = (value == null ? true : isObject(value)) ? value : THROW_CCE();
        break $l$block;
      }
    }
    return tmp$ret$0;
  }
  function MapWithDefault() {
  }
  MapWithDefault.$metadata$ = interfaceMeta('MapWithDefault', [Map]);
  function mapOf(pairs) {
    return pairs.length > 0 ? toMap_0(pairs, LinkedHashMap_init_$Create$_1(mapCapacity(pairs.length))) : emptyMap();
  }
  function emptyMap() {
    var tmp = EmptyMap_getInstance();
    return isInterface(tmp, Map) ? tmp : THROW_CCE();
  }
  function get(_this__u8e3s4, key) {
    return (isInterface(_this__u8e3s4, Map) ? _this__u8e3s4 : THROW_CCE()).t(key);
  }
  function component1_0(_this__u8e3s4) {
    return _this__u8e3s4.e1();
  }
  function component2_0(_this__u8e3s4) {
    return _this__u8e3s4.f1();
  }
  function toMap(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp0_subject = _this__u8e3s4.i();
      var tmp;
      switch (tmp0_subject) {
        case 0:
          tmp = emptyMap();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List_0)) {
            tmp_0 = _this__u8e3s4.l(0);
          } else {
            tmp_0 = _this__u8e3s4.f().h();
          }

          tmp = mapOf_1(tmp_0);
          break;
        default:
          tmp = toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$_1(mapCapacity(_this__u8e3s4.i())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyMap(toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$()));
  }
  function mutableMapOf() {
    return LinkedHashMap_init_$Create$();
  }
  function getOrPut(_this__u8e3s4, key, defaultValue) {
    var value = _this__u8e3s4.t(key);
    var tmp;
    if (value == null) {
      var answer = defaultValue();
      _this__u8e3s4.u(key, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  }
  function set(_this__u8e3s4, key, value) {
    _this__u8e3s4.u(key, value);
  }
  function toMutableMap(_this__u8e3s4) {
    return LinkedHashMap_init_$Create$_2(_this__u8e3s4);
  }
  function iterator_0(_this__u8e3s4) {
    return _this__u8e3s4.d1().f();
  }
  function mapValues(_this__u8e3s4, transform) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapValuesTo' call
    var tmp1_mapValuesTo = LinkedHashMap_init_$Create$_1(mapCapacity(_this__u8e3s4.i()));
    var tmp$ret$1;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = _this__u8e3s4.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      tmp1_mapValuesTo.u(tmp$ret$0, transform(element));
    }
    tmp$ret$1 = tmp1_mapValuesTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function getOrElse_0(_this__u8e3s4, key, defaultValue) {
    var tmp0_elvis_lhs = _this__u8e3s4.t(key);
    return tmp0_elvis_lhs == null ? defaultValue() : tmp0_elvis_lhs;
  }
  function mapKeys(_this__u8e3s4, transform) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapKeysTo' call
    var tmp1_mapKeysTo = LinkedHashMap_init_$Create$_1(mapCapacity(_this__u8e3s4.i()));
    var tmp$ret$1;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = _this__u8e3s4.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp = transform(element);
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
      tmp$ret$0 = element.f1();
      tmp1_mapKeysTo.u(tmp, tmp$ret$0);
    }
    tmp$ret$1 = tmp1_mapKeysTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function filterKeys(_this__u8e3s4, predicate) {
    var result = LinkedHashMap_init_$Create$();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var entry = tmp0_iterator.h();
      if (predicate(entry.e1())) {
        result.u(entry.e1(), entry.f1());
      }
    }
    return result;
  }
  function filterValues(_this__u8e3s4, predicate) {
    var result = LinkedHashMap_init_$Create$();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var entry = tmp0_iterator.h();
      if (predicate(entry.f1())) {
        result.u(entry.e1(), entry.f1());
      }
    }
    return result;
  }
  function filter_1(_this__u8e3s4, predicate) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = LinkedHashMap_init_$Create$();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element)) {
        tmp0_filterTo.u(element.e1(), element.f1());
      }
    }
    tmp$ret$1 = tmp0_filterTo;
    return tmp$ret$1;
  }
  function iterator_1(_this__u8e3s4) {
    return _this__u8e3s4.d1().f();
  }
  function mapOf_0() {
    return emptyMap();
  }
  function plus_0(_this__u8e3s4, map) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = LinkedHashMap_init_$Create$_2(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.plus.<anonymous>' call
    tmp0_apply.r4(map);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0;
  }
  function isNotEmpty_0(_this__u8e3s4) {
    return !_this__u8e3s4.p();
  }
  function toMap_0(_this__u8e3s4, destination) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll(destination, _this__u8e3s4);
    tmp$ret$0 = destination;
    return tmp$ret$0;
  }
  function EmptyMap() {
    EmptyMap_instance = this;
    this.s4_1 = new Long(-888910638, 1920087921);
  }
  EmptyMap.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Map) : false) {
      tmp = other.p();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptyMap.prototype.hashCode = function () {
    return 0;
  };
  EmptyMap.prototype.toString = function () {
    return '{}';
  };
  EmptyMap.prototype.i = function () {
    return 0;
  };
  EmptyMap.prototype.p = function () {
    return true;
  };
  EmptyMap.prototype.t4 = function (key) {
    return false;
  };
  EmptyMap.prototype.c3 = function (key) {
    if (!(key == null ? true : isObject(key)))
      return false;
    return this.t4((key == null ? true : isObject(key)) ? key : THROW_CCE());
  };
  EmptyMap.prototype.u4 = function (key) {
    return null;
  };
  EmptyMap.prototype.t = function (key) {
    if (!(key == null ? true : isObject(key)))
      return null;
    return this.u4((key == null ? true : isObject(key)) ? key : THROW_CCE());
  };
  EmptyMap.prototype.d1 = function () {
    return EmptySet_getInstance();
  };
  EmptyMap.prototype.i3 = function () {
    return EmptySet_getInstance();
  };
  EmptyMap.prototype.j3 = function () {
    return EmptyList_getInstance();
  };
  EmptyMap.$metadata$ = objectMeta('EmptyMap', [Map, Serializable]);
  var EmptyMap_instance;
  function EmptyMap_getInstance() {
    if (EmptyMap_instance == null)
      new EmptyMap();
    return EmptyMap_instance;
  }
  function toMap_1(_this__u8e3s4, destination) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll_0(destination, _this__u8e3s4);
    tmp$ret$0 = destination;
    return tmp$ret$0;
  }
  function optimizeReadOnlyMap(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.i();
    var tmp;
    switch (tmp0_subject) {
      case 0:
        tmp = emptyMap();
        break;
      case 1:
        var tmp$ret$0;
        // Inline function 'kotlin.collections.toSingletonMapOrSelf' call
        tmp$ret$0 = _this__u8e3s4;

        tmp = tmp$ret$0;
        break;
      default:
        tmp = _this__u8e3s4;
        break;
    }
    return tmp;
  }
  function mapValuesTo(_this__u8e3s4, destination, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = _this__u8e3s4.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      tmp$ret$0 = element.e1();
      destination.u(tmp$ret$0, transform(element));
    }
    tmp$ret$1 = destination;
    return tmp$ret$1;
  }
  function mapKeysTo(_this__u8e3s4, destination, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = _this__u8e3s4.d1();
    var tmp0_iterator = tmp0_associateByTo.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp = transform(element);
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mapKeysTo.<anonymous>' call
      tmp$ret$0 = element.f1();
      destination.u(tmp, tmp$ret$0);
    }
    tmp$ret$1 = destination;
    return tmp$ret$1;
  }
  function filterTo_1(_this__u8e3s4, destination, predicate) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (predicate(element)) {
        destination.u(element.e1(), element.f1());
      }
    }
    return destination;
  }
  function putAll(_this__u8e3s4, pairs) {
    var indexedObject = pairs;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var tmp1_loop_parameter = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var key = tmp1_loop_parameter.w3();
      var value = tmp1_loop_parameter.x3();
      _this__u8e3s4.u(key, value);
    }
  }
  function putAll_0(_this__u8e3s4, pairs) {
    var tmp0_iterator = pairs.f();
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var key = tmp1_loop_parameter.w3();
      var value = tmp1_loop_parameter.x3();
      _this__u8e3s4.u(key, value);
    }
  }
  function hashMapOf(pairs) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = HashMap_init_$Create$_1(mapCapacity(pairs.length));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.hashMapOf.<anonymous>' call
    putAll(tmp0_apply, pairs);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0;
  }
  function containsKey(_this__u8e3s4, key) {
    return (isInterface(_this__u8e3s4, Map) ? _this__u8e3s4 : THROW_CCE()).c3(key);
  }
  function linkedMapOf() {
    return LinkedHashMap_init_$Create$();
  }
  function contains_2(_this__u8e3s4, key) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.containsKey' call
    tmp$ret$0 = (isInterface(_this__u8e3s4, Map) ? _this__u8e3s4 : THROW_CCE()).c3(key);
    return tmp$ret$0;
  }
  function getValue(_this__u8e3s4, key) {
    return getOrImplicitDefault(_this__u8e3s4, key);
  }
  function toPair(_this__u8e3s4) {
    return new Pair(_this__u8e3s4.e1(), _this__u8e3s4.f1());
  }
  function getOrElseNullable(_this__u8e3s4, key, defaultValue) {
    var value = _this__u8e3s4.t(key);
    if (value == null ? !_this__u8e3s4.c3(key) : false) {
      return defaultValue();
    } else {
      return (value == null ? true : isObject(value)) ? value : THROW_CCE();
    }
  }
  function plusAssign(_this__u8e3s4, element) {
    _this__u8e3s4.a(element);
  }
  function addAll(_this__u8e3s4, elements) {
    var tmp0_subject = elements;
    if (isInterface(tmp0_subject, Collection))
      return _this__u8e3s4.j(elements);
    else {
      var result = false;
      var tmp1_iterator = elements.f();
      while (tmp1_iterator.g()) {
        var item = tmp1_iterator.h();
        if (_this__u8e3s4.a(item))
          result = true;
      }
      return result;
    }
  }
  function IntIterator() {
  }
  IntIterator.prototype.h = function () {
    return this.x4();
  };
  IntIterator.$metadata$ = classMeta('IntIterator', [Iterator_1]);
  function Sequence() {
  }
  Sequence.$metadata$ = interfaceMeta('Sequence');
  function Sequence_0(iterator) {
    return new _no_name_provided__qut3iv_3(iterator);
  }
  function TransformingSequence$iterator$1(this$0) {
    this.z4_1 = this$0;
    this.y4_1 = this$0.a5_1.f();
  }
  TransformingSequence$iterator$1.prototype.h = function () {
    return this.z4_1.b5_1(this.y4_1.h());
  };
  TransformingSequence$iterator$1.prototype.g = function () {
    return this.y4_1.g();
  };
  TransformingSequence$iterator$1.$metadata$ = classMeta(undefined, [Iterator_1]);
  function TransformingSequence(sequence, transformer) {
    this.a5_1 = sequence;
    this.b5_1 = transformer;
  }
  TransformingSequence.prototype.f = function () {
    return new TransformingSequence$iterator$1(this);
  };
  TransformingSequence.$metadata$ = classMeta('TransformingSequence', [Sequence]);
  function _no_name_provided__qut3iv_3($iterator) {
    this.c5_1 = $iterator;
  }
  _no_name_provided__qut3iv_3.prototype.f = function () {
    return this.c5_1();
  };
  _no_name_provided__qut3iv_3.$metadata$ = classMeta(undefined, [Sequence]);
  function emptySet() {
    return EmptySet_getInstance();
  }
  function EmptySet() {
    EmptySet_instance = this;
    this.d5_1 = new Long(1993859828, 793161749);
  }
  EmptySet.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Set) : false) {
      tmp = other.p();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptySet.prototype.hashCode = function () {
    return 0;
  };
  EmptySet.prototype.toString = function () {
    return '[]';
  };
  EmptySet.prototype.i = function () {
    return 0;
  };
  EmptySet.prototype.p = function () {
    return true;
  };
  EmptySet.prototype.n3 = function (element) {
    return false;
  };
  EmptySet.prototype.u1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.n3(tmp);
  };
  EmptySet.prototype.o3 = function (elements) {
    return elements.p();
  };
  EmptySet.prototype.v1 = function (elements) {
    return this.o3(elements);
  };
  EmptySet.prototype.f = function () {
    return EmptyIterator_getInstance();
  };
  EmptySet.$metadata$ = objectMeta('EmptySet', [Set, Serializable]);
  var EmptySet_instance;
  function EmptySet_getInstance() {
    if (EmptySet_instance == null)
      new EmptySet();
    return EmptySet_instance;
  }
  function optimizeReadOnlySet(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.i();
    switch (tmp0_subject) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4.f().h());
      default:
        return _this__u8e3s4;
    }
  }
  function hashSetOf(elements) {
    return toCollection(elements, HashSet_init_$Create$_0(mapCapacity(elements.length)));
  }
  function linkedSetOf() {
    return LinkedHashSet_init_$Create$();
  }
  function compareBy(selector) {
    var tmp = compareBy$lambda(selector);
    return new sam$kotlin_Comparator$0_0(tmp);
  }
  function naturalOrder() {
    var tmp = NaturalOrderComparator_getInstance();
    return isInterface(tmp, Comparator) ? tmp : THROW_CCE();
  }
  function compareValuesBy(a, b, selector) {
    return compareValues(selector(a), selector(b));
  }
  function NaturalOrderComparator() {
    NaturalOrderComparator_instance = this;
  }
  NaturalOrderComparator.prototype.e5 = function (a, b) {
    return compareTo_0(a, b);
  };
  NaturalOrderComparator.prototype.compare = function (a, b) {
    var tmp = (!(a == null) ? isComparable(a) : false) ? a : THROW_CCE();
    return this.e5(tmp, (!(b == null) ? isComparable(b) : false) ? b : THROW_CCE());
  };
  NaturalOrderComparator.$metadata$ = objectMeta('NaturalOrderComparator', [Comparator]);
  var NaturalOrderComparator_instance;
  function NaturalOrderComparator_getInstance() {
    if (NaturalOrderComparator_instance == null)
      new NaturalOrderComparator();
    return NaturalOrderComparator_instance;
  }
  function compareValues(a, b) {
    if (a === b)
      return 0;
    if (a == null)
      return -1;
    if (b == null)
      return 1;
    return compareTo_0((!(a == null) ? isComparable(a) : false) ? a : THROW_CCE(), b);
  }
  function compareBy_0(comparator, selector) {
    var tmp = compareBy$lambda_0(comparator, selector);
    return new sam$kotlin_Comparator$0_1(tmp);
  }
  function compareValuesBy_0(a, b, comparator, selector) {
    return comparator.compare(selector(a), selector(b));
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.f5_1 = function_0;
  }
  sam$kotlin_Comparator$0_0.prototype.x = function (a, b) {
    return this.f5_1(a, b);
  };
  sam$kotlin_Comparator$0_0.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0_0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function sam$kotlin_Comparator$0_1(function_0) {
    this.g5_1 = function_0;
  }
  sam$kotlin_Comparator$0_1.prototype.x = function (a, b) {
    return this.g5_1(a, b);
  };
  sam$kotlin_Comparator$0_1.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0_1.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function compareBy$lambda($selector) {
    return function (a, b) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      tmp$ret$0 = compareValues($selector(a), $selector(b));
      return tmp$ret$0;
    };
  }
  function compareBy$lambda_0($comparator, $selector) {
    return function (a, b) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      tmp$ret$0 = $comparator.compare($selector(a), $selector(b));
      return tmp$ret$0;
    };
  }
  function contract(builder) {
  }
  function getProgressionLastElement(start, end, step) {
    var tmp;
    if (step > 0) {
      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;
    } else if (step < 0) {
      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo(a, b, c) {
    return mod(mod(a, c) - mod(b, c) | 0, c);
  }
  function mod(a, b) {
    var mod = a % b | 0;
    return mod >= 0 ? mod : mod + b | 0;
  }
  function Companion_2() {
    Companion_instance_2 = this;
    this.g1_1 = new IntRange(1, 0);
  }
  Companion_2.$metadata$ = objectMeta('Companion');
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function IntRange(start, endInclusive) {
    Companion_getInstance_2();
    IntProgression.call(this, start, endInclusive, 1);
  }
  IntRange.prototype.q = function () {
    return this.h5_1;
  };
  IntRange.prototype.r = function () {
    return this.i5_1;
  };
  IntRange.prototype.k5 = function (value) {
    return this.h5_1 <= value ? value <= this.i5_1 : false;
  };
  IntRange.prototype.p = function () {
    return this.h5_1 > this.i5_1;
  };
  IntRange.prototype.equals = function (other) {
    var tmp;
    if (other instanceof IntRange) {
      tmp = (this.p() ? other.p() : false) ? true : this.h5_1 === other.h5_1 ? this.i5_1 === other.i5_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  IntRange.prototype.hashCode = function () {
    return this.p() ? -1 : imul(31, this.h5_1) + this.i5_1 | 0;
  };
  IntRange.prototype.toString = function () {
    return '' + this.h5_1 + '..' + this.i5_1;
  };
  IntRange.$metadata$ = classMeta('IntRange', [ClosedRange, OpenEndRange], undefined, undefined, undefined, IntProgression.prototype);
  function IntProgressionIterator(first, last, step) {
    IntIterator.call(this);
    this.m5_1 = step;
    this.n5_1 = last;
    this.o5_1 = this.m5_1 > 0 ? first <= last : first >= last;
    this.p5_1 = this.o5_1 ? first : this.n5_1;
  }
  IntProgressionIterator.prototype.g = function () {
    return this.o5_1;
  };
  IntProgressionIterator.prototype.x4 = function () {
    var value = this.p5_1;
    if (value === this.n5_1) {
      if (!this.o5_1)
        throw NoSuchElementException_init_$Create$();
      this.o5_1 = false;
    } else {
      var tmp0_this = this;
      tmp0_this.p5_1 = tmp0_this.p5_1 + this.m5_1 | 0;
    }
    return value;
  };
  IntProgressionIterator.$metadata$ = classMeta('IntProgressionIterator', undefined, undefined, undefined, undefined, IntIterator.prototype);
  function Companion_3() {
    Companion_instance_3 = this;
  }
  Companion_3.prototype.l1 = function (rangeStart, rangeEnd, step) {
    return new IntProgression(rangeStart, rangeEnd, step);
  };
  Companion_3.$metadata$ = objectMeta('Companion');
  var Companion_instance_3;
  function Companion_getInstance_3() {
    if (Companion_instance_3 == null)
      new Companion_3();
    return Companion_instance_3;
  }
  function IntProgression(start, endInclusive, step) {
    Companion_getInstance_3();
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === IntCompanionObject_getInstance().h1_1)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.h5_1 = start;
    this.i5_1 = getProgressionLastElement(start, endInclusive, step);
    this.j5_1 = step;
  }
  IntProgression.prototype.l5 = function () {
    return this.h5_1;
  };
  IntProgression.prototype.f = function () {
    return new IntProgressionIterator(this.h5_1, this.i5_1, this.j5_1);
  };
  IntProgression.prototype.p = function () {
    return this.j5_1 > 0 ? this.h5_1 > this.i5_1 : this.h5_1 < this.i5_1;
  };
  IntProgression.prototype.equals = function (other) {
    var tmp;
    if (other instanceof IntProgression) {
      tmp = (this.p() ? other.p() : false) ? true : (this.h5_1 === other.h5_1 ? this.i5_1 === other.i5_1 : false) ? this.j5_1 === other.j5_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  IntProgression.prototype.hashCode = function () {
    return this.p() ? -1 : imul(31, imul(31, this.h5_1) + this.i5_1 | 0) + this.j5_1 | 0;
  };
  IntProgression.prototype.toString = function () {
    return this.j5_1 > 0 ? '' + this.h5_1 + '..' + this.i5_1 + ' step ' + this.j5_1 : '' + this.h5_1 + ' downTo ' + this.i5_1 + ' step ' + (-this.j5_1 | 0);
  };
  IntProgression.$metadata$ = classMeta('IntProgression', [Iterable_0]);
  function ClosedRange() {
  }
  ClosedRange.$metadata$ = interfaceMeta('ClosedRange');
  function OpenEndRange() {
  }
  OpenEndRange.$metadata$ = interfaceMeta('OpenEndRange');
  function KClassifier() {
  }
  KClassifier.$metadata$ = interfaceMeta('KClassifier');
  function appendElement(_this__u8e3s4, element, transform) {
    if (!(transform == null)) {
      _this__u8e3s4.b(transform(element));
    } else {
      if (element == null ? true : isCharSequence(element)) {
        _this__u8e3s4.b(element);
      } else {
        if (element instanceof Char_0) {
          _this__u8e3s4.q5(element.n1_1);
        } else {
          _this__u8e3s4.b(toString_2(element));
        }
      }
    }
  }
  function equals(_this__u8e3s4, other, ignoreCase) {
    if (equals_0(new Char_0(_this__u8e3s4), new Char_0(other)))
      return true;
    if (!ignoreCase)
      return false;
    var thisUpper = uppercaseChar(_this__u8e3s4);
    var otherUpper = uppercaseChar(other);
    var tmp;
    if (equals_0(new Char_0(thisUpper), new Char_0(otherUpper))) {
      tmp = true;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.text.lowercaseChar' call
      var tmp$ret$2;
      // Inline function 'kotlin.text.lowercase' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = toString_1(thisUpper);
      tmp$ret$0 = tmp0_asDynamic;
      var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
      tmp$ret$1 = tmp1_unsafeCast;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = charSequenceGet(tmp$ret$2, 0);
      var tmp_0 = new Char_0(tmp$ret$3);
      var tmp$ret$7;
      // Inline function 'kotlin.text.lowercaseChar' call
      var tmp$ret$6;
      // Inline function 'kotlin.text.lowercase' call
      var tmp$ret$5;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$4;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp2_asDynamic = toString_1(otherUpper);
      tmp$ret$4 = tmp2_asDynamic;
      var tmp3_unsafeCast = tmp$ret$4.toLowerCase();
      tmp$ret$5 = tmp3_unsafeCast;
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = charSequenceGet(tmp$ret$6, 0);
      tmp = equals_0(tmp_0, new Char_0(tmp$ret$7));
    }
    return tmp;
  }
  function prependIndent(_this__u8e3s4, indent) {
    var tmp = lineSequence(_this__u8e3s4);
    var tmp_0 = map_2(tmp, prependIndent$lambda(indent));
    return joinToString$default_1(tmp_0, '\n', null, null, 0, null, null, 62, null);
  }
  function trimIndent(_this__u8e3s4) {
    return replaceIndent(_this__u8e3s4, '');
  }
  function replaceIndent(_this__u8e3s4, newIndent) {
    var lines_0 = lines(_this__u8e3s4);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filter' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = lines_0.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (isNotBlank(element)) {
        tmp0_filterTo.a(element);
      }
    }
    tmp$ret$0 = tmp0_filterTo;
    tmp$ret$1 = tmp$ret$0;
    var tmp0_map = tmp$ret$1;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator_0 = tmp0_map.f();
    while (tmp0_iterator_0.g()) {
      var item = tmp0_iterator_0.h();
      tmp0_mapTo.a(indentWidth(item));
    }
    tmp$ret$2 = tmp0_mapTo;
    tmp$ret$3 = tmp$ret$2;
    var tmp0_elvis_lhs = minOrNull(tmp$ret$3);
    var minCommonIndent = tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs;
    var tmp$ret$10;
    // Inline function 'kotlin.text.reindent' call
    var tmp1_reindent = _this__u8e3s4.length + imul(newIndent.length, lines_0.i()) | 0;
    var tmp2_reindent = getIndentFunction(newIndent);
    var lastIndex = get_lastIndex_1(lines_0);
    var tmp$ret$9;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator_1 = lines_0.f();
    while (tmp0_iterator_1.g()) {
      var item_0 = tmp0_iterator_1.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$6;
      // Inline function 'kotlin.text.reindent.<anonymous>' call
      var tmp;
      if ((tmp0__anonymous__q1qw7t === 0 ? true : tmp0__anonymous__q1qw7t === lastIndex) ? isBlank(item_0) : false) {
        tmp = null;
      } else {
        var tmp$ret$4;
        // Inline function 'kotlin.text.replaceIndent.<anonymous>' call
        tmp$ret$4 = drop(item_0, minCommonIndent);
        var tmp0_safe_receiver = tmp$ret$4;
        var tmp_0;
        if (tmp0_safe_receiver == null) {
          tmp_0 = null;
        } else {
          var tmp$ret$5;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp$ret$5 = tmp2_reindent(tmp0_safe_receiver);
          tmp_0 = tmp$ret$5;
        }
        var tmp1_elvis_lhs = tmp_0;
        tmp = tmp1_elvis_lhs == null ? item_0 : tmp1_elvis_lhs;
      }
      tmp$ret$6 = tmp;
      var tmp0_safe_receiver_0 = tmp$ret$6;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        var tmp$ret$7;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver_0);
        tmp$ret$7 = Unit_getInstance();
      }
    }
    tmp$ret$8 = tmp1_mapIndexedNotNullTo;
    tmp$ret$9 = tmp$ret$8;
    var tmp_1 = tmp$ret$9;
    var tmp_2 = StringBuilder_init_$Create$(tmp1_reindent);
    tmp$ret$10 = joinTo$default(tmp_1, tmp_2, '\n', null, null, 0, null, null, 124, null).toString();
    return tmp$ret$10;
  }
  function indentWidth(_this__u8e3s4) {
    var tmp$ret$3;
    // Inline function 'kotlin.let' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.indexOfFirst' call
      var inductionVariable = 0;
      var last = charSequenceLength(_this__u8e3s4) - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$0;
          // Inline function 'kotlin.text.indentWidth.<anonymous>' call
          var tmp0__anonymous__q1qw7t = charSequenceGet(_this__u8e3s4, index);
          tmp$ret$0 = !isWhitespace(tmp0__anonymous__q1qw7t);
          if (tmp$ret$0) {
            tmp$ret$1 = index;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = -1;
    }
    var tmp1_let = tmp$ret$1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'kotlin.text.indentWidth.<anonymous>' call
    tmp$ret$2 = tmp1_let === -1 ? _this__u8e3s4.length : tmp1_let;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function reindent(_this__u8e3s4, resultSizeEstimate, indentAddFunction, indentCutFunction) {
    var lastIndex = get_lastIndex_1(_this__u8e3s4);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$1;
      // Inline function 'kotlin.text.reindent.<anonymous>' call
      var tmp;
      if ((tmp0__anonymous__q1qw7t === 0 ? true : tmp0__anonymous__q1qw7t === lastIndex) ? isBlank(item) : false) {
        tmp = null;
      } else {
        var tmp0_safe_receiver = indentCutFunction(item);
        var tmp_0;
        if (tmp0_safe_receiver == null) {
          tmp_0 = null;
        } else {
          var tmp$ret$0;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp$ret$0 = indentAddFunction(tmp0_safe_receiver);
          tmp_0 = tmp$ret$0;
        }
        var tmp1_elvis_lhs = tmp_0;
        tmp = tmp1_elvis_lhs == null ? item : tmp1_elvis_lhs;
      }
      tmp$ret$1 = tmp;
      var tmp0_safe_receiver_0 = tmp$ret$1;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver_0);
        tmp$ret$2 = Unit_getInstance();
      }
    }
    tmp$ret$3 = tmp1_mapIndexedNotNullTo;
    tmp$ret$4 = tmp$ret$3;
    var tmp_1 = tmp$ret$4;
    var tmp_2 = StringBuilder_init_$Create$(resultSizeEstimate);
    return joinTo$default(tmp_1, tmp_2, '\n', null, null, 0, null, null, 124, null).toString();
  }
  function getIndentFunction(indent) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.text.isEmpty' call
    tmp$ret$0 = charSequenceLength(indent) === 0;
    if (tmp$ret$0) {
      tmp = getIndentFunction$lambda;
    } else {
      tmp = getIndentFunction$lambda_0(indent);
    }
    return tmp;
  }
  function prependIndent$lambda($indent) {
    return function (it) {
      var tmp;
      if (isBlank(it)) {
        tmp = it.length < $indent.length ? $indent : it;
      } else {
        tmp = $indent + it;
      }
      return tmp;
    };
  }
  function getIndentFunction$lambda(line) {
    return line;
  }
  function getIndentFunction$lambda_0($indent) {
    return function (line) {
      return $indent + line;
    };
  }
  function buildString(builderAction) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StringBuilder_init_$Create$_1();
    // Inline function 'kotlin.contracts.contract' call
    builderAction(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0.toString();
  }
  function toIntOrNull(_this__u8e3s4) {
    return toIntOrNull_0(_this__u8e3s4, 10);
  }
  function toIntOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (equals_0(new Char_0(firstChar), new Char_0(_Char___init__impl__6a9atx(45)))) {
        isNegative = true;
        limit = IntCompanionObject_getInstance().h1_1;
      } else if (equals_0(new Char_0(firstChar), new Char_0(_Char___init__impl__6a9atx(43)))) {
        isNegative = false;
        limit = -IntCompanionObject_getInstance().i1_1 | 0;
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = -IntCompanionObject_getInstance().i1_1 | 0;
    }
    var limitForMaxRadix = (-IntCompanionObject_getInstance().i1_1 | 0) / 36 | 0;
    var limitBeforeMul = limitForMaxRadix;
    var result = 0;
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result < limitBeforeMul) {
          if (limitBeforeMul === limitForMaxRadix) {
            limitBeforeMul = limit / radix | 0;
            if (result < limitBeforeMul) {
              return null;
            }
          } else {
            return null;
          }
        }
        result = imul(result, radix);
        if (result < (limit + digit | 0))
          return null;
        result = result - digit | 0;
      }
       while (inductionVariable < length);
    return isNegative ? result : -result | 0;
  }
  function toLongOrNull(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (equals_0(new Char_0(firstChar), new Char_0(_Char___init__impl__6a9atx(45)))) {
        isNegative = true;
        Companion_getInstance_10();
        limit = new Long(0, -2147483648);
      } else if (equals_0(new Char_0(firstChar), new Char_0(_Char___init__impl__6a9atx(43)))) {
        isNegative = false;
        Companion_getInstance_10();
        limit = (new Long(-1, 2147483647)).t5();
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      Companion_getInstance_10();
      limit = (new Long(-1, 2147483647)).t5();
    }
    var tmp$ret$0;
    // Inline function 'kotlin.Long.div' call
    Companion_getInstance_10();
    var tmp0_div = (new Long(-1, 2147483647)).t5();
    tmp$ret$0 = tmp0_div.u5(new Long(36, 0));
    var limitForMaxRadix = tmp$ret$0;
    var limitBeforeMul = limitForMaxRadix;
    var result = new Long(0, 0);
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result.v5(limitBeforeMul) < 0) {
          if (limitBeforeMul.equals(limitForMaxRadix)) {
            var tmp$ret$1;
            // Inline function 'kotlin.Long.div' call
            tmp$ret$1 = limit.u5(toLong_0(radix));
            limitBeforeMul = tmp$ret$1;
            if (result.v5(limitBeforeMul) < 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        var tmp$ret$2;
        // Inline function 'kotlin.Long.times' call
        var tmp1_times = result;
        tmp$ret$2 = tmp1_times.w5(toLong_0(radix));
        result = tmp$ret$2;
        var tmp = result;
        var tmp$ret$3;
        // Inline function 'kotlin.Long.plus' call
        tmp$ret$3 = limit.x5(toLong_0(digit));
        if (tmp.v5(tmp$ret$3) < 0)
          return null;
        var tmp$ret$4;
        // Inline function 'kotlin.Long.minus' call
        var tmp2_minus = result;
        tmp$ret$4 = tmp2_minus.y5(toLong_0(digit));
        result = tmp$ret$4;
      }
       while (inductionVariable < length);
    return isNegative ? result : result.t5();
  }
  function numberFormatError(input) {
    throw NumberFormatException_init_$Create$("Invalid number format: '" + input + "'");
  }
  function isEmpty_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) === 0;
  }
  function isNotBlank(_this__u8e3s4) {
    return !isBlank(_this__u8e3s4);
  }
  function contains_3(_this__u8e3s4, char, ignoreCase) {
    return indexOf$default(_this__u8e3s4, char, 0, ignoreCase, 2, null) >= 0;
  }
  function contains$default(_this__u8e3s4, char, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return contains_3(_this__u8e3s4, char, ignoreCase);
  }
  function split(_this__u8e3s4, delimiters, ignoreCase, limit) {
    if (delimiters.length === 1) {
      return split_0(_this__u8e3s4, toString_1(delimiters[0]), ignoreCase, limit);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = asIterable_0(rangesDelimitedBy$default(_this__u8e3s4, delimiters, 0, ignoreCase, limit, 2, null));
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'kotlin.text.split.<anonymous>' call
      tmp$ret$0 = substring_1(_this__u8e3s4, item);
      tmp0_mapTo.a(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function split$default(_this__u8e3s4, delimiters, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    if (!(($mask0 & 4) === 0))
      limit = 0;
    return split(_this__u8e3s4, delimiters, ignoreCase, limit);
  }
  function isNotEmpty_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) > 0;
  }
  function substring(_this__u8e3s4, range) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp0_substring = range.q();
    var tmp1_substring = range.r() + 1 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0.substring(tmp0_substring, tmp1_substring);
    return tmp$ret$1;
  }
  function substring_0(_this__u8e3s4, startIndex, endIndex) {
    return toString_3(charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex));
  }
  function indexOf_3(_this__u8e3s4, char, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      var tmp$ret$0;
      // Inline function 'kotlin.charArrayOf' call
      tmp$ret$0 = charArrayOf_0([char]);
      tmp = indexOfAny(_this__u8e3s4, tmp$ret$0, startIndex, ignoreCase);
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp1_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$2;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = toString_1(char);
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = tmp1_nativeIndexOf;
      tmp$ret$2 = tmp$ret$1.indexOf(tmp0_nativeIndexOf, startIndex);
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    }
    return tmp;
  }
  function indexOf$default(_this__u8e3s4, char, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return indexOf_3(_this__u8e3s4, char, startIndex, ignoreCase);
  }
  function split_0(_this__u8e3s4, delimiter, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var currentOffset = 0;
    var nextIndex = indexOf_4(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    if (nextIndex === -1 ? true : limit === 1) {
      return listOf_1(toString_3(_this__u8e3s4));
    }
    var isLimited = limit > 0;
    var result = ArrayList_init_$Create$_0(isLimited ? coerceAtMost(limit, 10) : 10);
    $l$loop: do {
      var tmp$ret$0;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = currentOffset;
      var tmp1_substring = nextIndex;
      tmp$ret$0 = toString_3(charSequenceSubSequence(_this__u8e3s4, tmp0_substring, tmp1_substring));
      result.a(tmp$ret$0);
      currentOffset = nextIndex + delimiter.length | 0;
      if (isLimited ? result.i() === (limit - 1 | 0) : false)
        break $l$loop;
      nextIndex = indexOf_4(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    }
     while (!(nextIndex === -1));
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp2_substring = currentOffset;
    var tmp3_substring = charSequenceLength(_this__u8e3s4);
    tmp$ret$1 = toString_3(charSequenceSubSequence(_this__u8e3s4, tmp2_substring, tmp3_substring));
    result.a(tmp$ret$1);
    return result;
  }
  function substring_1(_this__u8e3s4, range) {
    return toString_3(charSequenceSubSequence(_this__u8e3s4, range.q(), range.r() + 1 | 0));
  }
  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimiters, ignoreCase));
  }
  function rangesDelimitedBy$default(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    if (!(($mask0 & 8) === 0))
      limit = 0;
    return rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit);
  }
  function indexOfAny(_this__u8e3s4, chars, startIndex, ignoreCase) {
    var tmp;
    if (!ignoreCase ? chars.length === 1 : false) {
      tmp = typeof _this__u8e3s4 === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var char = single(chars);
      var tmp$ret$2;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp1_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = toString_1(char);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp1_nativeIndexOf;
      tmp$ret$1 = tmp$ret$0.indexOf(tmp0_nativeIndexOf, startIndex);
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    }
    var inductionVariable = coerceAtLeast(startIndex, 0);
    var last = get_lastIndex_2(_this__u8e3s4);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var charAtIndex = charSequenceGet(_this__u8e3s4, index);
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.collections.any' call
          var indexedObject = chars;
          var inductionVariable_0 = 0;
          var last_0 = indexedObject.length;
          while (inductionVariable_0 < last_0) {
            var element = indexedObject[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$3;
            // Inline function 'kotlin.text.indexOfAny.<anonymous>' call
            tmp$ret$3 = equals(element, charAtIndex, ignoreCase);
            if (tmp$ret$3) {
              tmp$ret$4 = true;
              break $l$block;
            }
          }
          tmp$ret$4 = false;
        }
        if (tmp$ret$4)
          return index;
      }
       while (!(index === last));
    return -1;
  }
  function requireNonNegativeLimit(limit) {
    var tmp0_require = limit >= 0;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call
      tmp$ret$0 = 'Limit must be non-negative, but was ' + limit;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    return tmp;
  }
  function indexOf_4(_this__u8e3s4, string, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      var tmp_1 = charSequenceLength(_this__u8e3s4);
      tmp = indexOf$default_1(_this__u8e3s4, string, startIndex, tmp_1, ignoreCase, false, 16, null);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_nativeIndexOf;
      tmp$ret$1 = tmp$ret$0.indexOf(string, startIndex);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function indexOf$default_0(_this__u8e3s4, string, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return indexOf_4(_this__u8e3s4, string, startIndex, ignoreCase);
  }
  function calcNext($this) {
    if ($this.b6_1 < 0) {
      $this.z5_1 = 0;
      $this.c6_1 = null;
    } else {
      var tmp;
      var tmp_0;
      if ($this.e6_1.h6_1 > 0) {
        var tmp0_this = $this;
        tmp0_this.d6_1 = tmp0_this.d6_1 + 1 | 0;
        tmp_0 = tmp0_this.d6_1 >= $this.e6_1.h6_1;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = true;
      } else {
        tmp = $this.b6_1 > charSequenceLength($this.e6_1.f6_1);
      }
      if (tmp) {
        $this.c6_1 = numberRangeToNumber($this.a6_1, get_lastIndex_2($this.e6_1.f6_1));
        $this.b6_1 = -1;
      } else {
        var match = $this.e6_1.i6_1($this.e6_1.f6_1, $this.b6_1);
        if (match == null) {
          $this.c6_1 = numberRangeToNumber($this.a6_1, get_lastIndex_2($this.e6_1.f6_1));
          $this.b6_1 = -1;
        } else {
          var tmp1_container = match;
          var index = tmp1_container.w3();
          var length = tmp1_container.x3();
          $this.c6_1 = until($this.a6_1, index);
          $this.a6_1 = index + length | 0;
          $this.b6_1 = $this.a6_1 + (length === 0 ? 1 : 0) | 0;
        }
      }
      $this.z5_1 = 1;
    }
  }
  function DelimitedRangesSequence$iterator$1(this$0) {
    this.e6_1 = this$0;
    this.z5_1 = -1;
    this.a6_1 = coerceIn(this$0.g6_1, 0, charSequenceLength(this$0.f6_1));
    this.b6_1 = this.a6_1;
    this.c6_1 = null;
    this.d6_1 = 0;
  }
  DelimitedRangesSequence$iterator$1.prototype.h = function () {
    if (this.z5_1 === -1) {
      calcNext(this);
    }
    if (this.z5_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.c6_1;
    var result = tmp instanceof IntRange ? tmp : THROW_CCE();
    this.c6_1 = null;
    this.z5_1 = -1;
    return result;
  };
  DelimitedRangesSequence$iterator$1.prototype.g = function () {
    if (this.z5_1 === -1) {
      calcNext(this);
    }
    return this.z5_1 === 1;
  };
  DelimitedRangesSequence$iterator$1.$metadata$ = classMeta(undefined, [Iterator_1]);
  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
    this.f6_1 = input;
    this.g6_1 = startIndex;
    this.h6_1 = limit;
    this.i6_1 = getNextMatch;
  }
  DelimitedRangesSequence.prototype.f = function () {
    return new DelimitedRangesSequence$iterator$1(this);
  };
  DelimitedRangesSequence.$metadata$ = classMeta('DelimitedRangesSequence', [Sequence]);
  function get_lastIndex_2(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) - 1 | 0;
  }
  function indexOf_5(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_2(_this__u8e3s4)), coerceAtLeast(endIndex, 0));
    var tmp;
    if (typeof _this__u8e3s4 === 'string') {
      tmp = typeof other === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var inductionVariable = indices.h5_1;
      var last_0 = indices.i5_1;
      var step = indices.j5_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          if (regionMatches(other, 0, _this__u8e3s4, index, charSequenceLength(other), ignoreCase))
            return index;
        }
         while (!(index === last_0));
    } else {
      var inductionVariable_0 = indices.h5_1;
      var last_1 = indices.i5_1;
      var step_0 = indices.j5_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))
            return index_0;
        }
         while (!(index_0 === last_1));
    }
    return -1;
  }
  function indexOf$default_1(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last, $mask0, $handler) {
    if (!(($mask0 & 16) === 0))
      last = false;
    return indexOf_5(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last);
  }
  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    if (((otherOffset < 0 ? true : thisOffset < 0) ? true : thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0)) ? true : otherOffset > (charSequenceLength(other) - length | 0)) {
      return false;
    }
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))
          return false;
      }
       while (inductionVariable < length);
    return true;
  }
  function get_indices_2(_this__u8e3s4) {
    return numberRangeToNumber(0, charSequenceLength(_this__u8e3s4) - 1 | 0);
  }
  function lineSequence(_this__u8e3s4) {
    return splitToSequence$default(_this__u8e3s4, ['\r\n', '\n', '\r'], false, 0, 6, null);
  }
  function splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit) {
    var tmp = rangesDelimitedBy$default_0(_this__u8e3s4, delimiters, 0, ignoreCase, limit, 2, null);
    return map_2(tmp, splitToSequence$lambda(_this__u8e3s4));
  }
  function splitToSequence$default(_this__u8e3s4, delimiters, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    if (!(($mask0 & 4) === 0))
      limit = 0;
    return splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit);
  }
  function rangesDelimitedBy_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var delimitersList = asList(delimiters);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda_0(delimitersList, ignoreCase));
  }
  function rangesDelimitedBy$default_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    if (!(($mask0 & 8) === 0))
      limit = 0;
    return rangesDelimitedBy_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit);
  }
  function findAnyOf(_this__u8e3s4, strings, startIndex, ignoreCase, last) {
    if (!ignoreCase ? strings.i() === 1 : false) {
      var string = single_0(strings);
      var tmp;
      if (!last) {
        tmp = indexOf$default_0(_this__u8e3s4, string, startIndex, false, 4, null);
      } else {
        tmp = lastIndexOf$default(_this__u8e3s4, string, startIndex, false, 4, null);
      }
      var index = tmp;
      return index < 0 ? null : to(index, string);
    }
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), charSequenceLength(_this__u8e3s4)) : downTo(coerceAtMost(startIndex, get_lastIndex_2(_this__u8e3s4)), 0);
    if (typeof _this__u8e3s4 === 'string') {
      var inductionVariable = indices.h5_1;
      var last_0 = indices.i5_1;
      var step = indices.j5_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          var tmp$ret$1;
          $l$block: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator = strings.f();
            while (tmp0_iterator.g()) {
              var element = tmp0_iterator.h();
              var tmp$ret$0;
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              tmp$ret$0 = regionMatches(element, 0, _this__u8e3s4, index_0, element.length, ignoreCase);
              if (tmp$ret$0) {
                tmp$ret$1 = element;
                break $l$block;
              }
            }
            tmp$ret$1 = null;
          }
          var matchingString = tmp$ret$1;
          if (!(matchingString == null))
            return to(index_0, matchingString);
        }
         while (!(index_0 === last_0));
    } else {
      var inductionVariable_0 = indices.h5_1;
      var last_1 = indices.i5_1;
      var step_0 = indices.j5_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          var tmp$ret$3;
          $l$block_0: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator_0 = strings.f();
            while (tmp0_iterator_0.g()) {
              var element_0 = tmp0_iterator_0.h();
              var tmp$ret$2;
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              tmp$ret$2 = regionMatchesImpl(element_0, 0, _this__u8e3s4, index_1, element_0.length, ignoreCase);
              if (tmp$ret$2) {
                tmp$ret$3 = element_0;
                break $l$block_0;
              }
            }
            tmp$ret$3 = null;
          }
          var matchingString_0 = tmp$ret$3;
          if (!(matchingString_0 == null))
            return to(index_1, matchingString_0);
        }
         while (!(index_1 === last_1));
    }
    return null;
  }
  function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_5(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeLastIndexOf' call
      var tmp0_nativeLastIndexOf = _this__u8e3s4;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_nativeLastIndexOf;
      tmp$ret$1 = tmp$ret$0.lastIndexOf(string, startIndex);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function lastIndexOf$default(_this__u8e3s4, string, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = get_lastIndex_2(_this__u8e3s4);
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase);
  }
  function removePrefix(_this__u8e3s4, prefix) {
    if (startsWith$default(_this__u8e3s4, prefix, false, 2, null)) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = charSequenceLength(prefix);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.substring(tmp0_substring);
      return tmp$ret$1;
    }
    return _this__u8e3s4;
  }
  function startsWith(_this__u8e3s4, prefix, ignoreCase) {
    var tmp;
    var tmp_0;
    if (!ignoreCase) {
      tmp_0 = typeof _this__u8e3s4 === 'string';
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = typeof prefix === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      return startsWith$default_1(_this__u8e3s4, prefix, false, 2, null);
    } else {
      return regionMatchesImpl(_this__u8e3s4, 0, prefix, 0, charSequenceLength(prefix), ignoreCase);
    }
  }
  function startsWith$default(_this__u8e3s4, prefix, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return startsWith(_this__u8e3s4, prefix, ignoreCase);
  }
  function lines(_this__u8e3s4) {
    return toList_2(lineSequence(_this__u8e3s4));
  }
  function startsWith_0(_this__u8e3s4, prefix, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (!ignoreCase) {
      tmp_0 = typeof _this__u8e3s4 === 'string';
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = typeof prefix === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      return startsWith$default_2(_this__u8e3s4, prefix, startIndex, false, 4, null);
    } else {
      return regionMatchesImpl(_this__u8e3s4, startIndex, prefix, 0, charSequenceLength(prefix), ignoreCase);
    }
  }
  function startsWith$default_0(_this__u8e3s4, prefix, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return startsWith_0(_this__u8e3s4, prefix, startIndex, ignoreCase);
  }
  function rangesDelimitedBy$lambda($delimiters, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = indexOfAny($this$$receiver, $delimiters, currentIndex, $ignoreCase);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_let < 0 ? null : to(tmp0_let, 1);
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function splitToSequence$lambda($this_splitToSequence) {
    return function (it) {
      return substring_1($this_splitToSequence, it);
    };
  }
  function rangesDelimitedBy$lambda_0($delimitersList, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp0_safe_receiver = findAnyOf($this$$receiver, $delimitersList, currentIndex, $ignoreCase, false);
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
        tmp$ret$0 = to(tmp0_safe_receiver.v4_1, tmp0_safe_receiver.w4_1.length);
        tmp$ret$1 = tmp$ret$0;
        tmp = tmp$ret$1;
      }
      return tmp;
    };
  }
  function MatchResult() {
  }
  MatchResult.$metadata$ = interfaceMeta('MatchResult');
  function MatchGroupCollection() {
  }
  MatchGroupCollection.$metadata$ = interfaceMeta('MatchGroupCollection', [Collection]);
  function MatchNamedGroupCollection() {
  }
  MatchNamedGroupCollection.$metadata$ = interfaceMeta('MatchNamedGroupCollection', [MatchGroupCollection]);
  function hashCode(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  }
  function getValue_0(_this__u8e3s4, thisRef, property) {
    return _this__u8e3s4.f1();
  }
  function Lazy() {
  }
  Lazy.$metadata$ = interfaceMeta('Lazy');
  function UnsafeLazyImpl(initializer) {
    this.k6_1 = initializer;
    this.l6_1 = UNINITIALIZED_VALUE_getInstance();
  }
  UnsafeLazyImpl.prototype.f1 = function () {
    if (this.l6_1 === UNINITIALIZED_VALUE_getInstance()) {
      this.l6_1 = ensureNotNull(this.k6_1)();
      this.k6_1 = null;
    }
    var tmp = this.l6_1;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  UnsafeLazyImpl.prototype.m6 = function () {
    return !(this.l6_1 === UNINITIALIZED_VALUE_getInstance());
  };
  UnsafeLazyImpl.prototype.toString = function () {
    return this.m6() ? toString_2(this.f1()) : 'Lazy value not initialized yet.';
  };
  UnsafeLazyImpl.$metadata$ = classMeta('UnsafeLazyImpl', [Lazy, Serializable]);
  function UNINITIALIZED_VALUE() {
    UNINITIALIZED_VALUE_instance = this;
  }
  UNINITIALIZED_VALUE.$metadata$ = objectMeta('UNINITIALIZED_VALUE');
  var UNINITIALIZED_VALUE_instance;
  function UNINITIALIZED_VALUE_getInstance() {
    if (UNINITIALIZED_VALUE_instance == null)
      new UNINITIALIZED_VALUE();
    return UNINITIALIZED_VALUE_instance;
  }
  function error(message) {
    throw IllegalStateException_init_$Create$(toString_3(message));
  }
  function check(value) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$(toString_3(message));
    }
  }
  function check_0(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var message = lazyMessage();
      throw IllegalStateException_init_$Create$(toString_3(message));
    }
  }
  function require_0(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var message = lazyMessage();
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
  }
  function require_1(value) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
  }
  function checkNotNull(value) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.checkNotNull' call
      // Inline function 'kotlin.contracts.contract' call
      if (value == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.checkNotNull.<anonymous>' call
        tmp$ret$0 = 'Required value was null.';
        var message = tmp$ret$0;
        throw IllegalStateException_init_$Create$(toString_3(message));
      } else {
        tmp$ret$1 = value;
        break $l$block;
      }
    }
    return tmp$ret$1;
  }
  function checkNotNull_0(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (value == null) {
      var message = lazyMessage();
      throw IllegalStateException_init_$Create$(toString_3(message));
    } else {
      return value;
    }
  }
  function run(block) {
    // Inline function 'kotlin.contracts.contract' call
    return block();
  }
  function NotImplementedError(message) {
    Error_init_$Init$(message, this);
    captureStack(this, NotImplementedError);
  }
  NotImplementedError.$metadata$ = classMeta('NotImplementedError', undefined, undefined, undefined, undefined, Error_0.prototype);
  function let_0(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(_this__u8e3s4);
  }
  function takeUnless(_this__u8e3s4, predicate) {
    // Inline function 'kotlin.contracts.contract' call
    return !predicate(_this__u8e3s4) ? _this__u8e3s4 : null;
  }
  function apply(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    block(_this__u8e3s4);
    return _this__u8e3s4;
  }
  function run_0(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(_this__u8e3s4);
  }
  function also(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    block(_this__u8e3s4);
    return _this__u8e3s4;
  }
  function takeIf(_this__u8e3s4, predicate) {
    // Inline function 'kotlin.contracts.contract' call
    return predicate(_this__u8e3s4) ? _this__u8e3s4 : null;
  }
  function repeat(times, action) {
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        action(index);
      }
       while (inductionVariable < times);
  }
  function with_0(receiver, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(receiver);
  }
  function Pair(first, second) {
    this.v4_1 = first;
    this.w4_1 = second;
  }
  Pair.prototype.l5 = function () {
    return this.v4_1;
  };
  Pair.prototype.n6 = function () {
    return this.w4_1;
  };
  Pair.prototype.toString = function () {
    return '(' + this.v4_1 + ', ' + this.w4_1 + ')';
  };
  Pair.prototype.w3 = function () {
    return this.v4_1;
  };
  Pair.prototype.x3 = function () {
    return this.w4_1;
  };
  Pair.prototype.hashCode = function () {
    var result = this.v4_1 == null ? 0 : hashCode_0(this.v4_1);
    result = imul(result, 31) + (this.w4_1 == null ? 0 : hashCode_0(this.w4_1)) | 0;
    return result;
  };
  Pair.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Pair))
      return false;
    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
    if (!equals_0(this.v4_1, tmp0_other_with_cast.v4_1))
      return false;
    if (!equals_0(this.w4_1, tmp0_other_with_cast.w4_1))
      return false;
    return true;
  };
  Pair.$metadata$ = classMeta('Pair', [Serializable]);
  function to(_this__u8e3s4, that) {
    return new Pair(_this__u8e3s4, that);
  }
  function Triple(first, second, third) {
    this.o6_1 = first;
    this.p6_1 = second;
    this.q6_1 = third;
  }
  Triple.prototype.toString = function () {
    return '(' + this.o6_1 + ', ' + this.p6_1 + ', ' + this.q6_1 + ')';
  };
  Triple.prototype.w3 = function () {
    return this.o6_1;
  };
  Triple.prototype.x3 = function () {
    return this.p6_1;
  };
  Triple.prototype.r6 = function () {
    return this.q6_1;
  };
  Triple.prototype.hashCode = function () {
    var result = this.o6_1 == null ? 0 : hashCode_0(this.o6_1);
    result = imul(result, 31) + (this.p6_1 == null ? 0 : hashCode_0(this.p6_1)) | 0;
    result = imul(result, 31) + (this.q6_1 == null ? 0 : hashCode_0(this.q6_1)) | 0;
    return result;
  };
  Triple.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Triple))
      return false;
    var tmp0_other_with_cast = other instanceof Triple ? other : THROW_CCE();
    if (!equals_0(this.o6_1, tmp0_other_with_cast.o6_1))
      return false;
    if (!equals_0(this.p6_1, tmp0_other_with_cast.p6_1))
      return false;
    if (!equals_0(this.q6_1, tmp0_other_with_cast.q6_1))
      return false;
    return true;
  };
  Triple.$metadata$ = classMeta('Triple', [Serializable]);
  function _UByte___get_data__impl__jof9qr($this) {
    return $this;
  }
  function UByte__toULong_impl_jl2e5o($this) {
    return _ULong___init__impl__c78o9k(toLong_0(_UByte___get_data__impl__jof9qr($this)).s6(new Long(255, 0)));
  }
  function UByte() {
  }
  UByte.$metadata$ = classMeta('UByte', [Comparable]);
  function _UInt___init__impl__l7qpdl(data) {
    return data;
  }
  function _UInt___get_data__impl__f0vqqw($this) {
    return $this;
  }
  function Companion_4() {
    Companion_instance_4 = this;
    this.t6_1 = _UInt___init__impl__l7qpdl(0);
    this.u6_1 = _UInt___init__impl__l7qpdl(-1);
    this.v6_1 = 4;
    this.w6_1 = 32;
  }
  Companion_4.$metadata$ = objectMeta('Companion');
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function UInt__compareTo_impl_yacclj($this, other) {
    return uintCompare(_UInt___get_data__impl__f0vqqw($this), _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__compareTo_impl_yacclj_0($this, other) {
    var tmp = $this.r1_1;
    return UInt__compareTo_impl_yacclj(tmp, other instanceof UInt ? other.r1_1 : THROW_CCE());
  }
  function UInt__plus_impl_gmhu6f($this, other) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) + _UInt___get_data__impl__f0vqqw(other) | 0);
  }
  function UInt__minus_impl_c4dy1j($this, other) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) - _UInt___get_data__impl__f0vqqw(other) | 0);
  }
  function UInt__minus_impl_c4dy1j_0($this, other) {
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.minus' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw($this)).s6(new Long(-1, 0)));
    var tmp0_minus = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_minus).y5(_ULong___get_data__impl__fggpzb(other)));
    return tmp$ret$1;
  }
  function UInt__div_impl_xkbbl6($this, other) {
    return uintDivide($this, other);
  }
  function UInt__rem_impl_muzcx9($this, other) {
    return uintRemainder($this, other);
  }
  function UInt__shl_impl_o7n0a8($this, bitCount) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) << bitCount);
  }
  function UInt__shr_impl_r1wqne($this, bitCount) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) >>> bitCount | 0);
  }
  function UInt__and_impl_fv3j80($this, other) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) & _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__or_impl_nrzdg0($this, other) {
    return _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw($this) | _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__toInt_impl_93yt4d($this) {
    return _UInt___get_data__impl__f0vqqw($this);
  }
  function UInt__toLong_impl_le5rq4($this) {
    return toLong_0(_UInt___get_data__impl__f0vqqw($this)).s6(new Long(-1, 0));
  }
  function UInt__toULong_impl_8j37gv($this) {
    return _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw($this)).s6(new Long(-1, 0)));
  }
  function UInt__toString_impl_dbgl21($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toLong' call
    tmp$ret$0 = toLong_0(_UInt___get_data__impl__f0vqqw($this)).s6(new Long(-1, 0));
    return tmp$ret$0.toString();
  }
  function UInt__hashCode_impl_z2mhuw($this) {
    return $this;
  }
  function UInt__equals_impl_ffdoxg($this, other) {
    if (!(other instanceof UInt))
      return false;
    var tmp0_other_with_cast = other instanceof UInt ? other.r1_1 : THROW_CCE();
    if (!($this === tmp0_other_with_cast))
      return false;
    return true;
  }
  function UInt(data) {
    Companion_getInstance_4();
    this.r1_1 = data;
  }
  UInt.prototype.x6 = function (other) {
    return UInt__compareTo_impl_yacclj(this.r1_1, other);
  };
  UInt.prototype.y6 = function (other) {
    return UInt__compareTo_impl_yacclj_0(this, other);
  };
  UInt.prototype.toString = function () {
    return UInt__toString_impl_dbgl21(this.r1_1);
  };
  UInt.prototype.hashCode = function () {
    return UInt__hashCode_impl_z2mhuw(this.r1_1);
  };
  UInt.prototype.equals = function (other) {
    return UInt__equals_impl_ffdoxg(this.r1_1, other);
  };
  UInt.$metadata$ = classMeta('UInt', [Comparable]);
  function toUInt(_this__u8e3s4) {
    return _UInt___init__impl__l7qpdl(_this__u8e3s4.z6());
  }
  function toUInt_0(_this__u8e3s4) {
    return _UInt___init__impl__l7qpdl(_this__u8e3s4);
  }
  function _UIntArray___init__impl__ghjpc6(storage) {
    return storage;
  }
  function _UIntArray___get_storage__impl__92a0v0($this) {
    return $this;
  }
  function _UIntArray___init__impl__ghjpc6_0(size) {
    var tmp = _UIntArray___init__impl__ghjpc6(new Int32Array(size));
    return tmp;
  }
  function UIntArray__get_impl_gp5kza($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.toUInt' call
    var tmp0_toUInt = _UIntArray___get_storage__impl__92a0v0($this)[index];
    tmp$ret$0 = _UInt___init__impl__l7qpdl(tmp0_toUInt);
    return tmp$ret$0;
  }
  function UIntArray__set_impl_7f2zu2($this, index, value) {
    var tmp = _UIntArray___get_storage__impl__92a0v0($this);
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toInt' call
    tmp$ret$0 = _UInt___get_data__impl__f0vqqw(value);
    tmp[index] = tmp$ret$0;
  }
  function _UIntArray___get_size__impl__r6l8ci($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length;
  }
  function UIntArray__iterator_impl_tkdv7k($this) {
    return new Iterator(_UIntArray___get_storage__impl__92a0v0($this));
  }
  function Iterator(array) {
    this.a7_1 = array;
    this.b7_1 = 0;
  }
  Iterator.prototype.g = function () {
    return this.b7_1 < this.a7_1.length;
  };
  Iterator.prototype.c7 = function () {
    var tmp;
    if (this.b7_1 < this.a7_1.length) {
      var tmp$ret$0;
      // Inline function 'kotlin.toUInt' call
      var tmp0_this = this;
      var tmp1 = tmp0_this.b7_1;
      tmp0_this.b7_1 = tmp1 + 1 | 0;
      var tmp0_toUInt = this.a7_1[tmp1];
      tmp$ret$0 = _UInt___init__impl__l7qpdl(tmp0_toUInt);
      tmp = tmp$ret$0;
    } else {
      throw NoSuchElementException_init_$Create$_0(this.b7_1.toString());
    }
    return tmp;
  };
  Iterator.prototype.h = function () {
    return new UInt(this.c7());
  };
  Iterator.$metadata$ = classMeta('Iterator', [Iterator_1]);
  function UIntArray__containsAll_impl_414g22($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_all.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$2;
        // Inline function 'kotlin.UIntArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof UInt) {
          var tmp_1 = _UIntArray___get_storage__impl__92a0v0($this);
          var tmp$ret$1;
          // Inline function 'kotlin.UInt.toInt' call
          var tmp0_toInt = element.r1_1;
          tmp$ret$1 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
          tmp_0 = contains_0(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        tmp$ret$2 = tmp_0;
        if (!tmp$ret$2) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function UIntArray__containsAll_impl_414g22_0($this, elements) {
    return UIntArray__containsAll_impl_414g22($this.d7_1, elements);
  }
  function UIntArray__isEmpty_impl_vd8j4n($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length === 0;
  }
  function UIntArray__toString_impl_3zy802($this) {
    return 'UIntArray(storage=' + toString_3($this) + ')';
  }
  function UIntArray__hashCode_impl_hr7ost($this) {
    return hashCode_0($this);
  }
  function UIntArray__equals_impl_flcmof($this, other) {
    if (!(other instanceof UIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof UIntArray ? other.d7_1 : THROW_CCE();
    if (!equals_0($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UIntArray(storage) {
    this.d7_1 = storage;
  }
  UIntArray.prototype.i = function () {
    return _UIntArray___get_size__impl__r6l8ci(this.d7_1);
  };
  UIntArray.prototype.f = function () {
    return UIntArray__iterator_impl_tkdv7k(this.d7_1);
  };
  UIntArray.prototype.e7 = function (elements) {
    return UIntArray__containsAll_impl_414g22(this.d7_1, elements);
  };
  UIntArray.prototype.v1 = function (elements) {
    return UIntArray__containsAll_impl_414g22_0(this, elements);
  };
  UIntArray.prototype.p = function () {
    return UIntArray__isEmpty_impl_vd8j4n(this.d7_1);
  };
  UIntArray.prototype.toString = function () {
    return UIntArray__toString_impl_3zy802(this.d7_1);
  };
  UIntArray.prototype.hashCode = function () {
    return UIntArray__hashCode_impl_hr7ost(this.d7_1);
  };
  UIntArray.prototype.equals = function (other) {
    return UIntArray__equals_impl_flcmof(this.d7_1, other);
  };
  UIntArray.$metadata$ = classMeta('UIntArray', [Collection]);
  function UIntArray_0(size, init) {
    var tmp = 0;
    var tmp_0 = size;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp0_toInt = init(tmp_2).r1_1;
      tmp$ret$0 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
      tmp$ret$1 = tmp$ret$0;
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    return _UIntArray___init__impl__ghjpc6(tmp_1);
  }
  function uintArrayOf(elements) {
    return elements;
  }
  function _ULong___init__impl__c78o9k(data) {
    return data;
  }
  function _ULong___get_data__impl__fggpzb($this) {
    return $this;
  }
  function Companion_5() {
    Companion_instance_5 = this;
    this.f7_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
    this.g7_1 = _ULong___init__impl__c78o9k(new Long(-1, -1));
    this.h7_1 = 8;
    this.i7_1 = 64;
  }
  Companion_5.$metadata$ = objectMeta('Companion');
  var Companion_instance_5;
  function Companion_getInstance_5() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function ULong__compareTo_impl_38i7tu($this, other) {
    return ulongCompare(_ULong___get_data__impl__fggpzb($this), _ULong___get_data__impl__fggpzb(other));
  }
  function ULong__compareTo_impl_38i7tu_0($this, other) {
    var tmp = $this.q1_1;
    return ULong__compareTo_impl_38i7tu(tmp, other instanceof ULong ? other.q1_1 : THROW_CCE());
  }
  function ULong__plus_impl_plxuny($this, other) {
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.plus' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw(other)).s6(new Long(-1, 0)));
    var tmp0_plus = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).x5(_ULong___get_data__impl__fggpzb(tmp0_plus)));
    return tmp$ret$1;
  }
  function ULong__plus_impl_plxuny_0($this, other) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).x5(_ULong___get_data__impl__fggpzb(other)));
  }
  function ULong__minus_impl_hq1qum($this, other) {
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.minus' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw(other)).s6(new Long(-1, 0)));
    var tmp0_minus = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).y5(_ULong___get_data__impl__fggpzb(tmp0_minus)));
    return tmp$ret$1;
  }
  function ULong__minus_impl_hq1qum_0($this, other) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).y5(_ULong___get_data__impl__fggpzb(other)));
  }
  function ULong__times_impl_ffj6l4($this, other) {
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.times' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw(other)).s6(new Long(-1, 0)));
    var tmp0_times = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).w5(_ULong___get_data__impl__fggpzb(tmp0_times)));
    return tmp$ret$1;
  }
  function ULong__times_impl_ffj6l4_0($this, other) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).w5(_ULong___get_data__impl__fggpzb(other)));
  }
  function ULong__div_impl_iugpv1($this, other) {
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.div' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong_0(_UInt___get_data__impl__f0vqqw(other)).s6(new Long(-1, 0)));
    var tmp0_div = tmp$ret$0;
    tmp$ret$1 = ulongDivide($this, tmp0_div);
    return tmp$ret$1;
  }
  function ULong__div_impl_iugpv1_0($this, other) {
    return ulongDivide($this, other);
  }
  function ULong__rem_impl_48ncec($this, other) {
    return ulongRemainder($this, other);
  }
  function ULong__shl_impl_5lazrb($this, bitCount) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).j7(bitCount));
  }
  function ULong__shr_impl_8fkq4h($this, bitCount) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).k7(bitCount));
  }
  function ULong__and_impl_2r8hax($this, other) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).s6(_ULong___get_data__impl__fggpzb(other)));
  }
  function ULong__or_impl_mne2xz($this, other) {
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb($this).l7(_ULong___get_data__impl__fggpzb(other)));
  }
  function ULong__toInt_impl_3ib0ba($this) {
    return _ULong___get_data__impl__fggpzb($this).z6();
  }
  function ULong__toLong_impl_i1ol5n($this) {
    return _ULong___get_data__impl__fggpzb($this);
  }
  function ULong__toUInt_impl_qlonx5($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.toUInt' call
    var tmp0_toUInt = _ULong___get_data__impl__fggpzb($this);
    tmp$ret$0 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
    return tmp$ret$0;
  }
  function ULong__toString_impl_f9au7k($this) {
    return ulongToString(_ULong___get_data__impl__fggpzb($this));
  }
  function ULong__hashCode_impl_6hv2lb($this) {
    return $this.hashCode();
  }
  function ULong__equals_impl_o0gnyb($this, other) {
    if (!(other instanceof ULong))
      return false;
    var tmp0_other_with_cast = other instanceof ULong ? other.q1_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULong(data) {
    Companion_getInstance_5();
    this.q1_1 = data;
  }
  ULong.prototype.m7 = function (other) {
    return ULong__compareTo_impl_38i7tu(this.q1_1, other);
  };
  ULong.prototype.y6 = function (other) {
    return ULong__compareTo_impl_38i7tu_0(this, other);
  };
  ULong.prototype.toString = function () {
    return ULong__toString_impl_f9au7k(this.q1_1);
  };
  ULong.prototype.hashCode = function () {
    return ULong__hashCode_impl_6hv2lb(this.q1_1);
  };
  ULong.prototype.equals = function (other) {
    return ULong__equals_impl_o0gnyb(this.q1_1, other);
  };
  ULong.$metadata$ = classMeta('ULong', [Comparable]);
  function toULong(_this__u8e3s4) {
    return _ULong___init__impl__c78o9k(_this__u8e3s4);
  }
  function toULong_0(_this__u8e3s4) {
    return _ULong___init__impl__c78o9k(toLong_0(_this__u8e3s4));
  }
  function _ULongArray___init__impl__twm1l3(storage) {
    return storage;
  }
  function _ULongArray___get_storage__impl__28e64j($this) {
    return $this;
  }
  function _ULongArray___init__impl__twm1l3_0(size) {
    var tmp = _ULongArray___init__impl__twm1l3(longArray(size));
    return tmp;
  }
  function ULongArray__get_impl_pr71q9($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.toULong' call
    var tmp0_toULong = _ULongArray___get_storage__impl__28e64j($this)[index];
    tmp$ret$0 = _ULong___init__impl__c78o9k(tmp0_toULong);
    return tmp$ret$0;
  }
  function ULongArray__set_impl_z19mvh($this, index, value) {
    var tmp = _ULongArray___get_storage__impl__28e64j($this);
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(value);
    tmp[index] = tmp$ret$0;
  }
  function _ULongArray___get_size__impl__ju6dtr($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length;
  }
  function ULongArray__iterator_impl_cq4d2h($this) {
    return new Iterator_0(_ULongArray___get_storage__impl__28e64j($this));
  }
  function Iterator_0(array) {
    this.n7_1 = array;
    this.o7_1 = 0;
  }
  Iterator_0.prototype.g = function () {
    return this.o7_1 < this.n7_1.length;
  };
  Iterator_0.prototype.p7 = function () {
    var tmp;
    if (this.o7_1 < this.n7_1.length) {
      var tmp$ret$0;
      // Inline function 'kotlin.toULong' call
      var tmp0_this = this;
      var tmp1 = tmp0_this.o7_1;
      tmp0_this.o7_1 = tmp1 + 1 | 0;
      var tmp0_toULong = this.n7_1[tmp1];
      tmp$ret$0 = _ULong___init__impl__c78o9k(tmp0_toULong);
      tmp = tmp$ret$0;
    } else {
      throw NoSuchElementException_init_$Create$_0(this.o7_1.toString());
    }
    return tmp;
  };
  Iterator_0.prototype.h = function () {
    return new ULong(this.p7());
  };
  Iterator_0.$metadata$ = classMeta('Iterator', [Iterator_1]);
  function ULongArray__contains_impl_v9bgai($this, element) {
    var tmp = isObject(new ULong(element)) ? new ULong(element) : THROW_CCE();
    if (!(tmp instanceof ULong))
      return false;
    var tmp_0 = _ULongArray___get_storage__impl__28e64j($this);
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(element);
    return contains(tmp_0, tmp$ret$0);
  }
  function ULongArray__containsAll_impl_xx8ztf($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_all.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$2;
        // Inline function 'kotlin.ULongArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof ULong) {
          var tmp_1 = _ULongArray___get_storage__impl__28e64j($this);
          var tmp$ret$1;
          // Inline function 'kotlin.ULong.toLong' call
          var tmp0_toLong = element.q1_1;
          tmp$ret$1 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
          tmp_0 = contains(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        tmp$ret$2 = tmp_0;
        if (!tmp$ret$2) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function ULongArray__containsAll_impl_xx8ztf_0($this, elements) {
    return ULongArray__containsAll_impl_xx8ztf($this.q7_1, elements);
  }
  function ULongArray__isEmpty_impl_c3yngu($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length === 0;
  }
  function ULongArray__toString_impl_wqk1p5($this) {
    return 'ULongArray(storage=' + toString_3($this) + ')';
  }
  function ULongArray__hashCode_impl_aze4wa($this) {
    return hashCode_0($this);
  }
  function ULongArray__equals_impl_vwitwa($this, other) {
    if (!(other instanceof ULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof ULongArray ? other.q7_1 : THROW_CCE();
    if (!equals_0($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULongArray(storage) {
    this.q7_1 = storage;
  }
  ULongArray.prototype.i = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.q7_1);
  };
  ULongArray.prototype.f = function () {
    return ULongArray__iterator_impl_cq4d2h(this.q7_1);
  };
  ULongArray.prototype.r7 = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf(this.q7_1, elements);
  };
  ULongArray.prototype.v1 = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf_0(this, elements);
  };
  ULongArray.prototype.p = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.q7_1);
  };
  ULongArray.prototype.toString = function () {
    return ULongArray__toString_impl_wqk1p5(this.q7_1);
  };
  ULongArray.prototype.hashCode = function () {
    return ULongArray__hashCode_impl_aze4wa(this.q7_1);
  };
  ULongArray.prototype.equals = function (other) {
    return ULongArray__equals_impl_vwitwa(this.q7_1, other);
  };
  ULongArray.$metadata$ = classMeta('ULongArray', [Collection]);
  function ulongArrayOf(elements) {
    return elements;
  }
  function ULongArray_0(size, init) {
    var tmp = 0;
    var tmp_0 = size;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp0_toLong = init(tmp_2).q1_1;
      tmp$ret$0 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
      tmp$ret$1 = tmp$ret$0;
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_1);
  }
  function _UShort___init__impl__jigrne(data) {
    return data;
  }
  function _UShort___get_data__impl__g0245($this) {
    return $this;
  }
  function UShort__toInt_impl_72bkww($this) {
    return _UShort___get_data__impl__g0245($this) & 65535;
  }
  function UShort__toULong_impl_vh6nb6($this) {
    return _ULong___init__impl__c78o9k(toLong_0(_UShort___get_data__impl__g0245($this)).s6(new Long(65535, 0)));
  }
  function UShort() {
  }
  UShort.$metadata$ = classMeta('UShort', [Comparable]);
  function toUShort(_this__u8e3s4) {
    return _UShort___init__impl__jigrne(toShort(_this__u8e3s4));
  }
  function toString_0(_this__u8e3s4, radix) {
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(_this__u8e3s4);
    return ulongToString_0(tmp$ret$0, checkRadix(radix));
  }
  function uintCompare(v1, v2) {
    return compareTo_0(v1 ^ IntCompanionObject_getInstance().h1_1, v2 ^ IntCompanionObject_getInstance().h1_1);
  }
  function uintDivide(v1, v2) {
    var tmp$ret$2;
    // Inline function 'kotlin.toUInt' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toLong' call
    tmp$ret$0 = toLong_0(_UInt___get_data__impl__f0vqqw(v1)).s6(new Long(-1, 0));
    var tmp = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.UInt.toLong' call
    tmp$ret$1 = toLong_0(_UInt___get_data__impl__f0vqqw(v2)).s6(new Long(-1, 0));
    var tmp0_toUInt = tmp.u5(tmp$ret$1);
    tmp$ret$2 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
    return tmp$ret$2;
  }
  function uintRemainder(v1, v2) {
    var tmp$ret$2;
    // Inline function 'kotlin.toUInt' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toLong' call
    tmp$ret$0 = toLong_0(_UInt___get_data__impl__f0vqqw(v1)).s6(new Long(-1, 0));
    var tmp = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.UInt.toLong' call
    tmp$ret$1 = toLong_0(_UInt___get_data__impl__f0vqqw(v2)).s6(new Long(-1, 0));
    var tmp0_toUInt = tmp.s7(tmp$ret$1);
    tmp$ret$2 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
    return tmp$ret$2;
  }
  function ulongCompare(v1, v2) {
    Companion_getInstance_10();
    var tmp = v1.t7(new Long(0, -2147483648));
    Companion_getInstance_10();
    return tmp.v5(v2.t7(new Long(0, -2147483648)));
  }
  function ulongDivide(v1, v2) {
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(v1);
    var dividend = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$1 = _ULong___get_data__impl__fggpzb(v2);
    var divisor = tmp$ret$1;
    if (divisor.v5(new Long(0, 0)) < 0) {
      var tmp;
      var tmp$ret$2;
      // Inline function 'kotlin.ULong.compareTo' call
      tmp$ret$2 = ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2));
      if (tmp$ret$2 < 0) {
        tmp = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        tmp = _ULong___init__impl__c78o9k(new Long(1, 0));
      }
      return tmp;
    }
    if (dividend.v5(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.u5(divisor));
    }
    var quotient = dividend.k7(1).u5(divisor).j7(1);
    var rem = dividend.y5(quotient.w5(divisor));
    var tmp$ret$4;
    // Inline function 'kotlin.Long.plus' call
    var tmp_0;
    var tmp$ret$3;
    // Inline function 'kotlin.ULong.compareTo' call
    var tmp0_compareTo = _ULong___init__impl__c78o9k(rem);
    var tmp1_compareTo = _ULong___init__impl__c78o9k(divisor);
    tmp$ret$3 = ulongCompare(_ULong___get_data__impl__fggpzb(tmp0_compareTo), _ULong___get_data__impl__fggpzb(tmp1_compareTo));
    if (tmp$ret$3 >= 0) {
      tmp_0 = 1;
    } else {
      tmp_0 = 0;
    }
    var tmp2_plus = tmp_0;
    tmp$ret$4 = quotient.x5(toLong_0(tmp2_plus));
    return _ULong___init__impl__c78o9k(tmp$ret$4);
  }
  function ulongRemainder(v1, v2) {
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(v1);
    var dividend = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$1 = _ULong___get_data__impl__fggpzb(v2);
    var divisor = tmp$ret$1;
    if (divisor.v5(new Long(0, 0)) < 0) {
      var tmp;
      var tmp$ret$2;
      // Inline function 'kotlin.ULong.compareTo' call
      tmp$ret$2 = ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2));
      if (tmp$ret$2 < 0) {
        tmp = v1;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.ULong.minus' call
        tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(v1).y5(_ULong___get_data__impl__fggpzb(v2)));
        tmp = tmp$ret$3;
      }
      return tmp;
    }
    if (dividend.v5(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.s7(divisor));
    }
    var quotient = dividend.k7(1).u5(divisor).j7(1);
    var rem = dividend.y5(quotient.w5(divisor));
    var tmp_0;
    var tmp$ret$4;
    // Inline function 'kotlin.ULong.compareTo' call
    var tmp0_compareTo = _ULong___init__impl__c78o9k(rem);
    var tmp1_compareTo = _ULong___init__impl__c78o9k(divisor);
    tmp$ret$4 = ulongCompare(_ULong___get_data__impl__fggpzb(tmp0_compareTo), _ULong___get_data__impl__fggpzb(tmp1_compareTo));
    if (tmp$ret$4 >= 0) {
      tmp_0 = divisor;
    } else {
      tmp_0 = new Long(0, 0);
    }
    return _ULong___init__impl__c78o9k(rem.y5(tmp_0));
  }
  function ulongToString(v) {
    return ulongToString_0(v, 10);
  }
  function ulongToString_0(v, base) {
    if (v.v5(new Long(0, 0)) >= 0)
      return toString_4(v, base);
    var tmp$ret$0;
    // Inline function 'kotlin.Long.div' call
    var tmp0_div = v.k7(1);
    tmp$ret$0 = tmp0_div.u5(toLong_0(base));
    var quotient = tmp$ret$0.j7(1);
    var tmp$ret$1;
    // Inline function 'kotlin.Long.times' call
    var tmp1_times = quotient;
    tmp$ret$1 = tmp1_times.w5(toLong_0(base));
    var rem = v.y5(tmp$ret$1);
    if (rem.v5(toLong_0(base)) >= 0) {
      var tmp$ret$2;
      // Inline function 'kotlin.Long.minus' call
      var tmp2_minus = rem;
      tmp$ret$2 = tmp2_minus.y5(toLong_0(base));
      rem = tmp$ret$2;
      var tmp$ret$3;
      // Inline function 'kotlin.Long.plus' call
      var tmp3_plus = quotient;
      tmp$ret$3 = tmp3_plus.x5(new Long(1, 0));
      quotient = tmp$ret$3;
    }
    return toString_4(quotient, base) + toString_4(rem, base);
  }
  function Annotation() {
  }
  Annotation.$metadata$ = interfaceMeta('Annotation');
  function CharSequence() {
  }
  CharSequence.$metadata$ = interfaceMeta('CharSequence');
  function Comparable() {
  }
  Comparable.$metadata$ = interfaceMeta('Comparable');
  function Iterator_1() {
  }
  Iterator_1.$metadata$ = interfaceMeta('Iterator');
  function MutableIterator() {
  }
  MutableIterator.$metadata$ = interfaceMeta('MutableIterator', [Iterator_1]);
  function ListIterator() {
  }
  ListIterator.$metadata$ = interfaceMeta('ListIterator', [Iterator_1]);
  function MutableListIterator() {
  }
  MutableListIterator.$metadata$ = interfaceMeta('MutableListIterator', [ListIterator, MutableIterator]);
  function Number_0() {
  }
  Number_0.$metadata$ = classMeta('Number');
  function Unit() {
    Unit_instance = this;
  }
  Unit.prototype.toString = function () {
    return 'kotlin.Unit';
  };
  Unit.$metadata$ = objectMeta('Unit');
  var Unit_instance;
  function Unit_getInstance() {
    if (Unit_instance == null)
      new Unit();
    return Unit_instance;
  }
  function IntCompanionObject() {
    IntCompanionObject_instance = this;
    this.h1_1 = -2147483648;
    this.i1_1 = 2147483647;
    this.j1_1 = 4;
    this.k1_1 = 32;
  }
  IntCompanionObject.prototype.y7 = function () {
    return this.h1_1;
  };
  IntCompanionObject.prototype.z7 = function () {
    return this.i1_1;
  };
  IntCompanionObject.prototype.a8 = function () {
    return this.j1_1;
  };
  IntCompanionObject.prototype.b8 = function () {
    return this.k1_1;
  };
  IntCompanionObject.$metadata$ = objectMeta('IntCompanionObject');
  Object.defineProperty(IntCompanionObject.prototype, 'MIN_VALUE', {
    configurable: true,
    get: IntCompanionObject.prototype.y7
  });
  Object.defineProperty(IntCompanionObject.prototype, 'MAX_VALUE', {
    configurable: true,
    get: IntCompanionObject.prototype.z7
  });
  Object.defineProperty(IntCompanionObject.prototype, 'SIZE_BYTES', {
    configurable: true,
    get: IntCompanionObject.prototype.a8
  });
  Object.defineProperty(IntCompanionObject.prototype, 'SIZE_BITS', {
    configurable: true,
    get: IntCompanionObject.prototype.b8
  });
  var IntCompanionObject_instance;
  function IntCompanionObject_getInstance() {
    if (IntCompanionObject_instance == null)
      new IntCompanionObject();
    return IntCompanionObject_instance;
  }
  function FloatCompanionObject() {
    FloatCompanionObject_instance = this;
    this.c8_1 = 1.4E-45;
    this.d8_1 = 3.4028235E38;
    this.e8_1 = Infinity;
    this.f8_1 = -Infinity;
    this.g8_1 = NaN;
    this.h8_1 = 4;
    this.i8_1 = 32;
  }
  FloatCompanionObject.prototype.y7 = function () {
    return this.c8_1;
  };
  FloatCompanionObject.prototype.z7 = function () {
    return this.d8_1;
  };
  FloatCompanionObject.prototype.j8 = function () {
    return this.e8_1;
  };
  FloatCompanionObject.prototype.k8 = function () {
    return this.f8_1;
  };
  FloatCompanionObject.prototype.l8 = function () {
    return this.g8_1;
  };
  FloatCompanionObject.prototype.a8 = function () {
    return this.h8_1;
  };
  FloatCompanionObject.prototype.b8 = function () {
    return this.i8_1;
  };
  FloatCompanionObject.$metadata$ = objectMeta('FloatCompanionObject');
  Object.defineProperty(FloatCompanionObject.prototype, 'MIN_VALUE', {
    configurable: true,
    get: FloatCompanionObject.prototype.y7
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'MAX_VALUE', {
    configurable: true,
    get: FloatCompanionObject.prototype.z7
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'POSITIVE_INFINITY', {
    configurable: true,
    get: FloatCompanionObject.prototype.j8
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'NEGATIVE_INFINITY', {
    configurable: true,
    get: FloatCompanionObject.prototype.k8
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'NaN', {
    configurable: true,
    get: FloatCompanionObject.prototype.l8
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'SIZE_BYTES', {
    configurable: true,
    get: FloatCompanionObject.prototype.a8
  });
  Object.defineProperty(FloatCompanionObject.prototype, 'SIZE_BITS', {
    configurable: true,
    get: FloatCompanionObject.prototype.b8
  });
  var FloatCompanionObject_instance;
  function FloatCompanionObject_getInstance() {
    if (FloatCompanionObject_instance == null)
      new FloatCompanionObject();
    return FloatCompanionObject_instance;
  }
  function DoubleCompanionObject() {
    DoubleCompanionObject_instance = this;
    this.m8_1 = 4.9E-324;
    this.n8_1 = 1.7976931348623157E308;
    this.o8_1 = Infinity;
    this.p8_1 = -Infinity;
    this.q8_1 = NaN;
    this.r8_1 = 8;
    this.s8_1 = 64;
  }
  DoubleCompanionObject.prototype.y7 = function () {
    return this.m8_1;
  };
  DoubleCompanionObject.prototype.z7 = function () {
    return this.n8_1;
  };
  DoubleCompanionObject.prototype.j8 = function () {
    return this.o8_1;
  };
  DoubleCompanionObject.prototype.k8 = function () {
    return this.p8_1;
  };
  DoubleCompanionObject.prototype.l8 = function () {
    return this.q8_1;
  };
  DoubleCompanionObject.prototype.a8 = function () {
    return this.r8_1;
  };
  DoubleCompanionObject.prototype.b8 = function () {
    return this.s8_1;
  };
  DoubleCompanionObject.$metadata$ = objectMeta('DoubleCompanionObject');
  Object.defineProperty(DoubleCompanionObject.prototype, 'MIN_VALUE', {
    configurable: true,
    get: DoubleCompanionObject.prototype.y7
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'MAX_VALUE', {
    configurable: true,
    get: DoubleCompanionObject.prototype.z7
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'POSITIVE_INFINITY', {
    configurable: true,
    get: DoubleCompanionObject.prototype.j8
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'NEGATIVE_INFINITY', {
    configurable: true,
    get: DoubleCompanionObject.prototype.k8
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'NaN', {
    configurable: true,
    get: DoubleCompanionObject.prototype.l8
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'SIZE_BYTES', {
    configurable: true,
    get: DoubleCompanionObject.prototype.a8
  });
  Object.defineProperty(DoubleCompanionObject.prototype, 'SIZE_BITS', {
    configurable: true,
    get: DoubleCompanionObject.prototype.b8
  });
  var DoubleCompanionObject_instance;
  function DoubleCompanionObject_getInstance() {
    if (DoubleCompanionObject_instance == null)
      new DoubleCompanionObject();
    return DoubleCompanionObject_instance;
  }
  function Comparator() {
  }
  Comparator.$metadata$ = interfaceMeta('Comparator');
  function toTypedArray(_this__u8e3s4) {
    return copyToArray(_this__u8e3s4);
  }
  function listOf_1(element) {
    return arrayListOf_0([element]);
  }
  function mapOf_1(pair) {
    return hashMapOf([pair]);
  }
  function mapCapacity(expectedSize) {
    return expectedSize;
  }
  function toSingletonMapOrSelf(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
    Companion_getInstance().h2(startIndex, endIndex, source.length);
    var rangeSize = endIndex - startIndex | 0;
    Companion_getInstance().h2(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
    if (isView(destination) ? isView(source) : false) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = source;
      var subrange = tmp$ret$0.subarray(startIndex, endIndex);
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = destination;
      tmp$ret$1.set(subrange, destinationOffset);
    } else {
      if (!(source === destination) ? true : destinationOffset <= startIndex) {
        var inductionVariable = 0;
        if (inductionVariable < rangeSize)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
           while (inductionVariable < rangeSize);
      } else {
        var inductionVariable_0 = rangeSize - 1 | 0;
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
           while (0 <= inductionVariable_0);
      }
    }
  }
  function checkIndexOverflow(index) {
    if (index < 0) {
      throwIndexOverflow();
    }
    return index;
  }
  function setOf(element) {
    return hashSetOf([element]);
  }
  function checkCountOverflow(count) {
    if (count < 0) {
      throwCountOverflow();
    }
    return count;
  }
  function sort(_this__u8e3s4) {
    collectionsSort(_this__u8e3s4, naturalOrder());
  }
  function sortWith(_this__u8e3s4, comparator) {
    collectionsSort(_this__u8e3s4, comparator);
  }
  function copyToArray(collection) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = collection;
    if (tmp$ret$0.toArray !== undefined) {
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = collection;
      var tmp0_unsafeCast = tmp$ret$1.toArray();
      tmp$ret$2 = tmp0_unsafeCast;
      tmp = tmp$ret$2;
    } else {
      var tmp$ret$4;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_unsafeCast = copyToArrayImpl(collection);
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = tmp1_unsafeCast;
      tmp$ret$4 = tmp$ret$3;
      tmp = tmp$ret$4;
    }
    return tmp;
  }
  function collectionsSort(list, comparator) {
    if (list.i() <= 1)
      return Unit_getInstance();
    var array = copyToArray(list);
    sortArrayWith(array, comparator);
    var inductionVariable = 0;
    var last = array.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        list.t8(i, array[i]);
      }
       while (inductionVariable < last);
  }
  function copyToArrayImpl(collection) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    var array = tmp$ret$0;
    var iterator = collection.f();
    while (iterator.g()) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = array;
      tmp$ret$1.push(iterator.h());
    }
    return array;
  }
  function AbstractMutableCollection() {
    AbstractCollection.call(this);
  }
  AbstractMutableCollection.prototype.j = function (elements) {
    this.u8();
    var modified = false;
    var tmp0_iterator = elements.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      if (this.a(element))
        modified = true;
    }
    return modified;
  };
  AbstractMutableCollection.prototype.v8 = function () {
    this.u8();
    var iterator = this.f();
    while (iterator.g()) {
      iterator.h();
      iterator.x7();
    }
  };
  AbstractMutableCollection.prototype.toJSON = function () {
    return this.toArray();
  };
  AbstractMutableCollection.prototype.u8 = function () {
  };
  AbstractMutableCollection.$metadata$ = classMeta('AbstractMutableCollection', [MutableCollection], undefined, undefined, undefined, AbstractCollection.prototype);
  function IteratorImpl_0($outer) {
    this.y8_1 = $outer;
    this.w8_1 = 0;
    this.x8_1 = -1;
  }
  IteratorImpl_0.prototype.g = function () {
    return this.w8_1 < this.y8_1.i();
  };
  IteratorImpl_0.prototype.h = function () {
    if (!this.g())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp0_this = this;
    var tmp1 = tmp0_this.w8_1;
    tmp0_this.w8_1 = tmp1 + 1 | 0;
    tmp.x8_1 = tmp1;
    return this.y8_1.l(this.x8_1);
  };
  IteratorImpl_0.prototype.x7 = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = !(this.x8_1 === -1);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.IteratorImpl.remove.<anonymous>' call
      tmp$ret$0 = 'Call next() or previous() before removing element from the iterator.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$(toString_3(message));
    }
    this.y8_1.a9(this.x8_1);
    this.w8_1 = this.x8_1;
    this.x8_1 = -1;
  };
  IteratorImpl_0.$metadata$ = classMeta('IteratorImpl', [MutableIterator]);
  function ListIteratorImpl_0($outer, index) {
    this.e9_1 = $outer;
    IteratorImpl_0.call(this, $outer);
    Companion_getInstance().p2(index, this.e9_1.i());
    this.w8_1 = index;
  }
  ListIteratorImpl_0.$metadata$ = classMeta('ListIteratorImpl', [MutableListIterator], undefined, undefined, undefined, IteratorImpl_0.prototype);
  function SubList_0(list, fromIndex, toIndex) {
    AbstractMutableList.call(this);
    this.g9_1 = list;
    this.h9_1 = fromIndex;
    this.i9_1 = 0;
    Companion_getInstance().h2(this.h9_1, toIndex, this.g9_1.i());
    this.i9_1 = toIndex - this.h9_1 | 0;
  }
  SubList_0.prototype.j9 = function (index, element) {
    Companion_getInstance().p2(index, this.i9_1);
    this.g9_1.j9(this.h9_1 + index | 0, element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.i9_1;
    tmp0_this.i9_1 = tmp1 + 1 | 0;
  };
  SubList_0.prototype.l = function (index) {
    Companion_getInstance().i2(index, this.i9_1);
    return this.g9_1.l(this.h9_1 + index | 0);
  };
  SubList_0.prototype.a9 = function (index) {
    Companion_getInstance().i2(index, this.i9_1);
    var result = this.g9_1.a9(this.h9_1 + index | 0);
    var tmp0_this = this;
    var tmp1 = tmp0_this.i9_1;
    tmp0_this.i9_1 = tmp1 - 1 | 0;
    return result;
  };
  SubList_0.prototype.t8 = function (index, element) {
    Companion_getInstance().i2(index, this.i9_1);
    return this.g9_1.t8(this.h9_1 + index | 0, element);
  };
  SubList_0.prototype.i = function () {
    return this.i9_1;
  };
  SubList_0.prototype.u8 = function () {
    return this.g9_1.u8();
  };
  SubList_0.$metadata$ = classMeta('SubList', [RandomAccess], undefined, undefined, undefined, AbstractMutableList.prototype);
  function AbstractMutableList() {
    AbstractMutableCollection.call(this);
    this.z8_1 = 0;
  }
  AbstractMutableList.prototype.a = function (element) {
    this.u8();
    this.j9(this.i(), element);
    return true;
  };
  AbstractMutableList.prototype.f = function () {
    return new IteratorImpl_0(this);
  };
  AbstractMutableList.prototype.u1 = function (element) {
    return this.j2(element) >= 0;
  };
  AbstractMutableList.prototype.j2 = function (element) {
    var inductionVariable = 0;
    var last = get_lastIndex_1(this);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (equals_0(this.l(index), element)) {
          return index;
        }
      }
       while (!(index === last));
    return -1;
  };
  AbstractMutableList.prototype.k = function (index) {
    return new ListIteratorImpl_0(this, index);
  };
  AbstractMutableList.prototype.s = function (fromIndex, toIndex) {
    return new SubList_0(this, fromIndex, toIndex);
  };
  AbstractMutableList.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List_0) : false))
      return false;
    return Companion_getInstance().s2(this, other);
  };
  AbstractMutableList.prototype.hashCode = function () {
    return Companion_getInstance().r2(this);
  };
  AbstractMutableList.$metadata$ = classMeta('AbstractMutableList', [MutableList_0], undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function AbstractMutableMap$keys$1$iterator$1($entryIterator) {
    this.k9_1 = $entryIterator;
  }
  AbstractMutableMap$keys$1$iterator$1.prototype.g = function () {
    return this.k9_1.g();
  };
  AbstractMutableMap$keys$1$iterator$1.prototype.h = function () {
    return this.k9_1.h().e1();
  };
  AbstractMutableMap$keys$1$iterator$1.prototype.x7 = function () {
    return this.k9_1.x7();
  };
  AbstractMutableMap$keys$1$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function AbstractMutableMap$values$1$iterator$1($entryIterator) {
    this.l9_1 = $entryIterator;
  }
  AbstractMutableMap$values$1$iterator$1.prototype.g = function () {
    return this.l9_1.g();
  };
  AbstractMutableMap$values$1$iterator$1.prototype.h = function () {
    return this.l9_1.h().f1();
  };
  AbstractMutableMap$values$1$iterator$1.prototype.x7 = function () {
    return this.l9_1.x7();
  };
  AbstractMutableMap$values$1$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function SimpleEntry(key, value) {
    this.m9_1 = key;
    this.n9_1 = value;
  }
  SimpleEntry.prototype.e1 = function () {
    return this.m9_1;
  };
  SimpleEntry.prototype.f1 = function () {
    return this.n9_1;
  };
  SimpleEntry.prototype.o9 = function (newValue) {
    var oldValue = this.n9_1;
    this.n9_1 = newValue;
    return oldValue;
  };
  SimpleEntry.prototype.hashCode = function () {
    return Companion_getInstance_0().v2(this);
  };
  SimpleEntry.prototype.toString = function () {
    return Companion_getInstance_0().w2(this);
  };
  SimpleEntry.prototype.equals = function (other) {
    return Companion_getInstance_0().x2(this, other);
  };
  SimpleEntry.$metadata$ = classMeta('SimpleEntry', [MutableEntry]);
  function AbstractEntrySet() {
    AbstractMutableSet.call(this);
  }
  AbstractEntrySet.prototype.u1 = function (element) {
    return this.p9(element);
  };
  AbstractEntrySet.$metadata$ = classMeta('AbstractEntrySet', undefined, undefined, undefined, undefined, AbstractMutableSet.prototype);
  function AbstractMutableMap$keys$1(this$0) {
    this.q9_1 = this$0;
    AbstractMutableSet.call(this);
  }
  AbstractMutableMap$keys$1.prototype.r9 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on keys');
  };
  AbstractMutableMap$keys$1.prototype.a = function (element) {
    return this.r9((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$keys$1.prototype.v8 = function () {
    this.q9_1.v8();
  };
  AbstractMutableMap$keys$1.prototype.z2 = function (element) {
    return this.q9_1.c3(element);
  };
  AbstractMutableMap$keys$1.prototype.u1 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.z2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$keys$1.prototype.f = function () {
    var entryIterator = this.q9_1.d1().f();
    return new AbstractMutableMap$keys$1$iterator$1(entryIterator);
  };
  AbstractMutableMap$keys$1.prototype.i = function () {
    return this.q9_1.i();
  };
  AbstractMutableMap$keys$1.prototype.u8 = function () {
    return this.q9_1.u8();
  };
  AbstractMutableMap$keys$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractMutableSet.prototype);
  function AbstractMutableMap$values$1(this$0) {
    this.s9_1 = this$0;
    AbstractMutableCollection.call(this);
  }
  AbstractMutableMap$values$1.prototype.t9 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on values');
  };
  AbstractMutableMap$values$1.prototype.a = function (element) {
    return this.t9((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$values$1.prototype.f3 = function (element) {
    return this.s9_1.g3(element);
  };
  AbstractMutableMap$values$1.prototype.u1 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.f3((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$values$1.prototype.f = function () {
    var entryIterator = this.s9_1.d1().f();
    return new AbstractMutableMap$values$1$iterator$1(entryIterator);
  };
  AbstractMutableMap$values$1.prototype.i = function () {
    return this.s9_1.i();
  };
  AbstractMutableMap$values$1.prototype.u8 = function () {
    return this.s9_1.u8();
  };
  AbstractMutableMap$values$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function AbstractMutableMap() {
    AbstractMap.call(this);
    this.p4_1 = null;
    this.q4_1 = null;
  }
  AbstractMutableMap.prototype.v8 = function () {
    this.d1().v8();
  };
  AbstractMutableMap.prototype.i3 = function () {
    if (this.p4_1 == null) {
      var tmp = this;
      tmp.p4_1 = new AbstractMutableMap$keys$1(this);
    }
    return ensureNotNull(this.p4_1);
  };
  AbstractMutableMap.prototype.r4 = function (from) {
    this.u8();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = from.d1().f();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.g()) {
      var tmp1_loop_parameter = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.e1();
      var key = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.f1();
      var value = tmp$ret$2;
      this.u(key, value);
    }
  };
  AbstractMutableMap.prototype.j3 = function () {
    if (this.q4_1 == null) {
      var tmp = this;
      tmp.q4_1 = new AbstractMutableMap$values$1(this);
    }
    return ensureNotNull(this.q4_1);
  };
  AbstractMutableMap.prototype.u9 = function (key) {
    this.u8();
    var iter = this.d1().f();
    while (iter.g()) {
      var entry = iter.h();
      var k = entry.e1();
      if (equals_0(key, k)) {
        var value = entry.f1();
        iter.x7();
        return value;
      }
    }
    return null;
  };
  AbstractMutableMap.prototype.u8 = function () {
  };
  AbstractMutableMap.$metadata$ = classMeta('AbstractMutableMap', [MutableMap], undefined, undefined, undefined, AbstractMap.prototype);
  function AbstractMutableSet() {
    AbstractMutableCollection.call(this);
  }
  AbstractMutableSet.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Set) : false))
      return false;
    return Companion_getInstance_1().l3(this, other);
  };
  AbstractMutableSet.prototype.hashCode = function () {
    return Companion_getInstance_1().k3(this);
  };
  AbstractMutableSet.$metadata$ = classMeta('AbstractMutableSet', [MutableSet], undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function ArrayList_init_$Init$($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$() {
    return ArrayList_init_$Init$(Object.create(ArrayList.prototype));
  }
  function ArrayList_init_$Init$_0(initialCapacity, $this) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_0(initialCapacity) {
    return ArrayList_init_$Init$_0(initialCapacity, Object.create(ArrayList.prototype));
  }
  function ArrayList_init_$Init$_1(elements, $this) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.toTypedArray' call
    tmp$ret$0 = copyToArray(elements);
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_1(elements) {
    return ArrayList_init_$Init$_1(elements, Object.create(ArrayList.prototype));
  }
  function rangeCheck($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call
    Companion_getInstance().i2(index, $this.i());
    tmp$ret$0 = index;
    return tmp$ret$0;
  }
  function insertionRangeCheck($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call
    Companion_getInstance().p2(index, $this.i());
    tmp$ret$0 = index;
    return tmp$ret$0;
  }
  function ArrayList(array) {
    AbstractMutableList.call(this);
    this.d_1 = array;
    this.e_1 = false;
  }
  ArrayList.prototype.v9 = function (minCapacity) {
  };
  ArrayList.prototype.i = function () {
    return this.d_1.length;
  };
  ArrayList.prototype.l = function (index) {
    var tmp = this.d_1[rangeCheck(this, index)];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  ArrayList.prototype.t8 = function (index, element) {
    this.u8();
    rangeCheck(this, index);
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = this.d_1[index];
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.set.<anonymous>' call
    this.d_1[index] = element;
    tmp$ret$0 = tmp0_apply;
    var tmp = tmp$ret$0;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  ArrayList.prototype.a = function (element) {
    this.u8();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.d_1;
    tmp$ret$0 = tmp0_asDynamic;
    tmp$ret$0.push(element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.z8_1;
    tmp0_this.z8_1 = tmp1 + 1 | 0;
    return true;
  };
  ArrayList.prototype.j9 = function (index, element) {
    this.u8();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.d_1;
    tmp$ret$0 = tmp0_asDynamic;
    tmp$ret$0.splice(insertionRangeCheck(this, index), 0, element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.z8_1;
    tmp0_this.z8_1 = tmp1 + 1 | 0;
  };
  ArrayList.prototype.j = function (elements) {
    this.u8();
    if (elements.p())
      return false;
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.plus' call
    var tmp0_plus = tmp0_this.d_1;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.toTypedArray' call
    tmp$ret$0 = copyToArray(elements);
    var tmp1_plus = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = tmp0_plus;
    tmp$ret$2 = tmp$ret$1.concat(tmp1_plus);
    tmp.d_1 = tmp$ret$2;
    var tmp1_this = this;
    var tmp2 = tmp1_this.z8_1;
    tmp1_this.z8_1 = tmp2 + 1 | 0;
    return true;
  };
  ArrayList.prototype.a9 = function (index) {
    this.u8();
    rangeCheck(this, index);
    var tmp0_this = this;
    var tmp1 = tmp0_this.z8_1;
    tmp0_this.z8_1 = tmp1 + 1 | 0;
    var tmp;
    if (index === get_lastIndex_1(this)) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = this.d_1;
      tmp$ret$0 = tmp0_asDynamic;
      tmp = tmp$ret$0.pop();
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp1_asDynamic = this.d_1;
      tmp$ret$1 = tmp1_asDynamic;
      tmp = tmp$ret$1.splice(index, 1)[0];
    }
    return tmp;
  };
  ArrayList.prototype.j2 = function (element) {
    return indexOf(this.d_1, element);
  };
  ArrayList.prototype.toString = function () {
    return arrayToString(this.d_1);
  };
  ArrayList.prototype.w9 = function () {
    return [].slice.call(this.d_1);
  };
  ArrayList.prototype.toArray = function () {
    return this.w9();
  };
  ArrayList.prototype.u8 = function () {
    if (this.e_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  ArrayList.$metadata$ = classMeta('ArrayList', [MutableList_0, RandomAccess], undefined, undefined, undefined, AbstractMutableList.prototype);
  var _stableSortingIsSupported;
  function sortArrayWith(array, comparator) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArrayWith$lambda(comparator);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = array;
      tmp$ret$0.sort(comparison);
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = array;
      tmp$ret$2 = tmp$ret$1;
      mergeSort(tmp$ret$2, 0, get_lastIndex(array), comparator);
    }
  }
  function sortArray(array) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArray$lambda;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = array;
      tmp$ret$0.sort(comparison);
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = array;
      tmp$ret$2 = tmp$ret$1;
      mergeSort(tmp$ret$2, 0, get_lastIndex(array), naturalOrder());
    }
  }
  function getStableSortingIsSupported() {
    var tmp0_safe_receiver = _stableSortingIsSupported;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    _stableSortingIsSupported = false;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = [];
    tmp$ret$1 = tmp0_unsafeCast;
    var array = tmp$ret$1;
    var inductionVariable = 0;
    if (inductionVariable < 600)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = array;
        tmp$ret$2.push(index);
      }
       while (inductionVariable < 600);
    var comparison = getStableSortingIsSupported$lambda;
    var tmp$ret$3;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$3 = array;
    tmp$ret$3.sort(comparison);
    var inductionVariable_0 = 1;
    var last = array.length;
    if (inductionVariable_0 < last)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var a = array[index_0 - 1 | 0];
        var b = array[index_0];
        if ((a & 3) === (b & 3) ? a >= b : false)
          return false;
      }
       while (inductionVariable_0 < last);
    _stableSortingIsSupported = true;
    return true;
  }
  function mergeSort(array, start, endInclusive, comparator) {
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = array.length;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var tmp1_unsafeCast = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    var buffer = tmp$ret$2;
    var result = mergeSort_0(array, buffer, start, endInclusive, comparator);
    if (!(result === array)) {
      var inductionVariable = start;
      if (inductionVariable <= endInclusive)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          array[i] = result[i];
        }
         while (!(i === endInclusive));
    }
  }
  function mergeSort_0(array, buffer, start, end, comparator) {
    if (start === end) {
      return array;
    }
    var median = (start + end | 0) / 2 | 0;
    var left = mergeSort_0(array, buffer, start, median, comparator);
    var right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator);
    var target = left === buffer ? array : buffer;
    var leftIndex = start;
    var rightIndex = median + 1 | 0;
    var inductionVariable = start;
    if (inductionVariable <= end)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (leftIndex <= median ? rightIndex <= end : false) {
          var leftValue = left[leftIndex];
          var rightValue = right[rightIndex];
          if (comparator.compare(leftValue, rightValue) <= 0) {
            target[i] = leftValue;
            var tmp1 = leftIndex;
            leftIndex = tmp1 + 1 | 0;
          } else {
            target[i] = rightValue;
            var tmp2 = rightIndex;
            rightIndex = tmp2 + 1 | 0;
          }
        } else if (leftIndex <= median) {
          target[i] = left[leftIndex];
          var tmp3 = leftIndex;
          leftIndex = tmp3 + 1 | 0;
        } else {
          target[i] = right[rightIndex];
          var tmp4 = rightIndex;
          rightIndex = tmp4 + 1 | 0;
        }
      }
       while (!(i === end));
    return target;
  }
  function sortArrayWith$lambda($comparator) {
    return function (a, b) {
      return $comparator.compare(a, b);
    };
  }
  function sortArray$lambda(a, b) {
    return compareTo_0(a, b);
  }
  function getStableSortingIsSupported$lambda(a, b) {
    return (a & 3) - (b & 3) | 0;
  }
  function HashCode() {
    HashCode_instance = this;
  }
  HashCode.prototype.x9 = function (value1, value2) {
    return equals_0(value1, value2);
  };
  HashCode.prototype.y9 = function (value) {
    var tmp0_safe_receiver = value;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  HashCode.$metadata$ = objectMeta('HashCode', [EqualityComparator]);
  var HashCode_instance;
  function HashCode_getInstance() {
    if (HashCode_instance == null)
      new HashCode();
    return HashCode_instance;
  }
  function EqualityComparator() {
  }
  EqualityComparator.$metadata$ = interfaceMeta('EqualityComparator');
  function EntrySet($outer) {
    this.z9_1 = $outer;
    AbstractEntrySet.call(this);
  }
  EntrySet.prototype.aa = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on entries');
  };
  EntrySet.prototype.a = function (element) {
    return this.aa((!(element == null) ? isInterface(element, MutableEntry) : false) ? element : THROW_CCE());
  };
  EntrySet.prototype.v8 = function () {
    this.z9_1.v8();
  };
  EntrySet.prototype.p9 = function (element) {
    return this.z9_1.h3(element);
  };
  EntrySet.prototype.f = function () {
    return this.z9_1.fa_1.f();
  };
  EntrySet.prototype.i = function () {
    return this.z9_1.i();
  };
  EntrySet.$metadata$ = classMeta('EntrySet', undefined, undefined, undefined, undefined, AbstractEntrySet.prototype);
  function HashMap_init_$Init$(internalMap, $this) {
    AbstractMutableMap.call($this);
    HashMap.call($this);
    $this.fa_1 = internalMap;
    $this.ga_1 = internalMap.ia();
    return $this;
  }
  function HashMap_init_$Init$_0($this) {
    HashMap_init_$Init$(new InternalHashCodeMap(HashCode_getInstance()), $this);
    return $this;
  }
  function HashMap_init_$Create$() {
    return HashMap_init_$Init$_0(Object.create(HashMap.prototype));
  }
  function HashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_0($this);
    // Inline function 'kotlin.require' call
    var tmp0_require = initialCapacity >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.HashMap.<init>.<anonymous>' call
      tmp$ret$0 = 'Negative initial capacity: ' + initialCapacity;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = loadFactor >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.HashMap.<init>.<anonymous>' call
      tmp$ret$1 = 'Non-positive load factor: ' + loadFactor;
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message_0));
    }
    return $this;
  }
  function HashMap_init_$Create$_0(initialCapacity, loadFactor) {
    return HashMap_init_$Init$_1(initialCapacity, loadFactor, Object.create(HashMap.prototype));
  }
  function HashMap_init_$Init$_2(initialCapacity, $this) {
    HashMap_init_$Init$_1(initialCapacity, 0.0, $this);
    return $this;
  }
  function HashMap_init_$Create$_1(initialCapacity) {
    return HashMap_init_$Init$_2(initialCapacity, Object.create(HashMap.prototype));
  }
  HashMap.prototype.v8 = function () {
    this.fa_1.v8();
  };
  HashMap.prototype.c3 = function (key) {
    return this.fa_1.z2(key);
  };
  HashMap.prototype.g3 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.fa_1;
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.p();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.f();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.h();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.HashMap.containsValue.<anonymous>' call
        tmp$ret$1 = this.ga_1.x9(element.f1(), value);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  HashMap.prototype.d1 = function () {
    if (this.ha_1 == null) {
      this.ha_1 = this.ja();
    }
    return ensureNotNull(this.ha_1);
  };
  HashMap.prototype.ja = function () {
    return new EntrySet(this);
  };
  HashMap.prototype.t = function (key) {
    return this.fa_1.t(key);
  };
  HashMap.prototype.u = function (key, value) {
    return this.fa_1.u(key, value);
  };
  HashMap.prototype.u9 = function (key) {
    return this.fa_1.u9(key);
  };
  HashMap.prototype.i = function () {
    return this.fa_1.i();
  };
  function HashMap() {
    this.ha_1 = null;
  }
  HashMap.$metadata$ = classMeta('HashMap', [MutableMap], undefined, undefined, undefined, AbstractMutableMap.prototype);
  function HashSet_init_$Init$($this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.v_1 = HashMap_init_$Create$();
    return $this;
  }
  function HashSet_init_$Create$() {
    return HashSet_init_$Init$(Object.create(HashSet.prototype));
  }
  function HashSet_init_$Init$_0(initialCapacity, loadFactor, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.v_1 = HashMap_init_$Create$_0(initialCapacity, loadFactor);
    return $this;
  }
  function HashSet_init_$Init$_1(initialCapacity, $this) {
    HashSet_init_$Init$_0(initialCapacity, 0.0, $this);
    return $this;
  }
  function HashSet_init_$Create$_0(initialCapacity) {
    return HashSet_init_$Init$_1(initialCapacity, Object.create(HashSet.prototype));
  }
  function HashSet_init_$Init$_2(map, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.v_1 = map;
    return $this;
  }
  HashSet.prototype.a = function (element) {
    var old = this.v_1.u(element, this);
    return old == null;
  };
  HashSet.prototype.v8 = function () {
    this.v_1.v8();
  };
  HashSet.prototype.u1 = function (element) {
    return this.v_1.c3(element);
  };
  HashSet.prototype.p = function () {
    return this.v_1.p();
  };
  HashSet.prototype.f = function () {
    return this.v_1.i3().f();
  };
  HashSet.prototype.i = function () {
    return this.v_1.i();
  };
  function HashSet() {
  }
  HashSet.$metadata$ = classMeta('HashSet', [MutableSet], undefined, undefined, undefined, AbstractMutableSet.prototype);
  function computeNext($this) {
    if ($this.na_1 != null ? $this.oa_1 : false) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = $this.na_1;
      tmp$ret$0 = tmp0_unsafeCast;
      var chainSize = tmp$ret$0.length;
      var tmp0_this = $this;
      tmp0_this.pa_1 = tmp0_this.pa_1 + 1 | 0;
      if (tmp0_this.pa_1 < chainSize)
        return 0;
    }
    var tmp1_this = $this;
    tmp1_this.ma_1 = tmp1_this.ma_1 + 1 | 0;
    if (tmp1_this.ma_1 < $this.la_1.length) {
      $this.na_1 = $this.ra_1.ta_1[$this.la_1[$this.ma_1]];
      var tmp = $this;
      var tmp_0 = $this.na_1;
      tmp.oa_1 = !(tmp_0 == null) ? isArray(tmp_0) : false;
      $this.pa_1 = 0;
      return 0;
    } else {
      $this.na_1 = null;
      return 1;
    }
  }
  function getEntry($this, key) {
    var tmp0_elvis_lhs = getChainOrEntryOrNull($this, $this.sa_1.y9(key));
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var chainOrEntry = tmp;
    if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
      var entry = chainOrEntry;
      if ($this.sa_1.x9(entry.e1(), key)) {
        return entry;
      } else {
        return null;
      }
    } else {
      var chain = chainOrEntry;
      return findEntryInChain(chain, $this, key);
    }
  }
  function findEntryInChain(_this__u8e3s4, $this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var indexedObject = _this__u8e3s4;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var element = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'kotlin.collections.InternalHashCodeMap.findEntryInChain.<anonymous>' call
        tmp$ret$0 = $this.sa_1.x9(element.e1(), key);
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function getChainOrEntryOrNull($this, hashCode) {
    var chainOrEntry = $this.ta_1[hashCode];
    return chainOrEntry === undefined ? null : chainOrEntry;
  }
  function InternalHashCodeMap$iterator$1(this$0) {
    this.ra_1 = this$0;
    this.ka_1 = -1;
    this.la_1 = Object.keys(this$0.ta_1);
    this.ma_1 = -1;
    this.na_1 = null;
    this.oa_1 = false;
    this.pa_1 = -1;
    this.qa_1 = null;
  }
  InternalHashCodeMap$iterator$1.prototype.g = function () {
    if (this.ka_1 === -1)
      this.ka_1 = computeNext(this);
    return this.ka_1 === 0;
  };
  InternalHashCodeMap$iterator$1.prototype.h = function () {
    if (!this.g())
      throw NoSuchElementException_init_$Create$();
    var tmp;
    if (this.oa_1) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = this.na_1;
      tmp$ret$0 = tmp0_unsafeCast;
      tmp = tmp$ret$0[this.pa_1];
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_unsafeCast = this.na_1;
      tmp$ret$1 = tmp1_unsafeCast;
      tmp = tmp$ret$1;
    }
    var lastEntry = tmp;
    this.qa_1 = lastEntry;
    this.ka_1 = -1;
    return lastEntry;
  };
  InternalHashCodeMap$iterator$1.prototype.x7 = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.checkNotNull' call
    var tmp0_checkNotNull = this.qa_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.checkNotNull' call
      // Inline function 'kotlin.contracts.contract' call
      if (tmp0_checkNotNull == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.checkNotNull.<anonymous>' call
        tmp$ret$0 = 'Required value was null.';
        var message = tmp$ret$0;
        throw IllegalStateException_init_$Create$(toString_3(message));
      } else {
        tmp$ret$1 = tmp0_checkNotNull;
        break $l$block;
      }
    }
    tmp$ret$2 = tmp$ret$1;
    this.ra_1.u9(ensureNotNull(this.qa_1).e1());
    this.qa_1 = null;
    var tmp0_this = this;
    var tmp1 = tmp0_this.pa_1;
    tmp0_this.pa_1 = tmp1 - 1 | 0;
  };
  InternalHashCodeMap$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function InternalHashCodeMap(equality) {
    this.sa_1 = equality;
    this.ta_1 = this.va();
    this.ua_1 = 0;
  }
  InternalHashCodeMap.prototype.ia = function () {
    return this.sa_1;
  };
  InternalHashCodeMap.prototype.i = function () {
    return this.ua_1;
  };
  InternalHashCodeMap.prototype.u = function (key, value) {
    var hashCode = this.sa_1.y9(key);
    var chainOrEntry = getChainOrEntryOrNull(this, hashCode);
    if (chainOrEntry == null) {
      this.ta_1[hashCode] = new SimpleEntry(key, value);
    } else {
      if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
        var entry = chainOrEntry;
        if (this.sa_1.x9(entry.e1(), key)) {
          return entry.o9(value);
        } else {
          var tmp$ret$2;
          // Inline function 'kotlin.arrayOf' call
          var tmp0_arrayOf = [entry, new SimpleEntry(key, value)];
          var tmp$ret$1;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_arrayOf;
          tmp$ret$1 = tmp$ret$0;
          tmp$ret$2 = tmp$ret$1;
          this.ta_1[hashCode] = tmp$ret$2;
          var tmp0_this = this;
          var tmp1 = tmp0_this.ua_1;
          tmp0_this.ua_1 = tmp1 + 1 | 0;
          return null;
        }
      } else {
        var chain = chainOrEntry;
        var entry_0 = findEntryInChain(chain, this, key);
        if (!(entry_0 == null)) {
          return entry_0.o9(value);
        }
        var tmp$ret$3;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$3 = chain;
        tmp$ret$3.push(new SimpleEntry(key, value));
      }
    }
    var tmp2_this = this;
    var tmp3 = tmp2_this.ua_1;
    tmp2_this.ua_1 = tmp3 + 1 | 0;
    return null;
  };
  InternalHashCodeMap.prototype.u9 = function (key) {
    var hashCode = this.sa_1.y9(key);
    var tmp0_elvis_lhs = getChainOrEntryOrNull(this, hashCode);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var chainOrEntry = tmp;
    if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
      var entry = chainOrEntry;
      if (this.sa_1.x9(entry.e1(), key)) {
        jsDeleteProperty(this.ta_1, hashCode);
        var tmp1_this = this;
        var tmp2 = tmp1_this.ua_1;
        tmp1_this.ua_1 = tmp2 - 1 | 0;
        return entry.f1();
      } else {
        return null;
      }
    } else {
      var chain = chainOrEntry;
      var inductionVariable = 0;
      var last = chain.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var entry_0 = chain[index];
          if (this.sa_1.x9(key, entry_0.e1())) {
            if (chain.length === 1) {
              var tmp$ret$0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$0 = chain;
              tmp$ret$0.length = 0;
              jsDeleteProperty(this.ta_1, hashCode);
            } else {
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$1 = chain;
              tmp$ret$1.splice(index, 1);
            }
            var tmp4_this = this;
            var tmp5 = tmp4_this.ua_1;
            tmp4_this.ua_1 = tmp5 - 1 | 0;
            return entry_0.f1();
          }
        }
         while (inductionVariable <= last);
    }
    return null;
  };
  InternalHashCodeMap.prototype.v8 = function () {
    this.ta_1 = this.va();
    this.ua_1 = 0;
  };
  InternalHashCodeMap.prototype.z2 = function (key) {
    return !(getEntry(this, key) == null);
  };
  InternalHashCodeMap.prototype.t = function (key) {
    var tmp0_safe_receiver = getEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.f1();
  };
  InternalHashCodeMap.prototype.f = function () {
    return new InternalHashCodeMap$iterator$1(this);
  };
  InternalHashCodeMap.$metadata$ = classMeta('InternalHashCodeMap', [InternalMap]);
  function InternalMap() {
  }
  InternalMap.$metadata$ = interfaceMeta('InternalMap', [MutableIterable]);
  function EntryIterator($outer) {
    this.ya_1 = $outer;
    this.wa_1 = null;
    this.xa_1 = null;
    this.xa_1 = this.ya_1.za_1.k4_1;
  }
  EntryIterator.prototype.g = function () {
    return !(this.xa_1 === null);
  };
  EntryIterator.prototype.h = function () {
    if (!this.g())
      throw NoSuchElementException_init_$Create$();
    var current = ensureNotNull(this.xa_1);
    this.wa_1 = current;
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.takeIf' call
    var tmp0_takeIf = current.cb_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.EntryIterator.next.<anonymous>' call
    tmp$ret$0 = !(tmp0_takeIf === this.ya_1.za_1.k4_1);
    if (tmp$ret$0) {
      tmp_0 = tmp0_takeIf;
    } else {
      tmp_0 = null;
    }
    tmp$ret$1 = tmp_0;
    tmp.xa_1 = tmp$ret$1;
    return current;
  };
  EntryIterator.prototype.x7 = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = !(this.wa_1 == null);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$(toString_3(message));
    }
    this.ya_1.u8();
    remove(ensureNotNull(this.wa_1), this.ya_1.za_1);
    this.ya_1.za_1.l4_1.u9(ensureNotNull(this.wa_1).e1());
    this.wa_1 = null;
  };
  EntryIterator.$metadata$ = classMeta('EntryIterator', [MutableIterator]);
  function ChainEntry($outer, key, value) {
    this.eb_1 = $outer;
    SimpleEntry.call(this, key, value);
    this.cb_1 = null;
    this.db_1 = null;
  }
  ChainEntry.prototype.o9 = function (newValue) {
    this.eb_1.u8();
    return SimpleEntry.prototype.o9.call(this, newValue);
  };
  ChainEntry.$metadata$ = classMeta('ChainEntry', undefined, undefined, undefined, undefined, SimpleEntry.prototype);
  function EntrySet_0($outer) {
    this.za_1 = $outer;
    AbstractEntrySet.call(this);
  }
  EntrySet_0.prototype.aa = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on entries');
  };
  EntrySet_0.prototype.a = function (element) {
    return this.aa((!(element == null) ? isInterface(element, MutableEntry) : false) ? element : THROW_CCE());
  };
  EntrySet_0.prototype.v8 = function () {
    this.za_1.v8();
  };
  EntrySet_0.prototype.p9 = function (element) {
    return this.za_1.h3(element);
  };
  EntrySet_0.prototype.f = function () {
    return new EntryIterator(this);
  };
  EntrySet_0.prototype.i = function () {
    return this.za_1.i();
  };
  EntrySet_0.prototype.u8 = function () {
    return this.za_1.u8();
  };
  EntrySet_0.$metadata$ = classMeta('EntrySet', undefined, undefined, undefined, undefined, AbstractEntrySet.prototype);
  function addToEnd(_this__u8e3s4, $this) {
    // Inline function 'kotlin.check' call
    var tmp0_check = _this__u8e3s4.cb_1 == null ? _this__u8e3s4.db_1 == null : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$(toString_3(message));
    }
    var _head = $this.k4_1;
    if (_head == null) {
      $this.k4_1 = _this__u8e3s4;
      _this__u8e3s4.cb_1 = _this__u8e3s4;
      _this__u8e3s4.db_1 = _this__u8e3s4;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.checkNotNull' call
      var tmp1_checkNotNull = _head.db_1;
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      $l$block: {
        // Inline function 'kotlin.checkNotNull' call
        // Inline function 'kotlin.contracts.contract' call
        if (tmp1_checkNotNull == null) {
          var tmp$ret$1;
          // Inline function 'kotlin.checkNotNull.<anonymous>' call
          tmp$ret$1 = 'Required value was null.';
          var message_0 = tmp$ret$1;
          throw IllegalStateException_init_$Create$(toString_3(message_0));
        } else {
          tmp$ret$2 = tmp1_checkNotNull;
          break $l$block;
        }
      }
      tmp$ret$3 = tmp$ret$2;
      var _tail = tmp$ret$3;
      _this__u8e3s4.db_1 = _tail;
      _this__u8e3s4.cb_1 = _head;
      _head.db_1 = _this__u8e3s4;
      _tail.cb_1 = _this__u8e3s4;
    }
  }
  function remove(_this__u8e3s4, $this) {
    if (_this__u8e3s4.cb_1 === _this__u8e3s4) {
      $this.k4_1 = null;
    } else {
      if ($this.k4_1 === _this__u8e3s4) {
        $this.k4_1 = _this__u8e3s4.cb_1;
      }
      ensureNotNull(_this__u8e3s4.cb_1).db_1 = _this__u8e3s4.db_1;
      ensureNotNull(_this__u8e3s4.db_1).cb_1 = _this__u8e3s4.cb_1;
    }
    _this__u8e3s4.cb_1 = null;
    _this__u8e3s4.db_1 = null;
  }
  function LinkedHashMap_init_$Init$($this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    $this.l4_1 = HashMap_init_$Create$();
    return $this;
  }
  function LinkedHashMap_init_$Create$() {
    return LinkedHashMap_init_$Init$(Object.create(LinkedHashMap.prototype));
  }
  function LinkedHashMap_init_$Init$_0(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_1(initialCapacity, loadFactor, $this);
    LinkedHashMap.call($this);
    $this.l4_1 = HashMap_init_$Create$();
    return $this;
  }
  function LinkedHashMap_init_$Create$_0(initialCapacity, loadFactor) {
    return LinkedHashMap_init_$Init$_0(initialCapacity, loadFactor, Object.create(LinkedHashMap.prototype));
  }
  function LinkedHashMap_init_$Init$_1(initialCapacity, $this) {
    LinkedHashMap_init_$Init$_0(initialCapacity, 0.0, $this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_1(initialCapacity) {
    return LinkedHashMap_init_$Init$_1(initialCapacity, Object.create(LinkedHashMap.prototype));
  }
  function LinkedHashMap_init_$Init$_2(original, $this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    $this.l4_1 = HashMap_init_$Create$();
    $this.r4(original);
    return $this;
  }
  function LinkedHashMap_init_$Create$_2(original) {
    return LinkedHashMap_init_$Init$_2(original, Object.create(LinkedHashMap.prototype));
  }
  LinkedHashMap.prototype.v8 = function () {
    this.u8();
    this.l4_1.v8();
    this.k4_1 = null;
  };
  LinkedHashMap.prototype.c3 = function (key) {
    return this.l4_1.c3(key);
  };
  LinkedHashMap.prototype.g3 = function (value) {
    var tmp0_elvis_lhs = this.k4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var node = tmp;
    do {
      if (equals_0(node.f1(), value)) {
        return true;
      }
      node = ensureNotNull(node.cb_1);
    }
     while (!(node === this.k4_1));
    return false;
  };
  LinkedHashMap.prototype.ja = function () {
    return new EntrySet_0(this);
  };
  LinkedHashMap.prototype.t = function (key) {
    var tmp0_safe_receiver = this.l4_1.t(key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.f1();
  };
  LinkedHashMap.prototype.u = function (key, value) {
    this.u8();
    var old = this.l4_1.t(key);
    if (old == null) {
      var newEntry = new ChainEntry(this, key, value);
      this.l4_1.u(key, newEntry);
      addToEnd(newEntry, this);
      return null;
    } else {
      return old.o9(value);
    }
  };
  LinkedHashMap.prototype.u9 = function (key) {
    this.u8();
    var entry = this.l4_1.u9(key);
    if (!(entry == null)) {
      remove(entry, this);
      return entry.f1();
    }
    return null;
  };
  LinkedHashMap.prototype.i = function () {
    return this.l4_1.i();
  };
  LinkedHashMap.prototype.u8 = function () {
    if (this.m4_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  function LinkedHashMap() {
    this.k4_1 = null;
    this.m4_1 = false;
  }
  LinkedHashMap.$metadata$ = classMeta('LinkedHashMap', [MutableMap], undefined, undefined, undefined, HashMap.prototype);
  function LinkedHashSet_init_$Init$($this) {
    HashSet_init_$Init$_2(LinkedHashMap_init_$Create$(), $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$() {
    return LinkedHashSet_init_$Init$(Object.create(LinkedHashSet.prototype));
  }
  function LinkedHashSet_init_$Init$_0(elements, $this) {
    HashSet_init_$Init$_2(LinkedHashMap_init_$Create$(), $this);
    LinkedHashSet.call($this);
    $this.j(elements);
    return $this;
  }
  function LinkedHashSet_init_$Create$_0(elements) {
    return LinkedHashSet_init_$Init$_0(elements, Object.create(LinkedHashSet.prototype));
  }
  function LinkedHashSet_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$_2(LinkedHashMap_init_$Create$_0(initialCapacity, loadFactor), $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Init$_2(initialCapacity, $this) {
    LinkedHashSet_init_$Init$_1(initialCapacity, 0.0, $this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_1(initialCapacity) {
    return LinkedHashSet_init_$Init$_2(initialCapacity, Object.create(LinkedHashSet.prototype));
  }
  LinkedHashSet.prototype.u8 = function () {
    return this.v_1.u8();
  };
  function LinkedHashSet() {
  }
  LinkedHashSet.$metadata$ = classMeta('LinkedHashSet', [MutableSet], undefined, undefined, undefined, HashSet.prototype);
  function RandomAccess() {
  }
  RandomAccess.$metadata$ = interfaceMeta('RandomAccess');
  function get_output() {
    init_properties_console_kt_6h8hpf();
    return output;
  }
  var output;
  function BaseOutput() {
  }
  BaseOutput.prototype.gb = function () {
    this.hb('\n');
  };
  BaseOutput.prototype.ib = function (message) {
    this.hb(message);
    this.gb();
  };
  BaseOutput.$metadata$ = classMeta('BaseOutput');
  function NodeJsOutput(outputStream) {
    BaseOutput.call(this);
    this.jb_1 = outputStream;
  }
  NodeJsOutput.prototype.hb = function (message) {
    var tmp$ret$0;
    // Inline function 'kotlin.io.String' call
    tmp$ret$0 = String(message);
    var messageString = tmp$ret$0;
    this.jb_1.write(messageString);
  };
  NodeJsOutput.$metadata$ = classMeta('NodeJsOutput', undefined, undefined, undefined, undefined, BaseOutput.prototype);
  function BufferedOutputToConsoleLog() {
    BufferedOutput.call(this);
  }
  BufferedOutputToConsoleLog.prototype.hb = function (message) {
    var tmp$ret$0;
    // Inline function 'kotlin.io.String' call
    tmp$ret$0 = String(message);
    var s = tmp$ret$0;
    var tmp$ret$2;
    // Inline function 'kotlin.text.nativeLastIndexOf' call
    var tmp0_nativeLastIndexOf = s;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = tmp0_nativeLastIndexOf;
    tmp$ret$2 = tmp$ret$1.lastIndexOf('\n', 0);
    var i = tmp$ret$2;
    if (i >= 0) {
      var tmp0_this = this;
      var tmp = tmp0_this;
      var tmp_0 = tmp0_this.lb_1;
      var tmp$ret$4;
      // Inline function 'kotlin.text.substring' call
      var tmp1_substring = s;
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = tmp1_substring;
      tmp$ret$4 = tmp$ret$3.substring(0, i);
      tmp.lb_1 = tmp_0 + tmp$ret$4;
      this.mb();
      var tmp$ret$6;
      // Inline function 'kotlin.text.substring' call
      var tmp2_substring = s;
      var tmp3_substring = i + 1 | 0;
      var tmp$ret$5;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$5 = tmp2_substring;
      tmp$ret$6 = tmp$ret$5.substring(tmp3_substring);
      s = tmp$ret$6;
    }
    var tmp1_this = this;
    tmp1_this.lb_1 = tmp1_this.lb_1 + s;
  };
  BufferedOutputToConsoleLog.prototype.mb = function () {
    console.log(this.lb_1);
    this.lb_1 = '';
  };
  BufferedOutputToConsoleLog.$metadata$ = classMeta('BufferedOutputToConsoleLog', undefined, undefined, undefined, undefined, BufferedOutput.prototype);
  function String_0(value) {
    init_properties_console_kt_6h8hpf();
    return String(value);
  }
  function BufferedOutput() {
    BaseOutput.call(this);
    this.lb_1 = '';
  }
  BufferedOutput.prototype.hb = function (message) {
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp_0 = tmp0_this.lb_1;
    var tmp$ret$0;
    // Inline function 'kotlin.io.String' call
    tmp$ret$0 = String(message);
    tmp.lb_1 = tmp_0 + tmp$ret$0;
  };
  BufferedOutput.$metadata$ = classMeta('BufferedOutput', undefined, undefined, undefined, undefined, BaseOutput.prototype);
  function println(message) {
    init_properties_console_kt_6h8hpf();
    get_output().ib(message);
  }
  var properties_initialized_console_kt_gll9dl;
  function init_properties_console_kt_6h8hpf() {
    if (properties_initialized_console_kt_gll9dl) {
    } else {
      properties_initialized_console_kt_gll9dl = true;
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.io.output.<anonymous>' call
      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
      tmp$ret$0 = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();
      tmp$ret$1 = tmp$ret$0;
      output = tmp$ret$1;
    }
  }
  function asDynamic(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function unsafeCastDynamic(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function unsafeCast(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0;
  }
  function eachCount(_this__u8e3s4) {
    var tmp$ret$6;
    // Inline function 'kotlin.collections.fold' call
    var tmp$ret$5;
    // Inline function 'kotlin.collections.aggregate' call
    var tmp$ret$4;
    // Inline function 'kotlin.collections.aggregateTo' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    var tmp2_aggregateTo = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = _this__u8e3s4.a1();
    tmp$ret$1 = tmp0_iterator;
    var tmp0_iterator_0 = tmp$ret$1;
    while (tmp0_iterator_0.g()) {
      var e = tmp0_iterator_0.h();
      var key = _this__u8e3s4.b1(e);
      var accumulator = tmp2_aggregateTo.t(key);
      // Inline function 'kotlin.collections.set' call
      var tmp$ret$3;
      // Inline function 'kotlin.collections.fold.<anonymous>' call
      var tmp3__anonymous__ufb84q = accumulator == null ? !tmp2_aggregateTo.c3(key) : false;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.eachCount.<anonymous>' call
      var tmp;
      if (tmp3__anonymous__ufb84q) {
        tmp = 0;
      } else {
        tmp = (accumulator == null ? true : isObject(accumulator)) ? accumulator : THROW_CCE();
      }
      var tmp0__anonymous__q1qw7t = tmp;
      tmp$ret$2 = tmp0__anonymous__q1qw7t + 1 | 0;
      tmp$ret$3 = tmp$ret$2;
      var tmp1_set = tmp$ret$3;
      tmp2_aggregateTo.u(key, tmp1_set);
    }
    tmp$ret$4 = tmp2_aggregateTo;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    return tmp$ret$6;
  }
  function Serializable() {
  }
  Serializable.$metadata$ = interfaceMeta('Serializable');
  function ceil(x) {
    return Math.ceil(x);
  }
  function max(a, b) {
    return Math.max(a, b);
  }
  function floor(x) {
    return Math.floor(x);
  }
  function get_absoluteValue(_this__u8e3s4) {
    return abs(_this__u8e3s4);
  }
  function get_absoluteValue_0(_this__u8e3s4) {
    return abs_0(_this__u8e3s4);
  }
  function log10_0(x) {
    return log10(x);
  }
  function floor_0(x) {
    return Math.floor(x);
  }
  function max_0(a, b) {
    return a.v5(b) >= 0 ? a : b;
  }
  function min(a, b) {
    return a.v5(b) <= 0 ? a : b;
  }
  function abs(n) {
    return n.v5(new Long(0, 0)) < 0 ? n.t5() : n;
  }
  function abs_0(n) {
    return n < 0 ? -n | 0 | 0 : n;
  }
  function isNaN_0(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function get_js(_this__u8e3s4) {
    return (_this__u8e3s4 instanceof KClassImpl ? _this__u8e3s4 : THROW_CCE()).ob();
  }
  function KCallable() {
  }
  KCallable.$metadata$ = interfaceMeta('KCallable');
  function KClass() {
  }
  KClass.$metadata$ = interfaceMeta('KClass', [KClassifier]);
  function KClassImpl(jClass) {
    this.nb_1 = jClass;
  }
  KClassImpl.prototype.ob = function () {
    return this.nb_1;
  };
  KClassImpl.prototype.equals = function (other) {
    var tmp;
    if (other instanceof KClassImpl) {
      tmp = equals_0(this.ob(), other.ob());
    } else {
      tmp = false;
    }
    return tmp;
  };
  KClassImpl.prototype.hashCode = function () {
    var tmp0_safe_receiver = this.pb();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  KClassImpl.prototype.toString = function () {
    return 'class ' + this.pb();
  };
  KClassImpl.$metadata$ = classMeta('KClassImpl', [KClass]);
  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
    KClassImpl.call(this, jClass);
    this.rb_1 = givenSimpleName;
    this.sb_1 = isInstanceFunction;
  }
  PrimitiveKClassImpl.prototype.equals = function (other) {
    if (!(other instanceof PrimitiveKClassImpl))
      return false;
    return KClassImpl.prototype.equals.call(this, other) ? this.rb_1 === other.rb_1 : false;
  };
  PrimitiveKClassImpl.prototype.pb = function () {
    return this.rb_1;
  };
  PrimitiveKClassImpl.$metadata$ = classMeta('PrimitiveKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  function NothingKClassImpl() {
    NothingKClassImpl_instance = this;
    KClassImpl.call(this, Object);
    this.ub_1 = 'Nothing';
  }
  NothingKClassImpl.prototype.pb = function () {
    return this.ub_1;
  };
  NothingKClassImpl.prototype.ob = function () {
    throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
  };
  NothingKClassImpl.prototype.equals = function (other) {
    return other === this;
  };
  NothingKClassImpl.prototype.hashCode = function () {
    return 0;
  };
  NothingKClassImpl.$metadata$ = objectMeta('NothingKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  var NothingKClassImpl_instance;
  function NothingKClassImpl_getInstance() {
    if (NothingKClassImpl_instance == null)
      new NothingKClassImpl();
    return NothingKClassImpl_instance;
  }
  function ErrorKClass() {
  }
  ErrorKClass.prototype.pb = function () {
    throw IllegalStateException_init_$Create$('Unknown simpleName for ErrorKClass');
  };
  ErrorKClass.prototype.equals = function (other) {
    return other === this;
  };
  ErrorKClass.prototype.hashCode = function () {
    return 0;
  };
  ErrorKClass.$metadata$ = classMeta('ErrorKClass', [KClass]);
  function SimpleKClassImpl(jClass) {
    KClassImpl.call(this, jClass);
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = jClass;
    var tmp0_safe_receiver = tmp$ret$0.$metadata$;
    var tmp0_unsafeCast = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;
    tmp$ret$1 = tmp0_unsafeCast;
    tmp.wb_1 = tmp$ret$1;
  }
  SimpleKClassImpl.prototype.pb = function () {
    return this.wb_1;
  };
  SimpleKClassImpl.$metadata$ = classMeta('SimpleKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  function KProperty1() {
  }
  KProperty1.$metadata$ = interfaceMeta('KProperty1', [KProperty]);
  function KProperty0() {
  }
  KProperty0.$metadata$ = interfaceMeta('KProperty0', [KProperty]);
  function KProperty() {
  }
  KProperty.$metadata$ = interfaceMeta('KProperty', [KCallable]);
  function get_functionClasses() {
    init_properties_primitives_kt_rm1w5q();
    return functionClasses;
  }
  var functionClasses;
  function PrimitiveClasses$anyClass$lambda(it) {
    return isObject(it);
  }
  function PrimitiveClasses$numberClass$lambda(it) {
    return isNumber(it);
  }
  function PrimitiveClasses$booleanClass$lambda(it) {
    return !(it == null) ? typeof it === 'boolean' : false;
  }
  function PrimitiveClasses$byteClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$shortClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$intClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$floatClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$doubleClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$arrayClass$lambda(it) {
    return !(it == null) ? isArray(it) : false;
  }
  function PrimitiveClasses$stringClass$lambda(it) {
    return !(it == null) ? typeof it === 'string' : false;
  }
  function PrimitiveClasses$throwableClass$lambda(it) {
    return it instanceof Error;
  }
  function PrimitiveClasses$booleanArrayClass$lambda(it) {
    return !(it == null) ? isBooleanArray(it) : false;
  }
  function PrimitiveClasses$charArrayClass$lambda(it) {
    return !(it == null) ? isCharArray(it) : false;
  }
  function PrimitiveClasses$byteArrayClass$lambda(it) {
    return !(it == null) ? isByteArray(it) : false;
  }
  function PrimitiveClasses$shortArrayClass$lambda(it) {
    return !(it == null) ? isShortArray(it) : false;
  }
  function PrimitiveClasses$intArrayClass$lambda(it) {
    return !(it == null) ? isIntArray(it) : false;
  }
  function PrimitiveClasses$longArrayClass$lambda(it) {
    return !(it == null) ? isLongArray(it) : false;
  }
  function PrimitiveClasses$floatArrayClass$lambda(it) {
    return !(it == null) ? isFloatArray(it) : false;
  }
  function PrimitiveClasses$doubleArrayClass$lambda(it) {
    return !(it == null) ? isDoubleArray(it) : false;
  }
  function PrimitiveClasses$functionClass$lambda($arity) {
    return function (it) {
      var tmp;
      if (typeof it === 'function') {
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = it;
        tmp = tmp$ret$0.length === $arity;
      } else {
        tmp = false;
      }
      return tmp;
    };
  }
  function PrimitiveClasses() {
    PrimitiveClasses_instance = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Object;
    tmp$ret$0 = tmp0_unsafeCast;
    var tmp_0 = tmp$ret$0;
    tmp.yb_1 = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);
    var tmp_1 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_0 = Number;
    tmp$ret$1 = tmp0_unsafeCast_0;
    var tmp_2 = tmp$ret$1;
    tmp_1.zb_1 = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);
    this.ac_1 = NothingKClassImpl_getInstance();
    var tmp_3 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_1 = Boolean;
    tmp$ret$2 = tmp0_unsafeCast_1;
    var tmp_4 = tmp$ret$2;
    tmp_3.bc_1 = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);
    var tmp_5 = this;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_2 = Number;
    tmp$ret$3 = tmp0_unsafeCast_2;
    var tmp_6 = tmp$ret$3;
    tmp_5.cc_1 = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);
    var tmp_7 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_3 = Number;
    tmp$ret$4 = tmp0_unsafeCast_3;
    var tmp_8 = tmp$ret$4;
    tmp_7.dc_1 = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);
    var tmp_9 = this;
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_4 = Number;
    tmp$ret$5 = tmp0_unsafeCast_4;
    var tmp_10 = tmp$ret$5;
    tmp_9.ec_1 = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);
    var tmp_11 = this;
    var tmp$ret$6;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_5 = Number;
    tmp$ret$6 = tmp0_unsafeCast_5;
    var tmp_12 = tmp$ret$6;
    tmp_11.fc_1 = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);
    var tmp_13 = this;
    var tmp$ret$7;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_6 = Number;
    tmp$ret$7 = tmp0_unsafeCast_6;
    var tmp_14 = tmp$ret$7;
    tmp_13.gc_1 = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);
    var tmp_15 = this;
    var tmp$ret$8;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_7 = Array;
    tmp$ret$8 = tmp0_unsafeCast_7;
    var tmp_16 = tmp$ret$8;
    tmp_15.hc_1 = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);
    var tmp_17 = this;
    var tmp$ret$9;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_8 = String;
    tmp$ret$9 = tmp0_unsafeCast_8;
    var tmp_18 = tmp$ret$9;
    tmp_17.ic_1 = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);
    var tmp_19 = this;
    var tmp$ret$10;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_9 = Error;
    tmp$ret$10 = tmp0_unsafeCast_9;
    var tmp_20 = tmp$ret$10;
    tmp_19.jc_1 = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);
    var tmp_21 = this;
    var tmp$ret$11;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_10 = Array;
    tmp$ret$11 = tmp0_unsafeCast_10;
    var tmp_22 = tmp$ret$11;
    tmp_21.kc_1 = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
    var tmp_23 = this;
    var tmp$ret$12;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_11 = Uint16Array;
    tmp$ret$12 = tmp0_unsafeCast_11;
    var tmp_24 = tmp$ret$12;
    tmp_23.lc_1 = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
    var tmp_25 = this;
    var tmp$ret$13;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_12 = Int8Array;
    tmp$ret$13 = tmp0_unsafeCast_12;
    var tmp_26 = tmp$ret$13;
    tmp_25.mc_1 = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
    var tmp_27 = this;
    var tmp$ret$14;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_13 = Int16Array;
    tmp$ret$14 = tmp0_unsafeCast_13;
    var tmp_28 = tmp$ret$14;
    tmp_27.nc_1 = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
    var tmp_29 = this;
    var tmp$ret$15;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_14 = Int32Array;
    tmp$ret$15 = tmp0_unsafeCast_14;
    var tmp_30 = tmp$ret$15;
    tmp_29.oc_1 = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
    var tmp_31 = this;
    var tmp$ret$16;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_15 = Array;
    tmp$ret$16 = tmp0_unsafeCast_15;
    var tmp_32 = tmp$ret$16;
    tmp_31.pc_1 = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
    var tmp_33 = this;
    var tmp$ret$17;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_16 = Float32Array;
    tmp$ret$17 = tmp0_unsafeCast_16;
    var tmp_34 = tmp$ret$17;
    tmp_33.qc_1 = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
    var tmp_35 = this;
    var tmp$ret$18;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_17 = Float64Array;
    tmp$ret$18 = tmp0_unsafeCast_17;
    var tmp_36 = tmp$ret$18;
    tmp_35.rc_1 = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
  }
  PrimitiveClasses.prototype.sc = function () {
    return this.yb_1;
  };
  PrimitiveClasses.prototype.tc = function () {
    return this.zb_1;
  };
  PrimitiveClasses.prototype.uc = function () {
    return this.ac_1;
  };
  PrimitiveClasses.prototype.vc = function () {
    return this.bc_1;
  };
  PrimitiveClasses.prototype.wc = function () {
    return this.cc_1;
  };
  PrimitiveClasses.prototype.xc = function () {
    return this.dc_1;
  };
  PrimitiveClasses.prototype.yc = function () {
    return this.ec_1;
  };
  PrimitiveClasses.prototype.zc = function () {
    return this.fc_1;
  };
  PrimitiveClasses.prototype.ad = function () {
    return this.gc_1;
  };
  PrimitiveClasses.prototype.bd = function () {
    return this.hc_1;
  };
  PrimitiveClasses.prototype.cd = function () {
    return this.ic_1;
  };
  PrimitiveClasses.prototype.dd = function () {
    return this.jc_1;
  };
  PrimitiveClasses.prototype.ed = function () {
    return this.kc_1;
  };
  PrimitiveClasses.prototype.fd = function () {
    return this.lc_1;
  };
  PrimitiveClasses.prototype.gd = function () {
    return this.mc_1;
  };
  PrimitiveClasses.prototype.hd = function () {
    return this.nc_1;
  };
  PrimitiveClasses.prototype.id = function () {
    return this.oc_1;
  };
  PrimitiveClasses.prototype.jd = function () {
    return this.pc_1;
  };
  PrimitiveClasses.prototype.kd = function () {
    return this.qc_1;
  };
  PrimitiveClasses.prototype.ld = function () {
    return this.rc_1;
  };
  PrimitiveClasses.prototype.functionClass = function (arity) {
    var tmp0_elvis_lhs = get_functionClasses()[arity];
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$3;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = Function;
      tmp$ret$0 = tmp0_unsafeCast;
      var tmp_0 = tmp$ret$0;
      var tmp_1 = 'Function' + arity;
      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp1_asDynamic = get_functionClasses();
      tmp$ret$1 = tmp1_asDynamic;
      tmp$ret$1[arity] = result;
      tmp$ret$2 = result;
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  PrimitiveClasses.$metadata$ = objectMeta('PrimitiveClasses');
  Object.defineProperty(PrimitiveClasses.prototype, 'anyClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.sc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'numberClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.tc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'nothingClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.uc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'booleanClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.vc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'byteClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.wc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'shortClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.xc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'intClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.yc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'floatClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.zc
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'doubleClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ad
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'arrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.bd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'stringClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.cd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'throwableClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.dd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'booleanArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ed
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'charArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.fd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'byteArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.gd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'shortArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.hd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'intArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.id
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'longArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.jd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'floatArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.kd
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'doubleArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ld
  });
  var PrimitiveClasses_instance;
  function PrimitiveClasses_getInstance() {
    if (PrimitiveClasses_instance == null)
      new PrimitiveClasses();
    return PrimitiveClasses_instance;
  }
  var properties_initialized_primitives_kt_jle18u;
  function init_properties_primitives_kt_rm1w5q() {
    if (properties_initialized_primitives_kt_jle18u) {
    } else {
      properties_initialized_primitives_kt_jle18u = true;
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      tmp$ret$0 = fillArrayVal(Array(0), null);
      functionClasses = tmp$ret$0;
    }
  }
  function getKClass(jClass) {
    var tmp;
    if (Array.isArray(jClass)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = jClass;
      tmp$ret$1 = tmp$ret$0;
      tmp = getKClassM(tmp$ret$1);
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = jClass;
      tmp$ret$3 = tmp$ret$2;
      tmp = getKClass1(tmp$ret$3);
    }
    return tmp;
  }
  function getKClassM(jClasses) {
    var tmp0_subject = jClasses.length;
    var tmp;
    switch (tmp0_subject) {
      case 1:
        tmp = getKClass1(jClasses[0]);
        break;
      case 0:
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp0_unsafeCast = NothingKClassImpl_getInstance();
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0_unsafeCast;
        tmp$ret$1 = tmp$ret$0;

        tmp = tmp$ret$1;
        break;
      default:
        var tmp$ret$3;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp1_unsafeCast = new ErrorKClass();
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = tmp1_unsafeCast;
        tmp$ret$3 = tmp$ret$2;

        tmp = tmp$ret$3;
        break;
    }
    return tmp;
  }
  function getKClass1(jClass) {
    if (jClass === String) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = PrimitiveClasses_getInstance().ic_1;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    }
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = jClass;
    var metadata = tmp$ret$2.$metadata$;
    var tmp;
    if (metadata != null) {
      var tmp_0;
      if (metadata.$kClass$ == null) {
        var kClass = new SimpleKClassImpl(jClass);
        metadata.$kClass$ = kClass;
        tmp_0 = kClass;
      } else {
        tmp_0 = metadata.$kClass$;
      }
      tmp = tmp_0;
    } else {
      tmp = new SimpleKClassImpl(jClass);
    }
    return tmp;
  }
  function getKClassFromExpression(e) {
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_subject = typeof e;
    var tmp;
    switch (tmp0_subject) {
      case 'string':
        tmp = PrimitiveClasses_getInstance().ic_1;
        break;
      case 'number':
        var tmp_0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        var tmp0_asDynamic = jsBitwiseOr(e, 0);
        tmp$ret$0 = tmp0_asDynamic;

        if (tmp$ret$0 === e) {
          tmp_0 = PrimitiveClasses_getInstance().ec_1;
        } else {
          tmp_0 = PrimitiveClasses_getInstance().gc_1;
        }

        tmp = tmp_0;
        break;
      case 'boolean':
        tmp = PrimitiveClasses_getInstance().bc_1;
        break;
      case 'function':
        var tmp_1 = PrimitiveClasses_getInstance();
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = e;

        tmp = tmp_1.functionClass(tmp$ret$1.length);
        break;
      default:
        var tmp_2;
        if (isBooleanArray(e)) {
          tmp_2 = PrimitiveClasses_getInstance().kc_1;
        } else {
          if (isCharArray(e)) {
            tmp_2 = PrimitiveClasses_getInstance().lc_1;
          } else {
            if (isByteArray(e)) {
              tmp_2 = PrimitiveClasses_getInstance().mc_1;
            } else {
              if (isShortArray(e)) {
                tmp_2 = PrimitiveClasses_getInstance().nc_1;
              } else {
                if (isIntArray(e)) {
                  tmp_2 = PrimitiveClasses_getInstance().oc_1;
                } else {
                  if (isLongArray(e)) {
                    tmp_2 = PrimitiveClasses_getInstance().pc_1;
                  } else {
                    if (isFloatArray(e)) {
                      tmp_2 = PrimitiveClasses_getInstance().qc_1;
                    } else {
                      if (isDoubleArray(e)) {
                        tmp_2 = PrimitiveClasses_getInstance().rc_1;
                      } else {
                        if (isInterface(e, KClass)) {
                          tmp_2 = getKClass(KClass);
                        } else {
                          if (isArray(e)) {
                            tmp_2 = PrimitiveClasses_getInstance().hc_1;
                          } else {
                            var constructor = Object.getPrototypeOf(e).constructor;
                            var tmp_3;
                            if (constructor === Object) {
                              tmp_3 = PrimitiveClasses_getInstance().yb_1;
                            } else if (constructor === Error) {
                              tmp_3 = PrimitiveClasses_getInstance().jc_1;
                            } else {
                              var jsClass = constructor;
                              tmp_3 = getKClass1(jsClass);
                            }
                            tmp_2 = tmp_3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        tmp = tmp_2;
        break;
    }
    var tmp1_unsafeCast = tmp;
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = tmp1_unsafeCast;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function get_0(_this__u8e3s4, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0[index];
  }
  function Appendable() {
  }
  Appendable.$metadata$ = interfaceMeta('Appendable');
  var CharCategory_UNASSIGNED_instance;
  var CharCategory_UPPERCASE_LETTER_instance;
  var CharCategory_LOWERCASE_LETTER_instance;
  var CharCategory_TITLECASE_LETTER_instance;
  var CharCategory_MODIFIER_LETTER_instance;
  var CharCategory_OTHER_LETTER_instance;
  var CharCategory_NON_SPACING_MARK_instance;
  var CharCategory_ENCLOSING_MARK_instance;
  var CharCategory_COMBINING_SPACING_MARK_instance;
  var CharCategory_DECIMAL_DIGIT_NUMBER_instance;
  var CharCategory_LETTER_NUMBER_instance;
  var CharCategory_OTHER_NUMBER_instance;
  var CharCategory_SPACE_SEPARATOR_instance;
  var CharCategory_LINE_SEPARATOR_instance;
  var CharCategory_PARAGRAPH_SEPARATOR_instance;
  var CharCategory_CONTROL_instance;
  var CharCategory_FORMAT_instance;
  var CharCategory_PRIVATE_USE_instance;
  var CharCategory_SURROGATE_instance;
  var CharCategory_DASH_PUNCTUATION_instance;
  var CharCategory_START_PUNCTUATION_instance;
  var CharCategory_END_PUNCTUATION_instance;
  var CharCategory_CONNECTOR_PUNCTUATION_instance;
  var CharCategory_OTHER_PUNCTUATION_instance;
  var CharCategory_MATH_SYMBOL_instance;
  var CharCategory_CURRENCY_SYMBOL_instance;
  var CharCategory_MODIFIER_SYMBOL_instance;
  var CharCategory_OTHER_SYMBOL_instance;
  var CharCategory_INITIAL_QUOTE_PUNCTUATION_instance;
  var CharCategory_FINAL_QUOTE_PUNCTUATION_instance;
  function Companion_6() {
    Companion_instance_6 = this;
  }
  Companion_6.prototype.md = function (category) {
    var tmp0_subject = category;
    var tmp;
    if (0 <= tmp0_subject ? tmp0_subject <= 16 : false) {
      tmp = values()[category];
    } else if (18 <= tmp0_subject ? tmp0_subject <= 30 : false) {
      tmp = values()[category - 1 | 0];
    } else {
      throw IllegalArgumentException_init_$Create$_0('Category #' + category + ' is not defined.');
    }
    return tmp;
  };
  Companion_6.$metadata$ = objectMeta('Companion');
  var Companion_instance_6;
  function Companion_getInstance_6() {
    CharCategory_initEntries();
    if (Companion_instance_6 == null)
      new Companion_6();
    return Companion_instance_6;
  }
  function values() {
    return [CharCategory_UNASSIGNED_getInstance(), CharCategory_UPPERCASE_LETTER_getInstance(), CharCategory_LOWERCASE_LETTER_getInstance(), CharCategory_TITLECASE_LETTER_getInstance(), CharCategory_MODIFIER_LETTER_getInstance(), CharCategory_OTHER_LETTER_getInstance(), CharCategory_NON_SPACING_MARK_getInstance(), CharCategory_ENCLOSING_MARK_getInstance(), CharCategory_COMBINING_SPACING_MARK_getInstance(), CharCategory_DECIMAL_DIGIT_NUMBER_getInstance(), CharCategory_LETTER_NUMBER_getInstance(), CharCategory_OTHER_NUMBER_getInstance(), CharCategory_SPACE_SEPARATOR_getInstance(), CharCategory_LINE_SEPARATOR_getInstance(), CharCategory_PARAGRAPH_SEPARATOR_getInstance(), CharCategory_CONTROL_getInstance(), CharCategory_FORMAT_getInstance(), CharCategory_PRIVATE_USE_getInstance(), CharCategory_SURROGATE_getInstance(), CharCategory_DASH_PUNCTUATION_getInstance(), CharCategory_START_PUNCTUATION_getInstance(), CharCategory_END_PUNCTUATION_getInstance(), CharCategory_CONNECTOR_PUNCTUATION_getInstance(), CharCategory_OTHER_PUNCTUATION_getInstance(), CharCategory_MATH_SYMBOL_getInstance(), CharCategory_CURRENCY_SYMBOL_getInstance(), CharCategory_MODIFIER_SYMBOL_getInstance(), CharCategory_OTHER_SYMBOL_getInstance(), CharCategory_INITIAL_QUOTE_PUNCTUATION_getInstance(), CharCategory_FINAL_QUOTE_PUNCTUATION_getInstance()];
  }
  var CharCategory_entriesInitialized;
  function CharCategory_initEntries() {
    if (CharCategory_entriesInitialized)
      return Unit_getInstance();
    CharCategory_entriesInitialized = true;
    CharCategory_UNASSIGNED_instance = new CharCategory('UNASSIGNED', 0, 0, 'Cn');
    CharCategory_UPPERCASE_LETTER_instance = new CharCategory('UPPERCASE_LETTER', 1, 1, 'Lu');
    CharCategory_LOWERCASE_LETTER_instance = new CharCategory('LOWERCASE_LETTER', 2, 2, 'Ll');
    CharCategory_TITLECASE_LETTER_instance = new CharCategory('TITLECASE_LETTER', 3, 3, 'Lt');
    CharCategory_MODIFIER_LETTER_instance = new CharCategory('MODIFIER_LETTER', 4, 4, 'Lm');
    CharCategory_OTHER_LETTER_instance = new CharCategory('OTHER_LETTER', 5, 5, 'Lo');
    CharCategory_NON_SPACING_MARK_instance = new CharCategory('NON_SPACING_MARK', 6, 6, 'Mn');
    CharCategory_ENCLOSING_MARK_instance = new CharCategory('ENCLOSING_MARK', 7, 7, 'Me');
    CharCategory_COMBINING_SPACING_MARK_instance = new CharCategory('COMBINING_SPACING_MARK', 8, 8, 'Mc');
    CharCategory_DECIMAL_DIGIT_NUMBER_instance = new CharCategory('DECIMAL_DIGIT_NUMBER', 9, 9, 'Nd');
    CharCategory_LETTER_NUMBER_instance = new CharCategory('LETTER_NUMBER', 10, 10, 'Nl');
    CharCategory_OTHER_NUMBER_instance = new CharCategory('OTHER_NUMBER', 11, 11, 'No');
    CharCategory_SPACE_SEPARATOR_instance = new CharCategory('SPACE_SEPARATOR', 12, 12, 'Zs');
    CharCategory_LINE_SEPARATOR_instance = new CharCategory('LINE_SEPARATOR', 13, 13, 'Zl');
    CharCategory_PARAGRAPH_SEPARATOR_instance = new CharCategory('PARAGRAPH_SEPARATOR', 14, 14, 'Zp');
    CharCategory_CONTROL_instance = new CharCategory('CONTROL', 15, 15, 'Cc');
    CharCategory_FORMAT_instance = new CharCategory('FORMAT', 16, 16, 'Cf');
    CharCategory_PRIVATE_USE_instance = new CharCategory('PRIVATE_USE', 17, 18, 'Co');
    CharCategory_SURROGATE_instance = new CharCategory('SURROGATE', 18, 19, 'Cs');
    CharCategory_DASH_PUNCTUATION_instance = new CharCategory('DASH_PUNCTUATION', 19, 20, 'Pd');
    CharCategory_START_PUNCTUATION_instance = new CharCategory('START_PUNCTUATION', 20, 21, 'Ps');
    CharCategory_END_PUNCTUATION_instance = new CharCategory('END_PUNCTUATION', 21, 22, 'Pe');
    CharCategory_CONNECTOR_PUNCTUATION_instance = new CharCategory('CONNECTOR_PUNCTUATION', 22, 23, 'Pc');
    CharCategory_OTHER_PUNCTUATION_instance = new CharCategory('OTHER_PUNCTUATION', 23, 24, 'Po');
    CharCategory_MATH_SYMBOL_instance = new CharCategory('MATH_SYMBOL', 24, 25, 'Sm');
    CharCategory_CURRENCY_SYMBOL_instance = new CharCategory('CURRENCY_SYMBOL', 25, 26, 'Sc');
    CharCategory_MODIFIER_SYMBOL_instance = new CharCategory('MODIFIER_SYMBOL', 26, 27, 'Sk');
    CharCategory_OTHER_SYMBOL_instance = new CharCategory('OTHER_SYMBOL', 27, 28, 'So');
    CharCategory_INITIAL_QUOTE_PUNCTUATION_instance = new CharCategory('INITIAL_QUOTE_PUNCTUATION', 28, 29, 'Pi');
    CharCategory_FINAL_QUOTE_PUNCTUATION_instance = new CharCategory('FINAL_QUOTE_PUNCTUATION', 29, 30, 'Pf');
    Companion_getInstance_6();
  }
  function CharCategory(name, ordinal, value, code) {
    Enum.call(this, name, ordinal);
    this.pd_1 = value;
    this.qd_1 = code;
  }
  CharCategory.$metadata$ = classMeta('CharCategory', undefined, undefined, undefined, undefined, Enum.prototype);
  function CharCategory_UNASSIGNED_getInstance() {
    CharCategory_initEntries();
    return CharCategory_UNASSIGNED_instance;
  }
  function CharCategory_UPPERCASE_LETTER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_UPPERCASE_LETTER_instance;
  }
  function CharCategory_LOWERCASE_LETTER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_LOWERCASE_LETTER_instance;
  }
  function CharCategory_TITLECASE_LETTER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_TITLECASE_LETTER_instance;
  }
  function CharCategory_MODIFIER_LETTER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_MODIFIER_LETTER_instance;
  }
  function CharCategory_OTHER_LETTER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_OTHER_LETTER_instance;
  }
  function CharCategory_NON_SPACING_MARK_getInstance() {
    CharCategory_initEntries();
    return CharCategory_NON_SPACING_MARK_instance;
  }
  function CharCategory_ENCLOSING_MARK_getInstance() {
    CharCategory_initEntries();
    return CharCategory_ENCLOSING_MARK_instance;
  }
  function CharCategory_COMBINING_SPACING_MARK_getInstance() {
    CharCategory_initEntries();
    return CharCategory_COMBINING_SPACING_MARK_instance;
  }
  function CharCategory_DECIMAL_DIGIT_NUMBER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_DECIMAL_DIGIT_NUMBER_instance;
  }
  function CharCategory_LETTER_NUMBER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_LETTER_NUMBER_instance;
  }
  function CharCategory_OTHER_NUMBER_getInstance() {
    CharCategory_initEntries();
    return CharCategory_OTHER_NUMBER_instance;
  }
  function CharCategory_SPACE_SEPARATOR_getInstance() {
    CharCategory_initEntries();
    return CharCategory_SPACE_SEPARATOR_instance;
  }
  function CharCategory_LINE_SEPARATOR_getInstance() {
    CharCategory_initEntries();
    return CharCategory_LINE_SEPARATOR_instance;
  }
  function CharCategory_PARAGRAPH_SEPARATOR_getInstance() {
    CharCategory_initEntries();
    return CharCategory_PARAGRAPH_SEPARATOR_instance;
  }
  function CharCategory_CONTROL_getInstance() {
    CharCategory_initEntries();
    return CharCategory_CONTROL_instance;
  }
  function CharCategory_FORMAT_getInstance() {
    CharCategory_initEntries();
    return CharCategory_FORMAT_instance;
  }
  function CharCategory_PRIVATE_USE_getInstance() {
    CharCategory_initEntries();
    return CharCategory_PRIVATE_USE_instance;
  }
  function CharCategory_SURROGATE_getInstance() {
    CharCategory_initEntries();
    return CharCategory_SURROGATE_instance;
  }
  function CharCategory_DASH_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_DASH_PUNCTUATION_instance;
  }
  function CharCategory_START_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_START_PUNCTUATION_instance;
  }
  function CharCategory_END_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_END_PUNCTUATION_instance;
  }
  function CharCategory_CONNECTOR_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_CONNECTOR_PUNCTUATION_instance;
  }
  function CharCategory_OTHER_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_OTHER_PUNCTUATION_instance;
  }
  function CharCategory_MATH_SYMBOL_getInstance() {
    CharCategory_initEntries();
    return CharCategory_MATH_SYMBOL_instance;
  }
  function CharCategory_CURRENCY_SYMBOL_getInstance() {
    CharCategory_initEntries();
    return CharCategory_CURRENCY_SYMBOL_instance;
  }
  function CharCategory_MODIFIER_SYMBOL_getInstance() {
    CharCategory_initEntries();
    return CharCategory_MODIFIER_SYMBOL_instance;
  }
  function CharCategory_OTHER_SYMBOL_getInstance() {
    CharCategory_initEntries();
    return CharCategory_OTHER_SYMBOL_instance;
  }
  function CharCategory_INITIAL_QUOTE_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_INITIAL_QUOTE_PUNCTUATION_instance;
  }
  function CharCategory_FINAL_QUOTE_PUNCTUATION_getInstance() {
    CharCategory_initEntries();
    return CharCategory_FINAL_QUOTE_PUNCTUATION_instance;
  }
  function StringBuilder_init_$Init$(capacity, $this) {
    StringBuilder_init_$Init$_1($this);
    return $this;
  }
  function StringBuilder_init_$Create$(capacity) {
    return StringBuilder_init_$Init$(capacity, Object.create(StringBuilder.prototype));
  }
  function StringBuilder_init_$Init$_0(content, $this) {
    StringBuilder.call($this, toString_3(content));
    return $this;
  }
  function StringBuilder_init_$Create$_0(content) {
    return StringBuilder_init_$Init$_0(content, Object.create(StringBuilder.prototype));
  }
  function StringBuilder_init_$Init$_1($this) {
    StringBuilder.call($this, '');
    return $this;
  }
  function StringBuilder_init_$Create$_1() {
    return StringBuilder_init_$Init$_1(Object.create(StringBuilder.prototype));
  }
  function StringBuilder(content) {
    this.o1_1 = !(content === undefined) ? content : '';
  }
  StringBuilder.prototype.u7 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.o1_1;
    tmp$ret$0 = tmp0_asDynamic;
    return tmp$ret$0.length;
  };
  StringBuilder.prototype.v7 = function (index) {
    var tmp$ret$0;
    // Inline function 'kotlin.text.getOrElse' call
    var tmp0_getOrElse = this.o1_1;
    var tmp;
    if (index >= 0 ? index <= get_lastIndex_2(tmp0_getOrElse) : false) {
      tmp = charSequenceGet(tmp0_getOrElse, index);
    } else {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', length: ' + this.u7() + '}');
    }
    tmp$ret$0 = tmp;
    return tmp$ret$0;
  };
  StringBuilder.prototype.w7 = function (startIndex, endIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp0_substring = this.o1_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_substring;
    tmp$ret$1 = tmp$ret$0.substring(startIndex, endIndex);
    return tmp$ret$1;
  };
  StringBuilder.prototype.q5 = function (value) {
    var tmp0_this = this;
    tmp0_this.o1_1 = tmp0_this.o1_1 + new Char_0(value);
    return this;
  };
  StringBuilder.prototype.b = function (value) {
    var tmp0_this = this;
    tmp0_this.o1_1 = tmp0_this.o1_1 + toString_2(value);
    return this;
  };
  StringBuilder.prototype.rd = function (value, startIndex, endIndex) {
    var tmp0_elvis_lhs = value;
    return this.sd(tmp0_elvis_lhs == null ? 'null' : tmp0_elvis_lhs, startIndex, endIndex);
  };
  StringBuilder.prototype.p1 = function () {
    var reversed = '';
    var index = this.o1_1.length - 1 | 0;
    while (index >= 0) {
      var tmp = this.o1_1;
      var tmp0 = index;
      index = tmp0 - 1 | 0;
      var low = charSequenceGet(tmp, tmp0);
      if (isLowSurrogate(low) ? index >= 0 : false) {
        var tmp_0 = this.o1_1;
        var tmp1 = index;
        index = tmp1 - 1 | 0;
        var high = charSequenceGet(tmp_0, tmp1);
        if (isHighSurrogate(high)) {
          reversed = reversed + new Char_0(high) + new Char_0(low);
        } else {
          reversed = reversed + new Char_0(low) + new Char_0(high);
        }
      } else {
        reversed = reversed + new Char_0(low);
      }
    }
    this.o1_1 = reversed;
    return this;
  };
  StringBuilder.prototype.td = function (value) {
    var tmp0_this = this;
    tmp0_this.o1_1 = tmp0_this.o1_1 + toString_2(value);
    return this;
  };
  StringBuilder.prototype.ud = function (value) {
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp_0 = tmp0_this.o1_1;
    var tmp1_elvis_lhs = value;
    tmp.o1_1 = tmp_0 + (tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs);
    return this;
  };
  StringBuilder.prototype.toString = function () {
    return this.o1_1;
  };
  StringBuilder.prototype.sd = function (value, startIndex, endIndex) {
    var stringCsq = toString_3(value);
    Companion_getInstance().q2(startIndex, endIndex, stringCsq.length);
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp_0 = tmp0_this.o1_1;
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = stringCsq;
    tmp$ret$1 = tmp$ret$0.substring(startIndex, endIndex);
    tmp.o1_1 = tmp_0 + tmp$ret$1;
    return this;
  };
  StringBuilder.$metadata$ = classMeta('StringBuilder', [Appendable, CharSequence]);
  function uppercaseChar(_this__u8e3s4) {
    var tmp$ret$2;
    // Inline function 'kotlin.text.uppercase' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_1(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toUpperCase();
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    var uppercase = tmp$ret$2;
    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
  }
  function lowercaseChar(_this__u8e3s4) {
    var tmp$ret$2;
    // Inline function 'kotlin.text.lowercase' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_1(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    return charSequenceGet(tmp$ret$2, 0);
  }
  function uppercase(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_1(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toUpperCase();
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function lowercase(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_1(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function isLowSurrogate(_this__u8e3s4) {
    Companion_getInstance_8();
    var containsLower = _Char___init__impl__6a9atx(56320);
    var tmp;
    Companion_getInstance_8();
    if (_this__u8e3s4 <= _Char___init__impl__6a9atx(57343)) {
      tmp = containsLower <= _this__u8e3s4;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isHighSurrogate(_this__u8e3s4) {
    Companion_getInstance_8();
    var containsLower = _Char___init__impl__6a9atx(55296);
    var tmp;
    Companion_getInstance_8();
    if (_this__u8e3s4 <= _Char___init__impl__6a9atx(56319)) {
      tmp = containsLower <= _this__u8e3s4;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isWhitespace(_this__u8e3s4) {
    return isWhitespaceImpl(_this__u8e3s4);
  }
  function get_category(_this__u8e3s4) {
    return Companion_getInstance_6().md(getCategoryValue(_this__u8e3s4));
  }
  function checkRadix(radix) {
    if (!(2 <= radix ? radix <= 36 : false)) {
      throw IllegalArgumentException_init_$Create$_0('radix ' + radix + ' was not in valid range 2..36');
    }
    return radix;
  }
  function toLong(_this__u8e3s4, radix) {
    var tmp0_elvis_lhs = toLongOrNull(_this__u8e3s4, radix);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function digitOf(char, radix) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(48)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(57)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48)) : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(90)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(97)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(122)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(128)) < 0 ? -1 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65313)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65338)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65313)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65345)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65370)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65345)) + 10 | 0 : digitToIntImpl(char);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.text.digitOf.<anonymous>' call
    tmp$ret$0 = tmp0_let >= radix ? -1 : tmp0_let;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function toInt(_this__u8e3s4) {
    var tmp0_elvis_lhs = toIntOrNull(_this__u8e3s4);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function Regex_init_$Init$(pattern, $this) {
    Regex.call($this, pattern, emptySet());
    return $this;
  }
  function Regex_init_$Create$(pattern) {
    return Regex_init_$Init$(pattern, Object.create(Regex.prototype));
  }
  function Companion_7() {
    Companion_instance_7 = this;
    this.vd_1 = new RegExp('[\\\\^$*+?.()|[\\]{}]', 'g');
    this.wd_1 = new RegExp('[\\\\$]', 'g');
    this.xd_1 = new RegExp('\\$', 'g');
  }
  Companion_7.$metadata$ = objectMeta('Companion');
  var Companion_instance_7;
  function Companion_getInstance_7() {
    if (Companion_instance_7 == null)
      new Companion_7();
    return Companion_instance_7;
  }
  function Regex(pattern, options) {
    Companion_getInstance_7();
    this.yd_1 = pattern;
    this.zd_1 = toSet(options);
    this.ae_1 = new RegExp(pattern, toFlags(options, 'gu'));
    this.be_1 = null;
    this.ce_1 = null;
  }
  Regex.prototype.de = function (input, startIndex) {
    if (startIndex < 0 ? true : startIndex > charSequenceLength(input)) {
      throw IndexOutOfBoundsException_init_$Create$('Start index out of bounds: ' + startIndex + ', input length: ' + charSequenceLength(input));
    }
    return findNext(this.ae_1, toString_3(input), startIndex, this.ae_1);
  };
  Regex.prototype.toString = function () {
    return this.ae_1.toString();
  };
  Regex.$metadata$ = classMeta('Regex');
  function toFlags(_this__u8e3s4, prepend) {
    return joinToString$default_0(_this__u8e3s4, '', prepend, null, 0, null, toFlags$lambda, 28, null);
  }
  function findNext(_this__u8e3s4, input, from, nextPattern) {
    _this__u8e3s4.lastIndex = from;
    var match = _this__u8e3s4.exec(input);
    if (match == null)
      return null;
    var range = numberRangeToNumber(match.index, _this__u8e3s4.lastIndex - 1 | 0);
    return new findNext$1(range, match, nextPattern, input);
  }
  function MatchGroup(value) {
    this.ee_1 = value;
  }
  MatchGroup.prototype.toString = function () {
    return 'MatchGroup(value=' + this.ee_1 + ')';
  };
  MatchGroup.prototype.hashCode = function () {
    return getStringHashCode(this.ee_1);
  };
  MatchGroup.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MatchGroup))
      return false;
    var tmp0_other_with_cast = other instanceof MatchGroup ? other : THROW_CCE();
    if (!(this.ee_1 === tmp0_other_with_cast.ee_1))
      return false;
    return true;
  };
  MatchGroup.$metadata$ = classMeta('MatchGroup');
  function toFlags$lambda(it) {
    return it.he_1;
  }
  function findNext$o$groups$o$iterator$lambda(this$0) {
    return function (it) {
      return this$0.l(it);
    };
  }
  function findNext$1$groups$1($match, this$0) {
    this.ie_1 = $match;
    this.je_1 = this$0;
    AbstractCollection.call(this);
  }
  findNext$1$groups$1.prototype.i = function () {
    return this.ie_1.length;
  };
  findNext$1$groups$1.prototype.f = function () {
    var tmp = asSequence(get_indices_1(this));
    return map_2(tmp, findNext$o$groups$o$iterator$lambda(this)).f();
  };
  findNext$1$groups$1.prototype.l = function (index) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.get' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = this.ie_1;
    tmp$ret$1 = tmp$ret$0[index];
    var tmp0_safe_receiver = tmp$ret$1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'kotlin.text.<no name provided>.get.<anonymous>' call
      tmp$ret$2 = new MatchGroup(tmp0_safe_receiver);
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  findNext$1$groups$1.$metadata$ = classMeta(undefined, [MatchNamedGroupCollection], undefined, undefined, undefined, AbstractCollection.prototype);
  function findNext$1($range, $match, $nextPattern, $input) {
    this.ne_1 = $range;
    this.oe_1 = $match;
    this.pe_1 = $nextPattern;
    this.qe_1 = $input;
    this.ke_1 = $range;
    var tmp = this;
    tmp.le_1 = new findNext$1$groups$1($match, this);
    this.me_1 = null;
  }
  findNext$1.prototype.j6 = function () {
    return this.ke_1;
  };
  findNext$1.$metadata$ = classMeta(undefined, [MatchResult]);
  var STRING_CASE_INSENSITIVE_ORDER;
  function nativeLastIndexOf(_this__u8e3s4, str, fromIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.lastIndexOf(str, fromIndex);
  }
  function substring_2(_this__u8e3s4, startIndex, endIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.substring(startIndex, endIndex);
  }
  function substring_3(_this__u8e3s4, startIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.substring(startIndex);
  }
  function compareTo(_this__u8e3s4, other, ignoreCase) {
    init_properties_string_kt_z8k4s7();
    if (ignoreCase) {
      var n1 = _this__u8e3s4.length;
      var n2 = other.length;
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.minOf' call
      tmp$ret$0 = Math.min(n1, n2);
      var min = tmp$ret$0;
      if (min === 0)
        return n1 - n2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < min)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var thisChar = charSequenceGet(_this__u8e3s4, index);
          var otherChar = charSequenceGet(other, index);
          if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
            thisChar = uppercaseChar(thisChar);
            otherChar = uppercaseChar(otherChar);
            if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
              var tmp$ret$4;
              // Inline function 'kotlin.text.lowercaseChar' call
              var tmp0_lowercaseChar = thisChar;
              var tmp$ret$3;
              // Inline function 'kotlin.text.lowercase' call
              var tmp$ret$2;
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              var tmp0_asDynamic = toString_1(tmp0_lowercaseChar);
              tmp$ret$1 = tmp0_asDynamic;
              var tmp1_unsafeCast = tmp$ret$1.toLowerCase();
              tmp$ret$2 = tmp1_unsafeCast;
              tmp$ret$3 = tmp$ret$2;
              tmp$ret$4 = charSequenceGet(tmp$ret$3, 0);
              thisChar = tmp$ret$4;
              var tmp$ret$8;
              // Inline function 'kotlin.text.lowercaseChar' call
              var tmp1_lowercaseChar = otherChar;
              var tmp$ret$7;
              // Inline function 'kotlin.text.lowercase' call
              var tmp$ret$6;
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$5;
              // Inline function 'kotlin.js.asDynamic' call
              var tmp0_asDynamic_0 = toString_1(tmp1_lowercaseChar);
              tmp$ret$5 = tmp0_asDynamic_0;
              var tmp1_unsafeCast_0 = tmp$ret$5.toLowerCase();
              tmp$ret$6 = tmp1_unsafeCast_0;
              tmp$ret$7 = tmp$ret$6;
              tmp$ret$8 = charSequenceGet(tmp$ret$7, 0);
              otherChar = tmp$ret$8;
              if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
                return Char__compareTo_impl_ypi4mb(thisChar, otherChar);
              }
            }
          }
        }
         while (inductionVariable < min);
      return n1 - n2 | 0;
    } else {
      return compareTo_0(_this__u8e3s4, other);
    }
  }
  function toLowerCase(_this__u8e3s4) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.toLowerCase();
  }
  function nativeIndexOf(_this__u8e3s4, str, fromIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.indexOf(str, fromIndex);
  }
  function concatToString(_this__u8e3s4, startIndex, endIndex) {
    init_properties_string_kt_z8k4s7();
    Companion_getInstance().q2(startIndex, endIndex, _this__u8e3s4.length);
    var result = '';
    var inductionVariable = startIndex;
    if (inductionVariable < endIndex)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = result + new Char_0(_this__u8e3s4[index]);
      }
       while (inductionVariable < endIndex);
    return result;
  }
  function nativeStartsWith(_this__u8e3s4, s, position) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.startsWith(s, position);
  }
  function nativeEndsWith(_this__u8e3s4, s) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.endsWith(s);
  }
  function sam$kotlin_Comparator$0_2(function_0) {
    this.re_1 = function_0;
  }
  sam$kotlin_Comparator$0_2.prototype.x = function (a, b) {
    return this.re_1(a, b);
  };
  sam$kotlin_Comparator$0_2.prototype.compare = function (a, b) {
    return this.x(a, b);
  };
  sam$kotlin_Comparator$0_2.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
    init_properties_string_kt_z8k4s7();
    return compareTo(a, b, true);
  }
  var properties_initialized_string_kt_4g1sj;
  function init_properties_string_kt_z8k4s7() {
    if (properties_initialized_string_kt_4g1sj) {
    } else {
      properties_initialized_string_kt_4g1sj = true;
      var tmp = STRING_CASE_INSENSITIVE_ORDER$lambda;
      STRING_CASE_INSENSITIVE_ORDER = new sam$kotlin_Comparator$0_2(tmp);
    }
  }
  function startsWith_1(_this__u8e3s4, prefix, ignoreCase) {
    if (!ignoreCase) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeStartsWith' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.startsWith(prefix, 0);
      return tmp$ret$1;
    } else
      return regionMatches(_this__u8e3s4, 0, prefix, 0, prefix.length, ignoreCase);
  }
  function startsWith$default_1(_this__u8e3s4, prefix, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return startsWith_1(_this__u8e3s4, prefix, ignoreCase);
  }
  function endsWith(_this__u8e3s4, suffix, ignoreCase) {
    if (!ignoreCase) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeEndsWith' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.endsWith(suffix);
      return tmp$ret$1;
    } else
      return regionMatches(_this__u8e3s4, _this__u8e3s4.length - suffix.length | 0, suffix, 0, suffix.length, ignoreCase);
  }
  function endsWith$default(_this__u8e3s4, suffix, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return endsWith(_this__u8e3s4, suffix, ignoreCase);
  }
  function isBlank(_this__u8e3s4) {
    var tmp;
    if (charSequenceLength(_this__u8e3s4) === 0) {
      tmp = true;
    } else {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = get_indices_2(_this__u8e3s4);
        var tmp_0;
        if (isInterface(tmp0_all, Collection)) {
          tmp_0 = tmp0_all.p();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var inductionVariable = tmp0_all.h5_1;
        var last = tmp0_all.i5_1;
        if (inductionVariable <= last)
          do {
            var element = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var tmp$ret$1;
            // Inline function 'kotlin.text.isBlank.<anonymous>' call
            tmp$ret$1 = isWhitespace(charSequenceGet(_this__u8e3s4, element));
            if (!tmp$ret$1) {
              tmp$ret$0 = false;
              break $l$block_0;
            }
          }
           while (!(element === last));
        tmp$ret$0 = true;
      }
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function nativeIndexOf_0(_this__u8e3s4, ch, fromIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.nativeIndexOf' call
    var tmp0_nativeIndexOf = toString_1(ch);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0.indexOf(tmp0_nativeIndexOf, fromIndex);
    return tmp$ret$1;
  }
  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);
  }
  function startsWith_2(_this__u8e3s4, prefix, startIndex, ignoreCase) {
    if (!ignoreCase) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeStartsWith' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.startsWith(prefix, startIndex);
      return tmp$ret$1;
    } else
      return regionMatches(_this__u8e3s4, startIndex, prefix, 0, prefix.length, ignoreCase);
  }
  function startsWith$default_2(_this__u8e3s4, prefix, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return startsWith_2(_this__u8e3s4, prefix, startIndex, ignoreCase);
  }
  function _Char___init__impl__6a9atx(value) {
    return value;
  }
  function _get_value__a43j40($this) {
    return $this;
  }
  function _Char___init__impl__6a9atx_0(code) {
    var tmp$ret$0;
    // Inline function 'kotlin.UShort.toInt' call
    tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;
    var tmp = _Char___init__impl__6a9atx(tmp$ret$0);
    return tmp;
  }
  function Char__compareTo_impl_ypi4mb($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__compareTo_impl_ypi4mb_0($this, other) {
    var tmp = $this.n1_1;
    return Char__compareTo_impl_ypi4mb(tmp, other instanceof Char_0 ? other.n1_1 : THROW_CCE());
  }
  function Char__minus_impl_a2frrh($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__minus_impl_a2frrh_0($this, other) {
    return numberToChar(_get_value__a43j40($this) - other | 0);
  }
  function Char__toInt_impl_vasixd($this) {
    return _get_value__a43j40($this);
  }
  function Char__equals_impl_x6719k($this, other) {
    if (!(other instanceof Char_0))
      return false;
    return _get_value__a43j40($this) === _get_value__a43j40(other.n1_1);
  }
  function Char__hashCode_impl_otmys($this) {
    return _get_value__a43j40($this);
  }
  function toString_1($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = String.fromCharCode(_get_value__a43j40($this));
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function Companion_8() {
    Companion_instance_8 = this;
    this.se_1 = _Char___init__impl__6a9atx(0);
    this.te_1 = _Char___init__impl__6a9atx(65535);
    this.ue_1 = _Char___init__impl__6a9atx(55296);
    this.ve_1 = _Char___init__impl__6a9atx(56319);
    this.we_1 = _Char___init__impl__6a9atx(56320);
    this.xe_1 = _Char___init__impl__6a9atx(57343);
    this.ye_1 = _Char___init__impl__6a9atx(55296);
    this.ze_1 = _Char___init__impl__6a9atx(57343);
    this.af_1 = 2;
    this.bf_1 = 16;
  }
  Companion_8.$metadata$ = objectMeta('Companion');
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  function Char_0(value) {
    Companion_getInstance_8();
    this.n1_1 = value;
  }
  Char_0.prototype.cf = function (other) {
    return Char__compareTo_impl_ypi4mb(this.n1_1, other);
  };
  Char_0.prototype.y6 = function (other) {
    return Char__compareTo_impl_ypi4mb_0(this, other);
  };
  Char_0.prototype.equals = function (other) {
    return Char__equals_impl_x6719k(this.n1_1, other);
  };
  Char_0.prototype.hashCode = function () {
    return Char__hashCode_impl_otmys(this.n1_1);
  };
  Char_0.prototype.toString = function () {
    return toString_1(this.n1_1);
  };
  Char_0.$metadata$ = classMeta('Char', [Comparable]);
  function Iterable_0() {
  }
  Iterable_0.$metadata$ = interfaceMeta('Iterable');
  function Entry() {
  }
  Entry.$metadata$ = interfaceMeta('Entry');
  function Map() {
  }
  Map.$metadata$ = interfaceMeta('Map');
  function List_0() {
  }
  List_0.$metadata$ = interfaceMeta('List', [Collection]);
  function MutableList_0() {
  }
  MutableList_0.$metadata$ = interfaceMeta('MutableList', [List_0, MutableCollection]);
  function MutableSet() {
  }
  MutableSet.$metadata$ = interfaceMeta('MutableSet', [Set, MutableCollection]);
  function Set() {
  }
  Set.$metadata$ = interfaceMeta('Set', [Collection]);
  function Collection() {
  }
  Collection.$metadata$ = interfaceMeta('Collection', [Iterable_0]);
  function MutableEntry() {
  }
  MutableEntry.$metadata$ = interfaceMeta('MutableEntry', [Entry]);
  function MutableMap() {
  }
  MutableMap.$metadata$ = interfaceMeta('MutableMap', [Map]);
  function MutableCollection() {
  }
  MutableCollection.$metadata$ = interfaceMeta('MutableCollection', [Collection, MutableIterable]);
  function MutableIterable() {
  }
  MutableIterable.$metadata$ = interfaceMeta('MutableIterable', [Iterable_0]);
  function Companion_9() {
    Companion_instance_9 = this;
  }
  Companion_9.$metadata$ = objectMeta('Companion');
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function Enum(name, ordinal) {
    Companion_getInstance_9();
    this.z1_1 = name;
    this.a2_1 = ordinal;
  }
  Enum.prototype.d2 = function (other) {
    return compareTo_0(this.a2_1, other.a2_1);
  };
  Enum.prototype.y6 = function (other) {
    return this.d2(other instanceof Enum ? other : THROW_CCE());
  };
  Enum.prototype.equals = function (other) {
    return this === other;
  };
  Enum.prototype.hashCode = function () {
    return identityHashCode(this);
  };
  Enum.prototype.toString = function () {
    return this.z1_1;
  };
  Enum.$metadata$ = classMeta('Enum', [Comparable]);
  function arrayOf(elements) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = elements;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function longArrayOf(elements) {
    return elements;
  }
  function intArrayOf(elements) {
    return elements;
  }
  function doubleArrayOf(elements) {
    return elements;
  }
  function floatArrayOf(elements) {
    return elements;
  }
  function charArrayOf(elements) {
    return elements;
  }
  function toString_2(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : toString_3(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function fillArrayVal(array, initValue) {
    var inductionVariable = 0;
    var last = array.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        array[i] = initValue;
      }
       while (!(i === last));
    return array;
  }
  function arrayIterator(array) {
    return new arrayIterator$1(array);
  }
  function booleanArray(size) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'withType' call
    var tmp0_withType = fillArrayVal(Array(size), false);
    tmp0_withType.$type$ = 'BooleanArray';
    tmp$ret$0 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$0;
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function charArray(size) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'withType' call
    var tmp0_withType = new Uint16Array(size);
    tmp0_withType.$type$ = 'CharArray';
    tmp$ret$0 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$0;
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function longArray(size) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'withType' call
    var tmp0_withType = fillArrayVal(Array(size), new Long(0, 0));
    tmp0_withType.$type$ = 'LongArray';
    tmp$ret$0 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$0;
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function charArrayOf_0(arr) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'withType' call
    var tmp0_withType = new Uint16Array(arr);
    tmp0_withType.$type$ = 'CharArray';
    tmp$ret$0 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$0;
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function longArrayOf_0(arr) {
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$1;
    // Inline function 'withType' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = arr;
    var tmp0_withType = tmp$ret$0.slice();
    tmp0_withType.$type$ = 'LongArray';
    tmp$ret$1 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$1;
    tmp$ret$2 = tmp1_unsafeCast;
    return tmp$ret$2;
  }
  function arrayIterator$1($array) {
    this.ef_1 = $array;
    this.df_1 = 0;
  }
  arrayIterator$1.prototype.g = function () {
    return !(this.df_1 === this.ef_1.length);
  };
  arrayIterator$1.prototype.h = function () {
    var tmp;
    if (!(this.df_1 === this.ef_1.length)) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.df_1;
      tmp0_this.df_1 = tmp1 + 1 | 0;
      tmp = this.ef_1[tmp1];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.df_1);
    }
    return tmp;
  };
  arrayIterator$1.$metadata$ = classMeta(undefined, [Iterator_1]);
  function get_buf() {
    init_properties_bitUtils_kt_cxtw9i();
    return buf;
  }
  var buf;
  function get_bufFloat64() {
    init_properties_bitUtils_kt_cxtw9i();
    return bufFloat64;
  }
  var bufFloat64;
  var bufFloat32;
  function get_bufInt32() {
    init_properties_bitUtils_kt_cxtw9i();
    return bufInt32;
  }
  var bufInt32;
  function get_lowIndex() {
    init_properties_bitUtils_kt_cxtw9i();
    return lowIndex;
  }
  var lowIndex;
  function get_highIndex() {
    init_properties_bitUtils_kt_cxtw9i();
    return highIndex;
  }
  var highIndex;
  function getNumberHashCode(obj) {
    init_properties_bitUtils_kt_cxtw9i();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = jsBitwiseOr(obj, 0);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    if (tmp$ret$1 === obj) {
      return numberToInt(obj);
    }
    get_bufFloat64()[0] = obj;
    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;
  }
  var properties_initialized_bitUtils_kt_i2bo3e;
  function init_properties_bitUtils_kt_cxtw9i() {
    if (properties_initialized_bitUtils_kt_i2bo3e) {
    } else {
      properties_initialized_bitUtils_kt_i2bo3e = true;
      buf = new ArrayBuffer(8);
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = new Float64Array(get_buf());
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      bufFloat64 = tmp$ret$1;
      var tmp$ret$1_0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast_0 = new Float32Array(get_buf());
      var tmp$ret$0_0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0_0 = tmp0_unsafeCast_0;
      tmp$ret$1_0 = tmp$ret$0_0;
      bufFloat32 = tmp$ret$1_0;
      var tmp$ret$1_1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast_1 = new Int32Array(get_buf());
      var tmp$ret$0_1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0_1 = tmp0_unsafeCast_1;
      tmp$ret$1_1 = tmp$ret$0_1;
      bufInt32 = tmp$ret$1_1;
      var tmp$ret$1_2;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0_2;
      // Inline function 'kotlin.js.lowIndex.<anonymous>' call
      get_bufFloat64()[0] = -1.0;
      tmp$ret$0_2 = !(get_bufInt32()[0] === 0) ? 1 : 0;
      tmp$ret$1_2 = tmp$ret$0_2;
      lowIndex = tmp$ret$1_2;
      highIndex = 1 - get_lowIndex() | 0;
    }
  }
  function charSequenceGet(a, index) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$4;
      // Inline function 'kotlin.Char' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.charCodeAt(index);
      tmp$ret$1 = tmp0_unsafeCast;
      var tmp1_Char = tmp$ret$1;
      var tmp_0;
      var tmp$ret$2;
      // Inline function 'kotlin.code' call
      Companion_getInstance_8();
      var tmp0__get_code__88qj9g = _Char___init__impl__6a9atx(0);
      tmp$ret$2 = Char__toInt_impl_vasixd(tmp0__get_code__88qj9g);
      if (tmp1_Char < tmp$ret$2) {
        tmp_0 = true;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.code' call
        Companion_getInstance_8();
        var tmp1__get_code__adl84j = _Char___init__impl__6a9atx(65535);
        tmp$ret$3 = Char__toInt_impl_vasixd(tmp1__get_code__adl84j);
        tmp_0 = tmp1_Char > tmp$ret$3;
      }
      if (tmp_0) {
        throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + tmp1_Char);
      }
      tmp$ret$4 = numberToChar(tmp1_Char);
      tmp = tmp$ret$4;
    } else {
      tmp = a.v7(index);
    }
    return tmp;
  }
  function isString(a) {
    return typeof a === 'string';
  }
  function charSequenceLength(a) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.length;
      tmp$ret$1 = tmp0_unsafeCast;
      tmp = tmp$ret$1;
    } else {
      tmp = a.u7();
    }
    return tmp;
  }
  function charSequenceSubSequence(a, startIndex, endIndex) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.substring(startIndex, endIndex);
      tmp$ret$1 = tmp0_unsafeCast;
      tmp = tmp$ret$1;
    } else {
      tmp = a.w7(startIndex, endIndex);
    }
    return tmp;
  }
  function contentEqualsInternal(_this__u8e3s4, other) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var a = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = other;
    var b = tmp$ret$1;
    if (a === b)
      return true;
    if (((a == null ? true : b == null) ? true : !isArrayish(b)) ? true : a.length != b.length)
      return false;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals_0(a[i], b[i])) {
          return false;
        }
      }
       while (inductionVariable < last);
    return true;
  }
  function contentHashCodeInternal(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var a = tmp$ret$0;
    if (a == null)
      return 0;
    var result = 1;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = imul(result, 31) + hashCode_0(a[i]) | 0;
      }
       while (inductionVariable < last);
    return result;
  }
  function arrayToString(array) {
    return joinToString$default(array, ', ', '[', ']', 0, null, arrayToString$lambda, 24, null);
  }
  function arrayToString$lambda(it) {
    return toString_3(it);
  }
  function compareTo_0(a, b) {
    var tmp0_subject = typeof a;
    var tmp;
    switch (tmp0_subject) {
      case 'number':
        var tmp_0;
        if (typeof b === 'number') {
          tmp_0 = doubleCompareTo(a, b);
        } else {
          if (b instanceof Long) {
            tmp_0 = doubleCompareTo(a, b.ff());
          } else {
            tmp_0 = primitiveCompareTo(a, b);
          }
        }

        tmp = tmp_0;
        break;
      case 'string':
      case 'boolean':
        tmp = primitiveCompareTo(a, b);
        break;
      default:
        tmp = compareToDoNotIntrinsicify(a, b);
        break;
    }
    return tmp;
  }
  function doubleCompareTo(a, b) {
    var tmp;
    if (a < b) {
      tmp = -1;
    } else if (a > b) {
      tmp = 1;
    } else if (a === b) {
      var tmp_0;
      if (a !== 0) {
        tmp_0 = 0;
      } else {
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = 1;
        var ia = tmp$ret$0 / a;
        var tmp_1;
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = 1;
        if (ia === tmp$ret$1 / b) {
          tmp_1 = 0;
        } else {
          if (ia < 0) {
            tmp_1 = -1;
          } else {
            tmp_1 = 1;
          }
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (a !== a) {
      tmp = b !== b ? 0 : 1;
    } else {
      tmp = -1;
    }
    return tmp;
  }
  function primitiveCompareTo(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function compareToDoNotIntrinsicify(a, b) {
    return a.y6(b);
  }
  function identityHashCode(obj) {
    return getObjectHashCode(obj);
  }
  function getObjectHashCode(obj) {
    if (!jsIn('kotlinHashCodeValue$', obj)) {
      var hash = jsBitwiseOr(Math.random() * 4.294967296E9, 0);
      var descriptor = new Object();
      descriptor.value = hash;
      descriptor.enumerable = false;
      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);
    }
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = obj['kotlinHashCodeValue$'];
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function equals_0(obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }
    if (obj2 == null) {
      return false;
    }
    if (typeof obj1 === 'object' ? typeof obj1.equals === 'function' : false) {
      return obj1.equals(obj2);
    }
    if (obj1 !== obj1) {
      return obj2 !== obj2;
    }
    if (typeof obj1 === 'number' ? typeof obj2 === 'number' : false) {
      var tmp;
      if (obj1 === obj2) {
        var tmp_0;
        if (obj1 !== 0) {
          tmp_0 = true;
        } else {
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = 1;
          var tmp_1 = tmp$ret$0 / obj1;
          var tmp$ret$1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$1 = 1;
          tmp_0 = tmp_1 === tmp$ret$1 / obj2;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      return tmp;
    }
    return obj1 === obj2;
  }
  function hashCode_0(obj) {
    if (obj == null)
      return 0;
    var tmp0_subject = typeof obj;
    var tmp;
    switch (tmp0_subject) {
      case 'object':
        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
        break;
      case 'function':
        tmp = getObjectHashCode(obj);
        break;
      case 'number':
        tmp = getNumberHashCode(obj);
        break;
      case 'boolean':
        var tmp_0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.unsafeCast' call
        tmp$ret$0 = obj;

        if (tmp$ret$0) {
          tmp_0 = 1;
        } else {
          tmp_0 = 0;
        }

        tmp = tmp_0;
        break;
      default:
        tmp = getStringHashCode(String(obj));
        break;
    }
    return tmp;
  }
  function toString_3(o) {
    var tmp;
    if (o == null) {
      tmp = 'null';
    } else if (isArrayish(o)) {
      tmp = '[...]';
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = o.toString();
      tmp$ret$0 = tmp0_unsafeCast;
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function getStringHashCode(str) {
    var hash = 0;
    var length = str.length;
    var inductionVariable = 0;
    var last = length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = str;
        var code = tmp$ret$0.charCodeAt(i);
        hash = imul(hash, 31) + code | 0;
      }
       while (!(i === last));
    return hash;
  }
  function boxIntrinsic(x) {
    throw IllegalStateException_init_$Create$('Should be lowered');
  }
  function unboxIntrinsic(x) {
    throw IllegalStateException_init_$Create$('Should be lowered');
  }
  function captureStack(instance, constructorFunction) {
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(instance, constructorFunction);
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = instance;
      tmp$ret$0.stack = (new Error()).stack;
    }
  }
  function extendThrowable(this_, message, cause) {
    Error.call(this_);
    setPropertiesToThrowableInstance(this_, message, cause);
  }
  function setPropertiesToThrowableInstance(this_, message, cause) {
    if (!hasOwnPrototypeProperty(this_, 'message')) {
      var tmp;
      if (message == null) {
        var tmp_0;
        if (!(message === null)) {
          var tmp0_safe_receiver = cause;
          var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();
          tmp_0 = tmp1_elvis_lhs == null ? undefined : tmp1_elvis_lhs;
        } else {
          tmp_0 = undefined;
        }
        tmp = tmp_0;
      } else {
        tmp = message;
      }
      this_.message = tmp;
    }
    if (!hasOwnPrototypeProperty(this_, 'cause')) {
      this_.cause = cause;
    }
    this_.name = Object.getPrototypeOf(this_).constructor.name;
  }
  function hasOwnPrototypeProperty(o, name) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Object.getPrototypeOf(o).hasOwnProperty(name);
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function ensureNotNull(v) {
    var tmp;
    if (v == null) {
      THROW_NPE();
    } else {
      tmp = v;
    }
    return tmp;
  }
  function THROW_NPE() {
    throw NullPointerException_init_$Create$();
  }
  function noWhenBranchMatchedException() {
    throw NoWhenBranchMatchedException_init_$Create$();
  }
  function THROW_CCE() {
    throw ClassCastException_init_$Create$();
  }
  function throwKotlinNothingValueException() {
    throw KotlinNothingValueException_init_$Create$();
  }
  function lazy(initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function emptyArray() {
    return [];
  }
  function fillFrom(src, dst) {
    var srcLen = src.length;
    var dstLen = dst.length;
    var index = 0;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    tmp$ret$0 = dst;
    var arr = tmp$ret$0;
    while (index < srcLen ? index < dstLen : false) {
      var tmp = index;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      arr[tmp] = src[tmp0];
    }
    return dst;
  }
  function Companion_10() {
    Companion_instance_10 = this;
    this.gf_1 = new Long(0, -2147483648);
    this.hf_1 = new Long(-1, 2147483647);
    this.if_1 = 8;
    this.jf_1 = 64;
  }
  Companion_10.$metadata$ = objectMeta('Companion');
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function Long(low, high) {
    Companion_getInstance_10();
    Number_0.call(this);
    this.r5_1 = low;
    this.s5_1 = high;
  }
  Long.prototype.kf = function (other) {
    return this.v5(toLong_0(other));
  };
  Long.prototype.v5 = function (other) {
    return compare(this, other);
  };
  Long.prototype.y6 = function (other) {
    return this.v5(other instanceof Long ? other : THROW_CCE());
  };
  Long.prototype.lf = function (other) {
    return this.x5(toLong_0(other));
  };
  Long.prototype.x5 = function (other) {
    return add(this, other);
  };
  Long.prototype.mf = function (other) {
    return this.y5(toLong_0(other));
  };
  Long.prototype.y5 = function (other) {
    return subtract(this, other);
  };
  Long.prototype.nf = function (other) {
    return this.w5(toLong_0(other));
  };
  Long.prototype.w5 = function (other) {
    return multiply(this, other);
  };
  Long.prototype.of = function (other) {
    return this.u5(toLong_0(other));
  };
  Long.prototype.u5 = function (other) {
    return divide(this, other);
  };
  Long.prototype.pf = function (other) {
    return this.s7(toLong_0(other));
  };
  Long.prototype.s7 = function (other) {
    return modulo(this, other);
  };
  Long.prototype.qf = function () {
    return this.x5(new Long(1, 0));
  };
  Long.prototype.rf = function () {
    return this.y5(new Long(1, 0));
  };
  Long.prototype.t5 = function () {
    return this.sf().x5(new Long(1, 0));
  };
  Long.prototype.j7 = function (bitCount) {
    return shiftLeft(this, bitCount);
  };
  Long.prototype.k7 = function (bitCount) {
    return shiftRightUnsigned(this, bitCount);
  };
  Long.prototype.s6 = function (other) {
    return new Long(this.r5_1 & other.r5_1, this.s5_1 & other.s5_1);
  };
  Long.prototype.l7 = function (other) {
    return new Long(this.r5_1 | other.r5_1, this.s5_1 | other.s5_1);
  };
  Long.prototype.t7 = function (other) {
    return new Long(this.r5_1 ^ other.r5_1, this.s5_1 ^ other.s5_1);
  };
  Long.prototype.sf = function () {
    return new Long(~this.r5_1, ~this.s5_1);
  };
  Long.prototype.z6 = function () {
    return this.r5_1;
  };
  Long.prototype.ff = function () {
    return toNumber(this);
  };
  Long.prototype.valueOf = function () {
    return this.ff();
  };
  Long.prototype.equals = function (other) {
    var tmp;
    if (other instanceof Long) {
      tmp = equalsLong(this, other);
    } else {
      tmp = false;
    }
    return tmp;
  };
  Long.prototype.hashCode = function () {
    return hashCode_1(this);
  };
  Long.prototype.toString = function () {
    return toStringImpl(this, 10);
  };
  Long.$metadata$ = classMeta('Long', [Comparable], undefined, undefined, undefined, Number_0.prototype);
  function get_ZERO() {
    init_properties_longjs_kt_ttk8rv();
    return ZERO;
  }
  var ZERO;
  function get_ONE() {
    init_properties_longjs_kt_ttk8rv();
    return ONE;
  }
  var ONE;
  function get_NEG_ONE() {
    init_properties_longjs_kt_ttk8rv();
    return NEG_ONE;
  }
  var NEG_ONE;
  function get_MAX_VALUE() {
    init_properties_longjs_kt_ttk8rv();
    return MAX_VALUE;
  }
  var MAX_VALUE;
  function get_MIN_VALUE() {
    init_properties_longjs_kt_ttk8rv();
    return MIN_VALUE;
  }
  var MIN_VALUE;
  function get_TWO_PWR_24_() {
    init_properties_longjs_kt_ttk8rv();
    return TWO_PWR_24_;
  }
  var TWO_PWR_24_;
  function compare(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (equalsLong(_this__u8e3s4, other)) {
      return 0;
    }
    var thisNeg = isNegative(_this__u8e3s4);
    var otherNeg = isNegative(other);
    return (thisNeg ? !otherNeg : false) ? -1 : (!thisNeg ? otherNeg : false) ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
  }
  function add(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    var a48 = _this__u8e3s4.s5_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.s5_1 & 65535;
    var a16 = _this__u8e3s4.r5_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.r5_1 & 65535;
    var b48 = other.s5_1 >>> 16 | 0;
    var b32 = other.s5_1 & 65535;
    var b16 = other.r5_1 >>> 16 | 0;
    var b00 = other.r5_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + (a00 + b00 | 0) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + (a16 + b16 | 0) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + (a32 + b32 | 0) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (a48 + b48 | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function subtract(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return add(_this__u8e3s4, other.t5());
  }
  function multiply(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    } else if (isZero(other)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = multiply(negate(_this__u8e3s4), negate(other));
      } else {
        tmp = negate(multiply(negate(_this__u8e3s4), other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(multiply(_this__u8e3s4, negate(other)));
    }
    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) ? lessThan(other, get_TWO_PWR_24_()) : false) {
      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
    }
    var a48 = _this__u8e3s4.s5_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.s5_1 & 65535;
    var a16 = _this__u8e3s4.r5_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.r5_1 & 65535;
    var b48 = other.s5_1 >>> 16 | 0;
    var b32 = other.s5_1 & 65535;
    var b16 = other.r5_1 >>> 16 | 0;
    var b00 = other.r5_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + imul(a00, b00) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + imul(a16, b00) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c16 = c16 + imul(a00, b16) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + imul(a32, b00) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a16, b16) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a00, b32) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function divide(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (isZero(other)) {
      throw Exception_init_$Create$('division by zero');
    } else if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      if (equalsLong(other, get_ONE()) ? true : equalsLong(other, get_NEG_ONE())) {
        return get_MIN_VALUE();
      } else if (equalsLong(other, get_MIN_VALUE())) {
        return get_ONE();
      } else {
        var halfThis = shiftRight(_this__u8e3s4, 1);
        var approx = shiftLeft(halfThis.u5(other), 1);
        if (equalsLong(approx, get_ZERO())) {
          return isNegative(other) ? get_ONE() : get_NEG_ONE();
        } else {
          var rem = subtract(_this__u8e3s4, multiply(other, approx));
          return add(approx, rem.u5(other));
        }
      }
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = negate(_this__u8e3s4).u5(negate(other));
      } else {
        tmp = negate(negate(_this__u8e3s4).u5(other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(_this__u8e3s4.u5(negate(other)));
    }
    var res = get_ZERO();
    var rem_0 = _this__u8e3s4;
    while (greaterThanOrEqual(rem_0, other)) {
      var approxDouble = toNumber(rem_0) / toNumber(other);
      var approx2 = Math.max(1.0, Math.floor(approxDouble));
      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);
      var delta = log2 <= 48.0 ? 1.0 : Math.pow(2.0, log2 - 48);
      var approxRes = fromNumber(approx2);
      var approxRem = multiply(approxRes, other);
      while (isNegative(approxRem) ? true : greaterThan(approxRem, rem_0)) {
        approx2 = approx2 - delta;
        approxRes = fromNumber(approx2);
        approxRem = multiply(approxRes, other);
      }
      if (isZero(approxRes)) {
        approxRes = get_ONE();
      }
      res = add(res, approxRes);
      rem_0 = subtract(rem_0, approxRem);
    }
    return res;
  }
  function modulo(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return subtract(_this__u8e3s4, multiply(_this__u8e3s4.u5(other), other));
  }
  function shiftLeft(_this__u8e3s4, numBits) {
    init_properties_longjs_kt_ttk8rv();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.r5_1 << numBits_0, _this__u8e3s4.s5_1 << numBits_0 | (_this__u8e3s4.r5_1 >>> (32 - numBits_0 | 0) | 0));
      } else {
        return new Long(0, _this__u8e3s4.r5_1 << (numBits_0 - 32 | 0));
      }
    }
  }
  function shiftRight(_this__u8e3s4, numBits) {
    init_properties_longjs_kt_ttk8rv();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.r5_1 >>> numBits_0 | 0 | _this__u8e3s4.s5_1 << (32 - numBits_0 | 0), _this__u8e3s4.s5_1 >> numBits_0);
      } else {
        return new Long(_this__u8e3s4.s5_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.s5_1 >= 0 ? 0 : -1);
      }
    }
  }
  function shiftRightUnsigned(_this__u8e3s4, numBits) {
    init_properties_longjs_kt_ttk8rv();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.r5_1 >>> numBits_0 | 0 | _this__u8e3s4.s5_1 << (32 - numBits_0 | 0), _this__u8e3s4.s5_1 >>> numBits_0 | 0);
      } else {
        var tmp;
        if (numBits_0 === 32) {
          tmp = new Long(_this__u8e3s4.s5_1, 0);
        } else {
          tmp = new Long(_this__u8e3s4.s5_1 >>> (numBits_0 - 32 | 0) | 0, 0);
        }
        return tmp;
      }
    }
  }
  function toNumber(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.s5_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);
  }
  function equalsLong(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.s5_1 === other.s5_1 ? _this__u8e3s4.r5_1 === other.r5_1 : false;
  }
  function hashCode_1(l) {
    init_properties_longjs_kt_ttk8rv();
    return l.r5_1 ^ l.s5_1;
  }
  function toStringImpl(_this__u8e3s4, radix) {
    init_properties_longjs_kt_ttk8rv();
    if (radix < 2 ? true : 36 < radix) {
      throw Exception_init_$Create$('radix out of range: ' + radix);
    }
    if (isZero(_this__u8e3s4)) {
      return '0';
    }
    if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
        var radixLong = fromInt(radix);
        var div = _this__u8e3s4.u5(radixLong);
        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).z6();
        var tmp = toStringImpl(div, radix);
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = rem;
        var tmp0_unsafeCast = tmp$ret$0.toString(radix);
        tmp$ret$1 = tmp0_unsafeCast;
        return tmp + tmp$ret$1;
      } else {
        return '-' + toStringImpl(negate(_this__u8e3s4), radix);
      }
    }
    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;
    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));
    var rem_0 = _this__u8e3s4;
    var result = '';
    while (true) {
      var remDiv = rem_0.u5(radixToPower);
      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).z6();
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = intval;
      var tmp1_unsafeCast = tmp$ret$2.toString(radix);
      tmp$ret$3 = tmp1_unsafeCast;
      var digits = tmp$ret$3;
      rem_0 = remDiv;
      if (isZero(rem_0)) {
        return digits + result;
      } else {
        while (digits.length < digitsPerTime) {
          digits = '0' + digits;
        }
        result = digits + result;
      }
    }
  }
  function fromInt(value) {
    init_properties_longjs_kt_ttk8rv();
    return new Long(value, value < 0 ? -1 : 0);
  }
  function isNegative(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.s5_1 < 0;
  }
  function isZero(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.s5_1 === 0 ? _this__u8e3s4.r5_1 === 0 : false;
  }
  function isOdd(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return (_this__u8e3s4.r5_1 & 1) === 1;
  }
  function negate(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.t5();
  }
  function lessThan(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) < 0;
  }
  function fromNumber(value) {
    init_properties_longjs_kt_ttk8rv();
    if (isNaN_0(value)) {
      return get_ZERO();
    } else if (value <= -9.223372036854776E18) {
      return get_MIN_VALUE();
    } else if (value + 1 >= 9.223372036854776E18) {
      return get_MAX_VALUE();
    } else if (value < 0.0) {
      return negate(fromNumber(-value));
    } else {
      var twoPwr32 = 4.294967296E9;
      return new Long(jsBitwiseOr(value % twoPwr32, 0), jsBitwiseOr(value / twoPwr32, 0));
    }
  }
  function greaterThan(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) > 0;
  }
  function greaterThanOrEqual(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) >= 0;
  }
  function getLowBitsUnsigned(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.r5_1 >= 0 ? _this__u8e3s4.r5_1 : 4.294967296E9 + _this__u8e3s4.r5_1;
  }
  var properties_initialized_longjs_kt_5aju7t;
  function init_properties_longjs_kt_ttk8rv() {
    if (properties_initialized_longjs_kt_5aju7t) {
    } else {
      properties_initialized_longjs_kt_5aju7t = true;
      ZERO = fromInt(0);
      ONE = fromInt(1);
      NEG_ONE = fromInt(-1);
      MAX_VALUE = new Long(-1, 2147483647);
      MIN_VALUE = new Long(0, -2147483648);
      TWO_PWR_24_ = fromInt(16777216);
    }
  }
  function withType(type, array) {
    array.$type$ = type;
    return array;
  }
  function numberToInt(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a.z6();
    } else {
      tmp = doubleToInt(a);
    }
    return tmp;
  }
  function doubleToInt(a) {
    return a > 2.147483647E9 ? 2147483647 : a < -2.147483648E9 ? -2147483648 : jsBitwiseOr(a, 0);
  }
  function numberToDouble(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = +a;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function toShort(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = a << 16 >> 16;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function numberToLong(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a;
    } else {
      tmp = fromNumber(a);
    }
    return tmp;
  }
  function numberToChar(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.toUShort' call
    var tmp0_toUShort = numberToInt(a);
    tmp$ret$0 = _UShort___init__impl__jigrne(toShort(tmp0_toUShort));
    return _Char___init__impl__6a9atx_0(tmp$ret$0);
  }
  function toLong_0(a) {
    return fromInt(a);
  }
  function numberRangeToNumber(start, endInclusive) {
    return new IntRange(start, endInclusive);
  }
  function get_propertyRefClassMetadataCache() {
    init_properties_reflectRuntime_kt_yf9l8h();
    return propertyRefClassMetadataCache;
  }
  var propertyRefClassMetadataCache;
  function metadataObject() {
    init_properties_reflectRuntime_kt_yf9l8h();
    var undef = undefined;
    return classMeta(undef, undef, undef, undef, undef, undef);
  }
  function getPropertyCallableRef(name, paramCount, type, getter, setter) {
    init_properties_reflectRuntime_kt_yf9l8h();
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = getPropertyRefClass(getter, getKPropMetadata(paramCount, setter, type));
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function getPropertyRefClass(obj, metadata) {
    init_properties_reflectRuntime_kt_yf9l8h();
    obj.$metadata$ = metadata;
    obj.constructor = obj;
    return obj;
  }
  function getKPropMetadata(paramCount, setter, type) {
    init_properties_reflectRuntime_kt_yf9l8h();
    var mdata = get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];
    if (mdata.interfaces.length === 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = mdata.interfaces;
      tmp$ret$0 = tmp0_asDynamic;
      tmp$ret$0.push(type);
      if (mdata.interfacesCache == null) {
        mdata.interfacesCache = generateInterfaceCache();
      } else {
        ensureNotNull(mdata.interfacesCache).isComplete = false;
      }
      extendCacheWithSingle(ensureNotNull(mdata.interfacesCache), type);
    }
    return mdata;
  }
  var properties_initialized_reflectRuntime_kt_inkhwd;
  function init_properties_reflectRuntime_kt_yf9l8h() {
    if (properties_initialized_reflectRuntime_kt_inkhwd) {
    } else {
      properties_initialized_reflectRuntime_kt_inkhwd = true;
      var tmp$ret$11;
      // Inline function 'kotlin.arrayOf' call
      var tmp$ret$2;
      // Inline function 'kotlin.arrayOf' call
      var tmp0_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_arrayOf;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var tmp = tmp$ret$2;
      var tmp$ret$5;
      // Inline function 'kotlin.arrayOf' call
      var tmp1_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$4;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = tmp1_arrayOf;
      tmp$ret$4 = tmp$ret$3;
      tmp$ret$5 = tmp$ret$4;
      var tmp_0 = tmp$ret$5;
      var tmp$ret$8;
      // Inline function 'kotlin.arrayOf' call
      var tmp2_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$7;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$6;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$6 = tmp2_arrayOf;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      var tmp3_arrayOf = [tmp, tmp_0, tmp$ret$8];
      var tmp$ret$10;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$9;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$9 = tmp3_arrayOf;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      propertyRefClassMetadataCache = tmp$ret$11;
    }
  }
  var interfacesCounter;
  function classMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return createMetadata('class', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype);
  }
  function createMetadata(kind, name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return {kind: kind, simpleName: name, interfaceId: kind === 'interface' ? -1 : undefined, interfaces: interfaces || [], associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, fastPrototype: fastPrototype, $kClass$: undefined, interfacesCache: {isComplete: fastPrototype === undefined && (interfaces === undefined || interfaces.length === 0), implementInterfaceMemo: {}}};
  }
  function isArrayish(o) {
    return isJsArray(o) ? true : isView(o);
  }
  function isJsArray(obj) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Array.isArray(obj);
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function isInterface(obj, iface) {
    var tmp0_elvis_lhs = obj.constructor;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var ctor = tmp;
    return isInterfaceImpl(ctor, iface);
  }
  function isInterfaceImpl(ctor, iface) {
    if (ctor === iface) {
      return true;
    }
    var metadata = ctor.$metadata$;
    if (!(metadata == null) ? metadata.interfacesCache == null : false) {
      metadata.interfacesCache = generateInterfaceCache();
    }
    var tmp0_safe_receiver = metadata;
    var interfacesCache = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.interfacesCache;
    var tmp;
    if (!(interfacesCache == null)) {
      if (!interfacesCache.isComplete) {
        completeInterfaceCache(ctor);
      }
      var tmp1_safe_receiver = iface.$metadata$;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.interfaceId;
      var tmp_0;
      if (tmp2_elvis_lhs == null) {
        return false;
      } else {
        tmp_0 = tmp2_elvis_lhs;
      }
      var interfaceId = tmp_0;
      tmp = !!interfacesCache.implementInterfaceMemo[interfaceId];
    } else {
      var tmp3_safe_receiver = fastGetPrototype(ctor);
      var tmp4_elvis_lhs = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.constructor;
      var tmp_1;
      if (tmp4_elvis_lhs == null) {
        return false;
      } else {
        tmp_1 = tmp4_elvis_lhs;
      }
      var constructor = tmp_1;
      tmp = isInterfaceImpl(constructor, iface);
    }
    return tmp;
  }
  function generateInterfaceCache() {
    return {isComplete: false, implementInterfaceMemo: {}};
  }
  function completeInterfaceCache(ctor) {
    var metadata = ctor.$metadata$;
    if (!(metadata == null) ? metadata.interfacesCache == null : false) {
      metadata.interfacesCache = generateInterfaceCache();
    }
    var tmp0_safe_receiver = metadata;
    var interfacesCache = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.interfacesCache;
    if (!(interfacesCache == null)) {
      if (interfacesCache.isComplete === true) {
        return interfacesCache;
      }
      var indexedObject = metadata.interfaces;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var i = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        extendCacheWithSingle(interfacesCache, i);
        extendCacheWith(interfacesCache, completeInterfaceCache(i));
      }
    }
    var tmp2_safe_receiver = fastGetPrototype(ctor);
    var tmp3_safe_receiver = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.constructor;
    var tmp;
    if (tmp3_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp$ret$0 = completeInterfaceCache(tmp3_safe_receiver);
      tmp = tmp$ret$0;
    }
    var parentInterfacesCache = tmp;
    var tmp4_safe_receiver = interfacesCache;
    var tmp_0;
    if (tmp4_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.js.completeInterfaceCache.<anonymous>' call
      extendCacheWith(tmp4_safe_receiver, parentInterfacesCache);
      tmp4_safe_receiver.isComplete = true;
      tmp$ret$1 = tmp4_safe_receiver;
      tmp_0 = tmp$ret$1;
    }
    var tmp5_elvis_lhs = tmp_0;
    return tmp5_elvis_lhs == null ? parentInterfacesCache : tmp5_elvis_lhs;
  }
  function fastGetPrototype(ctor) {
    var tmp0_safe_receiver = ctor.$metadata$;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.fastGetPrototype.<anonymous>' call
      if (tmp0_safe_receiver.fastPrototype == null) {
        tmp0_safe_receiver.fastPrototype = getPrototype(ctor);
      }
      tmp$ret$0 = tmp0_safe_receiver.fastPrototype;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? getPrototype(ctor) : tmp1_elvis_lhs;
  }
  function extendCacheWithSingle(_this__u8e3s4, intr) {
    _this__u8e3s4.implementInterfaceMemo[getOrDefineInterfaceId(intr)] = true;
  }
  function extendCacheWith(_this__u8e3s4, cache) {
    var tmp0_safe_receiver = cache;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.implementInterfaceMemo;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      return Unit_getInstance();
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var anotherInterfaceMemo = tmp;
    Object.assign(_this__u8e3s4.implementInterfaceMemo, anotherInterfaceMemo);
  }
  function getPrototype(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4.prototype;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.getPrototype.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = Object.getPrototypeOf(tmp0_safe_receiver);
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp = tmp$ret$2;
    }
    return tmp;
  }
  function getOrDefineInterfaceId(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = _this__u8e3s4.$metadata$;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    var metadata = tmp$ret$1;
    var tmp0_elvis_lhs = metadata.interfaceId;
    var interfaceId = tmp0_elvis_lhs == null ? -1 : tmp0_elvis_lhs;
    var tmp;
    if (!equals_0(interfaceId, -1)) {
      tmp = interfaceId;
    } else {
      var tmp1 = interfacesCounter;
      interfacesCounter = tmp1 + 1 | 0;
      var result = tmp1;
      metadata.interfaceId = result;
      tmp = result;
    }
    return tmp;
  }
  function isArray(obj) {
    var tmp;
    if (isJsArray(obj)) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = obj;
      tmp = !tmp$ret$0.$type$;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isObject(obj) {
    var objTypeOf = typeof obj;
    var tmp0_subject = objTypeOf;
    switch (tmp0_subject) {
      case 'string':
        return true;
      case 'number':
        return true;
      case 'boolean':
        return true;
      case 'function':
        return true;
      default:
        return jsInstanceOf(obj, Object);
    }
  }
  function isNumber(a) {
    var tmp;
    if (typeof a === 'number') {
      tmp = true;
    } else {
      tmp = a instanceof Long;
    }
    return tmp;
  }
  function isComparable(value) {
    var type = typeof value;
    return ((type === 'string' ? true : type === 'boolean') ? true : isNumber(value)) ? true : isInterface(value, get_js(getKClass(Comparable)));
  }
  function isCharSequence(value) {
    return typeof value === 'string' ? true : isInterface(value, get_js(getKClass(CharSequence)));
  }
  function isBooleanArray(a) {
    return isJsArray(a) ? a.$type$ === 'BooleanArray' : false;
  }
  function isByteArray(a) {
    return jsInstanceOf(a, Int8Array);
  }
  function isShortArray(a) {
    return jsInstanceOf(a, Int16Array);
  }
  function isCharArray(a) {
    return jsInstanceOf(a, Uint16Array) ? a.$type$ === 'CharArray' : false;
  }
  function isIntArray(a) {
    return jsInstanceOf(a, Int32Array);
  }
  function isFloatArray(a) {
    return jsInstanceOf(a, Float32Array);
  }
  function isLongArray(a) {
    return isJsArray(a) ? a.$type$ === 'LongArray' : false;
  }
  function isDoubleArray(a) {
    return jsInstanceOf(a, Float64Array);
  }
  function interfaceMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('interface', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, undefined);
  }
  function objectMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return createMetadata('object', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype);
  }
  function copyOf_0(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    var tmp0_require = newSize >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      tmp$ret$0 = 'Invalid new array size: ' + newSize + '.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString_3(message));
    }
    var tmp$ret$1;
    // Inline function 'withType' call
    var tmp1_withType = fillFrom(_this__u8e3s4, charArray(newSize));
    tmp1_withType.$type$ = 'CharArray';
    tmp$ret$1 = tmp1_withType;
    return tmp$ret$1;
  }
  function contentEquals(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function contentHashCode(_this__u8e3s4) {
    return contentHashCodeInternal(_this__u8e3s4);
  }
  function asList(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0;
    return new ArrayList(tmp$ret$1);
  }
  function plus_1(_this__u8e3s4, elements) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.concat(elements);
  }
  function sort_0(_this__u8e3s4) {
    if (_this__u8e3s4.length > 1) {
      sortArray(_this__u8e3s4);
    }
  }
  function sortWith_0(_this__u8e3s4, comparator) {
    if (_this__u8e3s4.length > 1) {
      sortArrayWith(_this__u8e3s4, comparator);
    }
  }
  function copyOfRange_1(_this__u8e3s4, fromIndex, toIndex) {
    Companion_getInstance().h2(fromIndex, toIndex, _this__u8e3s4.length);
    var tmp$ret$1;
    // Inline function 'withType' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var tmp0_withType = tmp$ret$0.slice(fromIndex, toIndex);
    tmp0_withType.$type$ = 'LongArray';
    tmp$ret$1 = tmp0_withType;
    return tmp$ret$1;
  }
  function copyInto_0(_this__u8e3s4, destination, destinationOffset, startIndex, endIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0;
    var tmp = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = destination;
    tmp$ret$3 = tmp$ret$2;
    arrayCopy(tmp, tmp$ret$3, destinationOffset, startIndex, endIndex);
    return destination;
  }
  function copyOf_1(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'withType' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var tmp0_withType = tmp$ret$0.slice();
    tmp0_withType.$type$ = 'LongArray';
    tmp$ret$1 = tmp0_withType;
    return tmp$ret$1;
  }
  function contentEquals_0(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function copyOfRange_2(_this__u8e3s4, fromIndex, toIndex) {
    Companion_getInstance().h2(fromIndex, toIndex, _this__u8e3s4.length);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.slice(fromIndex, toIndex);
  }
  function contentHashCode_0(_this__u8e3s4) {
    return contentHashCodeInternal(_this__u8e3s4);
  }
  function getCategoryValue(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    tmp$ret$0 = Char__toInt_impl_vasixd(_this__u8e3s4);
    var ch = tmp$ret$0;
    var index = binarySearchRange(Category_getInstance().tf_1, ch);
    var start = Category_getInstance().tf_1[index];
    var code = Category_getInstance().uf_1[index];
    var value = categoryValueFrom(code, ch - start | 0);
    return value === 17 ? CharCategory_UNASSIGNED_getInstance().pd_1 : value;
  }
  function Category() {
    Category_instance = this;
    var toBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var fromBase64 = new Int32Array(128);
    var inductionVariable = 0;
    var last = charSequenceLength(toBase64) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'kotlin.code' call
        var tmp0__get_code__88qj9g = charSequenceGet(toBase64, i);
        tmp$ret$0 = Char__toInt_impl_vasixd(tmp0__get_code__88qj9g);
        fromBase64[tmp$ret$0] = i;
      }
       while (inductionVariable <= last);
    var rangeStartDiff = 'gBCFEDCKCDCaDDaDBhBCEEDDDDDEDXBHYBH5BRwBGDCHDCIDFHDCHFDCDEIRTEE7BGHDDJlCBbSEMOFGERwDEDDDDECEFCRBJhBFDCYFFCCzBvBjBBFC3BOhDBmBDGpBDDCtBBJIbEECLGDFCLDCgBBKVKEDiDDHCFECECKCEODBebC5CLBOKhBJDDDDWEBHFCFCPBZDEL1BVBSLPBgBB2BDBDICFBHKCCKCPDBHEDWBHEDDDDEDEDIBDGDCKCCGDDDCGECCWBFMDDCDEDDCHDDHKDDBKDBHFCWBFGFDBDDFEDBPDDKCHBGDCHEDWBFGFDCEDEDBHDDGDCKCGJEGDBFDDFDDDDDMEFDBFDCGBOKDFDFDCGFCXBQDDDDDBEGEDFDDKHBHDDGFCXBKBFCEFCFCHCHECCKDNCCHFCoBEDECFDDDDHDCCKJBGDCSDYBJEHBFDDEBIGKDCMuBFHEBGBIBKCkBFBFBXEIFJDFDGCKCEgBBDPEDGKKGECIBkBEOBDFFLBkBBIBEFFEClBrBCEBEGDBKGGDDDDDCHDENDCFEKDDlBDDFrBCDpKBECGEECpBBEChBBECGEECPB5BBECjCCDJUDQKG2CCGDsTCRBaCDrCDDIHNBEDLSDCJSCMLFCCM0BDHGFLBFDDKGKGEFDDBKGjBB1BHFChBDFmCKfDDDDDDCGDCFDKeCFLsBEaGKBDiBXDDD1BDGDEIGJEKGKGHBGCMF/BEBvBCEDDFHEKHKJJDDeDDGDKsBFEDCIEkBIICCDFKDDKeGCJHrBCDIIDBNBHEBEFDBFsB/BNBiBlB6BBF1EIiDJIGCGCIIIIGCGCIIIIOCIIIIIIDFEDDBFEDDDDEBDIFDDFEDBLFGCEEICFBJCDEDCLDKBFBKCCGDDKDDNDgBQNEBDMPFFDEDEBFFHECEBEEDFBEDDQjBCEDEFFCCJHBeEEfsIIEUCHCxCBeZoBGlCZLV8BuCW3FBJB2BIvDB4HOesBFCfKQgIjEW/BEgBCiIwBVCGnBCgBBpDvBBuBEDBHEFGCCjDCGEDCFCFlBDDF4BHCOBXJHBHBHBHBHBHBHBHBgBCECGHGEDIFBKCEDMEtBaB5CM2GaMEDDCKCGFCJEDFDDDC2CDDDB6CDCFrBB+CDEKgBkBMQfBKeIBPgBKnBPgKguGgC9vUDVB3jBD3BJoBGCsIBDQKCUuBDDKCcCCmCKCGIXJCNC/BBHGKDECEVFBEMCEEBqBDDGDFDXDCEBDGEG0BEICyBQCICKGSGDEBKcICXLCLBdDDBvBDECCDNCKECFCJKFBpBFEDCJDBICCKCEQBGDDByBEDCEFBYDCLEDDCKGCGCGJHBHBrBBEJDEwCjBIDCKGk9KMXExBEggCgoGuLCqDmBHMFFCKBNBFBIsDQRrLCQgCC2BoBMCCQGEGQDCQDDDDFDGDECEEFBnEEBFEDCKCDCaDDaDBFCKBtBCfDGCGCFEDDDDCECKDC';
    var diff = decodeVarLenBase64(rangeStartDiff, fromBase64, 1342);
    var start = new Int32Array(diff.length + 1 | 0);
    var inductionVariable_0 = 0;
    var last_0 = diff.length - 1 | 0;
    if (inductionVariable_0 <= last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        start[i_0 + 1 | 0] = start[i_0] + diff[i_0] | 0;
      }
       while (inductionVariable_0 <= last_0);
    this.tf_1 = start;
    var rangeCategory = 'PsY44a41W54UYJYZYB14W7XC15WZPsYa84bl9Zw8b85Lr7C44brlerrYBZBCZCiBiBiBhCiiBhChiBhiCBhhChiCihBhChCChiBhChiClBCFhjCiBiBihDhiBhCCihBiBBhCCFCEbEbEb7EbGhCk7BixRkiCi4BRbh4BhRhCBRBCiiBBCiBChiZBCBCiBcGHhChCiBRBxxEYC40Rx8c6RGUm4GRFRFYRQZ44acG4wRYFEFGJYllGFlYGwcGmkEmcGFJFl8cYxwFGFGRFGFRJFGkkcYkxRm6aFGEGmmEmEGRYRFGxxYFRFRFRGQGIFmIFIGIooGFGFGYJ4EFmoIRFlxRlxRFRFxlRxlFllRxmFIGxxIoxRomFRIRxlFlmGRJFaL86F4mRxmGoRFRFRFRFllRxGIGRxmGxmGmxRxGRFlRRJmmFllGYRmmIRFllRlRFRFllRFxxGFIGmmRoxImxRFRllGmxRJ4aRFGxmIoRFlxRlxRFRFllRFxxGlImoGmmRxoIxoIGRmmIRxlFlmGRJ8FLRxmFFRFllRllRxxFlRlxRxlFRFRFRooGRIooRomRxFRIRJLc8aRmoIoGFllRlRFRFRlmGmoIooRGRGRxmGFRllGmxRJRYL8lGooYFllRlRFRFRFRmlIIxGooRGRIRlxFGRJxlFRGIFllRlRFlmGIGxIooRomF8xRxxFllILFGRJLcFxmIoRFRFRFxlRFRxxGxxIooGmmRRIRJxxIoYRFllGGRaFEGYJYRxlFRFRFlRFllGGlxRFxEGRJRFRFcY84c8mGcJL8G1WIFRFRGIGmmYFGRGRcGc88RYcYRFIGIGmmIomGFJYFooGmlFllGmmFIFIFGFmoIGIomFJIm8cBhRRxxBC4ECFRFRFlRFRFRFRFRFRFlRFRFRFRFRFRGYLRFcRBRCxxUF8YFMF1WRFYKFRFRFGRFGYRFGRFllRlRGRFmmIGIooGGY44E46FmxRJRLRY44U44GmmQRJRFEFRFGFlGRFRFxmGmoIooGmoIoxRxxIoGIGRxxcx4YJFRFRFRFRJLRcFmmIomRx4YFoGGmRomIGIGmxRJRJRYEYRGmmHRGIFmIGmIIooGFRJYcGcRmmIFomGmmIomGmlFJFmoGooGGIRYFIGIGRYJRFJFEYCRBRBYRGYGIGFGFllGomGFRCECECEGRGhCCiBCBCRBRCBCBCRBRCxBCBCRCDCDCDCiiRBj7CbCiiRBj7b7iCiiRxiCBRbCBbxxCiiRBj7bRMQUY9+V9+VYtOQMY9eY43X44Z1WY54XYMQRQrERLZ12ELZ12RERaRGHGHGR88B88BihBhiChhC8hcZBc8BB8CBCFi8cihBZBC8Z8CLKhCKr8cRZcZc88ZcZc85Z8ZcZc1WcZc1WcZcZcZcRcRLcLcZcZcZcZc1WLcZ1WZ1WZcZ1WZ1WZ1WZcZcZcRcRcBRCixBBCiBBihCCEBhCCchCGhCRY44LCiRRxxCFRkYRGFRFRFRFRFRFRFRFRFRGY9eY49eY44U49e49e1WYEYUY04VY48cRcRcRcRcRs4Y48ElK1Wc1W12U2cKGooUE88KqqEl4c8RFxxGm7bkkFUF4kEkFRFRFx8cLcFcRFcRLcLcLcLcLcFcFRFEFRcRFEYFEYFJFRhClmHnnYG4EhCEGFKGYRbEbhCCiBECiBhCk7bhClBihCiBBCBhCRhiBhhCCRhiFkkCFlGllGllGFooGmIcGRL88aRFYRIFIGRYJRGFYl4FGJFGYFGIRYFRGIFmoIGIGIYxEJRYFmEFJFRFGmoImoIGRFGFmIRJRYFEFcloGIFmlGmlFGFlmGFRllEYFomGo4YlkEoGRFRFRFRFRFRCbECk7bRCFooG4oGRJRFRFRFRTSFRFRCRCRlGFZFRFRlxFFbRF2VRFRFRF6cRGY41WRG40UX1W44V24Y44X33Y44R44U1WY50Z5R46YRFRFxxQY44a41W54UYJYZYB14W7XC15WZ12YYFEFEFRFRFRFlxRllRxxa65b86axcZcRQcR';
    this.uf_1 = decodeVarLenBase64(rangeCategory, fromBase64, 1343);
  }
  Category.$metadata$ = objectMeta('Category');
  var Category_instance;
  function Category_getInstance() {
    if (Category_instance == null)
      new Category();
    return Category_instance;
  }
  function categoryValueFrom(code, ch) {
    var tmp;
    if (code < 32) {
      tmp = code;
    } else if (code < 1024) {
      tmp = (ch & 1) === 1 ? code >> 5 : code & 31;
    } else {
      var tmp0_subject = ch % 3 | 0;
      switch (tmp0_subject) {
        case 2:
          tmp = code >> 10;
          break;
        case 1:
          tmp = code >> 5 & 31;
          break;
        default:
          tmp = code & 31;
          break;
      }
    }
    return tmp;
  }
  function decodeVarLenBase64(base64, fromBase64, resultLength) {
    var result = new Int32Array(resultLength);
    var index = 0;
    var int = 0;
    var shift = 0;
    var indexedObject = base64;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var char = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      var tmp$ret$0;
      // Inline function 'kotlin.code' call
      tmp$ret$0 = Char__toInt_impl_vasixd(char);
      var sixBit = fromBase64[tmp$ret$0];
      int = int | (sixBit & 31) << shift;
      if (sixBit < 32) {
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        result[tmp1] = int;
        int = 0;
        shift = 0;
      } else {
        shift = shift + 5 | 0;
      }
    }
    return result;
  }
  function minOf(a, b) {
    return Math.min(a, b);
  }
  function digitToIntImpl(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    tmp$ret$0 = Char__toInt_impl_vasixd(_this__u8e3s4);
    var ch = tmp$ret$0;
    var index = binarySearchRange(Digit_getInstance().vf_1, ch);
    var diff = ch - Digit_getInstance().vf_1[index] | 0;
    return diff < 10 ? diff : -1;
  }
  function binarySearchRange(array, needle) {
    var bottom = 0;
    var top = array.length - 1 | 0;
    var middle = -1;
    var value = 0;
    while (bottom <= top) {
      middle = (bottom + top | 0) / 2 | 0;
      value = array[middle];
      if (needle > value)
        bottom = middle + 1 | 0;
      else if (needle === value)
        return middle;
      else
        top = middle - 1 | 0;
    }
    return middle - (needle < value ? 1 : 0) | 0;
  }
  function Digit() {
    Digit_instance = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.intArrayOf' call
    tmp$ret$0 = new Int32Array([48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296]);
    tmp.vf_1 = tmp$ret$0;
  }
  Digit.$metadata$ = objectMeta('Digit');
  var Digit_instance;
  function Digit_getInstance() {
    if (Digit_instance == null)
      new Digit();
    return Digit_instance;
  }
  function asList_0(_this__u8e3s4) {
    return new asList$1(_this__u8e3s4);
  }
  function asList$1($this_asList) {
    this.wf_1 = $this_asList;
    AbstractList.call(this);
  }
  asList$1.prototype.i = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.wf_1);
  };
  asList$1.prototype.p = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.wf_1);
  };
  asList$1.prototype.xf = function (element) {
    return ULongArray__contains_impl_v9bgai(this.wf_1, element);
  };
  asList$1.prototype.u1 = function (element) {
    if (!(element instanceof ULong))
      return false;
    return this.xf(element instanceof ULong ? element.q1_1 : THROW_CCE());
  };
  asList$1.prototype.yf = function (index) {
    Companion_getInstance().i2(index, this.i());
    return ULongArray__get_impl_pr71q9(this.wf_1, index);
  };
  asList$1.prototype.l = function (index) {
    return new ULong(this.yf(index));
  };
  asList$1.prototype.zf = function (element) {
    var tmp = isObject(new ULong(element)) ? new ULong(element) : THROW_CCE();
    if (!(tmp instanceof ULong))
      return -1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.indexOf' call
    var tmp_0 = _ULongArray___get_storage__impl__28e64j(this.wf_1);
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.toLong' call
    tmp$ret$0 = _ULong___get_data__impl__fggpzb(element);
    tmp$ret$1 = indexOf_0(tmp_0, tmp$ret$0);
    return tmp$ret$1;
  };
  asList$1.prototype.j2 = function (element) {
    if (!(element instanceof ULong))
      return -1;
    return this.zf(element instanceof ULong ? element.q1_1 : THROW_CCE());
  };
  asList$1.$metadata$ = classMeta(undefined, [RandomAccess], undefined, undefined, undefined, AbstractList.prototype);
  function isWhitespaceImpl(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    tmp$ret$0 = Char__toInt_impl_vasixd(_this__u8e3s4);
    var ch = tmp$ret$0;
    return (((9 <= ch ? ch <= 13 : false) ? true : 28 <= ch ? ch <= 32 : false) ? true : ch === 160) ? true : ch > 4096 ? (((((ch === 5760 ? true : 8192 <= ch ? ch <= 8202 : false) ? true : ch === 8232) ? true : ch === 8233) ? true : ch === 8239) ? true : ch === 8287) ? true : ch === 12288 : false;
  }
  function Exception_init_$Init$($this) {
    extendThrowable($this, void 1, void 1);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Init$_0(message, $this) {
    extendThrowable($this, message, void 1);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$(message) {
    var tmp = Exception_init_$Init$_0(message, Object.create(Exception.prototype));
    captureStack(tmp, Exception_init_$Create$);
    return tmp;
  }
  function Exception_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Exception.call($this);
    return $this;
  }
  function Exception() {
    captureStack(this, Exception);
  }
  Exception.$metadata$ = classMeta('Exception', undefined, undefined, undefined, undefined, Error.prototype);
  function Error_init_$Init$(message, $this) {
    extendThrowable($this, message, void 1);
    Error_0.call($this);
    return $this;
  }
  function Error_0() {
    captureStack(this, Error_0);
  }
  Error_0.$metadata$ = classMeta('Error', undefined, undefined, undefined, undefined, Error.prototype);
  function IllegalArgumentException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$() {
    var tmp = IllegalArgumentException_init_$Init$(Object.create(IllegalArgumentException.prototype));
    captureStack(tmp, IllegalArgumentException_init_$Create$);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$_0(message) {
    var tmp = IllegalArgumentException_init_$Init$_0(message, Object.create(IllegalArgumentException.prototype));
    captureStack(tmp, IllegalArgumentException_init_$Create$_0);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_1(message, cause, $this) {
    RuntimeException_init_$Init$_1(message, cause, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException() {
    captureStack(this, IllegalArgumentException);
  }
  IllegalArgumentException.$metadata$ = classMeta('IllegalArgumentException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function IllegalStateException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$(message) {
    var tmp = IllegalStateException_init_$Init$(message, Object.create(IllegalStateException.prototype));
    captureStack(tmp, IllegalStateException_init_$Create$);
    return tmp;
  }
  function IllegalStateException() {
    captureStack(this, IllegalStateException);
  }
  IllegalStateException.$metadata$ = classMeta('IllegalStateException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NoSuchElementException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$() {
    var tmp = NoSuchElementException_init_$Init$(Object.create(NoSuchElementException.prototype));
    captureStack(tmp, NoSuchElementException_init_$Create$);
    return tmp;
  }
  function NoSuchElementException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$_0(message) {
    var tmp = NoSuchElementException_init_$Init$_0(message, Object.create(NoSuchElementException.prototype));
    captureStack(tmp, NoSuchElementException_init_$Create$_0);
    return tmp;
  }
  function NoSuchElementException() {
    captureStack(this, NoSuchElementException);
  }
  NoSuchElementException.$metadata$ = classMeta('NoSuchElementException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function RuntimeException_init_$Init$($this) {
    Exception_init_$Init$($this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Init$_0(message, $this) {
    Exception_init_$Init$_0(message, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$(message) {
    var tmp = RuntimeException_init_$Init$_0(message, Object.create(RuntimeException.prototype));
    captureStack(tmp, RuntimeException_init_$Create$);
    return tmp;
  }
  function RuntimeException_init_$Init$_1(message, cause, $this) {
    Exception_init_$Init$_1(message, cause, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException() {
    captureStack(this, RuntimeException);
  }
  RuntimeException.$metadata$ = classMeta('RuntimeException', undefined, undefined, undefined, undefined, Exception.prototype);
  function IndexOutOfBoundsException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$(message) {
    var tmp = IndexOutOfBoundsException_init_$Init$(message, Object.create(IndexOutOfBoundsException.prototype));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);
    return tmp;
  }
  function IndexOutOfBoundsException() {
    captureStack(this, IndexOutOfBoundsException);
  }
  IndexOutOfBoundsException.$metadata$ = classMeta('IndexOutOfBoundsException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function UnsupportedOperationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$() {
    var tmp = UnsupportedOperationException_init_$Init$(Object.create(UnsupportedOperationException.prototype));
    captureStack(tmp, UnsupportedOperationException_init_$Create$);
    return tmp;
  }
  function UnsupportedOperationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$_0(message) {
    var tmp = UnsupportedOperationException_init_$Init$_0(message, Object.create(UnsupportedOperationException.prototype));
    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);
    return tmp;
  }
  function UnsupportedOperationException() {
    captureStack(this, UnsupportedOperationException);
  }
  UnsupportedOperationException.$metadata$ = classMeta('UnsupportedOperationException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NumberFormatException_init_$Init$(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$(message) {
    var tmp = NumberFormatException_init_$Init$(message, Object.create(NumberFormatException.prototype));
    captureStack(tmp, NumberFormatException_init_$Create$);
    return tmp;
  }
  function NumberFormatException() {
    captureStack(this, NumberFormatException);
  }
  NumberFormatException.$metadata$ = classMeta('NumberFormatException', undefined, undefined, undefined, undefined, IllegalArgumentException.prototype);
  function ArithmeticException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$(message) {
    var tmp = ArithmeticException_init_$Init$(message, Object.create(ArithmeticException.prototype));
    captureStack(tmp, ArithmeticException_init_$Create$);
    return tmp;
  }
  function ArithmeticException() {
    captureStack(this, ArithmeticException);
  }
  ArithmeticException.$metadata$ = classMeta('ArithmeticException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NullPointerException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NullPointerException.call($this);
    return $this;
  }
  function NullPointerException_init_$Create$() {
    var tmp = NullPointerException_init_$Init$(Object.create(NullPointerException.prototype));
    captureStack(tmp, NullPointerException_init_$Create$);
    return tmp;
  }
  function NullPointerException() {
    captureStack(this, NullPointerException);
  }
  NullPointerException.$metadata$ = classMeta('NullPointerException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NoWhenBranchMatchedException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoWhenBranchMatchedException.call($this);
    return $this;
  }
  function NoWhenBranchMatchedException_init_$Create$() {
    var tmp = NoWhenBranchMatchedException_init_$Init$(Object.create(NoWhenBranchMatchedException.prototype));
    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);
    return tmp;
  }
  function NoWhenBranchMatchedException() {
    captureStack(this, NoWhenBranchMatchedException);
  }
  NoWhenBranchMatchedException.$metadata$ = classMeta('NoWhenBranchMatchedException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function ClassCastException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ClassCastException.call($this);
    return $this;
  }
  function ClassCastException_init_$Create$() {
    var tmp = ClassCastException_init_$Init$(Object.create(ClassCastException.prototype));
    captureStack(tmp, ClassCastException_init_$Create$);
    return tmp;
  }
  function ClassCastException() {
    captureStack(this, ClassCastException);
  }
  ClassCastException.$metadata$ = classMeta('ClassCastException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function jsIn(lhs_hack, rhs_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = lhs_hack in rhs_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsBitwiseOr(lhs_hack, rhs_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = lhs_hack | rhs_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsTypeOf(value_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = typeof value_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsDeleteProperty(obj_hack, property_hack) {
    delete obj_hack[property_hack];
  }
  function jsInstanceOf(obj_hack, jsClass_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = obj_hack instanceof jsClass_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function toString_4(_this__u8e3s4, radix) {
    return toStringImpl(_this__u8e3s4, checkRadix(radix));
  }
  function Function1() {
  }
  Function1.$metadata$ = interfaceMeta('Function1');
  function Function0() {
  }
  Function0.$metadata$ = interfaceMeta('Function0');
  //region block: post-declaration
  InternalHashCodeMap.prototype.va = createJsMap;
  //endregion
  //region block: init
  _stableSortingIsSupported = null;
  interfacesCounter = 0;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = getKClassFromExpression;
  _.$_$.b = getKClass;
  _.$_$.c = CharCategory_CONNECTOR_PUNCTUATION_getInstance;
  _.$_$.d = CharCategory_DECIMAL_DIGIT_NUMBER_getInstance;
  _.$_$.e = CharCategory_LOWERCASE_LETTER_getInstance;
  _.$_$.f = CharCategory_OTHER_LETTER_getInstance;
  _.$_$.g = CharCategory_UPPERCASE_LETTER_getInstance;
  _.$_$.h = joinToString$default_0;
  _.$_$.i = contains$default;
  _.$_$.j = endsWith$default;
  _.$_$.k = split$default;
  _.$_$.l = startsWith$default_1;
  _.$_$.m = startsWith$default_0;
  _.$_$.n = ArrayList_init_$Create$_0;
  _.$_$.o = ArrayList_init_$Create$;
  _.$_$.p = ArrayList_init_$Create$_1;
  _.$_$.q = HashMap_init_$Create$;
  _.$_$.r = HashSet_init_$Create$_0;
  _.$_$.s = HashSet_init_$Create$;
  _.$_$.t = LinkedHashMap_init_$Create$_1;
  _.$_$.u = LinkedHashMap_init_$Create$;
  _.$_$.v = LinkedHashSet_init_$Create$;
  _.$_$.w = Regex_init_$Create$;
  _.$_$.x = StringBuilder_init_$Create$_1;
  _.$_$.y = ArithmeticException_init_$Create$;
  _.$_$.z = Exception_init_$Init$_0;
  _.$_$.a1 = Exception_init_$Create$;
  _.$_$.b1 = IllegalArgumentException_init_$Create$;
  _.$_$.c1 = IllegalArgumentException_init_$Init$_0;
  _.$_$.d1 = IllegalArgumentException_init_$Create$_0;
  _.$_$.e1 = IllegalArgumentException_init_$Init$_1;
  _.$_$.f1 = IllegalStateException_init_$Create$;
  _.$_$.g1 = IndexOutOfBoundsException_init_$Create$;
  _.$_$.h1 = NoSuchElementException_init_$Create$;
  _.$_$.i1 = NoSuchElementException_init_$Create$_0;
  _.$_$.j1 = NumberFormatException_init_$Create$;
  _.$_$.k1 = RuntimeException_init_$Init$_0;
  _.$_$.l1 = RuntimeException_init_$Create$;
  _.$_$.m1 = UnsupportedOperationException_init_$Create$_0;
  _.$_$.n1 = _Char___init__impl__6a9atx;
  _.$_$.o1 = Char__minus_impl_a2frrh;
  _.$_$.p1 = Char__minus_impl_a2frrh_0;
  _.$_$.q1 = Char__toInt_impl_vasixd;
  _.$_$.r1 = _UByte___get_data__impl__jof9qr;
  _.$_$.s1 = _UInt___init__impl__l7qpdl;
  _.$_$.t1 = _UInt___get_data__impl__f0vqqw;
  _.$_$.u1 = _UIntArray___init__impl__ghjpc6_0;
  _.$_$.v1 = _UIntArray___init__impl__ghjpc6;
  _.$_$.w1 = UIntArray__get_impl_gp5kza;
  _.$_$.x1 = UIntArray__hashCode_impl_hr7ost;
  _.$_$.y1 = UIntArray__isEmpty_impl_vd8j4n;
  _.$_$.z1 = UIntArray__iterator_impl_tkdv7k;
  _.$_$.a2 = UIntArray__set_impl_7f2zu2;
  _.$_$.b2 = _UIntArray___get_size__impl__r6l8ci;
  _.$_$.c2 = _UIntArray___get_storage__impl__92a0v0;
  _.$_$.d2 = _ULong___init__impl__c78o9k;
  _.$_$.e2 = _ULong___get_data__impl__fggpzb;
  _.$_$.f2 = _ULongArray___init__impl__twm1l3_0;
  _.$_$.g2 = _ULongArray___init__impl__twm1l3;
  _.$_$.h2 = ULongArray__get_impl_pr71q9;
  _.$_$.i2 = ULongArray__hashCode_impl_aze4wa;
  _.$_$.j2 = ULongArray__isEmpty_impl_c3yngu;
  _.$_$.k2 = ULongArray__iterator_impl_cq4d2h;
  _.$_$.l2 = ULongArray__set_impl_z19mvh;
  _.$_$.m2 = _ULongArray___get_size__impl__ju6dtr;
  _.$_$.n2 = _ULongArray___get_storage__impl__28e64j;
  _.$_$.o2 = _UShort___get_data__impl__g0245;
  _.$_$.p2 = DoubleCompanionObject_getInstance;
  _.$_$.q2 = FloatCompanionObject_getInstance;
  _.$_$.r2 = IntCompanionObject_getInstance;
  _.$_$.s2 = PrimitiveClasses_getInstance;
  _.$_$.t2 = Companion_getInstance_10;
  _.$_$.u2 = Unit_getInstance;
  _.$_$.v2 = AbstractIterator;
  _.$_$.w2 = ArrayList;
  _.$_$.x2 = Collection;
  _.$_$.y2 = Grouping;
  _.$_$.z2 = Iterable_0;
  _.$_$.a3 = Iterator_1;
  _.$_$.b3 = List_0;
  _.$_$.c3 = Map;
  _.$_$.d3 = any_1;
  _.$_$.e3 = arrayCopy;
  _.$_$.f3 = checkIndexOverflow;
  _.$_$.g3 = collectionSizeOrDefault;
  _.$_$.h3 = contentEquals;
  _.$_$.i3 = contentEquals_0;
  _.$_$.j3 = contentHashCode_0;
  _.$_$.k3 = contentHashCode;
  _.$_$.l3 = copyOfRange_2;
  _.$_$.m3 = copyOfRange_1;
  _.$_$.n3 = copyOf_1;
  _.$_$.o3 = copyOf_0;
  _.$_$.p3 = copyToArray;
  _.$_$.q3 = count;
  _.$_$.r3 = distinct;
  _.$_$.s3 = dropLast;
  _.$_$.t3 = eachCount;
  _.$_$.u3 = emptyList;
  _.$_$.v3 = emptyMap;
  _.$_$.w3 = filterNotNull;
  _.$_$.x3 = first_0;
  _.$_$.y3 = first;
  _.$_$.z3 = flatten;
  _.$_$.a4 = getValue;
  _.$_$.b4 = get_indices_0;
  _.$_$.c4 = get_indices;
  _.$_$.d4 = get_indices_1;
  _.$_$.e4 = get_lastIndex_1;
  _.$_$.f4 = lastOrNull;
  _.$_$.g4 = last;
  _.$_$.h4 = listOf_1;
  _.$_$.i4 = listOf;
  _.$_$.j4 = mapCapacity;
  _.$_$.k4 = mapOf_1;
  _.$_$.l4 = mapOf;
  _.$_$.m4 = plus_0;
  _.$_$.n4 = plus;
  _.$_$.o4 = slice;
  _.$_$.p4 = slice_0;
  _.$_$.q4 = sortedWith;
  _.$_$.r4 = sorted;
  _.$_$.s4 = sum;
  _.$_$.t4 = takeLast;
  _.$_$.u4 = take;
  _.$_$.v4 = toIntArray;
  _.$_$.w4 = toList;
  _.$_$.x4 = toList_1;
  _.$_$.y4 = toList_0;
  _.$_$.z4 = toMap;
  _.$_$.a5 = toMutableMap;
  _.$_$.b5 = toULongArray;
  _.$_$.c5 = withIndex;
  _.$_$.d5 = zip;
  _.$_$.e5 = compareValues;
  _.$_$.f5 = println;
  _.$_$.g5 = arrayIterator;
  _.$_$.h5 = booleanArray;
  _.$_$.i5 = captureStack;
  _.$_$.j5 = charArrayOf_0;
  _.$_$.k5 = charArray;
  _.$_$.l5 = charSequenceGet;
  _.$_$.m5 = charSequenceLength;
  _.$_$.n5 = charSequenceSubSequence;
  _.$_$.o5 = classMeta;
  _.$_$.p5 = compareTo_0;
  _.$_$.q5 = equals_0;
  _.$_$.r5 = fillArrayVal;
  _.$_$.s5 = getPropertyCallableRef;
  _.$_$.t5 = getStringHashCode;
  _.$_$.u5 = hashCode_0;
  _.$_$.v5 = interfaceMeta;
  _.$_$.w5 = isCharSequence;
  _.$_$.x5 = isInterface;
  _.$_$.y5 = isNumber;
  _.$_$.z5 = isObject;
  _.$_$.a6 = longArrayOf_0;
  _.$_$.b6 = longArray;
  _.$_$.c6 = numberToChar;
  _.$_$.d6 = numberToDouble;
  _.$_$.e6 = numberToInt;
  _.$_$.f6 = numberToLong;
  _.$_$.g6 = objectMeta;
  _.$_$.h6 = toLong_0;
  _.$_$.i6 = toString_3;
  _.$_$.j6 = abs_0;
  _.$_$.k6 = abs;
  _.$_$.l6 = coerceAtLeast;
  _.$_$.m6 = coerceAtMost;
  _.$_$.n6 = until;
  _.$_$.o6 = KProperty0;
  _.$_$.p6 = KProperty1;
  _.$_$.q6 = Sequence;
  _.$_$.r6 = get_category;
  _.$_$.s6 = concatToString;
  _.$_$.t6 = contains_3;
  _.$_$.u6 = get_lastIndex_2;
  _.$_$.v6 = prependIndent;
  _.$_$.w6 = removePrefix;
  _.$_$.x6 = reversed_0;
  _.$_$.y6 = substring;
  _.$_$.z6 = toIntOrNull;
  _.$_$.a7 = toInt;
  _.$_$.b7 = toLong;
  _.$_$.c7 = toString_0;
  _.$_$.d7 = trimIndent;
  _.$_$.e7 = Annotation;
  _.$_$.f7 = Char_0;
  _.$_$.g7 = Comparable;
  _.$_$.h7 = Comparator;
  _.$_$.i7 = Enum;
  _.$_$.j7 = Exception;
  _.$_$.k7 = IllegalArgumentException;
  _.$_$.l7 = Long;
  _.$_$.m7 = NotImplementedError;
  _.$_$.n7 = Pair;
  _.$_$.o7 = RuntimeException;
  _.$_$.p7 = THROW_CCE;
  _.$_$.q7 = Triple;
  _.$_$.r7 = UByte;
  _.$_$.s7 = UIntArray;
  _.$_$.t7 = UInt;
  _.$_$.u7 = ULongArray;
  _.$_$.v7 = ULong;
  _.$_$.w7 = UShort;
  _.$_$.x7 = ensureNotNull;
  _.$_$.y7 = lazy;
  _.$_$.z7 = noWhenBranchMatchedException;
  _.$_$.a8 = toString_2;
  _.$_$.b8 = to;
  _.$_$.c8 = uintCompare;
  _.$_$.d8 = uintDivide;
  _.$_$.e8 = uintRemainder;
  _.$_$.f8 = ulongCompare;
  _.$_$.g8 = ulongDivide;
  _.$_$.h8 = ulongRemainder;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin-kotlin-stdlib-js-ir.js.map


/***/ }),

/***/ 639:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var get_indices = kotlin_kotlin.$_$.d4;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.o;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.b1;
  var isInterface = kotlin_kotlin.$_$.x5;
  var emptyList = kotlin_kotlin.$_$.u3;
  var classMeta = kotlin_kotlin.$_$.o5;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.z7;
  var listOf = kotlin_kotlin.$_$.h4;
  var plus = kotlin_kotlin.$_$.n4;
  var toString = kotlin_kotlin.$_$.i6;
  var IllegalArgumentException_init_$Create$_0 = kotlin_kotlin.$_$.d1;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.h1;
  var first = kotlin_kotlin.$_$.x3;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.v;
  var lazy = kotlin_kotlin.$_$.y7;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.s;
  var KProperty1 = kotlin_kotlin.$_$.p6;
  var getPropertyCallableRef = kotlin_kotlin.$_$.s5;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var isCharSequence = kotlin_kotlin.$_$.w5;
  var charSequenceLength = kotlin_kotlin.$_$.m5;
  var get_lastIndex = kotlin_kotlin.$_$.u6;
  var charSequenceGet = kotlin_kotlin.$_$.l5;
  var Char = kotlin_kotlin.$_$.f7;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;
  var equals = kotlin_kotlin.$_$.q5;
  var startsWith$default = kotlin_kotlin.$_$.m;
  var charSequenceSubSequence = kotlin_kotlin.$_$.n5;
  var hashCode = kotlin_kotlin.$_$.u5;
  var AbstractIterator = kotlin_kotlin.$_$.v2;
  var Sequence = kotlin_kotlin.$_$.q6;
  var interfaceMeta = kotlin_kotlin.$_$.v5;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var Exception = kotlin_kotlin.$_$.j7;
  var Exception_init_$Init$ = kotlin_kotlin.$_$.z;
  var captureStack = kotlin_kotlin.$_$.i5;
  //endregion
  //region block: pre-declaration
  CharToken.prototype = Object.create(Token.prototype);
  CharToken.prototype.constructor = CharToken;
  LiteralToken.prototype = Object.create(Token.prototype);
  LiteralToken.prototype.constructor = LiteralToken;
  noneMatched$1.prototype = Object.create(Token.prototype);
  noneMatched$1.prototype.constructor = noneMatched$1;
  Parsed.prototype = Object.create(ParseResult.prototype);
  Parsed.prototype.constructor = Parsed;
  TokenMatch.prototype = Object.create(Parsed.prototype);
  TokenMatch.prototype.constructor = TokenMatch;
  TokenMatchesSequence$iterator$1.prototype = Object.create(AbstractIterator.prototype);
  TokenMatchesSequence$iterator$1.prototype.constructor = TokenMatchesSequence$iterator$1;
  ErrorResult.prototype = Object.create(ParseResult.prototype);
  ErrorResult.prototype.constructor = ErrorResult;
  UnexpectedEof.prototype = Object.create(ErrorResult.prototype);
  UnexpectedEof.prototype.constructor = UnexpectedEof;
  NoMatchingToken.prototype = Object.create(ErrorResult.prototype);
  NoMatchingToken.prototype.constructor = NoMatchingToken;
  MismatchedToken.prototype = Object.create(ErrorResult.prototype);
  MismatchedToken.prototype.constructor = MismatchedToken;
  ParseException.prototype = Object.create(Exception.prototype);
  ParseException.prototype.constructor = ParseException;
  AlternativesFailure.prototype = Object.create(ErrorResult.prototype);
  AlternativesFailure.prototype.constructor = AlternativesFailure;
  UnparsedRemainder.prototype = Object.create(ErrorResult.prototype);
  UnparsedRemainder.prototype.constructor = UnparsedRemainder;
  ParsedValue.prototype = Object.create(Parsed.prototype);
  ParsedValue.prototype.constructor = ParsedValue;
  //endregion
  function AndCombinator(consumersImpl, transform) {
    this.zx_1 = consumersImpl;
    this.ay_1 = transform;
    var tmp = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filter' call
    var tmp0_filter = get_indices(this.zx_1);
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var inductionVariable = tmp0_filter.h5_1;
    var last = tmp0_filter.i5_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'com.github.h0tk3y.betterParse.combinators.AndCombinator.nonSkippedIndices.<anonymous>' call
        var tmp_0 = this.zx_1.l(element);
        tmp$ret$0 = !(tmp_0 instanceof SkipParser);
        if (tmp$ret$0) {
          tmp0_filterTo.a(element);
        }
      }
       while (!(element === last));
    tmp$ret$1 = tmp0_filterTo;
    tmp$ret$2 = tmp$ret$1;
    tmp.by_1 = tmp$ret$2;
  }
  AndCombinator.prototype.cy = function () {
    return this.zx_1;
  };
  AndCombinator.prototype.dy = function (tokens, fromPosition) {
    var nextPosition = fromPosition;
    var results = null;
    var inductionVariable = 0;
    var last = this.zx_1.i();
    if (inductionVariable < last)
      loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var consumer = this.zx_1.l(index);
        var tmp1_subject = consumer;
        if (isInterface(tmp1_subject, Parser)) {
          var result = consumer.dy(tokens, nextPosition);
          var tmp2_subject = result;
          if (tmp2_subject instanceof ErrorResult)
            return result;
          else {
            if (tmp2_subject instanceof Parsed) {
              var tmp3_elvis_lhs = results;
              var tmp;
              if (tmp3_elvis_lhs == null) {
                var tmp$ret$0;
                // Inline function 'kotlin.also' call
                var tmp0_also = ArrayList_init_$Create$();
                // Inline function 'kotlin.contracts.contract' call
                // Inline function 'com.github.h0tk3y.betterParse.combinators.AndCombinator.tryParse.<anonymous>' call
                results = tmp0_also;
                tmp$ret$0 = tmp0_also;
                tmp = tmp$ret$0;
              } else {
                tmp = tmp3_elvis_lhs;
              }
              tmp.a(result.f1());
              nextPosition = result.fy();
            }
          }
        } else {
          if (tmp1_subject instanceof SkipParser) {
            var result_0 = consumer.ey_1.dy(tokens, nextPosition);
            var tmp4_subject = result_0;
            if (tmp4_subject instanceof ErrorResult)
              return result_0;
            else {
              if (tmp4_subject instanceof Parsed)
                nextPosition = result_0.fy();
            }
          } else {
            throw IllegalArgumentException_init_$Create$();
          }
        }
      }
       while (inductionVariable < last);
    var tmp5_elvis_lhs = results;
    return new ParsedValue(this.ay_1(tmp5_elvis_lhs == null ? emptyList() : tmp5_elvis_lhs), nextPosition);
  };
  AndCombinator.$metadata$ = classMeta('AndCombinator', [Parser]);
  function use(_this__u8e3s4, transform) {
    return new MapCombinator(_this__u8e3s4, transform);
  }
  function map(_this__u8e3s4, transform) {
    return new MapCombinator(_this__u8e3s4, transform);
  }
  function MapCombinator(innerParser, transform) {
    this.gy_1 = innerParser;
    this.hy_1 = transform;
  }
  MapCombinator.prototype.dy = function (tokens, fromPosition) {
    var innerResult = this.gy_1.dy(tokens, fromPosition);
    var tmp0_subject = innerResult;
    var tmp;
    if (tmp0_subject instanceof ErrorResult) {
      tmp = innerResult;
    } else {
      if (tmp0_subject instanceof Parsed) {
        tmp = new ParsedValue(this.hy_1(innerResult.f1()), innerResult.fy());
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  };
  MapCombinator.$metadata$ = classMeta('MapCombinator', [Parser]);
  function or(_this__u8e3s4, other) {
    var tmp;
    if (_this__u8e3s4 instanceof OrCombinator) {
      tmp = _this__u8e3s4.iy_1;
    } else {
      tmp = listOf(_this__u8e3s4);
    }
    var leftParsers = tmp;
    var tmp_0;
    if (other instanceof OrCombinator) {
      tmp_0 = other.iy_1;
    } else {
      tmp_0 = listOf(other);
    }
    var rightParsers = tmp_0;
    return new OrCombinator(plus(leftParsers, rightParsers));
  }
  function OrCombinator(parsers) {
    this.iy_1 = parsers;
  }
  OrCombinator.prototype.dy = function (tokens, fromPosition) {
    var failures = null;
    var inductionVariable = 0;
    var last = this.iy_1.i();
    if (inductionVariable < last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var result = this.iy_1.l(index).dy(tokens, fromPosition);
        var tmp1_subject = result;
        if (tmp1_subject instanceof Parsed)
          return result;
        else {
          if (tmp1_subject instanceof ErrorResult) {
            if (failures == null)
              failures = ArrayList_init_$Create$();
            failures.a(result);
          }
        }
      }
       while (inductionVariable < last);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.orEmpty' call
    var tmp0_orEmpty = failures;
    var tmp0_elvis_lhs = tmp0_orEmpty;
    tmp$ret$0 = tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
    return new AlternativesFailure(tmp$ret$0);
  };
  OrCombinator.$metadata$ = classMeta('OrCombinator', [Parser]);
  function Separated(terms, separators) {
    this.jy_1 = terms;
    this.ky_1 = separators;
    // Inline function 'kotlin.require' call
    var tmp0_require = this.jy_1.i() === (this.ky_1.i() + 1 | 0) ? true : this.jy_1.p() ? this.ky_1.p() : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$_0(toString(message));
    }
  }
  Separated.prototype.ly = function (function_0) {
    if (this.jy_1.p())
      throw NoSuchElementException_init_$Create$();
    var result = first(this.jy_1);
    var inductionVariable = 0;
    var last = this.ky_1.i() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = function_0(result, this.ky_1.l(i), this.jy_1.l(i + 1 | 0));
      }
       while (inductionVariable <= last);
    return result;
  };
  Separated.$metadata$ = classMeta('Separated');
  function SeparatedCombinator(termParser, separatorParser, acceptZero) {
    this.my_1 = termParser;
    this.ny_1 = separatorParser;
    this.oy_1 = acceptZero;
  }
  SeparatedCombinator.prototype.dy = function (tokens, fromPosition) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var termMatches = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    var separatorMatches = tmp$ret$1;
    var first = this.my_1.dy(tokens, fromPosition);
    var tmp0_subject = first;
    var tmp;
    if (tmp0_subject instanceof ErrorResult) {
      tmp = this.oy_1 ? new ParsedValue(new Separated(emptyList(), emptyList()), fromPosition) : first;
    } else {
      if (tmp0_subject instanceof Parsed) {
        termMatches.a(first.f1());
        var nextPosition = first.fy();
        loop: while (true) {
          var separator = this.ny_1.dy(tokens, nextPosition);
          var tmp1_subject = separator;
          if (tmp1_subject instanceof ErrorResult)
            break loop;
          else {
            if (tmp1_subject instanceof Parsed) {
              var nextTerm = this.my_1.dy(tokens, separator.fy());
              var tmp2_subject = nextTerm;
              if (tmp2_subject instanceof ErrorResult)
                break loop;
              else {
                if (tmp2_subject instanceof Parsed) {
                  separatorMatches.a(separator.f1());
                  termMatches.a(nextTerm.f1());
                  nextPosition = nextTerm.fy();
                }
              }
            }
          }
        }
        tmp = new ParsedValue(new Separated(termMatches, separatorMatches), nextPosition);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  };
  SeparatedCombinator.$metadata$ = classMeta('SeparatedCombinator', [Parser]);
  function SkipParser(innerParser) {
    this.ey_1 = innerParser;
  }
  SkipParser.$metadata$ = classMeta('SkipParser');
  function skip(parser) {
    return new SkipParser(parser);
  }
  function parseToEnd(_this__u8e3s4, input) {
    return parseToEnd_0(_this__u8e3s4.sy(), _this__u8e3s4.ty().uy(input));
  }
  function Grammar$tokenizer$delegate$lambda(this$0) {
    return function () {
      return new DefaultTokenizer(this$0.vy());
    };
  }
  function Grammar() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.py_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.linkedSetOf' call
    tmp$ret$1 = LinkedHashSet_init_$Create$();
    tmp_0.qy_1 = tmp$ret$1;
    var tmp_1 = this;
    tmp_1.ry_1 = lazy(Grammar$tokenizer$delegate$lambda(this));
  }
  Grammar.prototype.vy = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.distinctBy' call
    var tmp0_distinctBy = this.py_1;
    var set = HashSet_init_$Create$();
    var list = ArrayList_init_$Create$();
    var tmp0_iterator = tmp0_distinctBy.f();
    while (tmp0_iterator.g()) {
      var e = tmp0_iterator.h();
      var tmp$ret$0;
      // Inline function 'com.github.h0tk3y.betterParse.grammar.Grammar.<get-tokens>.<anonymous>' call
      var tmp0_elvis_lhs = e.wy_1;
      tmp$ret$0 = tmp0_elvis_lhs == null ? e : tmp0_elvis_lhs;
      var key = tmp$ret$0;
      if (set.a(key)) {
        list.a(e);
      }
    }
    tmp$ret$1 = list;
    return tmp$ret$1;
  };
  Grammar.prototype.ty = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = tokenizer$factory();
    tmp$ret$0 = this.ry_1.f1();
    return tmp$ret$0;
  };
  Grammar.prototype.dy = function (tokens, fromPosition) {
    return this.sy().dy(tokens, fromPosition);
  };
  Grammar.prototype.yy = function (_this__u8e3s4, thisRef, property) {
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.github.h0tk3y.betterParse.grammar.Grammar.provideDelegate.<anonymous>' call
    this.qy_1.a(_this__u8e3s4);
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0;
  };
  Grammar.prototype.zy = function (_this__u8e3s4, thisRef, property) {
    return _this__u8e3s4;
  };
  Grammar.prototype.az = function (_this__u8e3s4, thisRef, property) {
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.github.h0tk3y.betterParse.grammar.Grammar.provideDelegate.<anonymous>' call
    if (_this__u8e3s4.wy_1 == null) {
      _this__u8e3s4.wy_1 = property.callableName;
    }
    this.py_1.a(_this__u8e3s4);
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0;
  };
  Grammar.prototype.bz = function (_this__u8e3s4, thisRef, property) {
    return _this__u8e3s4;
  };
  Grammar.$metadata$ = classMeta('Grammar', [Parser]);
  function parser(block) {
    return new ParserReference(block);
  }
  function ParserReference(parserProvider) {
    this.cz_1 = lazy(parserProvider);
  }
  ParserReference.prototype.dz = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = parser$factory();
    tmp$ret$0 = this.cz_1.f1();
    return tmp$ret$0;
  };
  ParserReference.prototype.dy = function (tokens, fromPosition) {
    return this.dz().dy(tokens, fromPosition);
  };
  ParserReference.$metadata$ = classMeta('ParserReference', [Parser]);
  function tokenizer$factory() {
    return getPropertyCallableRef('tokenizer', 1, KProperty1, function (receiver) {
      return receiver.ty();
    }, null);
  }
  function parser$factory() {
    return getPropertyCallableRef('parser', 1, KProperty1, function (receiver) {
      return receiver.dz();
    }, null);
  }
  function DefaultTokenizer(tokens) {
    this.ez_1 = tokens;
    // Inline function 'kotlin.require' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.ez_1;
    tmp$ret$0 = !tmp0_isNotEmpty.p();
    var tmp1_require = tmp$ret$0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'com.github.h0tk3y.betterParse.lexer.DefaultTokenizer.<anonymous>' call
      tmp$ret$1 = 'The tokens list should not be empty';
      var message = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$_0(toString(message));
    }
  }
  DefaultTokenizer.prototype.uy = function (input) {
    return this.fz(isCharSequence(input) ? input : THROW_CCE());
  };
  DefaultTokenizer.prototype.fz = function (input) {
    var tmp = new DefaultTokenProducer(this.ez_1, input);
    return TokenMatchesSequence_init_$Create$(tmp, null, 2, null);
  };
  DefaultTokenizer.$metadata$ = classMeta('DefaultTokenizer', [Tokenizer]);
  function DefaultTokenProducer(tokens, input) {
    this.gz_1 = tokens;
    this.hz_1 = input;
    this.iz_1 = charSequenceLength(this.hz_1);
    this.jz_1 = 0;
    this.kz_1 = 0;
    this.lz_1 = 1;
    this.mz_1 = 1;
    this.nz_1 = false;
  }
  DefaultTokenProducer.prototype.oz = function () {
    if (this.kz_1 > get_lastIndex(this.hz_1) ? true : this.nz_1) {
      return null;
    }
    var inductionVariable = 0;
    var last = this.gz_1.i();
    if (inductionVariable < last)
      $l$loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var token = this.gz_1.l(index);
        var matchLength = token.pz(this.hz_1, this.kz_1);
        if (matchLength === 0)
          continue $l$loop;
        var tmp1_this = this;
        var tmp2 = tmp1_this.jz_1;
        tmp1_this.jz_1 = tmp2 + 1 | 0;
        var result = new TokenMatch(token, tmp2, this.hz_1, this.kz_1, matchLength, this.lz_1, this.mz_1);
        var inductionVariable_0 = this.kz_1;
        var last_0 = this.kz_1 + matchLength | 0;
        if (inductionVariable_0 < last_0)
          do {
            var i = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            if (equals(new Char(charSequenceGet(this.hz_1, i)), new Char(_Char___init__impl__6a9atx(10)))) {
              var tmp4_this = this;
              var tmp5 = tmp4_this.lz_1;
              tmp4_this.lz_1 = tmp5 + 1 | 0;
              this.mz_1 = 1;
            } else {
              var tmp6_this = this;
              var tmp7 = tmp6_this.mz_1;
              tmp6_this.mz_1 = tmp7 + 1 | 0;
            }
          }
           while (inductionVariable_0 < last_0);
        var tmp8_this = this;
        tmp8_this.kz_1 = tmp8_this.kz_1 + matchLength | 0;
        return result;
      }
       while (inductionVariable < last);
    this.nz_1 = true;
    var tmp = get_noneMatched();
    var tmp9_this = this;
    var tmp10 = tmp9_this.jz_1;
    tmp9_this.jz_1 = tmp10 + 1 | 0;
    return new TokenMatch(tmp, tmp10, this.hz_1, this.kz_1, this.iz_1 - this.kz_1 | 0, this.lz_1, this.mz_1);
  };
  DefaultTokenProducer.$metadata$ = classMeta('DefaultTokenProducer', [TokenProducer]);
  function literalToken(text, ignore) {
    if (text.length === 1)
      return new CharToken(null, charSequenceGet(text, 0), ignore);
    return new LiteralToken(null, text, ignore);
  }
  function literalToken$default(text, ignore, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignore = false;
    return literalToken(text, ignore);
  }
  function CharToken(name, text, ignored) {
    Token.call(this, name, ignored);
    this.sz_1 = text;
  }
  CharToken.prototype.pz = function (input, fromIndex) {
    var tmp;
    var tmp_0;
    var tmp$ret$0;
    // Inline function 'kotlin.text.isNotEmpty' call
    tmp$ret$0 = charSequenceLength(input) > 0;
    if (tmp$ret$0) {
      tmp_0 = equals(new Char(charSequenceGet(input, fromIndex)), new Char(this.sz_1));
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = 1;
    } else {
      tmp = 0;
    }
    return tmp;
  };
  CharToken.prototype.toString = function () {
    var tmp0_elvis_lhs = this.wy_1;
    return (tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs) + ' (' + new Char(this.sz_1) + ')' + (this.xy_1 ? ' [ignorable]' : '');
  };
  CharToken.$metadata$ = classMeta('CharToken', undefined, undefined, undefined, undefined, Token.prototype);
  function LiteralToken(name, text, ignored) {
    Token.call(this, name, ignored);
    this.wz_1 = text;
  }
  LiteralToken.prototype.pz = function (input, fromIndex) {
    var tmp;
    if (startsWith$default(input, this.wz_1, fromIndex, false, 4, null)) {
      tmp = this.wz_1.length;
    } else {
      tmp = 0;
    }
    return tmp;
  };
  LiteralToken.prototype.toString = function () {
    var tmp0_elvis_lhs = this.wy_1;
    return (tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs) + ' (' + this.wz_1 + ')' + (this.xy_1 ? ' [ignorable]' : '');
  };
  LiteralToken.$metadata$ = classMeta('LiteralToken', undefined, undefined, undefined, undefined, Token.prototype);
  function get_noneMatched() {
    init_properties_Token_kt_kqa9y3();
    return noneMatched;
  }
  var noneMatched;
  function tryParseImpl($this, tokens, fromPosition) {
    var $this_0 = $this;
    var tokens_0 = tokens;
    var fromPosition_0 = fromPosition;
    $l$1: do {
      $l$0: do {
        var tmp0_elvis_lhs = tokens_0.l(fromPosition_0);
        var tmp;
        if (tmp0_elvis_lhs == null) {
          return new UnexpectedEof($this_0);
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var tokenMatch = tmp;
        var tmp_0;
        if (equals(tokenMatch.zz_1, $this_0)) {
          tmp_0 = tokenMatch;
        } else if (equals(tokenMatch.zz_1, get_noneMatched())) {
          tmp_0 = new NoMatchingToken(tokenMatch);
        } else if (tokenMatch.zz_1.xy_1) {
          var tmp0 = $this_0;
          var tmp1 = tokens_0;
          var tmp2 = fromPosition_0 + 1 | 0;
          $this_0 = tmp0;
          tokens_0 = tmp1;
          fromPosition_0 = tmp2;
          continue $l$0;
        } else {
          tmp_0 = new MismatchedToken($this_0, tokenMatch);
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function Token(name, ignored) {
    this.wy_1 = name;
    this.xy_1 = ignored;
  }
  Token.prototype.tz = function (_set____db54di) {
    this.wy_1 = _set____db54di;
  };
  Token.prototype.xb = function () {
    return this.wy_1;
  };
  Token.prototype.dy = function (tokens, fromPosition) {
    return tryParseImpl(this, tokens, fromPosition);
  };
  Token.$metadata$ = classMeta('Token', [Parser]);
  function noneMatched$1() {
    Token.call(this, 'no token matched', false);
  }
  noneMatched$1.prototype.pz = function (input, fromIndex) {
    return 0;
  };
  noneMatched$1.prototype.toString = function () {
    return 'noneMatched!';
  };
  noneMatched$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, Token.prototype);
  var properties_initialized_Token_kt_3j5vlj;
  function init_properties_Token_kt_kqa9y3() {
    if (properties_initialized_Token_kt_3j5vlj) {
    } else {
      properties_initialized_Token_kt_3j5vlj = true;
      noneMatched = new noneMatched$1();
    }
  }
  function TokenMatch(type, tokenIndex, input, offset, length, row, column) {
    Parsed.call(this);
    this.zz_1 = type;
    this.a10_1 = tokenIndex;
    this.b10_1 = input;
    this.c10_1 = offset;
    this.d10_1 = length;
    this.e10_1 = row;
    this.f10_1 = column;
  }
  TokenMatch.prototype.i10 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.text.substring' call
    var tmp0_substring = this.b10_1;
    var tmp1_substring = this.c10_1;
    var tmp2_substring = this.c10_1 + this.d10_1 | 0;
    tmp$ret$0 = toString(charSequenceSubSequence(tmp0_substring, tmp1_substring, tmp2_substring));
    return tmp$ret$0;
  };
  TokenMatch.prototype.f1 = function () {
    return this;
  };
  TokenMatch.prototype.fy = function () {
    return this.a10_1 + 1 | 0;
  };
  TokenMatch.prototype.toString = function () {
    return '' + this.zz_1.wy_1 + '@' + this.fy() + ' for "' + this.i10() + '" at ' + this.c10_1 + ' (' + this.e10_1 + ':' + this.f10_1 + ')';
  };
  TokenMatch.prototype.hashCode = function () {
    var result = hashCode(this.zz_1);
    result = imul(result, 31) + this.a10_1 | 0;
    result = imul(result, 31) + hashCode(this.b10_1) | 0;
    result = imul(result, 31) + this.c10_1 | 0;
    result = imul(result, 31) + this.d10_1 | 0;
    result = imul(result, 31) + this.e10_1 | 0;
    result = imul(result, 31) + this.f10_1 | 0;
    return result;
  };
  TokenMatch.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof TokenMatch))
      return false;
    var tmp0_other_with_cast = other instanceof TokenMatch ? other : THROW_CCE();
    if (!equals(this.zz_1, tmp0_other_with_cast.zz_1))
      return false;
    if (!(this.a10_1 === tmp0_other_with_cast.a10_1))
      return false;
    if (!equals(this.b10_1, tmp0_other_with_cast.b10_1))
      return false;
    if (!(this.c10_1 === tmp0_other_with_cast.c10_1))
      return false;
    if (!(this.d10_1 === tmp0_other_with_cast.d10_1))
      return false;
    if (!(this.e10_1 === tmp0_other_with_cast.e10_1))
      return false;
    if (!(this.f10_1 === tmp0_other_with_cast.f10_1))
      return false;
    return true;
  };
  TokenMatch.$metadata$ = classMeta('TokenMatch', undefined, undefined, undefined, undefined, Parsed.prototype);
  function TokenMatchesSequence_init_$Init$(tokenProducer, matches, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0)) {
      var tmp$ret$0;
      var tmp$ret$0_0;
      // Inline function 'kotlin.collections.arrayListOf' call
      tmp$ret$0 = ArrayList_init_$Create$();
      tmp$ret$0_0 = Unit_getInstance();
      matches = tmp$ret$0;
    }
    TokenMatchesSequence.call($this, tokenProducer, matches);
    return $this;
  }
  function TokenMatchesSequence_init_$Create$(tokenProducer, matches, $mask0, $marker) {
    return TokenMatchesSequence_init_$Init$(tokenProducer, matches, $mask0, $marker, Object.create(TokenMatchesSequence.prototype));
  }
  function TokenMatchesSequence$iterator$1(this$0) {
    this.n10_1 = this$0;
    AbstractIterator.call(this);
    this.l10_1 = 0;
    this.m10_1 = false;
  }
  TokenMatchesSequence$iterator$1.prototype.y1 = function () {
    if (this.m10_1) {
      this.c2();
    }
    var tmp0_elvis_lhs = this.n10_1.l(this.l10_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      this.c2();
      return Unit_getInstance();
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var nextMatch = tmp;
    this.b2(nextMatch);
    if (equals(nextMatch.zz_1, get_noneMatched())) {
      this.m10_1 = true;
    }
    var tmp1_this = this;
    tmp1_this.l10_1 = tmp1_this.l10_1 + 1 | 0;
  };
  TokenMatchesSequence$iterator$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractIterator.prototype);
  function TokenMatchesSequence(tokenProducer, matches) {
    this.xz_1 = tokenProducer;
    this.yz_1 = matches;
  }
  TokenMatchesSequence.prototype.l = function (position) {
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.github.h0tk3y.betterParse.lexer.TokenMatchesSequence.ensureReadPosition' call
      while (position >= this.yz_1.i()) {
        var tmp0_elvis_lhs = this.xz_1.oz();
        var tmp;
        if (tmp0_elvis_lhs == null) {
          tmp$ret$0 = false;
          break $l$block;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var next = tmp;
        this.yz_1.a(next);
      }
      tmp$ret$0 = true;
    }
    if (!tmp$ret$0) {
      return null;
    }
    return this.yz_1.l(position);
  };
  TokenMatchesSequence.prototype.o10 = function (position) {
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.github.h0tk3y.betterParse.lexer.TokenMatchesSequence.ensureReadPosition' call
      while (position >= this.yz_1.i()) {
        var tmp0_elvis_lhs = this.xz_1.oz();
        var tmp;
        if (tmp0_elvis_lhs == null) {
          tmp$ret$0 = false;
          break $l$block;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var next = tmp;
        this.yz_1.a(next);
      }
      tmp$ret$0 = true;
    }
    if (!tmp$ret$0) {
      return null;
    }
    var pos = position;
    while (true) {
      var tmp_0;
      if (pos < this.yz_1.i()) {
        tmp_0 = this.yz_1.l(pos);
      } else {
        var next_0 = this.xz_1.oz();
        var tmp_1;
        if (next_0 == null) {
          return null;
        } else {
          this.yz_1.a(next_0);
          tmp_1 = next_0;
        }
        tmp_0 = tmp_1;
      }
      var value = tmp_0;
      if (!value.zz_1.xy_1)
        return value;
      var tmp0 = pos;
      pos = tmp0 + 1 | 0;
    }
  };
  TokenMatchesSequence.prototype.f = function () {
    return new TokenMatchesSequence$iterator$1(this);
  };
  TokenMatchesSequence.$metadata$ = classMeta('TokenMatchesSequence', [Sequence]);
  function TokenProducer() {
  }
  TokenProducer.$metadata$ = interfaceMeta('TokenProducer');
  function Tokenizer() {
  }
  Tokenizer.$metadata$ = interfaceMeta('Tokenizer');
  function Parser() {
  }
  Parser.$metadata$ = interfaceMeta('Parser');
  function ParseResult() {
  }
  ParseResult.$metadata$ = classMeta('ParseResult');
  function UnexpectedEof(expected) {
    ErrorResult.call(this);
    this.p10_1 = expected;
  }
  UnexpectedEof.prototype.toString = function () {
    return 'UnexpectedEof(expected=' + this.p10_1 + ')';
  };
  UnexpectedEof.prototype.hashCode = function () {
    return hashCode(this.p10_1);
  };
  UnexpectedEof.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof UnexpectedEof))
      return false;
    var tmp0_other_with_cast = other instanceof UnexpectedEof ? other : THROW_CCE();
    if (!equals(this.p10_1, tmp0_other_with_cast.p10_1))
      return false;
    return true;
  };
  UnexpectedEof.$metadata$ = classMeta('UnexpectedEof', undefined, undefined, undefined, undefined, ErrorResult.prototype);
  function NoMatchingToken(tokenMismatch) {
    ErrorResult.call(this);
    this.q10_1 = tokenMismatch;
  }
  NoMatchingToken.prototype.toString = function () {
    return 'NoMatchingToken(tokenMismatch=' + this.q10_1 + ')';
  };
  NoMatchingToken.prototype.hashCode = function () {
    return this.q10_1.hashCode();
  };
  NoMatchingToken.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof NoMatchingToken))
      return false;
    var tmp0_other_with_cast = other instanceof NoMatchingToken ? other : THROW_CCE();
    if (!this.q10_1.equals(tmp0_other_with_cast.q10_1))
      return false;
    return true;
  };
  NoMatchingToken.$metadata$ = classMeta('NoMatchingToken', undefined, undefined, undefined, undefined, ErrorResult.prototype);
  function MismatchedToken(expected, found) {
    ErrorResult.call(this);
    this.r10_1 = expected;
    this.s10_1 = found;
  }
  MismatchedToken.prototype.toString = function () {
    return 'MismatchedToken(expected=' + this.r10_1 + ', found=' + this.s10_1 + ')';
  };
  MismatchedToken.prototype.hashCode = function () {
    var result = hashCode(this.r10_1);
    result = imul(result, 31) + this.s10_1.hashCode() | 0;
    return result;
  };
  MismatchedToken.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MismatchedToken))
      return false;
    var tmp0_other_with_cast = other instanceof MismatchedToken ? other : THROW_CCE();
    if (!equals(this.r10_1, tmp0_other_with_cast.r10_1))
      return false;
    if (!this.s10_1.equals(tmp0_other_with_cast.s10_1))
      return false;
    return true;
  };
  MismatchedToken.$metadata$ = classMeta('MismatchedToken', undefined, undefined, undefined, undefined, ErrorResult.prototype);
  function Parsed() {
    ParseResult.call(this);
  }
  Parsed.prototype.toString = function () {
    return 'Parsed(' + this.f1() + ')';
  };
  Parsed.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof Parsed)
      other;
    else
      THROW_CCE();
    if (!equals(this.f1(), other.f1()))
      return false;
    if (!(this.fy() === other.fy()))
      return false;
    return true;
  };
  Parsed.prototype.hashCode = function () {
    var tmp0_safe_receiver = this.f1();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var result = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    result = imul(31, result) + this.fy() | 0;
    return result;
  };
  Parsed.$metadata$ = classMeta('Parsed', undefined, undefined, undefined, undefined, ParseResult.prototype);
  function ErrorResult() {
    ParseResult.call(this);
  }
  ErrorResult.prototype.toString = function () {
    return 'ErrorResult';
  };
  ErrorResult.$metadata$ = classMeta('ErrorResult', undefined, undefined, undefined, undefined, ParseResult.prototype);
  function ParseException(errorResult) {
    Exception_init_$Init$('Could not parse input: ' + errorResult, this);
    this.t10_1 = errorResult;
    captureStack(this, ParseException);
  }
  ParseException.$metadata$ = classMeta('ParseException', undefined, undefined, undefined, undefined, Exception.prototype);
  function AlternativesFailure(errors) {
    ErrorResult.call(this);
    this.u10_1 = errors;
  }
  AlternativesFailure.prototype.toString = function () {
    return 'AlternativesFailure(errors=' + this.u10_1 + ')';
  };
  AlternativesFailure.prototype.hashCode = function () {
    return hashCode(this.u10_1);
  };
  AlternativesFailure.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof AlternativesFailure))
      return false;
    var tmp0_other_with_cast = other instanceof AlternativesFailure ? other : THROW_CCE();
    if (!equals(this.u10_1, tmp0_other_with_cast.u10_1))
      return false;
    return true;
  };
  AlternativesFailure.$metadata$ = classMeta('AlternativesFailure', undefined, undefined, undefined, undefined, ErrorResult.prototype);
  function parseToEnd_0(_this__u8e3s4, tokens) {
    return toParsedOrThrow(tryParseToEnd(_this__u8e3s4, tokens, 0)).f1();
  }
  function toParsedOrThrow(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof Parsed) {
      tmp = _this__u8e3s4;
    } else {
      if (tmp0_subject instanceof ErrorResult) {
        throw new ParseException(_this__u8e3s4);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function tryParseToEnd(_this__u8e3s4, tokens, position) {
    var result = _this__u8e3s4.dy(tokens, position);
    var tmp0_subject = result;
    var tmp;
    if (tmp0_subject instanceof ErrorResult) {
      tmp = result;
    } else {
      if (tmp0_subject instanceof Parsed) {
        var tmp1_safe_receiver = tokens.o10(result.fy());
        var tmp_0;
        if (tmp1_safe_receiver == null) {
          tmp_0 = null;
        } else {
          var tmp$ret$1;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$0;
          // Inline function 'com.github.h0tk3y.betterParse.parser.tryParseToEnd.<anonymous>' call
          tmp$ret$0 = new UnparsedRemainder(tmp1_safe_receiver);
          tmp$ret$1 = tmp$ret$0;
          tmp_0 = tmp$ret$1;
        }
        var tmp2_elvis_lhs = tmp_0;
        tmp = tmp2_elvis_lhs == null ? result : tmp2_elvis_lhs;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  function UnparsedRemainder(startsWith) {
    ErrorResult.call(this);
    this.v10_1 = startsWith;
  }
  UnparsedRemainder.prototype.toString = function () {
    return 'UnparsedRemainder(startsWith=' + this.v10_1 + ')';
  };
  UnparsedRemainder.prototype.hashCode = function () {
    return this.v10_1.hashCode();
  };
  UnparsedRemainder.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof UnparsedRemainder))
      return false;
    var tmp0_other_with_cast = other instanceof UnparsedRemainder ? other : THROW_CCE();
    if (!this.v10_1.equals(tmp0_other_with_cast.v10_1))
      return false;
    return true;
  };
  UnparsedRemainder.$metadata$ = classMeta('UnparsedRemainder', undefined, undefined, undefined, undefined, ErrorResult.prototype);
  function ParsedValue(value, nextPosition) {
    Parsed.call(this);
    this.w10_1 = value;
    this.x10_1 = nextPosition;
  }
  ParsedValue.prototype.f1 = function () {
    return this.w10_1;
  };
  ParsedValue.prototype.fy = function () {
    return this.x10_1;
  };
  ParsedValue.$metadata$ = classMeta('ParsedValue', undefined, undefined, undefined, undefined, Parsed.prototype);
  function Tuple() {
  }
  Tuple.$metadata$ = interfaceMeta('Tuple');
  function Tuple2(t1, t2) {
    this.y10_1 = t1;
    this.z10_1 = t2;
  }
  Tuple2.prototype.w3 = function () {
    return this.y10_1;
  };
  Tuple2.prototype.x3 = function () {
    return this.z10_1;
  };
  Tuple2.prototype.toString = function () {
    return 'Tuple2(t1=' + this.y10_1 + ', t2=' + this.z10_1 + ')';
  };
  Tuple2.prototype.hashCode = function () {
    var result = this.y10_1 == null ? 0 : hashCode(this.y10_1);
    result = imul(result, 31) + (this.z10_1 == null ? 0 : hashCode(this.z10_1)) | 0;
    return result;
  };
  Tuple2.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Tuple2))
      return false;
    var tmp0_other_with_cast = other instanceof Tuple2 ? other : THROW_CCE();
    if (!equals(this.y10_1, tmp0_other_with_cast.y10_1))
      return false;
    if (!equals(this.z10_1, tmp0_other_with_cast.z10_1))
      return false;
    return true;
  };
  Tuple2.$metadata$ = classMeta('Tuple2', [Tuple]);
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = AndCombinator;
  _.$_$.b = SeparatedCombinator;
  _.$_$.c = map;
  _.$_$.d = or;
  _.$_$.e = skip;
  _.$_$.f = use;
  _.$_$.g = Grammar;
  _.$_$.h = parseToEnd;
  _.$_$.i = parser;
  _.$_$.j = TokenMatch;
  _.$_$.k = Token;
  _.$_$.l = AlternativesFailure;
  _.$_$.m = NoMatchingToken;
  _.$_$.n = ParseException;
  _.$_$.o = Tuple2;
  _.$_$.p = literalToken$default;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin_com_github_h0tk3y_betterParse_better_parse.js.map


/***/ }),

/***/ 474:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var collectionSizeOrDefault = kotlin_kotlin.$_$.g3;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.n;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.o;
  var checkIndexOverflow = kotlin_kotlin.$_$.f3;
  //endregion
  //region block: pre-declaration
  //endregion
  function pmap(_this__u8e3s4, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      tmp0_mapTo.a(transform(item));
    }
    tmp$ret$0 = tmp0_mapTo;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function pmapIndexedNotNull(_this__u8e3s4, transform) {
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = transform(tmp0__anonymous__q1qw7t, item);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.a(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    tmp$ret$1 = tmp1_mapIndexedNotNullTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = pmapIndexedNotNull;
  _.$_$.b = pmap;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin_com_github_shwaka_parautil_parautil_parallel.js.map


/***/ }),

/***/ 11:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var log10 = Math.log10;
  var interfaceMeta = kotlin_kotlin.$_$.v5;
  var Long = kotlin_kotlin.$_$.l7;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.y;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.l1;
  var toString = kotlin_kotlin.$_$.i6;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f1;
  var ensureNotNull = kotlin_kotlin.$_$.x7;
  var DoubleCompanionObject_getInstance = kotlin_kotlin.$_$.p2;
  var FloatCompanionObject_getInstance = kotlin_kotlin.$_$.q2;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;
  var contains = kotlin_kotlin.$_$.t6;
  var contains$default = kotlin_kotlin.$_$.i;
  var get_lastIndex = kotlin_kotlin.$_$.u6;
  var charSequenceGet = kotlin_kotlin.$_$.l5;
  var Char = kotlin_kotlin.$_$.f7;
  var equals = kotlin_kotlin.$_$.q5;
  var charSequenceLength = kotlin_kotlin.$_$.m5;
  var charArrayOf = kotlin_kotlin.$_$.j5;
  var split$default = kotlin_kotlin.$_$.k;
  var toLong = kotlin_kotlin.$_$.h6;
  var listOf = kotlin_kotlin.$_$.i4;
  var toLong_0 = kotlin_kotlin.$_$.b7;
  var numberToLong = kotlin_kotlin.$_$.f6;
  var objectMeta = kotlin_kotlin.$_$.g6;
  var Enum = kotlin_kotlin.$_$.i7;
  var classMeta = kotlin_kotlin.$_$.o5;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.z7;
  var Triple = kotlin_kotlin.$_$.q7;
  var numberToDouble = kotlin_kotlin.$_$.d6;
  var until = kotlin_kotlin.$_$.n6;
  var substring = kotlin_kotlin.$_$.y6;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var abs = kotlin_kotlin.$_$.k6;
  var Pair = kotlin_kotlin.$_$.n7;
  var isNumber = kotlin_kotlin.$_$.y5;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var isObject = kotlin_kotlin.$_$.z5;
  var hashCode = kotlin_kotlin.$_$.u5;
  var IntCompanionObject_getInstance = kotlin_kotlin.$_$.r2;
  var abs_0 = kotlin_kotlin.$_$.j6;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.x;
  var Comparable = kotlin_kotlin.$_$.g7;
  var getKClass = kotlin_kotlin.$_$.b;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.s2;
  var NumberFormatException_init_$Create$ = kotlin_kotlin.$_$.j1;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var _ULongArray___get_size__impl__ju6dtr = kotlin_kotlin.$_$.m2;
  var ULongArray = kotlin_kotlin.$_$.u7;
  var numberToInt = kotlin_kotlin.$_$.e6;
  var UByte = kotlin_kotlin.$_$.r7;
  var UShort = kotlin_kotlin.$_$.w7;
  var UInt = kotlin_kotlin.$_$.t7;
  var ULong = kotlin_kotlin.$_$.v7;
  var ULongArray__hashCode_impl_aze4wa = kotlin_kotlin.$_$.i2;
  var UIntArray = kotlin_kotlin.$_$.s7;
  var UIntArray__hashCode_impl_hr7ost = kotlin_kotlin.$_$.x1;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.d2;
  var _UInt___init__impl__l7qpdl = kotlin_kotlin.$_$.s1;
  var _UIntArray___init__impl__ghjpc6 = kotlin_kotlin.$_$.u1;
  var _UInt___get_data__impl__f0vqqw = kotlin_kotlin.$_$.t1;
  var _UIntArray___init__impl__ghjpc6_0 = kotlin_kotlin.$_$.v1;
  var UIntArray__isEmpty_impl_vd8j4n = kotlin_kotlin.$_$.y1;
  var _UIntArray___get_size__impl__r6l8ci = kotlin_kotlin.$_$.b2;
  var UIntArray__get_impl_gp5kza = kotlin_kotlin.$_$.w1;
  var _UIntArray___get_storage__impl__92a0v0 = kotlin_kotlin.$_$.c2;
  var copyOfRange = kotlin_kotlin.$_$.l3;
  var uintCompare = kotlin_kotlin.$_$.c8;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.e2;
  var UIntArray__set_impl_7f2zu2 = kotlin_kotlin.$_$.a2;
  var println = kotlin_kotlin.$_$.f5;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.o;
  var UIntArray__iterator_impl_tkdv7k = kotlin_kotlin.$_$.z1;
  var uintDivide = kotlin_kotlin.$_$.d8;
  var uintRemainder = kotlin_kotlin.$_$.e8;
  var ulongDivide = kotlin_kotlin.$_$.g8;
  var ulongCompare = kotlin_kotlin.$_$.f8;
  var ULongArray__iterator_impl_cq4d2h = kotlin_kotlin.$_$.k2;
  var ULongArray__get_impl_pr71q9 = kotlin_kotlin.$_$.h2;
  var longArrayOf = kotlin_kotlin.$_$.a6;
  var _ULongArray___init__impl__twm1l3 = kotlin_kotlin.$_$.g2;
  var _ULongArray___get_storage__impl__28e64j = kotlin_kotlin.$_$.n2;
  var copyOfRange_0 = kotlin_kotlin.$_$.m3;
  var ULongArray__isEmpty_impl_c3yngu = kotlin_kotlin.$_$.j2;
  var longArray = kotlin_kotlin.$_$.b6;
  var arrayCopy = kotlin_kotlin.$_$.e3;
  var ULongArray__set_impl_z19mvh = kotlin_kotlin.$_$.l2;
  var plus = kotlin_kotlin.$_$.n4;
  var toULongArray = kotlin_kotlin.$_$.b5;
  var slice = kotlin_kotlin.$_$.p4;
  var _ULongArray___init__impl__twm1l3_0 = kotlin_kotlin.$_$.f2;
  var ulongRemainder = kotlin_kotlin.$_$.h8;
  var copyOf = kotlin_kotlin.$_$.n3;
  var toString_0 = kotlin_kotlin.$_$.c7;
  var isCharSequence = kotlin_kotlin.$_$.w5;
  var reversed = kotlin_kotlin.$_$.x6;
  var _UShort___get_data__impl__g0245 = kotlin_kotlin.$_$.o2;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.r1;
  var Companion_getInstance = kotlin_kotlin.$_$.t2;
  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.o1;
  var Char__minus_impl_a2frrh_0 = kotlin_kotlin.$_$.p1;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.q1;
  //endregion
  //region block: pre-declaration
  function tryFromFloat$default(float, exactRequired, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      exactRequired = false;
    return $handler == null ? this.ao(float, exactRequired) : $handler(float, exactRequired);
  }
  function tryFromDouble$default(double, exactRequired, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      exactRequired = false;
    return $handler == null ? this.co(double, exactRequired) : $handler(double, exactRequired);
  }
  function get_isNegative() {
    return this.jo() < 0;
  }
  function get_isPositive() {
    return this.jo() > 0;
  }
  function plus_0(other) {
    return this.no().eo(other);
  }
  function minus(other) {
    return this.no().fo(other);
  }
  function times(other) {
    return this.no().go(other);
  }
  function div(other) {
    return this.no().ho(other);
  }
  function rem(other) {
    return this.no().io(other);
  }
  function plus_1(int) {
    return this.no().eo(this.mo().zn(int));
  }
  function minus_0(int) {
    return this.no().fo(this.mo().zn(int));
  }
  function div_0(int) {
    return this.no().ho(this.mo().zn(int));
  }
  function div_1(long) {
    return this.no().ho(this.mo().yn(long));
  }
  ScaleOps.prototype = Object.create(Enum.prototype);
  ScaleOps.prototype.constructor = ScaleOps;
  RoundingMode.prototype = Object.create(Enum.prototype);
  RoundingMode.prototype.constructor = RoundingMode;
  Sign.prototype = Object.create(Enum.prototype);
  Sign.prototype.constructor = Sign;
  //endregion
  function Creator() {
  }
  Creator.$metadata$ = interfaceMeta('Creator');
  function Util() {
  }
  Util.$metadata$ = interfaceMeta('Util');
  function BigNumber() {
  }
  BigNumber.$metadata$ = interfaceMeta('BigNumber');
  function CommonBigNumberOperations() {
  }
  CommonBigNumberOperations.$metadata$ = interfaceMeta('CommonBigNumberOperations');
  function NarrowingOperations() {
  }
  NarrowingOperations.$metadata$ = interfaceMeta('NarrowingOperations');
  function ByteArraySerializable() {
  }
  ByteArraySerializable.$metadata$ = interfaceMeta('ByteArraySerializable');
  function BitwiseCapable() {
  }
  BitwiseCapable.$metadata$ = interfaceMeta('BitwiseCapable');
  function ByteArrayDeserializable() {
  }
  ByteArrayDeserializable.$metadata$ = interfaceMeta('ByteArrayDeserializable');
  function roundOrDont($this, significand, exponent, decimalMode) {
    var tmp;
    if (decimalMode.wo_1) {
      tmp = BigDecimal_init_$Create$(significand, exponent, null, 4, null);
    } else {
      tmp = roundSignificand($this, significand, exponent, decimalMode);
    }
    return tmp;
  }
  function roundDiscarded($this, significand, discarded, decimalMode) {
    var toDiscard = significand.cp().y5(decimalMode.to_1);
    var tmp;
    if (toDiscard.v5(new Long(0, 0)) > 0) {
      tmp = significand.mp(Companion_getInstance_2().jp_1.lp(toDiscard)).dp_1;
    } else {
      tmp = significand;
    }
    var result = tmp;
    var tmp_0;
    if (significand.equals(Companion_getInstance_2().gp_1)) {
      tmp_0 = discarded.zo_1;
    } else {
      tmp_0 = significand.zo_1;
    }
    var sign = tmp_0;
    var tmp_1;
    if (toDiscard.v5(new Long(0, 0)) > 0) {
      var tmp_2;
      if (discarded.equals(Companion_getInstance_2().gp_1)) {
        tmp_2 = Companion_getInstance_2().gp_1;
      } else {
        tmp_2 = discarded.u5(discarded.cp()).np().oo(significand.mp(Companion_getInstance_2().jp_1.lp(toDiscard)).ep_1.qo(Companion_getInstance_2().jp_1.lp(toDiscard)));
      }
      tmp_1 = tmp_2;
    } else {
      var tmp_3;
      if (discarded.equals(Companion_getInstance_2().gp_1)) {
        tmp_3 = Companion_getInstance_2().gp_1;
      } else {
        var tmp_4 = Companion_getInstance_2().jp_1;
        var tmp$ret$0;
        // Inline function 'kotlin.Long.minus' call
        var tmp0_minus = discarded.cp();
        tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
        tmp_3 = discarded.ro(tmp_4.lp(tmp$ret$0)).np();
      }
      tmp_1 = tmp_3;
    }
    var significantRemainderDigit = tmp_1;
    if (significantRemainderDigit.op()) {
      return result;
    }
    var tmp0_subject = decimalMode.uo_1;
    var tmp0 = tmp0_subject.a2_1;
    switch (tmp0) {
      case 2:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          var tmp1 = result;
          result = tmp1.qf();
        } else {
          var tmp2 = result;
          result = tmp2.rf();
        }

        break;
      case 3:
        ;
        break;
      case 1:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          var tmp3 = result;
          result = tmp3.qf();
        } else {
        }

        break;
      case 0:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
        } else {
          var tmp4 = result;
          result = tmp4.rf();
        }

        break;
      case 5:
        var tmp5_subject = sign;
        var tmp0_0 = tmp5_subject.a2_1;
        switch (tmp0_0) {
          case 0:
            if (significantRemainderDigit.pp(5) >= 0) {
              var tmp6 = result;
              result = tmp6.qf();
            }

            break;
          case 1:
            if (significantRemainderDigit.pp(5) >= 0) {
              var tmp7 = result;
              result = tmp7.rf();
            }

            break;
          case 2:
            break;
        }

        break;
      case 6:
        var tmp8_subject = sign;
        var tmp0_1 = tmp8_subject.a2_1;
        switch (tmp0_1) {
          case 0:
            if (significantRemainderDigit.pp(5) > 0) {
              var tmp9 = result;
              result = tmp9.qf();
            }

            break;
          case 1:
            if (significantRemainderDigit.pp(5) > 0) {
              var tmp10 = result;
              result = tmp10.rf();
            }

            break;
          case 2:
            break;
        }

        break;
      case 7:
        var tmp11_subject = sign;
        var tmp0_2 = tmp11_subject.a2_1;
        switch (tmp0_2) {
          case 0:
            if (significantRemainderDigit.pp(5) >= 0) {
              var tmp12 = result;
              result = tmp12.qf();
            }

            break;
          case 1:
            if (significantRemainderDigit.pp(5) > 0) {
              var tmp13 = result;
              result = tmp13.rf();
            }

            break;
          case 2:
            break;
        }

        break;
      case 8:
        var tmp14_subject = sign;
        var tmp0_3 = tmp14_subject.a2_1;
        switch (tmp0_3) {
          case 0:
            if (significantRemainderDigit.pp(5) > 0) {
              var tmp15 = result;
              result = tmp15.qf();
            }

            break;
          case 1:
            if (significantRemainderDigit.pp(5) >= 0) {
              var tmp16 = result;
              result = tmp16.rf();
            }

            break;
          case 2:
            break;
        }

        break;
      case 4:
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation. Specify decimalPrecision');
    }
    return result;
  }
  function roundSignificand($this, significand, exponent, decimalMode) {
    if (significand.equals(Companion_getInstance_2().gp_1)) {
      return new BigDecimal(Companion_getInstance_2().gp_1, exponent, decimalMode);
    }
    var significandDigits = significand.cp();
    var desiredPrecision = decimalMode.to_1;
    var tmp;
    if (desiredPrecision.v5(significandDigits) > 0) {
      var extendedSignificand = significand.qo(Companion_getInstance_2().jp_1.lp(desiredPrecision.y5(significandDigits)));
      tmp = new BigDecimal(extendedSignificand, exponent, decimalMode);
    } else if (desiredPrecision.v5(significandDigits) < 0) {
      var divRem = significand.mp(Companion_getInstance_2().jp_1.lp(significandDigits.y5(desiredPrecision)));
      var tmp_0;
      if (divRem.ep_1.cp().v5(significandDigits.y5(desiredPrecision)) < 0) {
        tmp_0 = Companion_getInstance_2().gp_1;
      } else {
        tmp_0 = divRem.ep_1;
      }
      var resolvedRemainder = tmp_0;
      var newSignificand = roundDiscarded($this, divRem.dp_1, resolvedRemainder, decimalMode);
      var exponentModifier = newSignificand.cp().y5(divRem.dp_1.cp());
      tmp = new BigDecimal(newSignificand, exponent.x5(exponentModifier), decimalMode);
    } else {
      tmp = new BigDecimal(significand, exponent, decimalMode);
    }
    return tmp;
  }
  function applyScale($this, significand, exponent, decimalMode) {
    if (!decimalMode.xo_1) {
      return new BigDecimal(significand, exponent, decimalMode);
    }
    var tmp;
    if (exponent.v5(new Long(0, 0)) >= 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.Long.plus' call
      var tmp0_plus = exponent.x5(decimalMode.vo_1);
      tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
      var tmp_0 = tmp$ret$0;
      tmp = DecimalMode_init_$Create$(tmp_0, decimalMode.uo_1, new Long(0, 0), 4, null);
    } else if (exponent.v5(new Long(0, 0)) < 0) {
      var tmp$ret$1;
      // Inline function 'kotlin.Long.plus' call
      var tmp1_plus = decimalMode.vo_1;
      tmp$ret$1 = tmp1_plus.x5(new Long(1, 0));
      var tmp_1 = tmp$ret$1;
      tmp = DecimalMode_init_$Create$(tmp_1, decimalMode.uo_1, new Long(0, 0), 4, null);
    } else {
      throw RuntimeException_init_$Create$('Unexpected state');
    }
    var workMode = tmp;
    if (decimalMode.vo_1.equals(new Long(0, 0))) {
      var digits = significand.cp();
      var tmp_2;
      if (exponent.v5(new Long(0, 0)) >= 0) {
        var tmp_3 = significand;
        $l$loop: while (true) {
          var tmp_4 = digits;
          var tmp$ret$2;
          // Inline function 'kotlin.Long.plus' call
          tmp$ret$2 = exponent.x5(new Long(1, 0));
          if (!(tmp_4.v5(tmp$ret$2) > 0)) {
            break $l$loop;
          }
          tmp_3 = tmp_3.of(10);
          var tmp0 = digits;
          digits = tmp0.rf();
        }
        tmp_2 = tmp_3;
      } else if (exponent.v5(new Long(0, 0)) < 0) {
        tmp_2 = Companion_getInstance_2().gp_1;
      } else {
        throw IllegalStateException_init_$Create$('Should be impossible. Exponent: ' + toString(exponent));
      }
      var bigInteger = tmp_2;
      return $this.bq(bigInteger);
    }
    var tmp_5;
    if (exponent.v5(new Long(0, 0)) >= 0) {
      tmp_5 = roundSignificand($this, significand, exponent, workMode);
    } else {
      var temp = BigDecimal_init_$Create$(significand, exponent, null, 4, null).lf(significand.jo());
      tmp_5 = roundSignificand($this, temp.gq_1, temp.hq_1, workMode).mf(significand.jo());
    }
    return tmp_5;
  }
  function resolveDecimalMode($this, firstDecimalMode, secondDecimalMode, suppliedDecimalMode) {
    var tmp;
    if (!(suppliedDecimalMode == null)) {
      tmp = suppliedDecimalMode;
    } else {
      if (firstDecimalMode == null ? secondDecimalMode == null : false) {
        var tmp_0 = new Long(0, 0);
        return DecimalMode_init_$Create$(tmp_0, null, new Long(0, 0), 7, null);
      }
      if (firstDecimalMode == null ? !(secondDecimalMode == null) : false) {
        return secondDecimalMode;
      }
      if (secondDecimalMode == null ? !(firstDecimalMode == null) : false) {
        return firstDecimalMode;
      }
      if (!ensureNotNull(firstDecimalMode).uo_1.equals(ensureNotNull(secondDecimalMode).uo_1)) {
        throw ArithmeticException_init_$Create$('Different rounding modes! This: ' + firstDecimalMode.uo_1 + ' Other: ' + secondDecimalMode.uo_1);
      }
      var tmp_1;
      if (firstDecimalMode.to_1.v5(secondDecimalMode.to_1) >= 0) {
        tmp_1 = firstDecimalMode;
      } else {
        tmp_1 = secondDecimalMode;
      }
      var unifiedDecimalMode = tmp_1;
      tmp = unifiedDecimalMode;
    }
    return tmp;
  }
  var ScaleOps_Max_instance;
  var ScaleOps_Min_instance;
  var ScaleOps_Add_instance;
  var ScaleOps_entriesInitialized;
  function ScaleOps_initEntries() {
    if (ScaleOps_entriesInitialized)
      return Unit_getInstance();
    ScaleOps_entriesInitialized = true;
    ScaleOps_Max_instance = new ScaleOps('Max', 0);
    ScaleOps_Min_instance = new ScaleOps('Min', 1);
    ScaleOps_Add_instance = new ScaleOps('Add', 2);
  }
  function BigDecimal_init_$Init$(_significand, _exponent, decimalMode, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      _exponent = new Long(0, 0);
    if (!(($mask0 & 4) === 0))
      decimalMode = null;
    BigDecimal.call($this, _significand, _exponent, decimalMode);
    return $this;
  }
  function BigDecimal_init_$Create$(_significand, _exponent, decimalMode, $mask0, $marker) {
    return BigDecimal_init_$Init$(_significand, _exponent, decimalMode, $mask0, $marker, Object.create(BigDecimal.prototype));
  }
  function Companion() {
    Companion_instance = this;
    var tmp = this;
    var tmp_0 = Companion_getInstance_2().gp_1;
    var tmp_1 = new Long(0, 0);
    tmp.qp_1 = BigDecimal_init_$Create$(tmp_0, tmp_1, null, 6, null);
    var tmp_2 = this;
    var tmp_3 = Companion_getInstance_2().hp_1;
    var tmp_4 = new Long(0, 0);
    tmp_2.rp_1 = BigDecimal_init_$Create$(tmp_3, tmp_4, null, 6, null);
    var tmp_5 = this;
    var tmp_6 = Companion_getInstance_2().ip_1;
    var tmp_7 = new Long(0, 0);
    tmp_5.sp_1 = BigDecimal_init_$Create$(tmp_6, tmp_7, null, 6, null);
    var tmp_8 = this;
    var tmp_9 = Companion_getInstance_2().jp_1;
    var tmp_10 = new Long(1, 0);
    tmp_8.tp_1 = BigDecimal_init_$Create$(tmp_9, tmp_10, null, 4, null);
    this.up_1 = false;
    var tmp_11 = this;
    var tmp$ret$0;
    // Inline function 'kotlin.doubleArrayOf' call
    tmp$ret$0 = new Float64Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10, 1.0E11, 1.0E12, 1.0E13, 1.0E14, 1.0E15, 1.0E16, 1.0E17, 1.0E18, 1.0E19, 1.0E20, 1.0E21, 1.0E22]);
    tmp_11.vp_1 = tmp$ret$0;
    var tmp_12 = this;
    DoubleCompanionObject_getInstance();
    tmp_12.wp_1 = this.kq(1.7976931348623157E308, null, 2, null);
    var tmp_13 = this;
    DoubleCompanionObject_getInstance();
    tmp_13.xp_1 = this.kq(4.9E-324, null, 2, null);
    var tmp_14 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.floatArrayOf' call
    tmp$ret$1 = new Float32Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10]);
    tmp_14.yp_1 = tmp$ret$1;
    var tmp_15 = this;
    FloatCompanionObject_getInstance();
    tmp_15.zp_1 = this.lq(3.4028235E38, null, 2, null);
    var tmp_16 = this;
    FloatCompanionObject_getInstance();
    tmp_16.aq_1 = this.lq(1.4E-45, null, 2, null);
  }
  Companion.prototype.mq = function (bigInteger, decimalMode) {
    var tmp$ret$0;
    // Inline function 'kotlin.Long.minus' call
    var tmp0_minus = bigInteger.cp();
    tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
    return (new BigDecimal(bigInteger, tmp$ret$0, decimalMode)).nq(decimalMode);
  };
  Companion.prototype.oq = function (long, decimalMode) {
    var bigint = Companion_getInstance_2().yn(long);
    var tmp$ret$0;
    // Inline function 'kotlin.Long.minus' call
    var tmp0_minus = bigint.cp();
    tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).nq(decimalMode);
  };
  Companion.prototype.pq = function (int, decimalMode) {
    var bigint = Companion_getInstance_2().zn(int);
    var tmp$ret$0;
    // Inline function 'kotlin.Long.minus' call
    var tmp0_minus = bigint.cp();
    tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).nq(decimalMode);
  };
  Companion.prototype.qq = function (short, decimalMode) {
    var bigint = Companion_getInstance_2().rq(short);
    var tmp$ret$0;
    // Inline function 'kotlin.Long.minus' call
    var tmp0_minus = bigint.cp();
    tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).nq(decimalMode);
  };
  Companion.prototype.sq = function (byte, decimalMode) {
    var bigint = Companion_getInstance_2().tq(byte);
    var tmp$ret$0;
    // Inline function 'kotlin.Long.minus' call
    var tmp0_minus = bigint.cp();
    tmp$ret$0 = tmp0_minus.y5(new Long(1, 0));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).nq(decimalMode);
  };
  Companion.prototype.uq = function (float, decimalMode) {
    var floatString = float.toString();
    var tmp;
    var tmp_0;
    var tmp_1 = _Char___init__impl__6a9atx(46);
    if (contains$default(floatString, tmp_1, false, 2, null)) {
      tmp_0 = !contains(floatString, _Char___init__impl__6a9atx(69), true);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(floatString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            var tmp$ret$0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromFloat.<anonymous>' call
            var tmp0__anonymous__q1qw7t = charSequenceGet(floatString, index);
            tmp$ret$0 = equals(new Char(tmp0__anonymous__q1qw7t), new Char(_Char___init__impl__6a9atx(48)));
            if (!tmp$ret$0) {
              var tmp$ret$2;
              // Inline function 'kotlin.text.substring' call
              var tmp0_substring = index + 1 | 0;
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$1 = floatString;
              tmp$ret$2 = tmp$ret$1.substring(0, tmp0_substring);
              tmp$ret$3 = tmp$ret$2;
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.vq(tmp$ret$3, decimalMode);
    } else {
      tmp = this.vq(floatString, decimalMode);
    }
    return tmp;
  };
  Companion.prototype.lq = function (float, decimalMode, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      decimalMode = null;
    return this.uq(float, decimalMode);
  };
  Companion.prototype.wq = function (double, decimalMode) {
    var doubleString = double.toString();
    var tmp;
    var tmp_0;
    var tmp_1 = _Char___init__impl__6a9atx(46);
    if (contains$default(doubleString, tmp_1, false, 2, null)) {
      tmp_0 = !contains(doubleString, _Char___init__impl__6a9atx(69), true);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(doubleString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            var tmp$ret$0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromDouble.<anonymous>' call
            var tmp0__anonymous__q1qw7t = charSequenceGet(doubleString, index);
            tmp$ret$0 = equals(new Char(tmp0__anonymous__q1qw7t), new Char(_Char___init__impl__6a9atx(48)));
            if (!tmp$ret$0) {
              var tmp$ret$2;
              // Inline function 'kotlin.text.substring' call
              var tmp0_substring = index + 1 | 0;
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$1 = doubleString;
              tmp$ret$2 = tmp$ret$1.substring(0, tmp0_substring);
              tmp$ret$3 = tmp$ret$2;
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.vq(tmp$ret$3, decimalMode);
    } else {
      tmp = this.vq(doubleString, decimalMode);
    }
    return tmp;
  };
  Companion.prototype.kq = function (double, decimalMode, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      decimalMode = null;
    return this.wq(double, decimalMode);
  };
  Companion.prototype.bq = function (bigInteger) {
    return this.mq(bigInteger, null);
  };
  Companion.prototype.yn = function (long) {
    return this.oq(long, null);
  };
  Companion.prototype.zn = function (int) {
    return this.pq(int, null);
  };
  Companion.prototype.rq = function (short) {
    return this.qq(short, null);
  };
  Companion.prototype.tq = function (byte) {
    return this.sq(byte, null);
  };
  Companion.prototype.ao = function (float, exactRequired) {
    return this.uq(float, null);
  };
  Companion.prototype.co = function (double, exactRequired) {
    return this.wq(double, null);
  };
  Companion.prototype.xq = function (string) {
    return this.yq(string, null, 2, null);
  };
  Companion.prototype.vq = function (floatingPointString, decimalMode) {
    var tmp$ret$0;
    // Inline function 'kotlin.text.isEmpty' call
    tmp$ret$0 = charSequenceLength(floatingPointString) === 0;
    if (tmp$ret$0) {
      return this.qp_1;
    }
    if (contains(floatingPointString, _Char___init__impl__6a9atx(69), true)) {
      var tmp;
      var tmp_0 = _Char___init__impl__6a9atx(46);
      if (!contains$default(floatingPointString, tmp_0, false, 2, null)) {
        var tmp_1 = charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]);
        var splitAroundE = split$default(floatingPointString, tmp_1, false, 0, 6, null);
        tmp = listOf([splitAroundE.l(0), '0E' + splitAroundE.l(1)]);
      } else {
        var tmp_2 = charArrayOf([_Char___init__impl__6a9atx(46)]);
        tmp = split$default(floatingPointString, tmp_2, false, 0, 6, null);
      }
      var split = tmp;
      var tmp0_subject = split.i();
      if (tmp0_subject === 2) {
        var signPresent = equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(45))) ? true : equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(43)));
        var tmp_3;
        if (signPresent) {
          tmp_3 = 1;
        } else {
          tmp_3 = 0;
        }
        var leftStart = tmp_3;
        var tmp_4;
        if (signPresent) {
          var tmp_5;
          if (equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(45)))) {
            tmp_5 = Sign_NEGATIVE_getInstance();
          } else {
            tmp_5 = Sign_POSITIVE_getInstance();
          }
          tmp_4 = tmp_5;
        } else {
          tmp_4 = Sign_POSITIVE_getInstance();
        }
        var sign = tmp_4;
        var tmp$ret$2;
        // Inline function 'kotlin.text.substring' call
        var tmp0_substring = split.l(0);
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = tmp0_substring;
        tmp$ret$2 = tmp$ret$1.substring(leftStart);
        var left = tmp$ret$2;
        var tmp_6 = split.l(1);
        var tmp_7 = charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]);
        var rightSplit = split$default(tmp_6, tmp_7, false, 0, 6, null);
        var right = rightSplit.l(0);
        var exponentSplit = rightSplit.l(1);
        var exponentSignPresent = equals(new Char(charSequenceGet(exponentSplit, 0)), new Char(_Char___init__impl__6a9atx(45))) ? true : equals(new Char(charSequenceGet(exponentSplit, 0)), new Char(_Char___init__impl__6a9atx(43)));
        var tmp_8;
        if (equals(new Char(charSequenceGet(exponentSplit, 0)), new Char(_Char___init__impl__6a9atx(45)))) {
          tmp_8 = Sign_NEGATIVE_getInstance();
        } else {
          tmp_8 = Sign_POSITIVE_getInstance();
        }
        var exponentSign = tmp_8;
        var tmp_9;
        if (exponentSignPresent) {
          tmp_9 = 1;
        } else {
          tmp_9 = 0;
        }
        var skipSignIfPresent = tmp_9;
        var tmp$ret$4;
        // Inline function 'kotlin.text.substring' call
        var tmp$ret$3;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$3 = exponentSplit;
        tmp$ret$4 = tmp$ret$3.substring(skipSignIfPresent);
        var exponentString = tmp$ret$4;
        var tmp_10;
        if (exponentSign.equals(Sign_POSITIVE_getInstance())) {
          tmp_10 = toLong_0(exponentString, 10);
        } else {
          var tmp$ret$5;
          // Inline function 'kotlin.Long.times' call
          var tmp1_times = toLong_0(exponentString, 10);
          tmp$ret$5 = tmp1_times.w5(new Long(-1, -1));
          tmp_10 = tmp$ret$5;
        }
        var exponent = tmp_10;
        var tmp$ret$7;
        $l$block: {
          // Inline function 'kotlin.text.indexOfFirst' call
          var inductionVariable = 0;
          var last = charSequenceLength(left) - 1 | 0;
          if (inductionVariable <= last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var tmp$ret$6;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              var tmp2__anonymous__z9zvc9 = charSequenceGet(left, index);
              tmp$ret$6 = !equals(new Char(tmp2__anonymous__z9zvc9), new Char(_Char___init__impl__6a9atx(48)));
              if (tmp$ret$6) {
                tmp$ret$7 = index;
                break $l$block;
              }
            }
             while (inductionVariable <= last);
          tmp$ret$7 = -1;
        }
        var leftFirstNonZero = tmp$ret$7;
        if (leftFirstNonZero === -1) {
          leftFirstNonZero = 0;
        }
        var tmp$ret$9;
        $l$block_0: {
          // Inline function 'kotlin.text.indexOfLast' call
          var inductionVariable_0 = charSequenceLength(right) - 1 | 0;
          if (0 <= inductionVariable_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + -1 | 0;
              var tmp$ret$8;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              var tmp3__anonymous__ufb84q = charSequenceGet(right, index_0);
              tmp$ret$8 = !equals(new Char(tmp3__anonymous__ufb84q), new Char(_Char___init__impl__6a9atx(48)));
              if (tmp$ret$8) {
                tmp$ret$9 = index_0;
                break $l$block_0;
              }
            }
             while (0 <= inductionVariable_0);
          tmp$ret$9 = -1;
        }
        var rightLastNonZero = tmp$ret$9;
        if (rightLastNonZero === -1) {
          rightLastNonZero = right.length - 1 | 0;
        }
        var tmp$ret$11;
        // Inline function 'kotlin.text.substring' call
        var tmp4_substring = leftFirstNonZero;
        var tmp5_substring = left.length;
        var tmp$ret$10;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$10 = left;
        tmp$ret$11 = tmp$ret$10.substring(tmp4_substring, tmp5_substring);
        var leftTruncated = tmp$ret$11;
        var tmp$ret$13;
        // Inline function 'kotlin.text.substring' call
        var tmp6_substring = rightLastNonZero + 1 | 0;
        var tmp$ret$12;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$12 = right;
        tmp$ret$13 = tmp$ret$12.substring(0, tmp6_substring);
        var rightTruncated = tmp$ret$13;
        var significand = Companion_getInstance_2().zq(leftTruncated + rightTruncated, 10);
        if (significand.equals(Companion_getInstance_2().gp_1)) {
          sign = Sign_ZERO_getInstance();
        }
        if (sign.equals(Sign_NEGATIVE_getInstance())) {
          significand = significand.ar();
        }
        var tmp_11;
        if (!(leftTruncated === '0')) {
          var tmp$ret$15;
          // Inline function 'kotlin.Long.minus' call
          var tmp$ret$14;
          // Inline function 'kotlin.Long.plus' call
          var tmp7_plus = leftTruncated.length;
          tmp$ret$14 = exponent.x5(toLong(tmp7_plus));
          var tmp8_minus = tmp$ret$14;
          tmp$ret$15 = tmp8_minus.y5(new Long(1, 0));
          tmp_11 = tmp$ret$15;
        } else {
          var tmp$ret$16;
          // Inline function 'kotlin.Long.minus' call
          var tmp9_minus = exponent.y5(numberToLong(rightTruncated.length).y5(significand.cp()));
          tmp$ret$16 = tmp9_minus.y5(new Long(1, 0));
          tmp_11 = tmp$ret$16;
        }
        var exponentModifiedByFloatingPointPosition = tmp_11;
        return new BigDecimal(significand, exponentModifiedByFloatingPointPosition, decimalMode);
      } else
        throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
    } else {
      var tmp_12 = _Char___init__impl__6a9atx(46);
      if (contains$default(floatingPointString, tmp_12, false, 2, null)) {
        var tmp_13 = charArrayOf([_Char___init__impl__6a9atx(46)]);
        var split_0 = split$default(floatingPointString, tmp_13, false, 0, 6, null);
        var tmp1_subject = split_0.i();
        if (tmp1_subject === 2) {
          var signPresent_0 = equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(45))) ? true : equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(43)));
          var tmp_14;
          if (signPresent_0) {
            tmp_14 = 1;
          } else {
            tmp_14 = 0;
          }
          var leftStart_0 = tmp_14;
          var tmp_15;
          if (signPresent_0) {
            var tmp_16;
            if (equals(new Char(charSequenceGet(floatingPointString, 0)), new Char(_Char___init__impl__6a9atx(45)))) {
              tmp_16 = Sign_NEGATIVE_getInstance();
            } else {
              tmp_16 = Sign_POSITIVE_getInstance();
            }
            tmp_15 = tmp_16;
          } else {
            tmp_15 = Sign_POSITIVE_getInstance();
          }
          var sign_0 = tmp_15;
          var tmp$ret$18;
          // Inline function 'kotlin.text.substring' call
          var tmp10_substring = split_0.l(0);
          var tmp$ret$17;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$17 = tmp10_substring;
          tmp$ret$18 = tmp$ret$17.substring(leftStart_0);
          var left_0 = tmp$ret$18;
          var right_0 = split_0.l(1);
          var tmp$ret$20;
          $l$block_1: {
            // Inline function 'kotlin.text.indexOfFirst' call
            var inductionVariable_1 = 0;
            var last_0 = charSequenceLength(left_0) - 1 | 0;
            if (inductionVariable_1 <= last_0)
              do {
                var index_1 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + 1 | 0;
                var tmp$ret$19;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                var tmp11__anonymous__tkubxh = charSequenceGet(left_0, index_1);
                tmp$ret$19 = !equals(new Char(tmp11__anonymous__tkubxh), new Char(_Char___init__impl__6a9atx(48)));
                if (tmp$ret$19) {
                  tmp$ret$20 = index_1;
                  break $l$block_1;
                }
              }
               while (inductionVariable_1 <= last_0);
            tmp$ret$20 = -1;
          }
          var leftFirstNonZero_0 = tmp$ret$20;
          if (leftFirstNonZero_0 === -1) {
            leftFirstNonZero_0 = 0;
          }
          var tmp$ret$22;
          $l$block_2: {
            // Inline function 'kotlin.text.indexOfLast' call
            var inductionVariable_2 = charSequenceLength(right_0) - 1 | 0;
            if (0 <= inductionVariable_2)
              do {
                var index_2 = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + -1 | 0;
                var tmp$ret$21;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                var tmp12__anonymous__oq5opy = charSequenceGet(right_0, index_2);
                tmp$ret$21 = !equals(new Char(tmp12__anonymous__oq5opy), new Char(_Char___init__impl__6a9atx(48)));
                if (tmp$ret$21) {
                  tmp$ret$22 = index_2;
                  break $l$block_2;
                }
              }
               while (0 <= inductionVariable_2);
            tmp$ret$22 = -1;
          }
          var rightLastNonZero_0 = tmp$ret$22;
          if (rightLastNonZero_0 === -1) {
            rightLastNonZero_0 = right_0.length - 1 | 0;
          }
          var tmp$ret$24;
          // Inline function 'kotlin.text.substring' call
          var tmp13_substring = leftFirstNonZero_0;
          var tmp14_substring = left_0.length;
          var tmp$ret$23;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$23 = left_0;
          tmp$ret$24 = tmp$ret$23.substring(tmp13_substring, tmp14_substring);
          var leftTruncated_0 = tmp$ret$24;
          var tmp$ret$26;
          // Inline function 'kotlin.text.substring' call
          var tmp15_substring = rightLastNonZero_0 + 1 | 0;
          var tmp$ret$25;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$25 = right_0;
          tmp$ret$26 = tmp$ret$25.substring(0, tmp15_substring);
          var rightTruncated_0 = tmp$ret$26;
          var significand_0 = Companion_getInstance_2().zq(leftTruncated_0 + rightTruncated_0, 10);
          var tmp_17;
          var tmp_18;
          var tmp$ret$27;
          // Inline function 'kotlin.text.isNotEmpty' call
          tmp$ret$27 = charSequenceLength(leftTruncated_0) > 0;
          if (tmp$ret$27) {
            tmp_18 = !equals(new Char(charSequenceGet(leftTruncated_0, 0)), new Char(_Char___init__impl__6a9atx(48)));
          } else {
            tmp_18 = false;
          }
          if (tmp_18) {
            tmp_17 = leftTruncated_0.length - 1 | 0;
          } else {
            var tmp$ret$29;
            $l$block_3: {
              // Inline function 'kotlin.text.indexOfFirst' call
              var inductionVariable_3 = 0;
              var last_1 = charSequenceLength(rightTruncated_0) - 1 | 0;
              if (inductionVariable_3 <= last_1)
                do {
                  var index_3 = inductionVariable_3;
                  inductionVariable_3 = inductionVariable_3 + 1 | 0;
                  var tmp$ret$28;
                  // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                  var tmp16__anonymous__5bf3vu = charSequenceGet(rightTruncated_0, index_3);
                  tmp$ret$28 = !equals(new Char(tmp16__anonymous__5bf3vu), new Char(_Char___init__impl__6a9atx(48)));
                  if (tmp$ret$28) {
                    tmp$ret$29 = index_3;
                    break $l$block_3;
                  }
                }
                 while (inductionVariable_3 <= last_1);
              tmp$ret$29 = -1;
            }
            tmp_17 = imul(tmp$ret$29 + 1 | 0, -1);
          }
          var exponent_0 = tmp_17;
          if (significand_0.equals(Companion_getInstance_2().gp_1)) {
            sign_0 = Sign_ZERO_getInstance();
          }
          if (sign_0.equals(Sign_NEGATIVE_getInstance())) {
            significand_0 = significand_0.ar();
          }
          return new BigDecimal(significand_0, toLong(exponent_0), decimalMode);
        } else
          throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
      } else {
        var significand_1 = Companion_getInstance_2().zq(floatingPointString, 10);
        var tmp$ret$30;
        // Inline function 'kotlin.Long.minus' call
        var tmp17_minus = significand_1.cp();
        tmp$ret$30 = tmp17_minus.y5(new Long(1, 0));
        return new BigDecimal(significand_1, tmp$ret$30, decimalMode);
      }
    }
  };
  Companion.prototype.yq = function (floatingPointString, decimalMode, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      decimalMode = null;
    return this.vq(floatingPointString, decimalMode);
  };
  Companion.$metadata$ = objectMeta('Companion', [Creator]);
  var Companion_instance;
  function Companion_getInstance_0() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function ScaleOps(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  ScaleOps.$metadata$ = classMeta('ScaleOps', undefined, undefined, undefined, undefined, Enum.prototype);
  function computeMode($this, other, op) {
    var tmp;
    if ((($this.cq_1 == null ? true : $this.cq_1.wo_1) ? true : other.cq_1 == null) ? true : other.cq_1.wo_1) {
      tmp = Companion_getInstance_1().br_1;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.math.max' call
      var tmp0_max = $this.cq_1.to_1;
      var tmp1_max = other.cq_1.to_1;
      tmp$ret$0 = tmp0_max.v5(tmp1_max) >= 0 ? tmp0_max : tmp1_max;
      var tmp_0 = tmp$ret$0;
      var tmp_1;
      if ($this.cq_1.xo_1 ? other.cq_1.xo_1 : false) {
        var tmp0_subject = op;
        var tmp0 = tmp0_subject.a2_1;
        var tmp_2;
        switch (tmp0) {
          case 0:
            var tmp$ret$1;
            // Inline function 'kotlin.math.max' call
            var tmp2_max = $this.cq_1.vo_1;
            var tmp3_max = other.cq_1.vo_1;
            tmp$ret$1 = tmp2_max.v5(tmp3_max) >= 0 ? tmp2_max : tmp3_max;

            tmp_2 = tmp$ret$1;
            break;
          case 1:
            var tmp$ret$2;
            // Inline function 'kotlin.math.min' call
            var tmp4_min = $this.cq_1.vo_1;
            var tmp5_min = other.cq_1.vo_1;
            tmp$ret$2 = tmp4_min.v5(tmp5_min) <= 0 ? tmp4_min : tmp5_min;

            tmp_2 = tmp$ret$2;
            break;
          case 2:
            tmp_2 = $this.cq_1.vo_1.x5(other.cq_1.vo_1);
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = new Long(-1, -1);
      }
      tmp = new DecimalMode(tmp_0, $this.cq_1.uo_1, tmp_1);
    }
    return tmp;
  }
  function getRidOfRadix($this, bigDecimal) {
    var precision = bigDecimal.gq_1.cp();
    var tmp$ret$0;
    // Inline function 'kotlin.Long.plus' call
    var tmp0_plus = bigDecimal.hq_1.y5(precision);
    tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
    var newExponent = tmp$ret$0;
    return BigDecimal_init_$Create$(bigDecimal.gq_1, newExponent, null, 4, null);
  }
  function bringSignificandToSameExponent($this, first, second) {
    var firstPrepared = getRidOfRadix($this, first);
    var secondPrepared = getRidOfRadix($this, second);
    var firstPreparedExponent = firstPrepared.hq_1;
    var secondPreparedExponent = secondPrepared.hq_1;
    var tmp;
    if (first.hq_1.v5(second.hq_1) > 0) {
      var moveFirstBy = firstPreparedExponent.y5(secondPreparedExponent);
      var tmp_0;
      if (moveFirstBy.v5(new Long(0, 0)) >= 0) {
        var movedFirst = firstPrepared.gq_1.qo(toBigInteger(10).lp(moveFirstBy));
        return new Triple(movedFirst, second.gq_1, secondPreparedExponent);
      } else {
        var tmp_1 = toBigInteger(10);
        var tmp$ret$0;
        // Inline function 'kotlin.Long.times' call
        tmp$ret$0 = moveFirstBy.w5(new Long(-1, -1));
        var movedSecond = secondPrepared.gq_1.qo(tmp_1.lp(tmp$ret$0));
        tmp_0 = new Triple(first.gq_1, movedSecond, firstPreparedExponent);
      }
      tmp = tmp_0;
    } else if (first.hq_1.v5(second.hq_1) < 0) {
      var moveSecondBy = secondPreparedExponent.y5(firstPreparedExponent);
      var tmp_2;
      if (moveSecondBy.v5(new Long(0, 0)) >= 0) {
        var movedSecond_0 = secondPrepared.gq_1.qo(toBigInteger(10).lp(moveSecondBy));
        tmp_2 = new Triple(first.gq_1, movedSecond_0, firstPreparedExponent);
      } else {
        var tmp_3 = toBigInteger(10);
        var tmp$ret$1;
        // Inline function 'kotlin.Long.times' call
        tmp$ret$1 = moveSecondBy.w5(new Long(-1, -1));
        var movedFirst_0 = firstPrepared.gq_1.qo(tmp_3.lp(tmp$ret$1));
        tmp_2 = new Triple(movedFirst_0, second.gq_1, firstPreparedExponent);
      }
      return tmp_2;
    } else if (first.hq_1.equals(second.hq_1)) {
      var delta = firstPreparedExponent.y5(secondPreparedExponent);
      var tmp_4;
      if (delta.v5(new Long(0, 0)) > 0) {
        var movedFirst_1 = first.gq_1.qo(toBigInteger(10).lp(delta));
        tmp_4 = new Triple(movedFirst_1, second.gq_1, firstPreparedExponent);
      } else {
        if (delta.v5(new Long(0, 0)) < 0) {
          var tmp_5 = toBigInteger(10);
          var tmp$ret$2;
          // Inline function 'kotlin.Long.times' call
          tmp$ret$2 = delta.w5(new Long(-1, -1));
          var movedSecond_1 = second.gq_1.qo(tmp_5.lp(tmp$ret$2));
          tmp_4 = new Triple(first.gq_1, movedSecond_1, firstPreparedExponent);
        } else {
          var tmp$ret$3;
          // Inline function 'kotlin.Long.compareTo' call
          tmp$ret$3 = delta.v5(new Long(0, 0));
          if (tmp$ret$3 === 0) {
            tmp_4 = new Triple(first.gq_1, second.gq_1, firstPreparedExponent);
          } else {
            throw RuntimeException_init_$Create$('Invalid delta: ' + toString(delta));
          }
        }
      }
      return tmp_4;
    } else {
      throw RuntimeException_init_$Create$('Invalid comparison state BigInteger: ' + toString(first.hq_1) + ', ' + toString(second.hq_1));
    }
    return tmp;
  }
  function javascriptNumberComparison($this, number) {
    var float = numberToDouble(number);
    var tmp;
    if (float % 1 === 0.0) {
      tmp = $this.dr(Companion_getInstance_0().yn(numberToLong(number)));
    } else {
      var tmp_0 = numberToDouble(number);
      tmp = $this.dr(toBigDecimal$default(tmp_0, null, 1, null));
    }
    return tmp;
  }
  function placeADotInStringExpanded($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var tmp0_dropLastWhile = substring(input, until(input.length - position | 0, input.length));
      var inductionVariable = get_lastIndex(tmp0_dropLastWhile);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInStringExpanded.<anonymous>' call
          var tmp1__anonymous__uwfjfc = charSequenceGet(tmp0_dropLastWhile, index);
          tmp$ret$0 = equals(new Char(tmp1__anonymous__uwfjfc), new Char(_Char___init__impl__6a9atx(48)));
          if (!tmp$ret$0) {
            var tmp$ret$2;
            // Inline function 'kotlin.text.substring' call
            var tmp0_substring = index + 1 | 0;
            var tmp$ret$1;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$1 = tmp0_dropLastWhile;
            tmp$ret$2 = tmp$ret$1.substring(0, tmp0_substring);
            tmp$ret$3 = tmp$ret$2;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    var suffix = tmp$ret$3;
    var tmp;
    var tmp$ret$4;
    // Inline function 'kotlin.text.isNotEmpty' call
    tmp$ret$4 = charSequenceLength(suffix) > 0;
    if (tmp$ret$4) {
      tmp = prefix + '.' + suffix;
    } else {
      tmp = prefix;
    }
    return tmp;
  }
  function placeADotInString($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var suffix = substring(input, until(input.length - position | 0, input.length));
    var prepared = prefix + '.' + suffix;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var inductionVariable = get_lastIndex(prepared);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInString.<anonymous>' call
          var tmp0__anonymous__q1qw7t = charSequenceGet(prepared, index);
          tmp$ret$0 = equals(new Char(tmp0__anonymous__q1qw7t), new Char(_Char___init__impl__6a9atx(48)));
          if (!tmp$ret$0) {
            var tmp$ret$2;
            // Inline function 'kotlin.text.substring' call
            var tmp0_substring = index + 1 | 0;
            var tmp$ret$1;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$1 = prepared;
            tmp$ret$2 = tmp$ret$1.substring(0, tmp0_substring);
            tmp$ret$3 = tmp$ret$2;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    return tmp$ret$3;
  }
  function ScaleOps_Max_getInstance() {
    ScaleOps_initEntries();
    return ScaleOps_Max_instance;
  }
  function ScaleOps_Min_getInstance() {
    ScaleOps_initEntries();
    return ScaleOps_Min_instance;
  }
  function ScaleOps_Add_getInstance() {
    ScaleOps_initEntries();
    return ScaleOps_Add_instance;
  }
  function BigDecimal(_significand, _exponent, decimalMode) {
    Companion_getInstance_0();
    this.cq_1 = decimalMode;
    this.dq_1 = _significand.cp();
    var tmp = this;
    var tmp0_safe_receiver = this.cq_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.to_1;
    tmp.eq_1 = tmp1_elvis_lhs == null ? new Long(0, 0) : tmp1_elvis_lhs;
    var tmp_0 = this;
    var tmp0_safe_receiver_0 = this.cq_1;
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : tmp0_safe_receiver_0.uo_1;
    tmp_0.fq_1 = tmp1_elvis_lhs_0 == null ? RoundingMode_NONE_getInstance() : tmp1_elvis_lhs_0;
    if (!(this.cq_1 == null) ? this.cq_1.xo_1 : false) {
      var wrk = applyScale(Companion_getInstance_0(), _significand, _exponent, this.cq_1);
      this.gq_1 = wrk.gq_1;
      this.hq_1 = wrk.hq_1;
    } else {
      this.gq_1 = _significand;
      this.hq_1 = _exponent;
    }
    var tmp_1 = this;
    var tmp0_safe_receiver_1 = this.cq_1;
    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : tmp0_safe_receiver_1.vo_1;
    tmp_1.iq_1 = tmp1_elvis_lhs_1 == null ? new Long(-1, -1) : tmp1_elvis_lhs_1;
    this.jq_1 = this.iq_1.v5(new Long(0, 0)) >= 0;
  }
  BigDecimal.prototype.mo = function () {
    return Companion_getInstance_0();
  };
  BigDecimal.prototype.no = function () {
    return this;
  };
  BigDecimal.prototype.er = function (other) {
    return this.fr(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  BigDecimal.prototype.eo = function (other) {
    return this.er(other instanceof BigDecimal ? other : THROW_CCE());
  };
  BigDecimal.prototype.fr = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance_0(), this.cq_1, other.cq_1, decimalMode);
    var tmp0_container = bringSignificandToSameExponent(this, this, other);
    var first = tmp0_container.w3();
    var second = tmp0_container.x3();
    var firstNumOfDigits = first.cp();
    var secondNumOfDigits = second.cp();
    var newSignificand = first.oo(second);
    var newSignificandNumOfDigit = newSignificand.cp();
    var tmp;
    if (firstNumOfDigits.v5(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var carryDetected = newSignificandNumOfDigit.y5(largerOperand);
    var tmp$ret$0;
    // Inline function 'kotlin.math.max' call
    var tmp0_max = this.hq_1;
    var tmp1_max = other.hq_1;
    tmp$ret$0 = tmp0_max.v5(tmp1_max) >= 0 ? tmp0_max : tmp1_max;
    var newExponent = tmp$ret$0.x5(carryDetected);
    return roundOrDont(Companion_getInstance_0(), newSignificand, newExponent, resolvedDecimalMode);
  };
  BigDecimal.prototype.gr = function (other) {
    return this.hr(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  BigDecimal.prototype.fo = function (other) {
    return this.gr(other instanceof BigDecimal ? other : THROW_CCE());
  };
  BigDecimal.prototype.hr = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance_0(), this.cq_1, other.cq_1, decimalMode);
    var tmp0_container = bringSignificandToSameExponent(this, this, other);
    var first = tmp0_container.w3();
    var second = tmp0_container.x3();
    var firstNumOfDigits = first.cp();
    var secondNumOfDigits = second.cp();
    var newSignificand = first.po(second);
    var newSignificandNumOfDigit = newSignificand.cp();
    var tmp;
    if (firstNumOfDigits.v5(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var borrowDetected = newSignificandNumOfDigit.y5(largerOperand);
    var tmp$ret$0;
    // Inline function 'kotlin.math.max' call
    var tmp0_max = this.hq_1;
    var tmp1_max = other.hq_1;
    tmp$ret$0 = tmp0_max.v5(tmp1_max) >= 0 ? tmp0_max : tmp1_max;
    var newExponent = tmp$ret$0.x5(borrowDetected);
    return roundOrDont(Companion_getInstance_0(), newSignificand, newExponent, resolvedDecimalMode);
  };
  BigDecimal.prototype.ir = function (other) {
    return this.jr(other, computeMode(this, other, ScaleOps_Add_getInstance()));
  };
  BigDecimal.prototype.go = function (other) {
    return this.ir(other instanceof BigDecimal ? other : THROW_CCE());
  };
  BigDecimal.prototype.jr = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance_0(), this.cq_1, other.cq_1, decimalMode);
    var firstNumOfDigits = this.gq_1.cp();
    var secondNumOfDigits = other.gq_1.cp();
    var newSignificand = this.gq_1.qo(other.gq_1);
    var newSignificandNumOfDigit = newSignificand.cp();
    var moveExponent = newSignificandNumOfDigit.y5(firstNumOfDigits.x5(secondNumOfDigits));
    var tmp$ret$0;
    // Inline function 'kotlin.Long.plus' call
    var tmp0_plus = this.hq_1.x5(other.hq_1).x5(moveExponent);
    tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
    var newExponent = tmp$ret$0;
    return roundOrDont(Companion_getInstance_0(), newSignificand, newExponent, resolvedDecimalMode);
  };
  BigDecimal.prototype.kr = function (other) {
    return this.lr(other, computeMode(this, other, ScaleOps_Min_getInstance()));
  };
  BigDecimal.prototype.ho = function (other) {
    return this.kr(other instanceof BigDecimal ? other : THROW_CCE());
  };
  BigDecimal.prototype.lr = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance_0(), this.cq_1, other.cq_1, decimalMode);
    if (resolvedDecimalMode.wo_1) {
      var newExponent = this.hq_1.y5(other.hq_1);
      var tmp$ret$1;
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0;
      // Inline function 'kotlin.Long.times' call
      var tmp0_times = other.dq_1;
      tmp$ret$0 = tmp0_times.w5(new Long(2, 0));
      var tmp1_plus = tmp$ret$0;
      tmp$ret$1 = tmp1_plus.x5(new Long(6, 0));
      var power = tmp$ret$1;
      var thisPrepared = this.gq_1.qo(Companion_getInstance_2().jp_1.lp(power));
      var divRem = thisPrepared.mp(other.gq_1);
      var result = divRem.dp_1;
      var tmp$ret$2;
      // Inline function 'kotlin.Long.minus' call
      var tmp2_minus = other.dq_1;
      tmp$ret$2 = tmp2_minus.y5(new Long(1, 0));
      var expectedDiff = tmp$ret$2;
      var exponentModifier = expectedDiff.x5(result.cp().y5(thisPrepared.cp()));
      if (!divRem.ep_1.equals(Companion_getInstance_2().gp_1)) {
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation (i.e. 1/3 = 0.3333... library needs to know when to stop and how to round up at that point). Specify decimalPrecision inside your decimal mode.');
      }
      return new BigDecimal(result, newExponent.x5(exponentModifier), resolvedDecimalMode);
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.Long.minus' call
      var tmp3_minus = this.hq_1.y5(other.hq_1);
      tmp$ret$3 = tmp3_minus.y5(new Long(1, 0));
      var newExponent_0 = tmp$ret$3;
      var desiredPrecision = resolvedDecimalMode.to_1;
      var power_0 = desiredPrecision.y5(this.dq_1).x5(other.dq_1);
      var tmp;
      if (power_0.v5(new Long(0, 0)) > 0) {
        tmp = this.gq_1.qo(toBigInteger(10).lp(power_0));
      } else if (power_0.v5(new Long(0, 0)) < 0) {
        var tmp_0 = toBigInteger(10);
        var tmp$ret$4;
        // Inline function 'kotlin.math.absoluteValue' call
        tmp$ret$4 = abs(power_0);
        tmp = this.gq_1.ro(tmp_0.lp(tmp$ret$4));
      } else {
        tmp = this.gq_1;
      }
      var thisPrepared_0 = tmp;
      var divRem_0 = thisPrepared_0.mp(other.gq_1);
      var result_0 = divRem_0.dp_1;
      if (result_0.equals(Companion_getInstance_2().gp_1)) {
        var tmp0 = newExponent_0;
        newExponent_0 = tmp0.rf();
      }
      var exponentModifier_0 = result_0.cp().y5(resolvedDecimalMode.to_1);
      return new BigDecimal(roundDiscarded(Companion_getInstance_0(), result_0, divRem_0.ep_1, resolvedDecimalMode), newExponent_0.x5(exponentModifier_0), resolvedDecimalMode);
    }
  };
  BigDecimal.prototype.mr = function (other) {
    return this.nr(other).w4_1;
  };
  BigDecimal.prototype.io = function (other) {
    return this.mr(other instanceof BigDecimal ? other : THROW_CCE());
  };
  BigDecimal.prototype.nr = function (other) {
    var tmp0_elvis_lhs = this.cq_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.Long.plus' call
      var tmp0_plus = this.hq_1;
      tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
      var tmp_0 = tmp$ret$0;
      var tmp_1 = RoundingMode_FLOOR_getInstance();
      tmp = DecimalMode_init_$Create$(tmp_0, tmp_1, new Long(0, 0), 4, null);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var resolvedRoundingMode = tmp;
    var quotient = this.lr(other, resolvedRoundingMode);
    var quotientInfinitePrecision = quotient.or(null, new Long(0, 0), Companion_getInstance_1().br_1, 3, null);
    var remainder = this.qr(quotientInfinitePrecision.pr(other));
    return new Pair(quotient, remainder);
  };
  BigDecimal.prototype.rr = function (significand, exponent, decimalMode) {
    return new BigDecimal(significand, exponent, decimalMode);
  };
  BigDecimal.prototype.or = function (significand, exponent, decimalMode, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      significand = this.gq_1;
    if (!(($mask0 & 2) === 0))
      exponent = this.hq_1;
    if (!(($mask0 & 4) === 0))
      decimalMode = this.cq_1;
    return this.rr(significand, exponent, decimalMode);
  };
  BigDecimal.prototype.sr = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.Long.plus' call
    var tmp0_plus = this.hq_1;
    tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
    var tmp = tmp$ret$0;
    var tmp_0 = RoundingMode_FLOOR_getInstance();
    return this.nq(DecimalMode_init_$Create$(tmp, tmp_0, new Long(0, 0), 4, null));
  };
  BigDecimal.prototype.tr = function () {
    if (this.hq_1.v5(new Long(0, 0)) < 0) {
      return Companion_getInstance_2().gp_1;
    }
    var precisionExponentDiff = this.hq_1.y5(this.dq_1);
    var tmp;
    if (precisionExponentDiff.v5(new Long(0, 0)) > 0) {
      var tmp_0 = toBigInteger(10);
      var tmp$ret$0;
      // Inline function 'kotlin.Long.plus' call
      tmp$ret$0 = precisionExponentDiff.x5(new Long(1, 0));
      tmp = this.gq_1.qo(tmp_0.lp(tmp$ret$0));
    } else if (precisionExponentDiff.v5(new Long(0, 0)) < 0) {
      var tmp_1 = toBigInteger(10);
      var tmp$ret$2;
      // Inline function 'kotlin.Long.minus' call
      var tmp$ret$1;
      // Inline function 'kotlin.math.absoluteValue' call
      tmp$ret$1 = abs(precisionExponentDiff);
      var tmp0_minus = tmp$ret$1;
      tmp$ret$2 = tmp0_minus.y5(new Long(1, 0));
      tmp = this.gq_1.ro(tmp_1.lp(tmp$ret$2));
    } else {
      tmp = this.gq_1;
    }
    return tmp;
  };
  BigDecimal.prototype.qr = function (other) {
    return this.hr(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  BigDecimal.prototype.pr = function (other) {
    return this.jr(other, computeMode(this, other, ScaleOps_Add_getInstance()));
  };
  BigDecimal.prototype.jo = function () {
    return this.gq_1.jo();
  };
  BigDecimal.prototype.nq = function (decimalMode) {
    if (decimalMode == null) {
      return this;
    }
    return roundSignificand(Companion_getInstance_0(), this.gq_1, this.hq_1, decimalMode);
  };
  BigDecimal.prototype.dr = function (other) {
    if (this.hq_1.equals(other.hq_1) ? this.dq_1.equals(other.dq_1) : false) {
      return this.gq_1.ur(other.gq_1);
    }
    var tmp0_container = bringSignificandToSameExponent(this, this, other);
    var preparedFirst = tmp0_container.w3();
    var preparedSecond = tmp0_container.x3();
    return preparedFirst.ur(preparedSecond);
  };
  BigDecimal.prototype.pp = function (other) {
    if (isNumber(other)) {
      if (ComparisonWorkaround_getInstance().vr(other)) {
        return javascriptNumberComparison(this, other);
      }
    }
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof BigDecimal) {
      tmp = this.dr(other);
    } else {
      if (tmp0_subject instanceof Long) {
        tmp = this.dr(Companion_getInstance_0().yn(other));
      } else {
        if (typeof tmp0_subject === 'number') {
          tmp = this.dr(Companion_getInstance_0().zn(other));
        } else {
          if (typeof tmp0_subject === 'number') {
            tmp = this.dr(Companion_getInstance_0().rq(other));
          } else {
            if (typeof tmp0_subject === 'number') {
              tmp = this.dr(Companion_getInstance_0().tq(other));
            } else {
              if (typeof tmp0_subject === 'number') {
                var tmp_0 = Companion_getInstance_0();
                tmp = this.dr(tmp_0.kq(other, null, 2, null));
              } else {
                if (typeof tmp0_subject === 'number') {
                  var tmp_1 = Companion_getInstance_0();
                  tmp = this.dr(tmp_1.lq(other, null, 2, null));
                } else {
                  throw RuntimeException_init_$Create$('Invalid comparison type for BigDecimal: ' + getKClassFromExpression(other).pb());
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  BigDecimal.prototype.y6 = function (other) {
    return this.pp(isObject(other) ? other : THROW_CCE());
  };
  BigDecimal.prototype.equals = function (other) {
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof BigDecimal) {
      tmp = this.dr(other);
    } else {
      if (tmp0_subject instanceof Long) {
        tmp = this.dr(Companion_getInstance_0().yn(other));
      } else {
        if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
          tmp = this.dr(Companion_getInstance_0().zn(other));
        } else {
          if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
            tmp = this.dr(Companion_getInstance_0().rq(other));
          } else {
            if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
              tmp = this.dr(Companion_getInstance_0().tq(other));
            } else {
              if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
                var tmp_0 = Companion_getInstance_0();
                tmp = this.dr(tmp_0.kq(other, null, 2, null));
              } else {
                if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
                  var tmp_1 = Companion_getInstance_0();
                  tmp = this.dr(tmp_1.lq(other, null, 2, null));
                } else {
                  tmp = -1;
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  BigDecimal.prototype.hashCode = function () {
    var tmp = this.gq_1.hashCode() + this.hq_1.hashCode() | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_hashCode = this.cq_1;
    var tmp0_safe_receiver = tmp0_hashCode;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    return tmp + tmp$ret$0 | 0;
  };
  BigDecimal.prototype.toString = function () {
    if (Companion_getInstance_0().up_1) {
      return this.wr();
    }
    var significandString = this.gq_1.xr(10);
    var tmp;
    if (this.gq_1.pp(0) < 0) {
      tmp = 2;
    } else {
      tmp = 1;
    }
    var modifier = tmp;
    var tmp_0;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var tmp0_dropLastWhile = this.gq_1.toString();
      var inductionVariable = get_lastIndex(tmp0_dropLastWhile);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.toString.<anonymous>' call
          var tmp1__anonymous__uwfjfc = charSequenceGet(tmp0_dropLastWhile, index);
          tmp$ret$0 = equals(new Char(tmp1__anonymous__uwfjfc), new Char(_Char___init__impl__6a9atx(48)));
          if (!tmp$ret$0) {
            var tmp$ret$2;
            // Inline function 'kotlin.text.substring' call
            var tmp0_substring = index + 1 | 0;
            var tmp$ret$1;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$1 = tmp0_dropLastWhile;
            tmp$ret$2 = tmp$ret$1.substring(0, tmp0_substring);
            tmp$ret$3 = tmp$ret$2;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    if (tmp$ret$3.length <= 1) {
      tmp_0 = '0';
    } else {
      tmp_0 = '';
    }
    var expand = tmp_0;
    var tmp_1;
    if (this.hq_1.v5(new Long(0, 0)) > 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E+' + toString(this.hq_1);
    } else if (this.hq_1.v5(new Long(0, 0)) < 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E' + toString(this.hq_1);
    } else if (this.hq_1.equals(new Long(0, 0))) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand;
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    return tmp_1;
  };
  BigDecimal.prototype.wr = function () {
    if (this.equals(Companion_getInstance_0().qp_1)) {
      return '0';
    }
    var digits = this.gq_1.cp();
    if (this.hq_1.v5(toLong(IntCompanionObject_getInstance().i1_1)) > 0) {
      throw RuntimeException_init_$Create$('Invalid toStringExpanded request (exponent > Int.MAX_VALUE)');
    }
    var significandString = this.gq_1.yr(10);
    var tmp;
    if (this.gq_1.zo_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    var tmp_0;
    if (this.hq_1.v5(new Long(0, 0)) > 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.Long.plus' call
      var tmp0_plus = this.hq_1.y5(digits);
      tmp$ret$0 = tmp0_plus.x5(new Long(1, 0));
      var diffBigInt = tmp$ret$0;
      var tmp_1;
      if (diffBigInt.v5(new Long(0, 0)) > 0) {
        var expandZeros = this.zr(diffBigInt, _Char___init__impl__6a9atx(48));
        tmp_1 = significandString + expandZeros;
      } else {
        tmp_1 = placeADotInStringExpanded(this, significandString, (significandString.length - this.hq_1.z6() | 0) - 1 | 0);
      }
      tmp_0 = tmp_1;
    } else if (this.hq_1.v5(new Long(0, 0)) < 0) {
      var tmp$ret$1;
      // Inline function 'kotlin.math.absoluteValue' call
      var tmp1__get_absoluteValue__rcem8i = this.hq_1.z6();
      tmp$ret$1 = abs_0(tmp1__get_absoluteValue__rcem8i);
      var diffInt = tmp$ret$1;
      var tmp_2;
      if (diffInt > 0) {
        var tmp$ret$2;
        // Inline function 'kotlin.math.absoluteValue' call
        var tmp2__get_absoluteValue__uu8ln7 = this.hq_1;
        tmp$ret$2 = abs(tmp2__get_absoluteValue__uu8ln7);
        var expandZeros_0 = this.zr(tmp$ret$2, _Char___init__impl__6a9atx(48));
        tmp_2 = placeADotInStringExpanded(this, expandZeros_0 + significandString, (diffInt + significandString.length | 0) - 1 | 0);
      } else {
        tmp_2 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
      }
      tmp_0 = tmp_2;
    } else if (this.hq_1.equals(new Long(0, 0))) {
      if (digits.equals(new Long(1, 0))) {
        return sign + significandString;
      }
      tmp_0 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    var adjusted = tmp_0;
    return sign + adjusted;
  };
  BigDecimal.prototype.zr = function (_this__u8e3s4, char) {
    if (_this__u8e3s4.v5(new Long(0, 0)) < 0) {
      throw RuntimeException_init_$Create$('Char cannot be multiplied with negative number');
    }
    var counter = _this__u8e3s4;
    var stringBuilder = StringBuilder_init_$Create$();
    while (counter.v5(new Long(0, 0)) > 0) {
      stringBuilder.q5(char);
      var tmp0 = counter;
      counter = tmp0.rf();
    }
    return stringBuilder.toString();
  };
  BigDecimal.$metadata$ = classMeta('BigDecimal', [BigNumber, CommonBigNumberOperations, NarrowingOperations, Comparable]);
  function toBigDecimal(_this__u8e3s4, decimalMode) {
    return Companion_getInstance_0().uq(_this__u8e3s4, decimalMode);
  }
  function toBigDecimal$default(_this__u8e3s4, decimalMode, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      decimalMode = null;
    return toBigDecimal(_this__u8e3s4, decimalMode);
  }
  function DecimalMode_init_$Init$(decimalPrecision, roundingMode, scale, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      decimalPrecision = new Long(0, 0);
    if (!(($mask0 & 2) === 0))
      roundingMode = RoundingMode_NONE_getInstance();
    if (!(($mask0 & 4) === 0))
      scale = new Long(-1, -1);
    DecimalMode.call($this, decimalPrecision, roundingMode, scale);
    return $this;
  }
  function DecimalMode_init_$Create$(decimalPrecision, roundingMode, scale, $mask0, $marker) {
    return DecimalMode_init_$Init$(decimalPrecision, roundingMode, scale, $mask0, $marker, Object.create(DecimalMode.prototype));
  }
  function Companion_0() {
    Companion_instance_0 = this;
    var tmp = this;
    var tmp_0 = new Long(0, 0);
    tmp.br_1 = DecimalMode_init_$Create$(tmp_0, null, new Long(0, 0), 7, null);
    this.cr_1 = new DecimalMode(new Long(30, 0), RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance(), new Long(2, 0));
  }
  Companion_0.$metadata$ = objectMeta('Companion');
  var Companion_instance_0;
  function Companion_getInstance_1() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function DecimalMode(decimalPrecision, roundingMode, scale) {
    Companion_getInstance_1();
    this.to_1 = decimalPrecision;
    this.uo_1 = roundingMode;
    this.vo_1 = scale;
    this.wo_1 = this.to_1.equals(new Long(0, 0));
    this.xo_1 = this.vo_1.v5(new Long(0, 0)) >= 0;
    if (this.to_1.equals(new Long(0, 0)) ? !this.uo_1.equals(RoundingMode_NONE_getInstance()) : false) {
      throw ArithmeticException_init_$Create$('Rounding mode with 0 digits precision.');
    }
    if (this.vo_1.v5(new Long(-1, -1)) < 0) {
      throw ArithmeticException_init_$Create$('Negative Scale is unsupported.');
    }
    if (this.xo_1 ? this.uo_1.equals(RoundingMode_NONE_getInstance()) : false) {
      throw ArithmeticException_init_$Create$('Scale of ' + toString(this.vo_1) + ' digits to the right of the decimal requires a RoundingMode that is not NONE.');
    }
    if (this.xo_1) {
      if (!this.wo_1 ? this.vo_1.v5(this.to_1) >= 0 : false) {
        throw ArithmeticException_init_$Create$('Scale of ' + toString(this.vo_1) + ' digits to the right of the decimal must be less than precision ' + toString(this.to_1) + '.');
      }
    }
  }
  DecimalMode.prototype.toString = function () {
    return 'DecimalMode(decimalPrecision=' + toString(this.to_1) + ', roundingMode=' + this.uo_1 + ', scale=' + toString(this.vo_1) + ')';
  };
  DecimalMode.prototype.hashCode = function () {
    var result = this.to_1.hashCode();
    result = imul(result, 31) + this.uo_1.hashCode() | 0;
    result = imul(result, 31) + this.vo_1.hashCode() | 0;
    return result;
  };
  DecimalMode.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DecimalMode))
      return false;
    var tmp0_other_with_cast = other instanceof DecimalMode ? other : THROW_CCE();
    if (!this.to_1.equals(tmp0_other_with_cast.to_1))
      return false;
    if (!this.uo_1.equals(tmp0_other_with_cast.uo_1))
      return false;
    if (!this.vo_1.equals(tmp0_other_with_cast.vo_1))
      return false;
    return true;
  };
  DecimalMode.$metadata$ = classMeta('DecimalMode');
  var RoundingMode_FLOOR_instance;
  var RoundingMode_CEILING_instance;
  var RoundingMode_AWAY_FROM_ZERO_instance;
  var RoundingMode_TOWARDS_ZERO_instance;
  var RoundingMode_NONE_instance;
  var RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  var RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance;
  var RoundingMode_ROUND_HALF_CEILING_instance;
  var RoundingMode_ROUND_HALF_FLOOR_instance;
  var RoundingMode_entriesInitialized;
  function RoundingMode_initEntries() {
    if (RoundingMode_entriesInitialized)
      return Unit_getInstance();
    RoundingMode_entriesInitialized = true;
    RoundingMode_FLOOR_instance = new RoundingMode('FLOOR', 0);
    RoundingMode_CEILING_instance = new RoundingMode('CEILING', 1);
    RoundingMode_AWAY_FROM_ZERO_instance = new RoundingMode('AWAY_FROM_ZERO', 2);
    RoundingMode_TOWARDS_ZERO_instance = new RoundingMode('TOWARDS_ZERO', 3);
    RoundingMode_NONE_instance = new RoundingMode('NONE', 4);
    RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance = new RoundingMode('ROUND_HALF_AWAY_FROM_ZERO', 5);
    RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance = new RoundingMode('ROUND_HALF_TOWARDS_ZERO', 6);
    RoundingMode_ROUND_HALF_CEILING_instance = new RoundingMode('ROUND_HALF_CEILING', 7);
    RoundingMode_ROUND_HALF_FLOOR_instance = new RoundingMode('ROUND_HALF_FLOOR', 8);
  }
  function RoundingMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  RoundingMode.$metadata$ = classMeta('RoundingMode', undefined, undefined, undefined, undefined, Enum.prototype);
  function RoundingMode_FLOOR_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_FLOOR_instance;
  }
  function RoundingMode_NONE_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_NONE_instance;
  }
  function RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  }
  function BigInteger_init_$Init$(long, $this) {
    var tmp = Companion_getInstance_2().fp_1.as(long);
    var tmp$ret$0;
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    var tmp0_determinSignFromNumber = Companion_getInstance_2();
    var tmp0_subject = getKClass(Long);
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (long instanceof Long)
        long;
      else
        THROW_CCE();
      tmp_0 = long.v5(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : long.v5(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().yc())) {
      if (typeof long === 'number')
        long;
      else
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().xc())) {
      if (typeof long === 'number')
        long;
      else
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().wc())) {
      if (typeof long === 'number')
        long;
      else
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + getKClass(Long));
    }
    tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$(long) {
    return BigInteger_init_$Init$(long, Object.create(BigInteger.prototype));
  }
  function BigInteger_init_$Init$_0(int, $this) {
    var tmp = Companion_getInstance_2().fp_1.bs(int);
    var tmp$ret$0;
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    var tmp0_determinSignFromNumber = Companion_getInstance_2();
    var tmp0_subject = PrimitiveClasses_getInstance().yc();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (int instanceof Long)
        int;
      else
        THROW_CCE();
      tmp_0 = int.v5(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : int.v5(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().yc())) {
      if (typeof int === 'number')
        int;
      else
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().xc())) {
      if (typeof int === 'number')
        int;
      else
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().wc())) {
      if (typeof int === 'number')
        int;
      else
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().yc());
    }
    tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_0(int) {
    return BigInteger_init_$Init$_0(int, Object.create(BigInteger.prototype));
  }
  function BigInteger_init_$Init$_1(short, $this) {
    var tmp = Companion_getInstance_2().fp_1.cs(short);
    var tmp$ret$0;
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    var tmp0_determinSignFromNumber = Companion_getInstance_2();
    var tmp0_subject = PrimitiveClasses_getInstance().xc();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (short instanceof Long)
        short;
      else
        THROW_CCE();
      tmp_0 = short.v5(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : short.v5(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().yc())) {
      if (typeof short === 'number')
        short;
      else
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().xc())) {
      if (typeof short === 'number')
        short;
      else
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().wc())) {
      if (typeof short === 'number')
        short;
      else
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().xc());
    }
    tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_1(short) {
    return BigInteger_init_$Init$_1(short, Object.create(BigInteger.prototype));
  }
  function BigInteger_init_$Init$_2(byte, $this) {
    var tmp = Companion_getInstance_2().fp_1.ds(byte);
    var tmp$ret$0;
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    var tmp0_determinSignFromNumber = Companion_getInstance_2();
    var tmp0_subject = PrimitiveClasses_getInstance().wc();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (byte instanceof Long)
        byte;
      else
        THROW_CCE();
      tmp_0 = byte.v5(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : byte.v5(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().yc())) {
      if (typeof byte === 'number')
        byte;
      else
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().xc())) {
      if (typeof byte === 'number')
        byte;
      else
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().wc())) {
      if (typeof byte === 'number')
        byte;
      else
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().wc());
    }
    tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_2(byte) {
    return BigInteger_init_$Init$_2(byte, Object.create(BigInteger.prototype));
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.fp_1 = get_chosenArithmetic();
    this.gp_1 = new BigInteger(this.fp_1.es(), Sign_ZERO_getInstance());
    this.hp_1 = new BigInteger(this.fp_1.fs(), Sign_POSITIVE_getInstance());
    this.ip_1 = new BigInteger(this.fp_1.gs(), Sign_POSITIVE_getInstance());
    this.jp_1 = new BigInteger(this.fp_1.hs(), Sign_POSITIVE_getInstance());
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.math.log10' call
    tmp$ret$0 = log10(2.0);
    tmp.kp_1 = tmp$ret$0;
  }
  Companion_1.prototype.zq = function (string, base) {
    if (base < 2 ? true : base > 36) {
      throw NumberFormatException_init_$Create$('Unsupported base: ' + base + '. Supported base range is from 2 to 36');
    }
    var tmp = _Char___init__impl__6a9atx(46);
    var decimal = contains$default(string, tmp, false, 2, null);
    if (decimal) {
      var bigDecimal = Companion_getInstance_0().xq(string);
      var isActuallyDecimal = bigDecimal.qr(bigDecimal.sr()).pp(0) > 0;
      if (isActuallyDecimal) {
        throw NumberFormatException_init_$Create$('Supplied string is decimal, which cannot be converted to BigInteger without precision loss.');
      }
      return bigDecimal.tr();
    }
    var signed = equals(new Char(charSequenceGet(string, 0)), new Char(_Char___init__impl__6a9atx(45))) ? true : equals(new Char(charSequenceGet(string, 0)), new Char(_Char___init__impl__6a9atx(43)));
    var tmp_0;
    if (signed) {
      if (string.length === 1) {
        throw NumberFormatException_init_$Create$('Invalid big integer: ' + string);
      }
      var tmp_1;
      if (equals(new Char(charSequenceGet(string, 0)), new Char(_Char___init__impl__6a9atx(45)))) {
        tmp_1 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_1 = Sign_POSITIVE_getInstance();
      }
      var isNegative = tmp_1;
      if (string.length === 2 ? equals(new Char(charSequenceGet(string, 1)), new Char(_Char___init__impl__6a9atx(48))) : false) {
        return this.gp_1;
      }
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = string.length;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = string;
      tmp$ret$1 = tmp$ret$0.substring(1, tmp0_substring);
      tmp_0 = new BigInteger(this.fp_1.is(tmp$ret$1, base), isNegative);
    } else {
      if (string.length === 1 ? equals(new Char(charSequenceGet(string, 0)), new Char(_Char___init__impl__6a9atx(48))) : false) {
        return this.gp_1;
      }
      tmp_0 = new BigInteger(this.fp_1.is(string, base), Sign_POSITIVE_getInstance());
    }
    return tmp_0;
  };
  Companion_1.prototype.js = function (uLong) {
    return new BigInteger(this.fp_1.ks(uLong), Sign_POSITIVE_getInstance());
  };
  Companion_1.prototype.ls = function (uInt) {
    return new BigInteger(this.fp_1.ms(uInt), Sign_POSITIVE_getInstance());
  };
  Companion_1.prototype.ns = function (uShort) {
    return new BigInteger(this.fp_1.os(uShort), Sign_POSITIVE_getInstance());
  };
  Companion_1.prototype.ps = function (uByte) {
    return new BigInteger(this.fp_1.qs(uByte), Sign_POSITIVE_getInstance());
  };
  Companion_1.prototype.yn = function (long) {
    return BigInteger_init_$Create$(long);
  };
  Companion_1.prototype.zn = function (int) {
    return BigInteger_init_$Create$_0(int);
  };
  Companion_1.prototype.rq = function (short) {
    return BigInteger_init_$Create$_1(short);
  };
  Companion_1.prototype.tq = function (byte) {
    return BigInteger_init_$Create$_2(byte);
  };
  Companion_1.prototype.ao = function (float, exactRequired) {
    var tmp$ret$0;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$0 = Math.floor(float);
    var floatDecimalPart = float - tmp$ret$0;
    var tmp = Companion_getInstance_0();
    var tmp$ret$1;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$1 = Math.floor(float);
    var bigDecimal = tmp.uq(tmp$ret$1, null);
    if (exactRequired) {
      if (floatDecimalPart > 0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.tr();
  };
  Companion_1.prototype.co = function (double, exactRequired) {
    var tmp$ret$0;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$0 = Math.floor(double);
    var doubleDecimalPart = double - tmp$ret$0;
    var tmp = Companion_getInstance_0();
    var tmp$ret$1;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$1 = Math.floor(double);
    var bigDecimal = tmp.wq(tmp$ret$1, null);
    if (exactRequired) {
      if (doubleDecimalPart > 0.0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.tr();
  };
  Companion_1.$metadata$ = objectMeta('Companion', [Creator, Util, ByteArrayDeserializable]);
  var Companion_instance_1;
  function Companion_getInstance_2() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function isResultZero($this, resultMagnitude) {
    return Companion_getInstance_2().fp_1.rs(resultMagnitude, Companion_getInstance_2().fp_1.es()) === 0;
  }
  function javascriptNumberComparison_0($this, number) {
    var float = numberToDouble(number);
    var tmp;
    if (float % 1 === 0.0) {
      tmp = $this.ur(Companion_getInstance_2().yn(numberToLong(number)));
    } else {
      var tmp_0 = numberToDouble(number);
      tmp = $this.ss(tmp_0, BigInteger$javascriptNumberComparison$lambda($this));
    }
    return tmp;
  }
  function QuotientAndRemainder(quotient, remainder) {
    this.dp_1 = quotient;
    this.ep_1 = remainder;
  }
  QuotientAndRemainder.prototype.toString = function () {
    return 'QuotientAndRemainder(quotient=' + this.dp_1 + ', remainder=' + this.ep_1 + ')';
  };
  QuotientAndRemainder.prototype.hashCode = function () {
    var result = this.dp_1.hashCode();
    result = imul(result, 31) + this.ep_1.hashCode() | 0;
    return result;
  };
  QuotientAndRemainder.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof QuotientAndRemainder))
      return false;
    var tmp0_other_with_cast = other instanceof QuotientAndRemainder ? other : THROW_CCE();
    if (!this.dp_1.equals(tmp0_other_with_cast.dp_1))
      return false;
    if (!this.ep_1.equals(tmp0_other_with_cast.ep_1))
      return false;
    return true;
  };
  QuotientAndRemainder.$metadata$ = classMeta('QuotientAndRemainder');
  function BigInteger$compareTo$lambda(this$0) {
    return function (it) {
      return this$0.ur(it);
    };
  }
  function BigInteger$compareTo$lambda_0(this$0) {
    return function (it) {
      return this$0.ur(it);
    };
  }
  function BigInteger$javascriptNumberComparison$lambda(this$0) {
    return function (it) {
      return this$0.ur(it);
    };
  }
  function BigInteger(wordArray, requestedSign) {
    Companion_getInstance_2();
    if (requestedSign.equals(Sign_ZERO_getInstance())) {
      // Inline function 'kotlin.require' call
      var tmp0_require = isResultZero(this, wordArray);
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.<anonymous>' call
        tmp$ret$0 = 'sign should be Sign.ZERO iff magnitude has a value of 0';
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
    this.yo_1 = BigInteger63Arithmetic_getInstance().lt(wordArray);
    var tmp = this;
    var tmp_0;
    if (isResultZero(this, this.yo_1)) {
      tmp_0 = Sign_ZERO_getInstance();
    } else {
      tmp_0 = requestedSign;
    }
    tmp.zo_1 = tmp_0;
    this.ap_1 = _ULongArray___get_size__impl__ju6dtr(this.yo_1);
    this.bp_1 = null;
  }
  BigInteger.prototype.mo = function () {
    return Companion_getInstance_2();
  };
  BigInteger.prototype.no = function () {
    return this;
  };
  BigInteger.prototype.mt = function (other) {
    var comparison = Companion_getInstance_2().fp_1.rs(this.yo_1, other.yo_1);
    var tmp;
    if (other.zo_1.equals(this.zo_1)) {
      return new BigInteger(Companion_getInstance_2().fp_1.ot(this.yo_1, other.yo_1), this.zo_1);
    } else {
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.nt(this.yo_1, other.yo_1), this.zo_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.nt(other.yo_1, this.yo_1), other.zo_1);
      } else {
        tmp_0 = Companion_getInstance_2().gp_1;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  BigInteger.prototype.eo = function (other) {
    return this.mt(other instanceof BigInteger ? other : THROW_CCE());
  };
  BigInteger.prototype.pt = function (other) {
    var comparison = Companion_getInstance_2().fp_1.rs(this.yo_1, other.yo_1);
    if (this.equals(Companion_getInstance_2().gp_1)) {
      return other.ar();
    }
    if (other.equals(Companion_getInstance_2().gp_1)) {
      return this;
    }
    var tmp;
    if (other.zo_1.equals(this.zo_1)) {
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.nt(this.yo_1, other.yo_1), this.zo_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.nt(other.yo_1, this.yo_1), this.zo_1.st());
      } else {
        tmp_0 = Companion_getInstance_2().gp_1;
      }
      tmp = tmp_0;
    } else {
      return new BigInteger(Companion_getInstance_2().fp_1.ot(this.yo_1, other.yo_1), this.zo_1);
    }
    return tmp;
  };
  BigInteger.prototype.fo = function (other) {
    return this.pt(other instanceof BigInteger ? other : THROW_CCE());
  };
  BigInteger.prototype.tt = function (other) {
    if (this.op() ? true : other.op()) {
      return Companion_getInstance_2().gp_1;
    }
    if (other.equals(Companion_getInstance_2().hp_1)) {
      return this;
    }
    var tmp;
    if (!this.zo_1.equals(other.zo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var tmp_0;
    if (sign.equals(Sign_POSITIVE_getInstance())) {
      tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.ut(this.yo_1, other.yo_1), sign);
    } else {
      tmp_0 = new BigInteger(Companion_getInstance_2().fp_1.ut(this.yo_1, other.yo_1), sign);
    }
    return tmp_0;
  };
  BigInteger.prototype.go = function (other) {
    return this.tt(other instanceof BigInteger ? other : THROW_CCE());
  };
  BigInteger.prototype.vt = function (other) {
    if (other.op()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var result = Companion_getInstance_2().fp_1.wt(this.yo_1, other.yo_1).v4_1.q7_1;
    var tmp;
    if (equals(result, Companion_getInstance_2().fp_1.es())) {
      tmp = Companion_getInstance_2().gp_1;
    } else {
      var tmp_0;
      if (!this.zo_1.equals(other.zo_1)) {
        tmp_0 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(result, sign);
    }
    return tmp;
  };
  BigInteger.prototype.ho = function (other) {
    return this.vt(other instanceof BigInteger ? other : THROW_CCE());
  };
  BigInteger.prototype.xt = function (other) {
    if (other.op()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var tmp;
    if (!this.zo_1.equals(other.zo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_2().fp_1.wt(this.yo_1, other.yo_1).w4_1.q7_1;
    if (equals(result, Companion_getInstance_2().fp_1.es())) {
      sign = Sign_ZERO_getInstance();
    }
    return new BigInteger(result, sign);
  };
  BigInteger.prototype.io = function (other) {
    return this.xt(other instanceof BigInteger ? other : THROW_CCE());
  };
  BigInteger.prototype.yt = function (other) {
    if (other.op()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var tmp;
    if (!this.zo_1.equals(other.zo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_2().fp_1.wt(this.yo_1, other.yo_1);
    var tmp_0;
    if (equals(result.v4_1, new ULongArray(Companion_getInstance_2().fp_1.es()))) {
      tmp_0 = Companion_getInstance_2().gp_1;
    } else {
      tmp_0 = new BigInteger(result.v4_1.q7_1, sign);
    }
    var quotient = tmp_0;
    var tmp_1;
    if (equals(result.w4_1, new ULongArray(Companion_getInstance_2().fp_1.es()))) {
      tmp_1 = Companion_getInstance_2().gp_1;
    } else {
      tmp_1 = new BigInteger(result.w4_1.q7_1, this.zo_1);
    }
    var remainder = tmp_1;
    return new Pair(quotient, remainder);
  };
  BigInteger.prototype.ur = function (other) {
    if (this.op() ? other.op() : false)
      return 0;
    if (other.op() ? this.zo_1.equals(Sign_POSITIVE_getInstance()) : false)
      return 1;
    if (other.op() ? this.zo_1.equals(Sign_NEGATIVE_getInstance()) : false)
      return -1;
    if (this.op() ? other.zo_1.equals(Sign_POSITIVE_getInstance()) : false)
      return -1;
    if (this.op() ? other.zo_1.equals(Sign_NEGATIVE_getInstance()) : false)
      return 1;
    if (!this.zo_1.equals(other.zo_1))
      return this.zo_1.equals(Sign_POSITIVE_getInstance()) ? 1 : -1;
    var result = Companion_getInstance_2().fp_1.rs(this.yo_1, other.yo_1);
    var tmp;
    if (this.zo_1.equals(Sign_NEGATIVE_getInstance()) ? other.zo_1.equals(Sign_NEGATIVE_getInstance()) : false) {
      tmp = imul(result, -1);
    } else {
      tmp = result;
    }
    return tmp;
  };
  BigInteger.prototype.op = function () {
    return this.zo_1.equals(Sign_ZERO_getInstance()) ? true : get_chosenArithmetic().rs(this.yo_1, get_chosenArithmetic().es()) === 0;
  };
  BigInteger.prototype.ar = function () {
    return new BigInteger(this.yo_1, this.zo_1.st());
  };
  BigInteger.prototype.np = function () {
    return new BigInteger(this.yo_1, Sign_POSITIVE_getInstance());
  };
  BigInteger.prototype.lp = function (exponent) {
    if (exponent.v5(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$('Negative exponent not supported with BigInteger');
    }
    var tmp0_subject = this;
    var tmp;
    if (tmp0_subject.equals(Companion_getInstance_2().gp_1)) {
      tmp = Companion_getInstance_2().gp_1;
    } else if (tmp0_subject.equals(Companion_getInstance_2().hp_1)) {
      tmp = Companion_getInstance_2().hp_1;
    } else {
      var tmp_0;
      if (this.zo_1.equals(Sign_NEGATIVE_getInstance())) {
        var tmp_1;
        var tmp$ret$0;
        // Inline function 'kotlin.Long.rem' call
        tmp$ret$0 = exponent.s7(new Long(2, 0));
        if (tmp$ret$0.equals(new Long(0, 0))) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_NEGATIVE_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(Companion_getInstance_2().fp_1.zt(this.yo_1, exponent), sign);
    }
    return tmp;
  };
  BigInteger.prototype.au = function (exponent) {
    return this.lp(toLong(exponent));
  };
  BigInteger.prototype.jo = function () {
    var tmp0_subject = this.zo_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = 1;
        break;
      case 1:
        tmp = -1;
        break;
      case 2:
        tmp = 0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  BigInteger.prototype.cp = function () {
    var bitLenght = Companion_getInstance_2().fp_1.bu(this.yo_1);
    var tmp$ret$0;
    // Inline function 'kotlin.math.ceil' call
    var tmp0_ceil = (bitLenght - 1 | 0) * Companion_getInstance_2().kp_1;
    tmp$ret$0 = Math.ceil(tmp0_ceil);
    var minDigit = tmp$ret$0;
    var tmp = this.ro(toBigInteger(10).au(numberToInt(minDigit)));
    var counter = new Long(0, 0);
    while (!(tmp.pp(0) === 0)) {
      tmp = tmp.of(10);
      var tmp0 = counter;
      counter = tmp0.qf();
    }
    var tmp$ret$1;
    // Inline function 'kotlin.Long.plus' call
    var tmp1_plus = counter;
    var tmp2_plus = numberToInt(minDigit);
    tmp$ret$1 = tmp1_plus.x5(toLong(tmp2_plus));
    return tmp$ret$1;
  };
  BigInteger.prototype.t5 = function () {
    return this.ar();
  };
  BigInteger.prototype.rf = function () {
    return this.po(Companion_getInstance_2().hp_1);
  };
  BigInteger.prototype.qf = function () {
    return this.oo(Companion_getInstance_2().hp_1);
  };
  BigInteger.prototype.mp = function (other) {
    var result = this.yt(other);
    return new QuotientAndRemainder(result.v4_1, result.w4_1);
  };
  BigInteger.prototype.pp = function (other) {
    if (isNumber(other)) {
      if (ComparisonWorkaround_getInstance().vr(other)) {
        return javascriptNumberComparison_0(this, other);
      }
    }
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof BigInteger) {
      tmp = this.ur(other);
    } else {
      if (tmp0_subject instanceof Long) {
        tmp = this.ur(Companion_getInstance_2().yn(other));
      } else {
        if (typeof tmp0_subject === 'number') {
          tmp = this.ur(Companion_getInstance_2().zn(other));
        } else {
          if (typeof tmp0_subject === 'number') {
            tmp = this.ur(Companion_getInstance_2().rq(other));
          } else {
            if (typeof tmp0_subject === 'number') {
              tmp = this.ur(Companion_getInstance_2().tq(other));
            } else {
              if (tmp0_subject instanceof ULong) {
                tmp = this.ur(Companion_getInstance_2().js(other.q1_1));
              } else {
                if (tmp0_subject instanceof UInt) {
                  tmp = this.ur(Companion_getInstance_2().ls(other.r1_1));
                } else {
                  if (tmp0_subject instanceof UShort) {
                    tmp = this.ur(Companion_getInstance_2().ns(other.eu_1));
                  } else {
                    if (tmp0_subject instanceof UByte) {
                      tmp = this.ur(Companion_getInstance_2().ps(other.du_1));
                    } else {
                      if (typeof tmp0_subject === 'number') {
                        tmp = this.ss(other, BigInteger$compareTo$lambda(this));
                      } else {
                        if (typeof tmp0_subject === 'number') {
                          tmp = this.cu(other, BigInteger$compareTo$lambda_0(this));
                        } else {
                          throw RuntimeException_init_$Create$('Invalid comparison type for BigInteger: ' + getKClassFromExpression(other));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  BigInteger.prototype.y6 = function (other) {
    return this.pp(isObject(other) ? other : THROW_CCE());
  };
  BigInteger.prototype.ss = function (float, comparisonBlock) {
    var tmp$ret$0;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$0 = Math.floor(float);
    var withoutDecimalPart = tmp$ret$0;
    var hasDecimalPart = !(float % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var tmp_0 = Companion_getInstance_2();
      var tmp_1 = withoutDecimalPart + 1;
      var comparisonResult = comparisonBlock(tmp_0.bo(tmp_1, false, 2, null));
      var tmp_2;
      if (comparisonResult === 0) {
        tmp_2 = 1;
      } else {
        tmp_2 = comparisonResult;
      }
      tmp = tmp_2;
    } else {
      var tmp_3 = Companion_getInstance_2();
      tmp = comparisonBlock(tmp_3.bo(withoutDecimalPart, false, 2, null));
    }
    return tmp;
  };
  BigInteger.prototype.cu = function (double, comparisonBlock) {
    var tmp$ret$0;
    // Inline function 'kotlin.math.floor' call
    tmp$ret$0 = Math.floor(double);
    var withoutDecimalPart = tmp$ret$0;
    var hasDecimalPart = !(double % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var tmp_0 = Companion_getInstance_2();
      var tmp_1 = withoutDecimalPart + 1;
      var comparisonResult = comparisonBlock(tmp_0.do(tmp_1, false, 2, null));
      var tmp_2;
      if (comparisonResult === 0) {
        tmp_2 = 1;
      } else {
        tmp_2 = comparisonResult;
      }
      tmp = tmp_2;
    } else {
      var tmp_3 = Companion_getInstance_2();
      tmp = comparisonBlock(tmp_3.do(withoutDecimalPart, false, 2, null));
    }
    return tmp;
  };
  BigInteger.prototype.equals = function (other) {
    var tmp0_subject = other;
    var tmp;
    if (tmp0_subject instanceof BigInteger) {
      tmp = this.ur(other);
    } else {
      if (tmp0_subject instanceof Long) {
        tmp = this.ur(Companion_getInstance_2().yn(other));
      } else {
        if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
          tmp = this.ur(Companion_getInstance_2().zn(other));
        } else {
          if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
            tmp = this.ur(Companion_getInstance_2().rq(other));
          } else {
            if (!(tmp0_subject == null) ? typeof tmp0_subject === 'number' : false) {
              tmp = this.ur(Companion_getInstance_2().tq(other));
            } else {
              if (tmp0_subject instanceof ULong) {
                tmp = this.ur(Companion_getInstance_2().js(other.q1_1));
              } else {
                if (tmp0_subject instanceof UInt) {
                  tmp = this.ur(Companion_getInstance_2().ls(other.r1_1));
                } else {
                  if (tmp0_subject instanceof UShort) {
                    tmp = this.ur(Companion_getInstance_2().ns(other.eu_1));
                  } else {
                    if (tmp0_subject instanceof UByte) {
                      tmp = this.ur(Companion_getInstance_2().ps(other.du_1));
                    } else {
                      tmp = -1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  BigInteger.prototype.hashCode = function () {
    return ULongArray__hashCode_impl_aze4wa(this.yo_1) + this.zo_1.hashCode() | 0;
  };
  BigInteger.prototype.toString = function () {
    return this.xr(10);
  };
  BigInteger.prototype.xr = function (base) {
    var tmp;
    if (this.zo_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    return sign + this.yr(base);
  };
  BigInteger.prototype.yr = function (base) {
    return Companion_getInstance_2().fp_1.fu(this.yo_1, base);
  };
  BigInteger.$metadata$ = classMeta('BigInteger', [BigNumber, CommonBigNumberOperations, NarrowingOperations, BitwiseCapable, Comparable, ByteArraySerializable]);
  function BigInteger32ArithmeticInterface() {
  }
  BigInteger32ArithmeticInterface.$metadata$ = interfaceMeta('BigInteger32ArithmeticInterface');
  function BigIntegerArithmetic() {
  }
  BigIntegerArithmetic.$metadata$ = interfaceMeta('BigIntegerArithmetic');
  var Sign_POSITIVE_instance;
  var Sign_NEGATIVE_instance;
  var Sign_ZERO_instance;
  var Sign_entriesInitialized;
  function Sign_initEntries() {
    if (Sign_entriesInitialized)
      return Unit_getInstance();
    Sign_entriesInitialized = true;
    Sign_POSITIVE_instance = new Sign('POSITIVE', 0);
    Sign_NEGATIVE_instance = new Sign('NEGATIVE', 1);
    Sign_ZERO_instance = new Sign('ZERO', 2);
  }
  function Sign(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  Sign.prototype.st = function () {
    var tmp0_subject = this;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = Sign_NEGATIVE_getInstance();
        break;
      case 1:
        tmp = Sign_POSITIVE_getInstance();
        break;
      case 2:
        tmp = Sign_ZERO_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  Sign.$metadata$ = classMeta('Sign', undefined, undefined, undefined, undefined, Enum.prototype);
  function Sign_POSITIVE_getInstance() {
    Sign_initEntries();
    return Sign_POSITIVE_instance;
  }
  function Sign_NEGATIVE_getInstance() {
    Sign_initEntries();
    return Sign_NEGATIVE_instance;
  }
  function Sign_ZERO_getInstance() {
    Sign_initEntries();
    return Sign_ZERO_instance;
  }
  function toBigInteger(_this__u8e3s4) {
    return Companion_getInstance_2().zn(_this__u8e3s4);
  }
  function get_chosenArithmetic() {
    init_properties_Configuration_kt_li7kn6();
    return chosenArithmetic;
  }
  var chosenArithmetic;
  var properties_initialized_Configuration_kt_gex7mu;
  function init_properties_Configuration_kt_li7kn6() {
    if (properties_initialized_Configuration_kt_gex7mu) {
    } else {
      properties_initialized_Configuration_kt_gex7mu = true;
      chosenArithmetic = BigInteger63Arithmetic_getInstance();
    }
  }
  function Sextuple(a, b, c, d, e, f) {
    this.gu_1 = a;
    this.hu_1 = b;
    this.iu_1 = c;
    this.ju_1 = d;
    this.ku_1 = e;
    this.lu_1 = f;
  }
  Sextuple.prototype.w3 = function () {
    return this.gu_1;
  };
  Sextuple.prototype.x3 = function () {
    return this.hu_1;
  };
  Sextuple.prototype.r6 = function () {
    return this.iu_1;
  };
  Sextuple.prototype.mu = function () {
    return this.ju_1;
  };
  Sextuple.prototype.nu = function () {
    return this.ku_1;
  };
  Sextuple.prototype.ou = function () {
    return this.lu_1;
  };
  Sextuple.prototype.toString = function () {
    return 'Sextuple(a=' + this.gu_1 + ', b=' + this.hu_1 + ', c=' + this.iu_1 + ', d=' + this.ju_1 + ', e=' + this.ku_1 + ', f=' + this.lu_1 + ')';
  };
  Sextuple.prototype.hashCode = function () {
    var result = this.gu_1 == null ? 0 : hashCode(this.gu_1);
    result = imul(result, 31) + (this.hu_1 == null ? 0 : hashCode(this.hu_1)) | 0;
    result = imul(result, 31) + (this.iu_1 == null ? 0 : hashCode(this.iu_1)) | 0;
    result = imul(result, 31) + (this.ju_1 == null ? 0 : hashCode(this.ju_1)) | 0;
    result = imul(result, 31) + (this.ku_1 == null ? 0 : hashCode(this.ku_1)) | 0;
    result = imul(result, 31) + (this.lu_1 == null ? 0 : hashCode(this.lu_1)) | 0;
    return result;
  };
  Sextuple.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Sextuple))
      return false;
    var tmp0_other_with_cast = other instanceof Sextuple ? other : THROW_CCE();
    if (!equals(this.gu_1, tmp0_other_with_cast.gu_1))
      return false;
    if (!equals(this.hu_1, tmp0_other_with_cast.hu_1))
      return false;
    if (!equals(this.iu_1, tmp0_other_with_cast.iu_1))
      return false;
    if (!equals(this.ju_1, tmp0_other_with_cast.ju_1))
      return false;
    if (!equals(this.ku_1, tmp0_other_with_cast.ku_1))
      return false;
    if (!equals(this.lu_1, tmp0_other_with_cast.lu_1))
      return false;
    return true;
  };
  Sextuple.$metadata$ = classMeta('Sextuple');
  function Quadruple(a, b, c, d) {
    this.pu_1 = a;
    this.qu_1 = b;
    this.ru_1 = c;
    this.su_1 = d;
  }
  Quadruple.prototype.w3 = function () {
    return this.pu_1;
  };
  Quadruple.prototype.x3 = function () {
    return this.qu_1;
  };
  Quadruple.prototype.r6 = function () {
    return this.ru_1;
  };
  Quadruple.prototype.mu = function () {
    return this.su_1;
  };
  Quadruple.prototype.toString = function () {
    return 'Quadruple(a=' + this.pu_1 + ', b=' + this.qu_1 + ', c=' + this.ru_1 + ', d=' + this.su_1 + ')';
  };
  Quadruple.prototype.hashCode = function () {
    var result = this.pu_1 == null ? 0 : hashCode(this.pu_1);
    result = imul(result, 31) + (this.qu_1 == null ? 0 : hashCode(this.qu_1)) | 0;
    result = imul(result, 31) + (this.ru_1 == null ? 0 : hashCode(this.ru_1)) | 0;
    result = imul(result, 31) + (this.su_1 == null ? 0 : hashCode(this.su_1)) | 0;
    return result;
  };
  Quadruple.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Quadruple))
      return false;
    var tmp0_other_with_cast = other instanceof Quadruple ? other : THROW_CCE();
    if (!equals(this.pu_1, tmp0_other_with_cast.pu_1))
      return false;
    if (!equals(this.qu_1, tmp0_other_with_cast.qu_1))
      return false;
    if (!equals(this.ru_1, tmp0_other_with_cast.ru_1))
      return false;
    if (!equals(this.su_1, tmp0_other_with_cast.su_1))
      return false;
    return true;
  };
  Quadruple.$metadata$ = classMeta('Quadruple');
  function SignedUIntArray(unsignedValue, sign) {
    this.tu_1 = unsignedValue;
    this.uu_1 = sign;
  }
  SignedUIntArray.prototype.toString = function () {
    return 'SignedUIntArray(unsignedValue=' + new UIntArray(this.tu_1) + ', sign=' + this.uu_1 + ')';
  };
  SignedUIntArray.prototype.hashCode = function () {
    var result = UIntArray__hashCode_impl_hr7ost(this.tu_1);
    result = imul(result, 31) + (this.uu_1 | 0) | 0;
    return result;
  };
  SignedUIntArray.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedUIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedUIntArray ? other : THROW_CCE();
    if (!equals(this.tu_1, tmp0_other_with_cast.tu_1))
      return false;
    if (!(this.uu_1 === tmp0_other_with_cast.uu_1))
      return false;
    return true;
  };
  SignedUIntArray.$metadata$ = classMeta('SignedUIntArray');
  function BigInteger32Arithmetic() {
    BigInteger32Arithmetic_instance = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.intArrayOf' call
    tmp$ret$0 = new Int32Array([]);
    tmp.vu_1 = tmp$ret$0;
    this.wu_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.xu_1 = _UInt___init__impl__l7qpdl(-1);
    this.yu_1 = _ULong___init__impl__c78o9k(new Long(0, 1));
    this.zu_1 = _ULong___init__impl__c78o9k(new Long(65535, 0));
    this.av_1 = _UInt___init__impl__l7qpdl(-1);
    this.bv_1 = 32;
    this.cv_1 = 32;
    this.dv_1 = _UIntArray___init__impl__ghjpc6(0);
    var tmp_0 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.UIntArray' call
    var tmp_1 = 0;
    var tmp_2 = 1;
    var tmp_3 = new Int32Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      var tmp$ret$3;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.ONE.<anonymous>' call
      tmp$ret$1 = _UInt___init__impl__l7qpdl(1);
      var tmp0_toInt = tmp$ret$1;
      tmp$ret$2 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
      tmp$ret$3 = tmp$ret$2;
      tmp_3[tmp_4] = tmp$ret$3;
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp$ret$4 = _UIntArray___init__impl__ghjpc6_0(tmp_3);
    tmp_0.ev_1 = tmp$ret$4;
    var tmp_5 = this;
    var tmp$ret$8;
    // Inline function 'kotlin.UIntArray' call
    var tmp_6 = 0;
    var tmp_7 = 1;
    var tmp_8 = new Int32Array(tmp_7);
    while (tmp_6 < tmp_7) {
      var tmp_9 = tmp_6;
      var tmp$ret$7;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$6;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$5;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TWO.<anonymous>' call
      tmp$ret$5 = _UInt___init__impl__l7qpdl(2);
      var tmp0_toInt_0 = tmp$ret$5;
      tmp$ret$6 = _UInt___get_data__impl__f0vqqw(tmp0_toInt_0);
      tmp$ret$7 = tmp$ret$6;
      tmp_8[tmp_9] = tmp$ret$7;
      tmp_6 = tmp_6 + 1 | 0;
    }
    tmp$ret$8 = _UIntArray___init__impl__ghjpc6_0(tmp_8);
    tmp_5.fv_1 = tmp$ret$8;
    var tmp_10 = this;
    var tmp$ret$12;
    // Inline function 'kotlin.UIntArray' call
    var tmp_11 = 0;
    var tmp_12 = 1;
    var tmp_13 = new Int32Array(tmp_12);
    while (tmp_11 < tmp_12) {
      var tmp_14 = tmp_11;
      var tmp$ret$11;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$10;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$9;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TEN.<anonymous>' call
      tmp$ret$9 = _UInt___init__impl__l7qpdl(10);
      var tmp0_toInt_1 = tmp$ret$9;
      tmp$ret$10 = _UInt___get_data__impl__f0vqqw(tmp0_toInt_1);
      tmp$ret$11 = tmp$ret$10;
      tmp_13[tmp_14] = tmp$ret$11;
      tmp_11 = tmp_11 + 1 | 0;
    }
    tmp$ret$12 = _UIntArray___init__impl__ghjpc6_0(tmp_13);
    tmp_10.gv_1 = tmp$ret$12;
    this.hv_1 = 60;
    this.iv_1 = 15000;
    this.jv_1 = new SignedUIntArray(this.fv_1, true);
  }
  BigInteger32Arithmetic.prototype.kv = function () {
    return this.bv_1;
  };
  BigInteger32Arithmetic.prototype.lv = function (value) {
    var x = value;
    var y;
    var n = this.bv_1;
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.shr' call
    var tmp0_shr = x;
    tmp$ret$0 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp0_shr) >>> 16 | 0);
    y = tmp$ret$0;
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 16 | 0;
      x = y;
    }
    var tmp$ret$1;
    // Inline function 'kotlin.UInt.shr' call
    var tmp1_shr = x;
    tmp$ret$1 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp1_shr) >>> 8 | 0);
    y = tmp$ret$1;
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 8 | 0;
      x = y;
    }
    var tmp$ret$2;
    // Inline function 'kotlin.UInt.shr' call
    var tmp2_shr = x;
    tmp$ret$2 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp2_shr) >>> 4 | 0);
    y = tmp$ret$2;
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 4 | 0;
      x = y;
    }
    var tmp$ret$3;
    // Inline function 'kotlin.UInt.shr' call
    var tmp3_shr = x;
    tmp$ret$3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp3_shr) >>> 2 | 0);
    y = tmp$ret$3;
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 2 | 0;
      x = y;
    }
    var tmp$ret$4;
    // Inline function 'kotlin.UInt.shr' call
    var tmp4_shr = x;
    tmp$ret$4 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp4_shr) >>> 1 | 0);
    y = tmp$ret$4;
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      return n - 2 | 0;
    }
    var tmp = n;
    var tmp$ret$5;
    // Inline function 'kotlin.UInt.toInt' call
    var tmp5_toInt = x;
    tmp$ret$5 = _UInt___get_data__impl__f0vqqw(tmp5_toInt);
    return tmp - tmp$ret$5 | 0;
  };
  BigInteger32Arithmetic.prototype.mv = function (value) {
    if (UIntArray__isEmpty_impl_vd8j4n(value)) {
      return 0;
    }
    var mostSignificant = UIntArray__get_impl_gp5kza(value, _UIntArray___get_size__impl__r6l8ci(value) - 1 | 0);
    return this.nv(mostSignificant) + imul(_UIntArray___get_size__impl__r6l8ci(value) - 1 | 0, this.bv_1) | 0;
  };
  BigInteger32Arithmetic.prototype.nv = function (value) {
    return this.bv_1 - this.lv(value) | 0;
  };
  BigInteger32Arithmetic.prototype.ov = function (bigInteger) {
    var tmp$ret$4;
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var tmp0_indexOfLast = _UIntArray___get_storage__impl__92a0v0(bigInteger);
      var inductionVariable = tmp0_indexOfLast.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$2;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          var tmp1__anonymous__uwfjfc = tmp0_indexOfLast[index];
          var tmp$ret$1;
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.removeLeadingZeros.<anonymous>' call
          var tmp$ret$0;
          // Inline function 'kotlin.toUInt' call
          tmp$ret$0 = _UInt___init__impl__l7qpdl(tmp1__anonymous__uwfjfc);
          var tmp0__anonymous__q1qw7t = tmp$ret$0;
          tmp$ret$1 = !(tmp0__anonymous__q1qw7t === _UInt___init__impl__l7qpdl(0));
          tmp$ret$2 = tmp$ret$1;
          if (tmp$ret$2) {
            tmp$ret$3 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = -1;
    }
    tmp$ret$4 = tmp$ret$3;
    var firstEmpty = tmp$ret$4 + 1 | 0;
    if (firstEmpty === -1 ? true : firstEmpty === 0) {
      return this.dv_1;
    }
    var tmp$ret$5;
    // Inline function 'kotlin.collections.copyOfRange' call
    tmp$ret$5 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(bigInteger), 0, firstEmpty));
    return tmp$ret$5;
  };
  BigInteger32Arithmetic.prototype.pv = function (bigInteger) {
    var lastNonEmptyIndex = _UIntArray___get_size__impl__r6l8ci(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    while (element === _UInt___init__impl__l7qpdl(0) ? lastNonEmptyIndex > 0 : false) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    }
    if (UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex) === _UInt___init__impl__l7qpdl(0)) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_UIntArray___get_size__impl__r6l8ci(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  BigInteger32Arithmetic.prototype.qv = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) ? true : places === 0) {
      return operand;
    }
    var originalSize = _UIntArray___get_size__impl__r6l8ci(operand);
    var leadingZeros = this.lv(UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0));
    var shiftWords = places / this.bv_1 | 0;
    var shiftBits = places % this.bv_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      var tmp$ret$3;
      // Inline function 'kotlin.UIntArray' call
      var tmp0_UIntArray = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
      var tmp_0 = 0;
      var tmp_1 = tmp0_UIntArray;
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp$ret$2;
        // Inline function 'kotlin.UIntArray.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'kotlin.UInt.toInt' call
        var tmp$ret$0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
        var tmp0_subject = tmp_3;
        tmp$ret$0 = (0 <= tmp0_subject ? tmp0_subject < shiftWords : false) ? _UInt___init__impl__l7qpdl(0) : UIntArray__get_impl_gp5kza(operand, tmp_3 - shiftWords | 0);
        var tmp0_toInt = tmp$ret$0;
        tmp$ret$1 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
        tmp$ret$2 = tmp$ret$1;
        tmp_2[tmp_3] = tmp$ret$2;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp$ret$3 = _UIntArray___init__impl__ghjpc6_0(tmp_2);
      return tmp$ret$3;
    }
    var tmp$ret$12;
    // Inline function 'kotlin.UIntArray' call
    var tmp1_UIntArray = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
    var tmp_4 = 0;
    var tmp_5 = tmp1_UIntArray;
    var tmp_6 = new Int32Array(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      var tmp$ret$11;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$10;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$9;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
      var tmp0_subject_0 = tmp_7;
      var tmp_8;
      if (0 <= tmp0_subject_0 ? tmp0_subject_0 < shiftWords : false) {
        tmp_8 = _UInt___init__impl__l7qpdl(0);
      } else {
        if (tmp0_subject_0 === shiftWords) {
          var tmp$ret$4;
          // Inline function 'kotlin.UInt.shl' call
          var tmp0_shl = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
          tmp$ret$4 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp0_shl) << shiftBits);
          tmp_8 = tmp$ret$4;
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp0_subject_0 < (originalSize + shiftWords | 0) ? containsLower <= tmp0_subject_0 : false) {
            var tmp$ret$7;
            // Inline function 'kotlin.UInt.or' call
            var tmp$ret$5;
            // Inline function 'kotlin.UInt.shl' call
            var tmp1_shl = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
            tmp$ret$5 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp1_shl) << shiftBits);
            var tmp4_or = tmp$ret$5;
            var tmp$ret$6;
            // Inline function 'kotlin.UInt.shr' call
            var tmp2_shr = UIntArray__get_impl_gp5kza(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            var tmp3_shr = BigInteger32Arithmetic_getInstance().bv_1 - shiftBits | 0;
            tmp$ret$6 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp2_shr) >>> tmp3_shr | 0);
            var tmp5_or = tmp$ret$6;
            tmp$ret$7 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp4_or) | _UInt___get_data__impl__f0vqqw(tmp5_or));
            tmp_8 = tmp$ret$7;
          } else {
            if (tmp0_subject_0 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              var tmp$ret$8;
              // Inline function 'kotlin.UInt.shr' call
              var tmp6_shr = UIntArray__get_impl_gp5kza(operand, tmp_7 - wordsNeeded | 0);
              var tmp7_shr = BigInteger32Arithmetic_getInstance().bv_1 - shiftBits | 0;
              tmp$ret$8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp6_shr) >>> tmp7_shr | 0);
              tmp_8 = tmp$ret$8;
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      tmp$ret$9 = tmp_8;
      var tmp0_toInt_0 = tmp$ret$9;
      tmp$ret$10 = _UInt___get_data__impl__f0vqqw(tmp0_toInt_0);
      tmp$ret$11 = tmp$ret$10;
      tmp_6[tmp_7] = tmp$ret$11;
      tmp_4 = tmp_4 + 1 | 0;
    }
    tmp$ret$12 = _UIntArray___init__impl__ghjpc6_0(tmp_6);
    return tmp$ret$12;
  };
  BigInteger32Arithmetic.prototype.rv = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) ? true : places === 0) {
      return operand;
    }
    var shiftBits = places % this.bv_1 | 0;
    var wordsToDiscard = places / this.bv_1 | 0;
    if (wordsToDiscard >= _UIntArray___get_size__impl__r6l8ci(operand)) {
      return this.dv_1;
    }
    if (shiftBits === 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyOfRange' call
      var tmp0_copyOfRange = _UIntArray___get_size__impl__r6l8ci(operand);
      tmp$ret$0 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(operand), wordsToDiscard, tmp0_copyOfRange));
      return tmp$ret$0;
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) > 1 ? (_UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0) === 1 : false) {
      var tmp$ret$2;
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.UInt.shr' call
      var tmp1_shr = UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0);
      tmp$ret$1 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp1_shr) >>> shiftBits | 0);
      var tmp2_uintArrayOf = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$1]));
      tmp$ret$2 = tmp2_uintArrayOf;
      return tmp$ret$2;
    }
    var tmp$ret$10;
    // Inline function 'kotlin.UIntArray' call
    var tmp3_UIntArray = _UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0;
    var tmp = 0;
    var tmp_0 = tmp3_UIntArray;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$9;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$8;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$7;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftRight.<anonymous>' call
      var tmp0_subject = tmp_2;
      var tmp_3;
      if (0 <= tmp0_subject ? tmp0_subject < ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0) : false) {
        var tmp$ret$5;
        // Inline function 'kotlin.UInt.or' call
        var tmp$ret$3;
        // Inline function 'kotlin.UInt.shr' call
        var tmp0_shr = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        tmp$ret$3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp0_shr) >>> shiftBits | 0);
        var tmp3_or = tmp$ret$3;
        var tmp$ret$4;
        // Inline function 'kotlin.UInt.shl' call
        var tmp1_shl = UIntArray__get_impl_gp5kza(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        var tmp2_shl = BigInteger32Arithmetic_getInstance().bv_1 - shiftBits | 0;
        tmp$ret$4 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp1_shl) << tmp2_shl);
        var tmp4_or = tmp$ret$4;
        tmp$ret$5 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp3_or) | _UInt___get_data__impl__f0vqqw(tmp4_or));
        tmp_3 = tmp$ret$5;
      } else if (tmp0_subject === ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0)) {
        var tmp$ret$6;
        // Inline function 'kotlin.UInt.shr' call
        var tmp5_shr = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        tmp$ret$6 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp5_shr) >>> shiftBits | 0);
        tmp_3 = tmp$ret$6;
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      tmp$ret$7 = tmp_3;
      var tmp0_toInt = tmp$ret$7;
      tmp$ret$8 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
      tmp$ret$9 = tmp$ret$8;
      tmp_1[tmp_2] = tmp$ret$9;
      tmp = tmp + 1 | 0;
    }
    tmp$ret$10 = _UIntArray___init__impl__ghjpc6_0(tmp_1);
    var result = tmp$ret$10;
    return this.ov(result);
  };
  BigInteger32Arithmetic.prototype.sv = function (dividend, divisor) {
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var normalizationShift = this.lv(UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.tv(divisor, normalizationShift);
    var dividendNormalized = this.tv(dividend, normalizationShift);
    return new Triple(new UIntArray(dividendNormalized), new UIntArray(divisorNormalized), normalizationShift);
  };
  BigInteger32Arithmetic.prototype.uv = function (remainderNormalized, normalizationShift) {
    var remainder = this.vv(remainderNormalized, normalizationShift);
    return remainder;
  };
  BigInteger32Arithmetic.prototype.wv = function (first, second) {
    var firstStart = _UIntArray___get_size__impl__r6l8ci(first) - this.pv(first) | 0;
    var secondStart = _UIntArray___get_size__impl__r6l8ci(second) - this.pv(second) | 0;
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.UInt.compareTo' call
      var tmp0_compareTo = UIntArray__get_impl_gp5kza(first, counter);
      var tmp1_compareTo = UIntArray__get_impl_gp5kza(second, counter);
      tmp$ret$0 = uintCompare(_UInt___get_data__impl__f0vqqw(tmp0_compareTo), _UInt___get_data__impl__f0vqqw(tmp1_compareTo));
      if (tmp$ret$0 > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp$ret$1;
      // Inline function 'kotlin.UInt.compareTo' call
      var tmp2_compareTo = UIntArray__get_impl_gp5kza(first, counter);
      var tmp3_compareTo = UIntArray__get_impl_gp5kza(second, counter);
      tmp$ret$1 = uintCompare(_UInt___get_data__impl__f0vqqw(tmp2_compareTo), _UInt___get_data__impl__f0vqqw(tmp3_compareTo));
      if (tmp$ret$1 < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp0 = counter;
      counter = tmp0 - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  BigInteger32Arithmetic.prototype.xv = function (first, second) {
    if (_UIntArray___get_size__impl__r6l8ci(first) === 1 ? UIntArray__get_impl_gp5kza(first, 0) === _UInt___init__impl__l7qpdl(0) : false)
      return second;
    if (_UIntArray___get_size__impl__r6l8ci(second) === 1 ? UIntArray__get_impl_gp5kza(second, 0) === _UInt___init__impl__l7qpdl(0) : false)
      return first;
    var tmp;
    if (_UIntArray___get_size__impl__r6l8ci(first) > _UIntArray___get_size__impl__r6l8ci(second)) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(first), _UIntArray___get_size__impl__r6l8ci(second), new UIntArray(first), new UIntArray(second));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(second), _UIntArray___get_size__impl__r6l8ci(first), new UIntArray(second), new UIntArray(first));
    }
    var tmp0_container = tmp;
    var maxLength = tmp0_container.w3();
    var minLength = tmp0_container.x3();
    var largerData = tmp0_container.r6().d7_1;
    var smallerData = tmp0_container.mu().d7_1;
    var tmp$ret$3;
    // Inline function 'kotlin.UIntArray' call
    var tmp0_UIntArray = maxLength + 1 | 0;
    var tmp_0 = 0;
    var tmp_1 = tmp0_UIntArray;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$2;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.add.<anonymous>' call
      tmp$ret$0 = _UInt___init__impl__l7qpdl(0);
      var tmp0_toInt = tmp$ret$0;
      tmp$ret$1 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
      tmp$ret$2 = tmp$ret$1;
      tmp_2[tmp_3] = tmp$ret$2;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp$ret$3 = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var result = tmp$ret$3;
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < minLength) {
      var tmp$ret$9;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$6;
      // Inline function 'kotlin.ULong.plus' call
      var tmp1_plus = sum;
      var tmp2_plus = UIntArray__get_impl_gp5kza(largerData, i);
      var tmp$ret$5;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$4;
      // Inline function 'kotlin.UInt.toULong' call
      tmp$ret$4 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp2_plus)).s6(new Long(-1, 0)));
      var tmp0_plus = tmp$ret$4;
      tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_plus).x5(_ULong___get_data__impl__fggpzb(tmp0_plus)));
      tmp$ret$6 = tmp$ret$5;
      var tmp3_plus = tmp$ret$6;
      var tmp4_plus = UIntArray__get_impl_gp5kza(smallerData, i);
      var tmp$ret$8;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$7;
      // Inline function 'kotlin.UInt.toULong' call
      tmp$ret$7 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp4_plus)).s6(new Long(-1, 0)));
      var tmp0_plus_0 = tmp$ret$7;
      tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_plus).x5(_ULong___get_data__impl__fggpzb(tmp0_plus_0)));
      tmp$ret$9 = tmp$ret$8;
      sum = tmp$ret$9;
      var tmp_4 = i;
      var tmp$ret$12;
      // Inline function 'kotlin.ULong.toUInt' call
      var tmp$ret$10;
      // Inline function 'kotlin.ULong.and' call
      var tmp5_and = sum;
      var tmp6_and = this.wu_1;
      tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5_and).s6(_ULong___get_data__impl__fggpzb(tmp6_and)));
      var tmp7_toUInt = tmp$ret$10;
      var tmp$ret$11;
      // Inline function 'kotlin.toUInt' call
      var tmp0_toUInt = _ULong___get_data__impl__fggpzb(tmp7_toUInt);
      tmp$ret$11 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
      tmp$ret$12 = tmp$ret$11;
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$12);
      var tmp$ret$13;
      // Inline function 'kotlin.ULong.shr' call
      var tmp8_shr = sum;
      var tmp9_shr = this.bv_1;
      tmp$ret$13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8_shr).k7(tmp9_shr));
      sum = tmp$ret$13;
      var tmp1 = i;
      i = tmp1 + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < maxLength) {
          UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
          var tmp2 = i;
          i = tmp2 + 1 | 0;
        }
        var tmp_5;
        if (UIntArray__get_impl_gp5kza(result, _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0) === _UInt___init__impl__l7qpdl(0)) {
          var tmp$ret$14;
          // Inline function 'kotlin.collections.copyOfRange' call
          var tmp10_copyOfRange = _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0;
          tmp$ret$14 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, tmp10_copyOfRange));
          tmp_5 = tmp$ret$14;
        } else {
          tmp_5 = result;
        }
        return tmp_5;
      }
      if (i === maxLength) {
        var tmp$ret$16;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp11_toUInt = sum;
        var tmp$ret$15;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt_0 = _ULong___get_data__impl__fggpzb(tmp11_toUInt);
        tmp$ret$15 = _UInt___init__impl__l7qpdl(tmp0_toUInt_0.z6());
        tmp$ret$16 = tmp$ret$15;
        UIntArray__set_impl_7f2zu2(result, maxLength, tmp$ret$16);
        return result;
      }
      var tmp$ret$19;
      // Inline function 'kotlin.ULong.plus' call
      var tmp12_plus = sum;
      var tmp13_plus = UIntArray__get_impl_gp5kza(largerData, i);
      var tmp$ret$18;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$17;
      // Inline function 'kotlin.UInt.toULong' call
      tmp$ret$17 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp13_plus)).s6(new Long(-1, 0)));
      var tmp0_plus_1 = tmp$ret$17;
      tmp$ret$18 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12_plus).x5(_ULong___get_data__impl__fggpzb(tmp0_plus_1)));
      tmp$ret$19 = tmp$ret$18;
      sum = tmp$ret$19;
      var tmp_6 = i;
      var tmp$ret$22;
      // Inline function 'kotlin.ULong.toUInt' call
      var tmp$ret$20;
      // Inline function 'kotlin.ULong.and' call
      var tmp14_and = sum;
      var tmp15_and = this.wu_1;
      tmp$ret$20 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp14_and).s6(_ULong___get_data__impl__fggpzb(tmp15_and)));
      var tmp16_toUInt = tmp$ret$20;
      var tmp$ret$21;
      // Inline function 'kotlin.toUInt' call
      var tmp0_toUInt_1 = _ULong___get_data__impl__fggpzb(tmp16_toUInt);
      tmp$ret$21 = _UInt___init__impl__l7qpdl(tmp0_toUInt_1.z6());
      tmp$ret$22 = tmp$ret$21;
      UIntArray__set_impl_7f2zu2(result, tmp_6, tmp$ret$22);
      var tmp$ret$23;
      // Inline function 'kotlin.ULong.shr' call
      var tmp17_shr = sum;
      var tmp18_shr = this.bv_1;
      tmp$ret$23 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp17_shr).k7(tmp18_shr));
      sum = tmp$ret$23;
      var tmp3 = i;
      i = tmp3 + 1 | 0;
    }
  };
  BigInteger32Arithmetic.prototype.yv = function (first, second) {
    var firstWithoutLeadingZeroes = this.ov(first);
    var secondWithoutLeadingZeroes = this.ov(second);
    var firstIsLarger = this.wv(firstWithoutLeadingZeroes, secondWithoutLeadingZeroes) === 1;
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes));
    }
    var tmp0_container = tmp;
    var largerLength = tmp0_container.w3();
    var smallerLength = tmp0_container.x3();
    var largerData = tmp0_container.r6().d7_1;
    var smallerData = tmp0_container.mu().d7_1;
    var tmp$ret$3;
    // Inline function 'kotlin.UIntArray' call
    var tmp0_UIntArray = largerLength + 1 | 0;
    var tmp_0 = 0;
    var tmp_1 = tmp0_UIntArray;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$2;
      // Inline function 'kotlin.UIntArray.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.UInt.toInt' call
      var tmp$ret$0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      tmp$ret$0 = _UInt___init__impl__l7qpdl(0);
      var tmp0_toInt = tmp$ret$0;
      tmp$ret$1 = _UInt___get_data__impl__f0vqqw(tmp0_toInt);
      tmp$ret$2 = tmp$ret$1;
      tmp_2[tmp_3] = tmp$ret$2;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp$ret$3 = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var result = tmp$ret$3;
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerLength) {
      if (i >= _UIntArray___get_size__impl__r6l8ci(largerData)) {
        println('Breakpoint');
      }
      if (i >= _UIntArray___get_size__impl__r6l8ci(smallerData)) {
        println('Breakpoint');
      }
      var tmp$ret$8;
      // Inline function 'kotlin.ULong.minus' call
      var tmp$ret$7;
      // Inline function 'kotlin.ULong.minus' call
      var tmp$ret$4;
      // Inline function 'kotlin.UInt.toULong' call
      var tmp1_toULong = UIntArray__get_impl_gp5kza(largerData, i);
      tmp$ret$4 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp1_toULong)).s6(new Long(-1, 0)));
      var tmp2_minus = tmp$ret$4;
      var tmp3_minus = UIntArray__get_impl_gp5kza(smallerData, i);
      var tmp$ret$6;
      // Inline function 'kotlin.ULong.minus' call
      var tmp$ret$5;
      // Inline function 'kotlin.UInt.toULong' call
      tmp$ret$5 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp3_minus)).s6(new Long(-1, 0)));
      var tmp0_minus = tmp$ret$5;
      tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2_minus).y5(_ULong___get_data__impl__fggpzb(tmp0_minus)));
      tmp$ret$7 = tmp$ret$6;
      var tmp4_minus = tmp$ret$7;
      var tmp5_minus = diff;
      tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_minus).y5(_ULong___get_data__impl__fggpzb(tmp5_minus)));
      diff = tmp$ret$8;
      var tmp_4 = i;
      var tmp$ret$10;
      // Inline function 'kotlin.ULong.toUInt' call
      var tmp6_toUInt = diff;
      var tmp$ret$9;
      // Inline function 'kotlin.toUInt' call
      var tmp0_toUInt = _ULong___get_data__impl__fggpzb(tmp6_toUInt);
      tmp$ret$9 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
      tmp$ret$10 = tmp$ret$9;
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$10);
      var tmp$ret$12;
      // Inline function 'kotlin.ULong.shr' call
      var tmp$ret$11;
      // Inline function 'kotlin.ULong.and' call
      var tmp7_and = diff;
      var tmp8_and = this.yu_1;
      tmp$ret$11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_and).s6(_ULong___get_data__impl__fggpzb(tmp8_and)));
      var tmp9_shr = tmp$ret$11;
      var tmp10_shr = this.cv_1;
      tmp$ret$12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9_shr).k7(tmp10_shr));
      diff = tmp$ret$12;
      var tmp1 = i;
      i = tmp1 + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      var tmp$ret$15;
      // Inline function 'kotlin.UInt.minus' call
      var tmp11_minus = UIntArray__get_impl_gp5kza(largerData, i);
      var tmp12_minus = diff;
      var tmp$ret$14;
      // Inline function 'kotlin.ULong.minus' call
      var tmp$ret$13;
      // Inline function 'kotlin.UInt.toULong' call
      tmp$ret$13 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp11_minus)).s6(new Long(-1, 0)));
      var tmp0_minus_0 = tmp$ret$13;
      tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_minus_0).y5(_ULong___get_data__impl__fggpzb(tmp12_minus)));
      tmp$ret$15 = tmp$ret$14;
      diff = tmp$ret$15;
      var tmp_5 = i;
      var tmp$ret$18;
      // Inline function 'kotlin.UInt.and' call
      var tmp$ret$17;
      // Inline function 'kotlin.ULong.toUInt' call
      var tmp13_toUInt = diff;
      var tmp$ret$16;
      // Inline function 'kotlin.toUInt' call
      var tmp0_toUInt_0 = _ULong___get_data__impl__fggpzb(tmp13_toUInt);
      tmp$ret$16 = _UInt___init__impl__l7qpdl(tmp0_toUInt_0.z6());
      tmp$ret$17 = tmp$ret$16;
      var tmp14_and = tmp$ret$17;
      var tmp15_and = this.xu_1;
      tmp$ret$18 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp14_and) & _UInt___get_data__impl__f0vqqw(tmp15_and));
      UIntArray__set_impl_7f2zu2(result, tmp_5, tmp$ret$18);
      var tmp$ret$20;
      // Inline function 'kotlin.ULong.shr' call
      var tmp$ret$19;
      // Inline function 'kotlin.ULong.and' call
      var tmp16_and = diff;
      var tmp17_and = this.yu_1;
      tmp$ret$19 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp16_and).s6(_ULong___get_data__impl__fggpzb(tmp17_and)));
      var tmp18_shr = tmp$ret$19;
      var tmp19_shr = this.cv_1;
      tmp$ret$20 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp18_shr).k7(tmp19_shr));
      diff = tmp$ret$20;
      var tmp2 = i;
      i = tmp2 + 1 | 0;
    }
    while (i < largerLength) {
      UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
      var tmp3 = i;
      i = tmp3 + 1 | 0;
    }
    var tmp$ret$23;
    // Inline function 'kotlin.collections.filter' call
    var tmp$ret$22;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = UIntArray__iterator_impl_tkdv7k(result);
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h().r1_1;
      var tmp$ret$21;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      tmp$ret$21 = element === _UInt___init__impl__l7qpdl(0);
      if (tmp$ret$21) {
        tmp0_filterTo.a(new UInt(element));
      }
    }
    tmp$ret$22 = tmp0_filterTo;
    tmp$ret$23 = tmp$ret$22;
    if (tmp$ret$23.p()) {
      return this.dv_1;
    }
    var tmp$ret$28;
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp$ret$27;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var tmp0_indexOfLast = _UIntArray___get_storage__impl__92a0v0(result);
      var inductionVariable = tmp0_indexOfLast.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          var tmp$ret$26;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          var tmp1__anonymous__uwfjfc = tmp0_indexOfLast[index];
          var tmp$ret$25;
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
          var tmp$ret$24;
          // Inline function 'kotlin.toUInt' call
          tmp$ret$24 = _UInt___init__impl__l7qpdl(tmp1__anonymous__uwfjfc);
          var tmp20__anonymous__q2j3lv = tmp$ret$24;
          tmp$ret$25 = !(tmp20__anonymous__q2j3lv === _UInt___init__impl__l7qpdl(0));
          tmp$ret$26 = tmp$ret$25;
          if (tmp$ret$26) {
            tmp$ret$27 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$27 = -1;
    }
    tmp$ret$28 = tmp$ret$27;
    var firstEmpty = tmp$ret$28 + 1 | 0;
    var tmp$ret$29;
    // Inline function 'kotlin.collections.copyOfRange' call
    tmp$ret$29 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, firstEmpty));
    return tmp$ret$29;
  };
  BigInteger32Arithmetic.prototype.zv = function (first, second) {
    var result = _UIntArray___init__impl__ghjpc6(_UIntArray___get_size__impl__r6l8ci(first) + 1 | 0);
    var product;
    var sum;
    var inductionVariable = 0;
    var last = _UIntArray___get_size__impl__r6l8ci(first);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$3;
        // Inline function 'kotlin.ULong.times' call
        var tmp$ret$0;
        // Inline function 'kotlin.UInt.toULong' call
        var tmp0_toULong = UIntArray__get_impl_gp5kza(first, i);
        tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp0_toULong)).s6(new Long(-1, 0)));
        var tmp1_times = tmp$ret$0;
        var tmp$ret$2;
        // Inline function 'kotlin.ULong.times' call
        var tmp$ret$1;
        // Inline function 'kotlin.UInt.toULong' call
        tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(second)).s6(new Long(-1, 0)));
        var tmp0_times = tmp$ret$1;
        tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_times).w5(_ULong___get_data__impl__fggpzb(tmp0_times)));
        tmp$ret$3 = tmp$ret$2;
        product = tmp$ret$3;
        var tmp$ret$10;
        // Inline function 'kotlin.ULong.plus' call
        var tmp$ret$4;
        // Inline function 'kotlin.UInt.toULong' call
        var tmp2_toULong = UIntArray__get_impl_gp5kza(result, i);
        tmp$ret$4 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp2_toULong)).s6(new Long(-1, 0)));
        var tmp6_plus = tmp$ret$4;
        var tmp$ret$7;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp$ret$5;
        // Inline function 'kotlin.ULong.and' call
        var tmp3_and = product;
        var tmp4_and = this.wu_1;
        tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_and).s6(_ULong___get_data__impl__fggpzb(tmp4_and)));
        var tmp5_toUInt = tmp$ret$5;
        var tmp$ret$6;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt = _ULong___get_data__impl__fggpzb(tmp5_toUInt);
        tmp$ret$6 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
        tmp$ret$7 = tmp$ret$6;
        var tmp7_plus = tmp$ret$7;
        var tmp$ret$9;
        // Inline function 'kotlin.ULong.plus' call
        var tmp$ret$8;
        // Inline function 'kotlin.UInt.toULong' call
        tmp$ret$8 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp7_plus)).s6(new Long(-1, 0)));
        var tmp0_plus = tmp$ret$8;
        tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6_plus).x5(_ULong___get_data__impl__fggpzb(tmp0_plus)));
        tmp$ret$10 = tmp$ret$9;
        sum = tmp$ret$10;
        var tmp$ret$13;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp$ret$11;
        // Inline function 'kotlin.ULong.and' call
        var tmp8_and = sum;
        var tmp9_and = this.wu_1;
        tmp$ret$11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8_and).s6(_ULong___get_data__impl__fggpzb(tmp9_and)));
        var tmp10_toUInt = tmp$ret$11;
        var tmp$ret$12;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt_0 = _ULong___get_data__impl__fggpzb(tmp10_toUInt);
        tmp$ret$12 = _UInt___init__impl__l7qpdl(tmp0_toUInt_0.z6());
        tmp$ret$13 = tmp$ret$12;
        UIntArray__set_impl_7f2zu2(result, i, tmp$ret$13);
        var tmp$ret$14;
        // Inline function 'kotlin.ULong.shr' call
        var tmp11_shr = sum;
        var tmp12_shr = this.bv_1;
        tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp11_shr).k7(tmp12_shr));
        sum = tmp$ret$14;
        var tmp = i + 1 | 0;
        var tmp$ret$20;
        // Inline function 'kotlin.UInt.plus' call
        var tmp$ret$17;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp$ret$15;
        // Inline function 'kotlin.ULong.shr' call
        var tmp13_shr = product;
        var tmp14_shr = this.bv_1;
        tmp$ret$15 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp13_shr).k7(tmp14_shr));
        var tmp15_toUInt = tmp$ret$15;
        var tmp$ret$16;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt_1 = _ULong___get_data__impl__fggpzb(tmp15_toUInt);
        tmp$ret$16 = _UInt___init__impl__l7qpdl(tmp0_toUInt_1.z6());
        tmp$ret$17 = tmp$ret$16;
        var tmp17_plus = tmp$ret$17;
        var tmp$ret$19;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp16_toUInt = sum;
        var tmp$ret$18;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt_2 = _ULong___get_data__impl__fggpzb(tmp16_toUInt);
        tmp$ret$18 = _UInt___init__impl__l7qpdl(tmp0_toUInt_2.z6());
        tmp$ret$19 = tmp$ret$18;
        var tmp18_plus = tmp$ret$19;
        tmp$ret$20 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp17_plus) + _UInt___get_data__impl__f0vqqw(tmp18_plus) | 0);
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$20);
      }
       while (inductionVariable < last);
    return this.ov(result);
  };
  BigInteger32Arithmetic.prototype.aw = function (first, second) {
    return this.bw(first, second);
  };
  BigInteger32Arithmetic.prototype.bw = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.cw(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new UIntArray(this.dv_1), new UIntArray(unnormalizedDividend));
    }
    if (_UIntArray___get_size__impl__r6l8ci(unnormalizedDivisor) === 1 ? _UIntArray___get_size__impl__r6l8ci(unnormalizedDividend) === 1 : false) {
      var tmp$ret$1;
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$0;
      // Inline function 'kotlin.UInt.div' call
      var tmp0_div = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      var tmp1_div = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      tmp$ret$0 = uintDivide(tmp0_div, tmp1_div);
      var tmp2_uintArrayOf = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$0]));
      tmp$ret$1 = tmp2_uintArrayOf;
      var tmp = new UIntArray(this.ov(tmp$ret$1));
      var tmp$ret$3;
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$2;
      // Inline function 'kotlin.UInt.rem' call
      var tmp3_rem = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      var tmp4_rem = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      tmp$ret$2 = uintRemainder(tmp3_rem, tmp4_rem);
      var tmp5_uintArrayOf = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$2]));
      tmp$ret$3 = tmp5_uintArrayOf;
      return new Pair(tmp, new UIntArray(this.ov(tmp$ret$3)));
    }
    var bitPrecision = this.mv(unnormalizedDividend) - this.mv(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      var tmp$ret$4;
      // Inline function 'kotlin.uintArrayOf' call
      tmp$ret$4 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([_UInt___init__impl__l7qpdl(1)]));
      return new Pair(new UIntArray(tmp$ret$4), new UIntArray(this.dw(unnormalizedDividend, unnormalizedDivisor)));
    }
    var tmp0_container = this.sv(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp0_container.w3().d7_1;
    var divisor = tmp0_container.x3().d7_1;
    var normalizationShift = tmp0_container.r6();
    var dividendSize = _UIntArray___get_size__impl__r6l8ci(dividend);
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _UIntArray___init__impl__ghjpc6(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.tv(divisor, imul(wordPrecision, this.bv_1));
    if (this.cw(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _UIntArray___init__impl__ghjpc6(wordPrecision + 1 | 0);
      UIntArray__set_impl_7f2zu2(quotient, wordPrecision, _UInt___init__impl__l7qpdl(1));
      dividend = this.dw(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _UIntArray___get_size__impl__r6l8ci(dividend)) {
          var tmp$ret$12;
          // Inline function 'kotlin.ULong.div' call
          var tmp$ret$9;
          // Inline function 'kotlin.ULong.plus' call
          var tmp$ret$6;
          // Inline function 'kotlin.ULong.shl' call
          var tmp$ret$5;
          // Inline function 'kotlin.UInt.toULong' call
          var tmp6_toULong = UIntArray__get_impl_gp5kza(dividend, divisorSize + j | 0);
          tmp$ret$5 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp6_toULong)).s6(new Long(-1, 0)));
          var tmp7_shl = tmp$ret$5;
          var tmp8_shl = this.bv_1;
          tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_shl).j7(tmp8_shl));
          var tmp9_plus = tmp$ret$6;
          var tmp10_plus = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
          var tmp$ret$8;
          // Inline function 'kotlin.ULong.plus' call
          var tmp$ret$7;
          // Inline function 'kotlin.UInt.toULong' call
          tmp$ret$7 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp10_plus)).s6(new Long(-1, 0)));
          var tmp0_plus = tmp$ret$7;
          tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9_plus).x5(_ULong___get_data__impl__fggpzb(tmp0_plus)));
          tmp$ret$9 = tmp$ret$8;
          var tmp11_div = tmp$ret$9;
          var tmp12_div = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
          var tmp$ret$11;
          // Inline function 'kotlin.ULong.div' call
          var tmp$ret$10;
          // Inline function 'kotlin.UInt.toULong' call
          tmp$ret$10 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp12_div)).s6(new Long(-1, 0)));
          var tmp0_div_0 = tmp$ret$10;
          tmp$ret$11 = ulongDivide(tmp11_div, tmp0_div_0);
          tmp$ret$12 = tmp$ret$11;
          tmp_0 = tmp$ret$12;
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _UIntArray___get_size__impl__r6l8ci(dividend)) {
            var tmp$ret$14;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp$ret$13;
            // Inline function 'kotlin.UInt.div' call
            var tmp13_div = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
            var tmp14_div = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
            tmp$ret$13 = uintDivide(tmp13_div, tmp14_div);
            var tmp15_toULong = tmp$ret$13;
            tmp$ret$14 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp15_toULong)).s6(new Long(-1, 0)));
            tmp_1 = tmp$ret$14;
          } else {
            tmp_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
          }
          tmp_0 = tmp_1;
        }
        qjhat = tmp_0;
        var tmp_2 = quotient;
        var tmp_3;
        var tmp$ret$18;
        // Inline function 'kotlin.ULong.compareTo' call
        var tmp17_compareTo = qjhat;
        var tmp$ret$17;
        // Inline function 'kotlin.UInt.minus' call
        var tmp16_minus = this.av_1;
        var tmp$ret$16;
        // Inline function 'kotlin.ULong.minus' call
        var tmp$ret$15;
        // Inline function 'kotlin.UInt.toULong' call
        tmp$ret$15 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp16_minus)).s6(new Long(-1, 0)));
        var tmp0_minus = tmp$ret$15;
        tmp$ret$16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_minus).y5(_ULong___get_data__impl__fggpzb(_ULong___init__impl__c78o9k(new Long(1, 0)))));
        tmp$ret$17 = tmp$ret$16;
        var tmp18_compareTo = tmp$ret$17;
        tmp$ret$18 = ulongCompare(_ULong___get_data__impl__fggpzb(tmp17_compareTo), _ULong___get_data__impl__fggpzb(tmp18_compareTo));
        if (tmp$ret$18 < 0) {
          var tmp$ret$20;
          // Inline function 'kotlin.ULong.toUInt' call
          var tmp19_toUInt = qjhat;
          var tmp$ret$19;
          // Inline function 'kotlin.toUInt' call
          var tmp0_toUInt = _ULong___get_data__impl__fggpzb(tmp19_toUInt);
          tmp$ret$19 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
          tmp$ret$20 = tmp$ret$19;
          tmp_3 = tmp$ret$20;
        } else {
          var tmp$ret$21;
          // Inline function 'kotlin.UInt.minus' call
          var tmp20_minus = this.av_1;
          tmp$ret$21 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp20_minus) - _UInt___get_data__impl__f0vqqw(_UInt___init__impl__l7qpdl(1)) | 0);
          tmp_3 = tmp$ret$21;
        }
        UIntArray__set_impl_7f2zu2(tmp_2, j, tmp_3);
        reconstructedQuotient = this.tv(this.ew(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.bv_1));
        while (this.cw(reconstructedQuotient, dividend) > 0) {
          var tmp_4 = quotient;
          var tmp$ret$22;
          // Inline function 'kotlin.UInt.minus' call
          var tmp21_minus = UIntArray__get_impl_gp5kza(quotient, j);
          tmp$ret$22 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp21_minus) - _UInt___get_data__impl__f0vqqw(_UInt___init__impl__l7qpdl(1)) | 0);
          UIntArray__set_impl_7f2zu2(tmp_4, j, tmp$ret$22);
          reconstructedQuotient = this.tv(this.ew(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.bv_1));
        }
        dividend = this.dw(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.cw(dividend, divisor) >= 0) {
      quotient = this.fw(quotient, _UInt___init__impl__l7qpdl(1));
      dividend = this.dw(dividend, divisor);
    }
    var denormRemainder = this.uv(dividend, normalizationShift);
    return new Pair(new UIntArray(this.ov(quotient)), new UIntArray(denormRemainder));
  };
  BigInteger32Arithmetic.prototype.tv = function (_this__u8e3s4, places) {
    return this.qv(_this__u8e3s4, places);
  };
  BigInteger32Arithmetic.prototype.vv = function (_this__u8e3s4, places) {
    return this.rv(_this__u8e3s4, places);
  };
  BigInteger32Arithmetic.prototype.dw = function (_this__u8e3s4, other) {
    return this.yv(_this__u8e3s4, other);
  };
  BigInteger32Arithmetic.prototype.fw = function (_this__u8e3s4, other) {
    var tmp$ret$0;
    // Inline function 'kotlin.uintArrayOf' call
    tmp$ret$0 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([other]));
    return this.xv(_this__u8e3s4, tmp$ret$0);
  };
  BigInteger32Arithmetic.prototype.ew = function (_this__u8e3s4, other) {
    return this.zv(_this__u8e3s4, other);
  };
  BigInteger32Arithmetic.prototype.cw = function (_this__u8e3s4, other) {
    return this.wv(_this__u8e3s4, other);
  };
  BigInteger32Arithmetic.$metadata$ = objectMeta('BigInteger32Arithmetic', [BigInteger32ArithmeticInterface]);
  var BigInteger32Arithmetic_instance;
  function BigInteger32Arithmetic_getInstance() {
    if (BigInteger32Arithmetic_instance == null)
      new BigInteger32Arithmetic();
    return BigInteger32Arithmetic_instance;
  }
  function multiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize) {
    if (isZero(first, $this) ? true : isZero(second, $this)) {
      return $this.us_1;
    }
    if ((firstCorrectedSize >= 120 ? true : secondCorrectedSize >= 120) ? firstCorrectedSize <= 15000 ? true : secondCorrectedSize < 15000 : false) {
      return karatsubaMultiplyWithCorrectedSizes($this, first, second, firstCorrectedSize, secondCorrectedSize);
    }
    if (firstCorrectedSize >= 15000 ? secondCorrectedSize >= 15000 : false) {
      return $this.gw(first, second);
    }
    return basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize);
  }
  function basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSizeStart, secondCorrectedSizeStart) {
    var resultArray = $this.us_1;
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = ULongArray__iterator_impl_cq4d2h(second);
    while (tmp0_iterator.g()) {
      var item = tmp0_iterator.h().q1_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.basecaseMultiplyWithCorrectedSize.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = tmp1;
      if (tmp0__anonymous__q1qw7t > secondCorrectedSizeStart) {
      } else {
        resultArray = BigInteger63Arithmetic_getInstance().jw(resultArray, BigInteger63Arithmetic_getInstance().iw(BigInteger63Arithmetic_getInstance().hw(first, item), imul(tmp0__anonymous__q1qw7t, BigInteger63Arithmetic_getInstance().zs_1)));
      }
    }
    return resultArray;
  }
  function karatsubaMultiplyWithCorrectedSizes($this, firstUnsigned, secondUnsigned, firstCorrectedSize, secondCorrectedSize) {
    var first = new SignedULongArray(firstUnsigned, true);
    var second = new SignedULongArray(secondUnsigned, true);
    var tmp$ret$0;
    // Inline function 'kotlin.math.max' call
    tmp$ret$0 = Math.max(firstCorrectedSize, secondCorrectedSize);
    var halfLength = (tmp$ret$0 + 1 | 0) / 2 | 0;
    var mask = $this.kw($this.iw($this.vs_1, imul(halfLength, $this.at_1)), _ULong___init__impl__c78o9k(new Long(1, 0)));
    var firstLower = $this.lw(first, mask);
    var firstHigher = $this.mw(first, imul(halfLength, $this.at_1));
    var secondLower = $this.lw(second, mask);
    var secondHigher = $this.mw(second, imul(halfLength, $this.at_1));
    var higherProduct = $this.nw(firstHigher, secondHigher);
    var lowerProduct = $this.nw(firstLower, secondLower);
    var middleProduct = $this.nw($this.ow(firstHigher, firstLower), $this.ow(secondHigher, secondLower));
    var result = $this.ow($this.ow($this.pw(higherProduct, imul(imul(2, $this.at_1), halfLength)), $this.pw($this.qw($this.qw(middleProduct, higherProduct), lowerProduct), imul($this.at_1, halfLength))), lowerProduct);
    return result.rw_1;
  }
  function isZero(_this__u8e3s4, $this) {
    if (equals(_this__u8e3s4, $this.us_1))
      return true;
    if (_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) === 1 ? equals(ULongArray__get_impl_pr71q9(_this__u8e3s4, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false)
      return true;
    if ((_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) - $this.tw(_this__u8e3s4) | 0) === 0)
      return true;
    return false;
  }
  function SignedULongArray(unsignedValue, sign) {
    this.rw_1 = unsignedValue;
    this.sw_1 = sign;
  }
  SignedULongArray.prototype.uw = function (unsignedValue, sign) {
    return new SignedULongArray(unsignedValue, sign);
  };
  SignedULongArray.prototype.vw = function (unsignedValue, sign, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      unsignedValue = this.rw_1;
    if (!(($mask0 & 2) === 0))
      sign = this.sw_1;
    return this.uw(unsignedValue, sign);
  };
  SignedULongArray.prototype.toString = function () {
    return 'SignedULongArray(unsignedValue=' + new ULongArray(this.rw_1) + ', sign=' + this.sw_1 + ')';
  };
  SignedULongArray.prototype.hashCode = function () {
    var result = ULongArray__hashCode_impl_aze4wa(this.rw_1);
    result = imul(result, 31) + (this.sw_1 | 0) | 0;
    return result;
  };
  SignedULongArray.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedULongArray ? other : THROW_CCE();
    if (!equals(this.rw_1, tmp0_other_with_cast.rw_1))
      return false;
    if (!(this.sw_1 === tmp0_other_with_cast.sw_1))
      return false;
    return true;
  };
  SignedULongArray.$metadata$ = classMeta('SignedULongArray');
  function signedAdd($this, first, second) {
    var tmp;
    if (!!(first.sw_1 ^ second.sw_1)) {
      var tmp_0;
      if ($this.xw(first.rw_1, second.rw_1) > 0) {
        tmp_0 = new SignedULongArray($this.ww(first.rw_1, second.rw_1), first.sw_1);
      } else {
        tmp_0 = new SignedULongArray($this.ww(second.rw_1, first.rw_1), second.sw_1);
      }
      tmp = tmp_0;
    } else {
      tmp = new SignedULongArray($this.jw(first.rw_1, second.rw_1), first.sw_1);
    }
    return tmp;
  }
  function signedSubtract($this, first, second) {
    return signedAdd($this, first, second.vw(null, !second.sw_1, 1, null));
  }
  function signedMultiply($this, first, second) {
    return new SignedULongArray($this.yw(first.rw_1, second.rw_1), !!!(first.sw_1 ^ second.sw_1));
  }
  function signedDivide($this, first, second) {
    return new SignedULongArray($this.zw(first.rw_1, second.rw_1), !!!(first.sw_1 ^ second.sw_1));
  }
  function BigInteger63Arithmetic() {
    BigInteger63Arithmetic_instance = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.longArrayOf' call
    tmp$ret$0 = longArrayOf([]);
    tmp.ts_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0))]));
    tmp_0.us_1 = tmp$ret$1;
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$2 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    tmp_1.vs_1 = tmp$ret$2;
    var tmp_2 = this;
    var tmp$ret$3;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$3 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(2, 0))]));
    tmp_2.ws_1 = tmp$ret$3;
    var tmp_3 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$4 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    tmp_3.xs_1 = tmp$ret$4;
    var tmp_4 = this;
    var tmp$ret$5;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$5 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1431655765, 715827882))]));
    tmp_4.ys_1 = tmp$ret$5;
    this.zs_1 = 63;
    this.at_1 = 63;
    this.bt_1 = _ULong___init__impl__c78o9k(new Long(-1, 2147483647));
    var tmp_5 = this;
    var tmp$ret$6;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$6 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1, 2147483647))]));
    tmp_5.ct_1 = tmp$ret$6;
    this.dt_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.et_1 = _ULong___init__impl__c78o9k(new Long(0, 2147483647));
    this.ft_1 = _ULong___init__impl__c78o9k(new Long(0, -2147483648));
    this.gt_1 = 120;
    this.ht_1 = 15000;
    this.it_1 = true;
    this.jt_1 = new SignedULongArray(BigInteger63Arithmetic_getInstance().ws_1, true);
    var tmp_6 = this;
    var tmp$ret$110;
    // Inline function 'kotlin.arrayOf' call
    var tmp$ret$7;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$7 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_7 = new ULongArray(tmp$ret$7);
    var tmp$ret$8;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$8 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    var tmp_8 = new ULongArray(tmp$ret$8);
    var tmp$ret$9;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$9 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100, 0))]));
    var tmp_9 = new ULongArray(tmp$ret$9);
    var tmp$ret$10;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$10 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000, 0))]));
    var tmp_10 = new ULongArray(tmp$ret$10);
    var tmp$ret$11;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000, 0))]));
    var tmp_11 = new ULongArray(tmp$ret$11);
    var tmp$ret$12;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$12 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000, 0))]));
    var tmp_12 = new ULongArray(tmp$ret$12);
    var tmp$ret$13;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$13 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000, 0))]));
    var tmp_13 = new ULongArray(tmp$ret$13);
    var tmp$ret$14;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$14 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000000, 0))]));
    var tmp_14 = new ULongArray(tmp$ret$14);
    var tmp$ret$15;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$15 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000000, 0))]));
    var tmp_15 = new ULongArray(tmp$ret$15);
    var tmp$ret$16;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$16 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000000, 0))]));
    var tmp_16 = new ULongArray(tmp$ret$16);
    var tmp$ret$17;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$17 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1410065408, 2))]));
    var tmp_17 = new ULongArray(tmp$ret$17);
    var tmp$ret$18;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$18 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1215752192, 23))]));
    var tmp_18 = new ULongArray(tmp$ret$18);
    var tmp$ret$19;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$19 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-727379968, 232))]));
    var tmp_19 = new ULongArray(tmp$ret$19);
    var tmp$ret$20;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$20 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1316134912, 2328))]));
    var tmp_20 = new ULongArray(tmp$ret$20);
    var tmp$ret$21;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$21 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(276447232, 23283))]));
    var tmp_21 = new ULongArray(tmp$ret$21);
    var tmp$ret$22;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$22 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1530494976, 232830))]));
    var tmp_22 = new ULongArray(tmp$ret$22);
    var tmp$ret$23;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$23 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1874919424, 2328306))]));
    var tmp_23 = new ULongArray(tmp$ret$23);
    var tmp$ret$24;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$24 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1569325056, 23283064))]));
    var tmp_24 = new ULongArray(tmp$ret$24);
    var tmp$ret$25;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$25 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1486618624, 232830643))]));
    var tmp_25 = new ULongArray(tmp$ret$25);
    var tmp$ret$26;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$26 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1981284352, 180822788)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_26 = new ULongArray(tmp$ret$26);
    var tmp$ret$27;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$27 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1661992960, 1808227885)), _ULong___init__impl__c78o9k(new Long(10, 0))]));
    var tmp_27 = new ULongArray(tmp$ret$27);
    var tmp$ret$28;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$28 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-559939584, 902409669)), _ULong___init__impl__c78o9k(new Long(108, 0))]));
    var tmp_28 = new ULongArray(tmp$ret$28);
    var tmp$ret$29;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$29 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1304428544, 434162106)), _ULong___init__impl__c78o9k(new Long(1084, 0))]));
    var tmp_29 = new ULongArray(tmp$ret$29);
    var tmp$ret$30;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$30 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-159383552, 46653770)), _ULong___init__impl__c78o9k(new Long(10842, 0))]));
    var tmp_30 = new ULongArray(tmp$ret$30);
    var tmp$ret$31;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$31 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1593835520, 466537709)), _ULong___init__impl__c78o9k(new Long(108420, 0))]));
    var tmp_31 = new ULongArray(tmp$ret$31);
    var tmp$ret$32;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$32 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1241513984, 370409800)), _ULong___init__impl__c78o9k(new Long(1084202, 0))]));
    var tmp_32 = new ULongArray(tmp$ret$32);
    var tmp$ret$33;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$33 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-469762048, 1556614354)), _ULong___init__impl__c78o9k(new Long(10842021, 0))]));
    var tmp_33 = new ULongArray(tmp$ret$33);
    var tmp$ret$34;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$34 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-402653184, 533758012)), _ULong___init__impl__c78o9k(new Long(108420217, 0))]));
    var tmp_34 = new ULongArray(tmp$ret$34);
    var tmp$ret$35;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$35 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(268435456, 1042612833)), _ULong___init__impl__c78o9k(new Long(1084202172, 0))]));
    var tmp_35 = new ULongArray(tmp$ret$35);
    var tmp$ret$36;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$36 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1610612736, 1836193738)), _ULong___init__impl__c78o9k(new Long(-2042880164, 2))]));
    var tmp_36 = new ULongArray(tmp$ret$36);
    var tmp$ret$37;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$37 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1073741824, 1182068202)), _ULong___init__impl__c78o9k(new Long(1046034848, 25))]));
    var tmp_37 = new ULongArray(tmp$ret$37);
    var tmp$ret$38;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$38 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-2147483648, 1083263782)), _ULong___init__impl__c78o9k(new Long(1870413893, 252))]));
    var tmp_38 = new ULongArray(tmp$ret$38);
    var tmp$ret$39;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$39 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 95219585)), _ULong___init__impl__c78o9k(new Long(1524269751, 2524))]));
    var tmp_39 = new ULongArray(tmp$ret$39);
    var tmp$ret$40;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$40 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 952195850)), _ULong___init__impl__c78o9k(new Long(-1937171674, 25243))]));
    var tmp_40 = new ULongArray(tmp$ret$40);
    var tmp$ret$41;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$41 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 932023908)), _ULong___init__impl__c78o9k(new Long(2103119744, 252435))]));
    var tmp_41 = new ULongArray(tmp$ret$41);
    var tmp$ret$42;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$42 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 730304488)), _ULong___init__impl__c78o9k(new Long(-443639036, 2524354))]));
    var tmp_42 = new ULongArray(tmp$ret$42);
    var tmp$ret$43;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$43 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 860593936)), _ULong___init__impl__c78o9k(new Long(-141423061, 25243548))]));
    var tmp_43 = new ULongArray(tmp$ret$43);
    var tmp$ret$44;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$44 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 16004768)), _ULong___init__impl__c78o9k(new Long(-1414230606, 252435489))]));
    var tmp_44 = new ULongArray(tmp$ret$44);
    var tmp$ret$45;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$45 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 160047680)), _ULong___init__impl__c78o9k(new Long(-1257404172, 376871248)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_45 = new ULongArray(tmp$ret$45);
    var tmp$ret$46;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$46 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1600476800)), _ULong___init__impl__c78o9k(new Long(310860168, 1621228839)), _ULong___init__impl__c78o9k(new Long(11, 0))]));
    var tmp_46 = new ULongArray(tmp$ret$46);
    var tmp$ret$47;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$47 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 972382464)), _ULong___init__impl__c78o9k(new Long(-1186365609, 1179902854)), _ULong___init__impl__c78o9k(new Long(117, 0))]));
    var tmp_47 = new ULongArray(tmp$ret$47);
    var tmp$ret$48;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$48 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1133890048)), _ULong___init__impl__c78o9k(new Long(1021245802, 1061610307)), _ULong___init__impl__c78o9k(new Long(1175, 0))]));
    var tmp_48 = new ULongArray(tmp$ret$48);
    var tmp$ret$49;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$49 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 601482240)), _ULong___init__impl__c78o9k(new Long(1622523433, 2026168480)), _ULong___init__impl__c78o9k(new Long(11754, 0))]));
    var tmp_49 = new ULongArray(tmp$ret$49);
    var tmp$ret$50;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$50 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1719855104)), _ULong___init__impl__c78o9k(new Long(-954634852, 934331971)), _ULong___init__impl__c78o9k(new Long(117549, 0))]));
    var tmp_50 = new ULongArray(tmp$ret$50);
    var tmp$ret$51;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$51 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 18681856)), _ULong___init__impl__c78o9k(new Long(-956413920, 753385125)), _ULong___init__impl__c78o9k(new Long(1175494, 0))]));
    var tmp_51 = new ULongArray(tmp$ret$51);
    var tmp$ret$52;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$52 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 186818560)), _ULong___init__impl__c78o9k(new Long(-974204608, 1091400313)), _ULong___init__impl__c78o9k(new Long(11754943, 0))]));
    var tmp_52 = new ULongArray(tmp$ret$52);
    var tmp$ret$53;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$53 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1868185600)), _ULong___init__impl__c78o9k(new Long(-1152111488, 176584897)), _ULong___init__impl__c78o9k(new Long(117549435, 0))]));
    var tmp_53 = new ULongArray(tmp$ret$53);
    var tmp$ret$54;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$54 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1501986816)), _ULong___init__impl__c78o9k(new Long(1363787016, 1765848977)), _ULong___init__impl__c78o9k(new Long(1175494350, 0))]));
    var tmp_54 = new ULongArray(tmp$ret$54);
    var tmp$ret$55;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$55 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2134966272)), _ULong___init__impl__c78o9k(new Long(752968278, 478620589)), _ULong___init__impl__c78o9k(new Long(-1129958380, 2))]));
    var tmp_55 = new ULongArray(tmp$ret$55);
    var tmp$ret$56;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$56 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2022309888)), _ULong___init__impl__c78o9k(new Long(-1060251803, 491238595)), _ULong___init__impl__c78o9k(new Long(1585318090, 27))]));
    var tmp_56 = new ULongArray(tmp$ret$56);
    var tmp$ret$57;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$57 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 895746048)), _ULong___init__impl__c78o9k(new Long(-2012583429, 617418661)), _ULong___init__impl__c78o9k(new Long(-1326688282, 273))]));
    var tmp_57 = new ULongArray(tmp$ret$57);
    var tmp$ret$58;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$58 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 367525888)), _ULong___init__impl__c78o9k(new Long(1349002194, 1879219319)), _ULong___init__impl__c78o9k(new Long(-381980930, 2736))]));
    var tmp_58 = new ULongArray(tmp$ret$58);
    var tmp$ret$59;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$59 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1527775232)), _ULong___init__impl__c78o9k(new Long(605120053, 1612324009)), _ULong___init__impl__c78o9k(new Long(475158004, 27369))]));
    var tmp_59 = new ULongArray(tmp$ret$59);
    var tmp$ret$60;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$60 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 245366784)), _ULong___init__impl__c78o9k(new Long(1756233241, 1090854555)), _ULong___init__impl__c78o9k(new Long(456612751, 273691))]));
    var tmp_60 = new ULongArray(tmp$ret$60);
    var tmp$ret$61;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$61 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 306184192)), _ULong___init__impl__c78o9k(new Long(382463227, 171127314)), _ULong___init__impl__c78o9k(new Long(271160219, 2736911))]));
    var tmp_61 = new ULongArray(tmp$ret$61);
    var tmp$ret$62;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$62 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 914358272)), _ULong___init__impl__c78o9k(new Long(-470335025, 1711273140)), _ULong___init__impl__c78o9k(new Long(-1583365106, 27369110))]));
    var tmp_62 = new ULongArray(tmp$ret$62);
    var tmp$ret$63;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$63 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 553648128)), _ULong___init__impl__c78o9k(new Long(-408382950, 2080345872)), _ULong___init__impl__c78o9k(new Long(1346218131, 273691106))]));
    var tmp_63 = new ULongArray(tmp$ret$63);
    var tmp$ret$64;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$64 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1241513984)), _ULong___init__impl__c78o9k(new Long(211137798, 1476105897)), _ULong___init__impl__c78o9k(new Long(577279431, 589427415)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_64 = new ULongArray(tmp$ret$64);
    var tmp$ret$65;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$65 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1677721600)), _ULong___init__impl__c78o9k(new Long(2111377985, 1876157082)), _ULong___init__impl__c78o9k(new Long(1477827020, 1599306855)), _ULong___init__impl__c78o9k(new Long(12, 0))]));
    var tmp_65 = new ULongArray(tmp$ret$65);
    var tmp$ret$66;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$66 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1744830464)), _ULong___init__impl__c78o9k(new Long(-361056623, 1581701640)), _ULong___init__impl__c78o9k(new Long(1893368320, 960683017)), _ULong___init__impl__c78o9k(new Long(127, 0))]));
    var tmp_66 = new ULongArray(tmp$ret$66);
    var tmp$ret$67;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$67 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 268435456)), _ULong___init__impl__c78o9k(new Long(684401074, 784630873)), _ULong___init__impl__c78o9k(new Long(1753814023, 1016895582)), _ULong___init__impl__c78o9k(new Long(1274, 0))]));
    var tmp_67 = new ULongArray(tmp$ret$67);
    var tmp$ret$68;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$68 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 536870912)), _ULong___init__impl__c78o9k(new Long(-1745923851, 1403857787)), _ULong___init__impl__c78o9k(new Long(358271049, 1579021232)), _ULong___init__impl__c78o9k(new Long(12744, 0))]));
    var tmp_68 = new ULongArray(tmp$ret$68);
    var tmp$ret$69;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$69 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1073741824)), _ULong___init__impl__c78o9k(new Long(-279369324, 1153675987)), _ULong___init__impl__c78o9k(new Long(-712256800, 757826784)), _ULong___init__impl__c78o9k(new Long(127447, 0))]));
    var tmp_69 = new ULongArray(tmp$ret$69);
    var tmp$ret$70;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$70 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1501274061, 799341639)), _ULong___init__impl__c78o9k(new Long(1467366597, 1135816904)), _ULong___init__impl__c78o9k(new Long(1274473, 0))]));
    var tmp_70 = new ULongArray(tmp$ret$70);
    var tmp$ret$71;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$71 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2127838722, 1550965449)), _ULong___init__impl__c78o9k(new Long(1788764085, 620750803)), _ULong___init__impl__c78o9k(new Long(12744735, 0))]));
    var tmp_71 = new ULongArray(tmp$ret$71);
    var tmp$ret$72;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$72 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-196449260, 477268958)), _ULong___init__impl__c78o9k(new Long(707771673, 1912540738)), _ULong___init__impl__c78o9k(new Long(127447352, 0))]));
    var tmp_72 = new ULongArray(tmp$ret$72);
    var tmp$ret$73;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$73 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1964492600, 477722293)), _ULong___init__impl__c78o9k(new Long(-1512217860, 1945538197)), _ULong___init__impl__c78o9k(new Long(1274473528, 0))]));
    var tmp_73 = new ULongArray(tmp$ret$73);
    var tmp$ret$74;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$74 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1829910480, 482255639)), _ULong___init__impl__c78o9k(new Long(2057690586, 128029144)), _ULong___init__impl__c78o9k(new Long(-140166599, 2))]));
    var tmp_74 = new ULongArray(tmp$ret$74);
    var tmp$ret$75;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$75 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1119235616, 527589098)), _ULong___init__impl__c78o9k(new Long(-897930618, 1280291444)), _ULong___init__impl__c78o9k(new Long(-1401665990, 29))]));
    var tmp_75 = new ULongArray(tmp$ret$75);
    var tmp$ret$76;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$76 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1692545728, 980923686)), _ULong___init__impl__c78o9k(new Long(-389371586, 2065496207)), _ULong___init__impl__c78o9k(new Long(-1131758007, 296))]));
    var tmp_76 = new ULongArray(tmp$ret$76);
    var tmp$ret$77;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$77 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(254411904, 1219302274)), _ULong___init__impl__c78o9k(new Long(401251440, 1327609247)), _ULong___init__impl__c78o9k(new Long(1567321827, 2967))]));
    var tmp_77 = new ULongArray(tmp$ret$77);
    var tmp$ret$78;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$78 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1750848256, 1455604500)), _ULong___init__impl__c78o9k(new Long(-282452891, 391190582)), _ULong___init__impl__c78o9k(new Long(-1506650908, 29673))]));
    var tmp_78 = new ULongArray(tmp$ret$78);
    var tmp$ret$79;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$79 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-328613376, 1671143117)), _ULong___init__impl__c78o9k(new Long(1470438392, 1764422181)), _ULong___init__impl__c78o9k(new Long(2113360105, 296736))]));
    var tmp_79 = new ULongArray(tmp$ret$79);
    var tmp$ret$80;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$80 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1008833536, 1679045643)), _ULong___init__impl__c78o9k(new Long(1819482039, 464352629)), _ULong___init__impl__c78o9k(new Long(-341235422, 2967364))]));
    var tmp_80 = new ULongArray(tmp$ret$80);
    var tmp$ret$81;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$81 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1498400768, 1758070896)), _ULong___init__impl__c78o9k(new Long(1014951213, 348558998)), _ULong___init__impl__c78o9k(new Long(882613078, 29673649))]));
    var tmp_81 = new ULongArray(tmp$ret$81);
    var tmp$ret$82;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$82 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2099105792, 400839779)), _ULong___init__impl__c78o9k(new Long(1559577546, 1338106334)), _ULong___init__impl__c78o9k(new Long(236196189, 296736492))]));
    var tmp_82 = new ULongArray(tmp$ret$82);
    var tmp$ret$83;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$83 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-483778560, 1860914146)), _ULong___init__impl__c78o9k(new Long(-1584093723, 496161455)), _ULong___init__impl__c78o9k(new Long(-1933005400, 819881272)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_83 = new ULongArray(tmp$ret$83);
    var tmp$ret$84;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$84 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-542818304, 1429272284)), _ULong___init__impl__c78o9k(new Long(1338931962, 666647260)), _ULong___init__impl__c78o9k(new Long(2144782482, 1756361781)), _ULong___init__impl__c78o9k(new Long(13, 0))]));
    var tmp_84 = new ULongArray(tmp$ret$84);
    var tmp$ret$85;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$85 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1133215744, 1407820960)), _ULong___init__impl__c78o9k(new Long(504417738, 224021659)), _ULong___init__impl__c78o9k(new Long(-27011657, 383748630)), _ULong___init__impl__c78o9k(new Long(138, 0))]));
    var tmp_85 = new ULongArray(tmp$ret$85);
    var tmp$ret$86;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$86 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1552744448, 1193307719)), _ULong___init__impl__c78o9k(new Long(749210090, 92732943)), _ULong___init__impl__c78o9k(new Long(-270116569, 1690002661)), _ULong___init__impl__c78o9k(new Long(1381, 0))]));
    var tmp_86 = new ULongArray(tmp$ret$86);
    var tmp$ret$87;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$87 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1652424704, 1195658953)), _ULong___init__impl__c78o9k(new Long(-1097833687, 927329431)), _ULong___init__impl__c78o9k(new Long(1593801606, 1867641083)), _ULong___init__impl__c78o9k(new Long(13817, 0))]));
    var tmp_87 = new ULongArray(tmp$ret$87);
    var tmp$ret$88;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$88 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(655622144, 1219171296)), _ULong___init__impl__c78o9k(new Long(1906565023, 683359725)), _ULong___init__impl__c78o9k(new Long(-1241853120, 1496541649)), _ULong___init__impl__c78o9k(new Long(138178, 0))]));
    var tmp_88 = new ULongArray(tmp$ret$88);
    var tmp$ret$89;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$89 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2033713152, 1454294721)), _ULong___init__impl__c78o9k(new Long(1885781051, 391146310)), _ULong___init__impl__c78o9k(new Long(466370691, 2080514609)), _ULong___init__impl__c78o9k(new Long(1381786, 0))]));
    var tmp_89 = new ULongArray(tmp$ret$89);
    var tmp$ret$90;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$90 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1137704960, 1658045327)), _ULong___init__impl__c78o9k(new Long(1677941332, 1763979456)), _ULong___init__impl__c78o9k(new Long(368739615, 1477793259)), _ULong___init__impl__c78o9k(new Long(13817869, 0))]));
    var tmp_90 = new ULongArray(tmp$ret$90);
    var tmp$ret$91;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$91 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1507852288, 1548067736)), _ULong___init__impl__c78o9k(new Long(-400455857, 459925379)), _ULong___init__impl__c78o9k(new Long(-607571138, 1893030702)), _ULong___init__impl__c78o9k(new Long(138178696, 0))]));
    var tmp_91 = new ULongArray(tmp$ret$91);
    var tmp$ret$92;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$92 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2101346304, 448291830)), _ULong___init__impl__c78o9k(new Long(290408733, 304286503)), _ULong___init__impl__c78o9k(new Long(-1780744082, 1750437844)), _ULong___init__impl__c78o9k(new Long(1381786968, 0))]));
    var tmp_92 = new ULongArray(tmp$ret$92);
    var tmp$ret$93;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$93 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-461373440, 187951008)), _ULong___init__impl__c78o9k(new Long(-1390879964, 895381382)), _ULong___init__impl__c78o9k(new Long(-627571635, 324509261)), _ULong___init__impl__c78o9k(new Long(932967800, 3))]));
    var tmp_93 = new ULongArray(tmp$ret$93);
    var tmp$ret$94;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$94 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-318767104, 1879510088)), _ULong___init__impl__c78o9k(new Long(-1023897752, 363879234)), _ULong___init__impl__c78o9k(new Long(-1980749050, 1097608970)), _ULong___init__impl__c78o9k(new Long(739743409, 32))]));
    var tmp_94 = new ULongArray(tmp$ret$94);
    var tmp$ret$95;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$95 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1107296256, 1615231705)), _ULong___init__impl__c78o9k(new Long(-1649042920, 1491308699)), _ULong___init__impl__c78o9k(new Long(1667345981, 238671465)), _ULong___init__impl__c78o9k(new Long(-1192500497, 321))]));
    var tmp_95 = new ULongArray(tmp$ret$95);
    var tmp$ret$96;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$96 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1811939328, 1119931516)), _ULong___init__impl__c78o9k(new Long(689439991, 2028185108)), _ULong___init__impl__c78o9k(new Long(-506409368, 239231005)), _ULong___init__impl__c78o9k(new Long(959896919, 3217))]));
    var tmp_96 = new ULongArray(tmp$ret$96);
    var tmp$ret$97;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$97 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-939524096, 461896925)), _ULong___init__impl__c78o9k(new Long(-1695534677, 954498249)), _ULong___init__impl__c78o9k(new Long(-769126375, 244826410)), _ULong___init__impl__c78o9k(new Long(1009034599, 32172))]));
    var tmp_97 = new ULongArray(tmp$ret$97);
    var tmp$ret$98;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$98 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-805306368, 324001961)), _ULong___init__impl__c78o9k(new Long(224522416, 955047904)), _ULong___init__impl__c78o9k(new Long(898670846, 300780460)), _ULong___init__impl__c78o9k(new Long(1500411399, 321722))]));
    var tmp_98 = new ULongArray(tmp$ret$98);
    var tmp$ret$99;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$99 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(536870912, 1092535970)), _ULong___init__impl__c78o9k(new Long(-2049743135, 960544448)), _ULong___init__impl__c78o9k(new Long(396773872, 860320954)), _ULong___init__impl__c78o9k(new Long(2119212103, 3217223))]));
    var tmp_99 = new ULongArray(tmp$ret$99);
    var tmp$ret$100;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$100 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1073741824, 187941461)), _ULong___init__impl__c78o9k(new Long(977405135, 1015509893)), _ULong___init__impl__c78o9k(new Long(-327228572, 13274948)), _ULong___init__impl__c78o9k(new Long(-282715446, 32172234))]));
    var tmp_100 = new ULongArray(tmp$ret$100);
    var tmp$ret$101;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$101 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2147483648, 1879414612)), _ULong___init__impl__c78o9k(new Long(1184116758, 1565164340)), _ULong___init__impl__c78o9k(new Long(1022681580, 132749489)), _ULong___init__impl__c78o9k(new Long(1467812836, 321722349))]));
    var tmp_101 = new ULongArray(tmp$ret$101);
    var tmp$ret$102;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$102 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1614276941)), _ULong___init__impl__c78o9k(new Long(-1043734300, 619257866)), _ULong___init__impl__c78o9k(new Long(1636881215, 1327494892)), _ULong___init__impl__c78o9k(new Long(1793226472, 1069739845)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_102 = new ULongArray(tmp$ret$102);
    var tmp$ret$103;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$103 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1110383874)), _ULong___init__impl__c78o9k(new Long(-1847408401, 1897611371)), _ULong___init__impl__c78o9k(new Long(-811057032, 390047035)), _ULong___init__impl__c78o9k(new Long(752395542, 2107463862)), _ULong___init__impl__c78o9k(new Long(14, 0))]));
    var tmp_103 = new ULongArray(tmp$ret$103);
    var tmp$ret$104;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$104 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 366420500)), _ULong___init__impl__c78o9k(new Long(-1294214821, 1796244531)), _ULong___init__impl__c78o9k(new Long(479364280, 1752986710)), _ULong___init__impl__c78o9k(new Long(-1065979171, 1747285789)), _ULong___init__impl__c78o9k(new Long(149, 0))]));
    var tmp_104 = new ULongArray(tmp$ret$104);
    var tmp$ret$105;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$105 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1516721352)), _ULong___init__impl__c78o9k(new Long(-57246321, 782576132)), _ULong___init__impl__c78o9k(new Long(498675512, 349997917)), _ULong___init__impl__c78o9k(new Long(-2069857110, 292988713)), _ULong___init__impl__c78o9k(new Long(1498, 0))]));
    var tmp_105 = new ULongArray(tmp$ret$105);
    var tmp$ret$106;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$106 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 134827984)), _ULong___init__impl__c78o9k(new Long(-572463203, 1383310385)), _ULong___init__impl__c78o9k(new Long(691787827, 1352495523)), _ULong___init__impl__c78o9k(new Long(776265381, 782403487)), _ULong___init__impl__c78o9k(new Long(14981, 0))]));
    var tmp_106 = new ULongArray(tmp$ret$106);
    var tmp$ret$107;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$107 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1348279840)), _ULong___init__impl__c78o9k(new Long(-1429664734, 948201970)), _ULong___init__impl__c78o9k(new Long(-1672056316, 640053343)), _ULong___init__impl__c78o9k(new Long(-827280776, 1381583927)), _ULong___init__impl__c78o9k(new Long(149813, 0))]));
    var tmp0_arrayOf = [tmp_7, tmp_8, tmp_9, tmp_10, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_19, tmp_20, tmp_21, tmp_22, tmp_23, tmp_24, tmp_25, tmp_26, tmp_27, tmp_28, tmp_29, tmp_30, tmp_31, tmp_32, tmp_33, tmp_34, tmp_35, tmp_36, tmp_37, tmp_38, tmp_39, tmp_40, tmp_41, tmp_42, tmp_43, tmp_44, tmp_45, tmp_46, tmp_47, tmp_48, tmp_49, tmp_50, tmp_51, tmp_52, tmp_53, tmp_54, tmp_55, tmp_56, tmp_57, tmp_58, tmp_59, tmp_60, tmp_61, tmp_62, tmp_63, tmp_64, tmp_65, tmp_66, tmp_67, tmp_68, tmp_69, tmp_70, tmp_71, tmp_72, tmp_73, tmp_74, tmp_75, tmp_76, tmp_77, tmp_78, tmp_79, tmp_80, tmp_81, tmp_82, tmp_83, tmp_84, tmp_85, tmp_86, tmp_87, tmp_88, tmp_89, tmp_90, tmp_91, tmp_92, tmp_93, tmp_94, tmp_95, tmp_96, tmp_97, tmp_98, tmp_99, tmp_100, tmp_101, tmp_102, tmp_103, tmp_104, tmp_105, tmp_106, new ULongArray(tmp$ret$107)];
    var tmp$ret$109;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$108;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$108 = tmp0_arrayOf;
    tmp$ret$109 = tmp$ret$108;
    tmp$ret$110 = tmp$ret$109;
    tmp_6.kt_1 = tmp$ret$110;
  }
  BigInteger63Arithmetic.prototype.es = function () {
    return this.us_1;
  };
  BigInteger63Arithmetic.prototype.fs = function () {
    return this.vs_1;
  };
  BigInteger63Arithmetic.prototype.gs = function () {
    return this.ws_1;
  };
  BigInteger63Arithmetic.prototype.hs = function () {
    return this.xs_1;
  };
  BigInteger63Arithmetic.prototype.kv = function () {
    return this.zs_1;
  };
  BigInteger63Arithmetic.prototype.ax = function () {
    return this.bt_1;
  };
  BigInteger63Arithmetic.prototype.bx = function (value) {
    var x = value;
    var y;
    var n = 63;
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.shr' call
    var tmp0_shr = x;
    tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_shr).k7(32));
    y = tmp$ret$0;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 32 | 0;
      x = y;
    }
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.shr' call
    var tmp1_shr = x;
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_shr).k7(16));
    y = tmp$ret$1;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 16 | 0;
      x = y;
    }
    var tmp$ret$2;
    // Inline function 'kotlin.ULong.shr' call
    var tmp2_shr = x;
    tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2_shr).k7(8));
    y = tmp$ret$2;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 8 | 0;
      x = y;
    }
    var tmp$ret$3;
    // Inline function 'kotlin.ULong.shr' call
    var tmp3_shr = x;
    tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_shr).k7(4));
    y = tmp$ret$3;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 4 | 0;
      x = y;
    }
    var tmp$ret$4;
    // Inline function 'kotlin.ULong.shr' call
    var tmp4_shr = x;
    tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_shr).k7(2));
    y = tmp$ret$4;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 2 | 0;
      x = y;
    }
    var tmp$ret$5;
    // Inline function 'kotlin.ULong.shr' call
    var tmp5_shr = x;
    tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5_shr).k7(1));
    y = tmp$ret$5;
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      return n - 2 | 0;
    }
    var tmp = n;
    var tmp$ret$6;
    // Inline function 'kotlin.ULong.toInt' call
    var tmp6_toInt = x;
    tmp$ret$6 = _ULong___get_data__impl__fggpzb(tmp6_toInt).z6();
    return tmp - tmp$ret$6 | 0;
  };
  BigInteger63Arithmetic.prototype.bu = function (value) {
    if (isZero(value, this)) {
      return 0;
    }
    var start = (_ULongArray___get_size__impl__ju6dtr(value) - this.tw(value) | 0) - 1 | 0;
    var mostSignificant = ULongArray__get_impl_pr71q9(value, start);
    return this.cx(mostSignificant) + imul(start, 63) | 0;
  };
  BigInteger63Arithmetic.prototype.cx = function (value) {
    return 63 - this.bx(value) | 0;
  };
  BigInteger63Arithmetic.prototype.lt = function (bigInteger) {
    var correctedSize = _ULongArray___get_size__impl__ju6dtr(bigInteger) - this.tw(bigInteger) | 0;
    if (correctedSize === 0) {
      return this.us_1;
    }
    if (_ULongArray___get_size__impl__ju6dtr(bigInteger) === correctedSize) {
      return bigInteger;
    }
    if ((_ULongArray___get_size__impl__ju6dtr(bigInteger) - correctedSize | 0) > 1000) {
      println('RLZ original array : ' + _ULongArray___get_size__impl__ju6dtr(bigInteger) + ' contains: ' + ((_ULongArray___get_size__impl__ju6dtr(bigInteger) - correctedSize | 0) - 1 | 0) + ' zeros');
    }
    var tmp$ret$0;
    // Inline function 'kotlin.collections.copyOfRange' call
    tmp$ret$0 = _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(bigInteger), 0, correctedSize));
    return tmp$ret$0;
  };
  BigInteger63Arithmetic.prototype.tw = function (bigInteger) {
    var lastNonEmptyIndex = _ULongArray___get_size__impl__ju6dtr(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    while (equals(element, _ULong___init__impl__c78o9k(new Long(0, 0))) ? lastNonEmptyIndex > 0 : false) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    }
    if (equals(ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex), _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_ULongArray___get_size__impl__ju6dtr(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  BigInteger63Arithmetic.prototype.dx = function (operand, places) {
    if (isZero(operand, this)) {
      return operand;
    }
    if (places === 0) {
      return operand;
    }
    if (ULongArray__isEmpty_impl_c3yngu(operand)) {
      return this.us_1;
    }
    var leadingZeroWords = this.tw(operand);
    if (_ULongArray___get_size__impl__ju6dtr(operand) === leadingZeroWords) {
      return this.us_1;
    }
    var originalSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var leadingZeros = this.bx(ULongArray__get_impl_pr71q9(operand, originalSize - 1 | 0));
    var shiftWords = places / this.zs_1 | 0;
    var shiftBits = places % this.zs_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      var tmp$ret$3;
      // Inline function 'kotlin.ULongArray' call
      var tmp0_ULongArray = originalSize + wordsNeeded | 0;
      var tmp_0 = 0;
      var tmp_1 = tmp0_ULongArray;
      var tmp_2 = longArray(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp$ret$2;
        // Inline function 'kotlin.ULongArray.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'kotlin.ULong.toLong' call
        var tmp$ret$0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
        var tmp0_subject = tmp_3;
        tmp$ret$0 = (0 <= tmp0_subject ? tmp0_subject < shiftWords : false) ? _ULong___init__impl__c78o9k(new Long(0, 0)) : ULongArray__get_impl_pr71q9(operand, tmp_3 - shiftWords | 0);
        var tmp0_toLong = tmp$ret$0;
        tmp$ret$1 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
        tmp$ret$2 = tmp$ret$1;
        tmp_2[tmp_3] = tmp$ret$2;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_2);
      return tmp$ret$3;
    }
    var tmp$ret$14;
    // Inline function 'kotlin.ULongArray' call
    var tmp1_ULongArray = originalSize + wordsNeeded | 0;
    var tmp_4 = 0;
    var tmp_5 = tmp1_ULongArray;
    var tmp_6 = longArray(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      var tmp$ret$13;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$12;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$11;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
      var tmp0_subject_0 = tmp_7;
      var tmp_8;
      if (0 <= tmp0_subject_0 ? tmp0_subject_0 < shiftWords : false) {
        tmp_8 = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        if (tmp0_subject_0 === shiftWords) {
          var tmp$ret$5;
          // Inline function 'kotlin.ULong.and' call
          var tmp$ret$4;
          // Inline function 'kotlin.ULong.shl' call
          var tmp0_shl = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
          tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_shl).j7(shiftBits));
          var tmp1_and = tmp$ret$4;
          var tmp2_and = BigInteger63Arithmetic_getInstance().bt_1;
          tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_and).s6(_ULong___get_data__impl__fggpzb(tmp2_and)));
          tmp_8 = tmp$ret$5;
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp0_subject_0 < (originalSize + shiftWords | 0) ? containsLower <= tmp0_subject_0 : false) {
            var tmp$ret$9;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$7;
            // Inline function 'kotlin.ULong.and' call
            var tmp$ret$6;
            // Inline function 'kotlin.ULong.shl' call
            var tmp3_shl = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
            tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_shl).j7(shiftBits));
            var tmp4_and = tmp$ret$6;
            var tmp5_and = BigInteger63Arithmetic_getInstance().bt_1;
            tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_and).s6(_ULong___get_data__impl__fggpzb(tmp5_and)));
            var tmp8_or = tmp$ret$7;
            var tmp$ret$8;
            // Inline function 'kotlin.ULong.shr' call
            var tmp6_shr = ULongArray__get_impl_pr71q9(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            var tmp7_shr = BigInteger63Arithmetic_getInstance().zs_1 - shiftBits | 0;
            tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6_shr).k7(tmp7_shr));
            var tmp9_or = tmp$ret$8;
            tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8_or).l7(_ULong___get_data__impl__fggpzb(tmp9_or)));
            tmp_8 = tmp$ret$9;
          } else {
            if (tmp0_subject_0 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              var tmp$ret$10;
              // Inline function 'kotlin.ULong.shr' call
              var tmp10_shr = ULongArray__get_impl_pr71q9(operand, tmp_7 - wordsNeeded | 0);
              var tmp11_shr = BigInteger63Arithmetic_getInstance().zs_1 - shiftBits | 0;
              tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10_shr).k7(tmp11_shr));
              tmp_8 = tmp$ret$10;
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      tmp$ret$11 = tmp_8;
      var tmp0_toLong_0 = tmp$ret$11;
      tmp$ret$12 = _ULong___get_data__impl__fggpzb(tmp0_toLong_0);
      tmp$ret$13 = tmp$ret$12;
      tmp_6[tmp_7] = tmp$ret$13;
      tmp_4 = tmp_4 + 1 | 0;
    }
    tmp$ret$14 = _ULongArray___init__impl__twm1l3(tmp_6);
    return tmp$ret$14;
  };
  BigInteger63Arithmetic.prototype.ex = function (operand, places) {
    if (ULongArray__isEmpty_impl_c3yngu(operand) ? true : places === 0) {
      return operand;
    }
    var leadingZeroWords = this.tw(operand);
    var realOperandSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var shiftBits = places % this.zs_1 | 0;
    var wordsToDiscard = places / this.zs_1 | 0;
    if (wordsToDiscard >= realOperandSize) {
      return this.us_1;
    }
    if (shiftBits === 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyOfRange' call
      var tmp0_copyOfRange = realOperandSize - wordsToDiscard | 0;
      tmp$ret$0 = _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(operand), tmp0_copyOfRange, realOperandSize));
    }
    if (realOperandSize > 1 ? (realOperandSize - wordsToDiscard | 0) === 1 : false) {
      var tmp$ret$2;
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.shr' call
      var tmp1_shr = ULongArray__get_impl_pr71q9(operand, realOperandSize - 1 | 0);
      tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_shr).k7(shiftBits));
      var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
      tmp$ret$2 = tmp2_ulongArrayOf;
      return tmp$ret$2;
    }
    var newLength = realOperandSize - wordsToDiscard | 0;
    if (newLength === 0) {
      return this.us_1;
    }
    var tmp$ret$11;
    // Inline function 'kotlin.ULongArray' call
    var tmp3_ULongArray = realOperandSize - wordsToDiscard | 0;
    var tmp = 0;
    var tmp_0 = tmp3_ULongArray;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$10;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$9;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$8;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftRight.<anonymous>' call
      var tmp0_subject = tmp_2;
      var tmp_3;
      if (0 <= tmp0_subject ? tmp0_subject < ((realOperandSize - 1 | 0) - wordsToDiscard | 0) : false) {
        var tmp$ret$6;
        // Inline function 'kotlin.ULong.or' call
        var tmp$ret$3;
        // Inline function 'kotlin.ULong.shr' call
        var tmp0_shr = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_shr).k7(shiftBits));
        var tmp5_or = tmp$ret$3;
        var tmp$ret$5;
        // Inline function 'kotlin.ULong.and' call
        var tmp$ret$4;
        // Inline function 'kotlin.ULong.shl' call
        var tmp1_shl = ULongArray__get_impl_pr71q9(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        var tmp2_shl = BigInteger63Arithmetic_getInstance().zs_1 - shiftBits | 0;
        tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_shl).j7(tmp2_shl));
        var tmp3_and = tmp$ret$4;
        var tmp4_and = BigInteger63Arithmetic_getInstance().bt_1;
        tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_and).s6(_ULong___get_data__impl__fggpzb(tmp4_and)));
        var tmp6_or = tmp$ret$5;
        tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5_or).l7(_ULong___get_data__impl__fggpzb(tmp6_or)));
        tmp_3 = tmp$ret$6;
      } else if (tmp0_subject === ((realOperandSize - 1 | 0) - wordsToDiscard | 0)) {
        var tmp$ret$7;
        // Inline function 'kotlin.ULong.shr' call
        var tmp7_shr = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_shr).k7(shiftBits));
        tmp_3 = tmp$ret$7;
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      tmp$ret$8 = tmp_3;
      var tmp0_toLong = tmp$ret$8;
      tmp$ret$9 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
      tmp$ret$10 = tmp$ret$9;
      tmp_1[tmp_2] = tmp$ret$10;
      tmp = tmp + 1 | 0;
    }
    tmp$ret$11 = _ULongArray___init__impl__twm1l3(tmp_1);
    var result = tmp$ret$11;
    return result;
  };
  BigInteger63Arithmetic.prototype.fx = function (first, second, firstStart, secondStart) {
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.ULong.compareTo' call
      var tmp0_compareTo = ULongArray__get_impl_pr71q9(first, counter);
      var tmp1_compareTo = ULongArray__get_impl_pr71q9(second, counter);
      tmp$ret$0 = ulongCompare(_ULong___get_data__impl__fggpzb(tmp0_compareTo), _ULong___get_data__impl__fggpzb(tmp1_compareTo));
      if (tmp$ret$0 > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.compareTo' call
      var tmp2_compareTo = ULongArray__get_impl_pr71q9(first, counter);
      var tmp3_compareTo = ULongArray__get_impl_pr71q9(second, counter);
      tmp$ret$1 = ulongCompare(_ULong___get_data__impl__fggpzb(tmp2_compareTo), _ULong___get_data__impl__fggpzb(tmp3_compareTo));
      if (tmp$ret$1 < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp0 = counter;
      counter = tmp0 - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  BigInteger63Arithmetic.prototype.rs = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.tw(second) | 0;
    return this.fx(first, second, firstStart, secondStart);
  };
  BigInteger63Arithmetic.prototype.gx = function (resultArray, resultArrayStart, first, second) {
    if (isZero(first, this)) {
      var tmp$ret$5;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = _ULongArray___get_size__impl__ju6dtr(first);
      var tmp$ret$4;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto_0 = _ULongArray___get_storage__impl__28e64j(first);
      var tmp1_copyInto = _ULongArray___get_storage__impl__28e64j(resultArray);
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_copyInto_0;
      tmp$ret$1 = tmp$ret$0;
      var tmp = tmp$ret$1;
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = tmp1_copyInto;
      tmp$ret$3 = tmp$ret$2;
      arrayCopy(tmp, tmp$ret$3, resultArrayStart, 0, tmp0_copyInto);
      tmp$ret$4 = tmp1_copyInto;
      tmp$ret$5 = resultArray;
      return Unit_getInstance();
    }
    if (isZero(second, this)) {
      var tmp$ret$11;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto_0 = _ULongArray___get_size__impl__ju6dtr(second);
      var tmp$ret$10;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto_1 = _ULongArray___get_storage__impl__28e64j(second);
      var tmp1_copyInto_1 = _ULongArray___get_storage__impl__28e64j(resultArray);
      var tmp$ret$7;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$6;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$6 = tmp0_copyInto_1;
      tmp$ret$7 = tmp$ret$6;
      var tmp_0 = tmp$ret$7;
      var tmp$ret$9;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$8;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$8 = tmp1_copyInto_1;
      tmp$ret$9 = tmp$ret$8;
      arrayCopy(tmp_0, tmp$ret$9, resultArrayStart, 0, tmp1_copyInto_0);
      tmp$ret$10 = tmp1_copyInto_1;
      tmp$ret$11 = resultArray;
      return Unit_getInstance();
    }
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.tw(second) | 0;
    var tmp_1;
    if (firstStart > secondStart) {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp_1;
    var largerLength = tmp0_container.w3();
    var smallerLength = tmp0_container.x3();
    var largerData = tmp0_container.r6().q7_1;
    var smallerData = tmp0_container.mu().q7_1;
    var largerStart = tmp0_container.nu();
    var smallerStart = tmp0_container.ou();
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      var tmp$ret$13;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$12;
      // Inline function 'kotlin.ULong.plus' call
      var tmp2_plus = sum;
      var tmp3_plus = ULongArray__get_impl_pr71q9(largerData, i);
      tmp$ret$12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2_plus).x5(_ULong___get_data__impl__fggpzb(tmp3_plus)));
      var tmp4_plus = tmp$ret$12;
      var tmp5_plus = ULongArray__get_impl_pr71q9(smallerData, i);
      tmp$ret$13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_plus).x5(_ULong___get_data__impl__fggpzb(tmp5_plus)));
      sum = tmp$ret$13;
      var tmp_2 = i + resultArrayStart | 0;
      var tmp$ret$14;
      // Inline function 'kotlin.ULong.and' call
      var tmp6_and = sum;
      var tmp7_and = this.bt_1;
      tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6_and).s6(_ULong___get_data__impl__fggpzb(tmp7_and)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_2, tmp$ret$14);
      var tmp$ret$15;
      // Inline function 'kotlin.ULong.shr' call
      var tmp8_shr = sum;
      tmp$ret$15 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8_shr).k7(63));
      sum = tmp$ret$15;
      var tmp1 = i;
      i = tmp1 + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < largerStart) {
          ULongArray__set_impl_z19mvh(resultArray, i + resultArrayStart | 0, ULongArray__get_impl_pr71q9(largerData, i));
          var tmp2 = i;
          i = tmp2 + 1 | 0;
        }
        return Unit_getInstance();
      }
      if (i === largerLength) {
        ULongArray__set_impl_z19mvh(resultArray, largerLength + resultArrayStart | 0, sum);
        return Unit_getInstance();
      }
      var tmp$ret$16;
      // Inline function 'kotlin.ULong.plus' call
      var tmp9_plus = sum;
      var tmp10_plus = ULongArray__get_impl_pr71q9(largerData, i);
      tmp$ret$16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9_plus).x5(_ULong___get_data__impl__fggpzb(tmp10_plus)));
      sum = tmp$ret$16;
      var tmp_3 = i;
      var tmp$ret$17;
      // Inline function 'kotlin.ULong.and' call
      var tmp11_and = sum;
      var tmp12_and = this.bt_1;
      tmp$ret$17 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp11_and).s6(_ULong___get_data__impl__fggpzb(tmp12_and)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_3, tmp$ret$17);
      var tmp$ret$18;
      // Inline function 'kotlin.ULong.shr' call
      var tmp13_shr = sum;
      tmp$ret$18 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp13_shr).k7(63));
      sum = tmp$ret$18;
      var tmp3 = i;
      i = tmp3 + 1 | 0;
    }
  };
  BigInteger63Arithmetic.prototype.ot = function (first, second) {
    if (isZero(first, this))
      return second;
    if (isZero(second, this))
      return first;
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.tw(second) | 0;
    var tmp;
    if (firstStart > secondStart) {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp;
    var largerLength = tmp0_container.w3();
    var smallerLength = tmp0_container.x3();
    var largerData = tmp0_container.r6().q7_1;
    var smallerData = tmp0_container.mu().q7_1;
    var largerStart = tmp0_container.nu();
    var smallerStart = tmp0_container.ou();
    var tmp$ret$2;
    // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.possibleAdditionOverflow' call
    var firstMostSignificant = ULongArray__get_impl_pr71q9(largerData, largerStart - 1 | 0);
    var secondMostSignificant = ULongArray__get_impl_pr71q9(smallerData, smallerStart - 1 | 0);
    var tmp_0;
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.and' call
    var tmp0_and = firstMostSignificant;
    tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_and).s6(_ULong___get_data__impl__fggpzb(_ULong___init__impl__c78o9k(new Long(0, 1610612736)))));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      tmp_0 = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.and' call
      var tmp1_and = secondMostSignificant;
      tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_and).s6(_ULong___get_data__impl__fggpzb(_ULong___init__impl__c78o9k(new Long(0, 1610612736)))));
      tmp_0 = !equals(tmp$ret$1, _ULong___init__impl__c78o9k(new Long(0, 0)));
    }
    var possibleOverflow = tmp_0;
    tmp$ret$2 = possibleOverflow;
    var possibleOverflow_0 = tmp$ret$2;
    var tmp_1;
    if (possibleOverflow_0) {
      var tmp$ret$6;
      // Inline function 'kotlin.ULongArray' call
      var tmp2_ULongArray = largerLength + 1 | 0;
      var tmp_2 = 0;
      var tmp_3 = tmp2_ULongArray;
      var tmp_4 = longArray(tmp_3);
      while (tmp_2 < tmp_3) {
        var tmp_5 = tmp_2;
        var tmp$ret$5;
        // Inline function 'kotlin.ULongArray.<anonymous>' call
        var tmp$ret$4;
        // Inline function 'kotlin.ULong.toLong' call
        var tmp$ret$3;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        tmp$ret$3 = _ULong___init__impl__c78o9k(new Long(0, 0));
        var tmp0_toLong = tmp$ret$3;
        tmp$ret$4 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
        tmp$ret$5 = tmp$ret$4;
        tmp_4[tmp_5] = tmp$ret$5;
        tmp_2 = tmp_2 + 1 | 0;
      }
      tmp$ret$6 = _ULongArray___init__impl__twm1l3(tmp_4);
      tmp_1 = tmp$ret$6;
    } else {
      var tmp$ret$10;
      // Inline function 'kotlin.ULongArray' call
      var tmp_6 = 0;
      var tmp_7 = largerLength;
      var tmp_8 = longArray(tmp_7);
      while (tmp_6 < tmp_7) {
        var tmp_9 = tmp_6;
        var tmp$ret$9;
        // Inline function 'kotlin.ULongArray.<anonymous>' call
        var tmp$ret$8;
        // Inline function 'kotlin.ULong.toLong' call
        var tmp$ret$7;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        tmp$ret$7 = _ULong___init__impl__c78o9k(new Long(0, 0));
        var tmp0_toLong_0 = tmp$ret$7;
        tmp$ret$8 = _ULong___get_data__impl__fggpzb(tmp0_toLong_0);
        tmp$ret$9 = tmp$ret$8;
        tmp_8[tmp_9] = tmp$ret$9;
        tmp_6 = tmp_6 + 1 | 0;
      }
      tmp$ret$10 = _ULongArray___init__impl__twm1l3(tmp_8);
      tmp_1 = tmp$ret$10;
    }
    var result = tmp_1;
    this.gx(result, 0, first, second);
    var tmp_10;
    if (possibleOverflow_0) {
      tmp_10 = this.lt(result);
    } else {
      tmp_10 = result;
    }
    return tmp_10;
  };
  BigInteger63Arithmetic.prototype.hx = function (first, second, firstStart, secondStart) {
    var comparison = this.fx(first, second, firstStart, secondStart);
    var firstSize = firstStart + 1 | 0;
    var secondSize = secondStart + 1 | 0;
    var firstIsLarger = comparison === 1;
    if (comparison === 0)
      return this.us_1;
    if (secondSize === 1 ? equals(ULongArray__get_impl_pr71q9(second, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false) {
      return first;
    }
    if (!firstIsLarger) {
      throw RuntimeException_init_$Create$('subtract result less than zero');
    }
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Quadruple(new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp;
    var largerData = tmp0_container.w3().q7_1;
    var smallerData = tmp0_container.x3().q7_1;
    var largerStart = tmp0_container.r6();
    var smallerStart = tmp0_container.mu();
    var tmp$ret$3;
    // Inline function 'kotlin.ULongArray' call
    var tmp_0 = 0;
    var tmp_1 = largerStart;
    var tmp_2 = longArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$2;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.subtractWithStartIndexes.<anonymous>' call
      tmp$ret$0 = _ULong___init__impl__c78o9k(new Long(0, 0));
      var tmp0_toLong = tmp$ret$0;
      tmp$ret$1 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
      tmp$ret$2 = tmp$ret$1;
      tmp_2[tmp_3] = tmp$ret$2;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_2);
    var result = tmp$ret$3;
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      var tmp$ret$5;
      // Inline function 'kotlin.ULong.minus' call
      var tmp$ret$4;
      // Inline function 'kotlin.ULong.minus' call
      var tmp0_minus = ULongArray__get_impl_pr71q9(largerData, i);
      var tmp1_minus = ULongArray__get_impl_pr71q9(smallerData, i);
      tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_minus).y5(_ULong___get_data__impl__fggpzb(tmp1_minus)));
      var tmp2_minus = tmp$ret$4;
      var tmp3_minus = diff;
      tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2_minus).y5(_ULong___get_data__impl__fggpzb(tmp3_minus)));
      diff = tmp$ret$5;
      var tmp_4 = i;
      var tmp$ret$6;
      // Inline function 'kotlin.ULong.and' call
      var tmp4_and = diff;
      var tmp5_and = this.bt_1;
      tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_and).s6(_ULong___get_data__impl__fggpzb(tmp5_and)));
      ULongArray__set_impl_z19mvh(result, tmp_4, tmp$ret$6);
      var tmp$ret$7;
      // Inline function 'kotlin.ULong.shr' call
      var tmp6_shr = diff;
      tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6_shr).k7(63));
      diff = tmp$ret$7;
      var tmp1 = i;
      i = tmp1 + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      var tmp$ret$8;
      // Inline function 'kotlin.ULong.minus' call
      var tmp7_minus = ULongArray__get_impl_pr71q9(largerData, i);
      var tmp8_minus = diff;
      tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_minus).y5(_ULong___get_data__impl__fggpzb(tmp8_minus)));
      diff = tmp$ret$8;
      var tmp_5 = i;
      var tmp$ret$9;
      // Inline function 'kotlin.ULong.and' call
      var tmp9_and = diff;
      var tmp10_and = this.bt_1;
      tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9_and).s6(_ULong___get_data__impl__fggpzb(tmp10_and)));
      ULongArray__set_impl_z19mvh(result, tmp_5, tmp$ret$9);
      var tmp$ret$10;
      // Inline function 'kotlin.ULong.shr' call
      var tmp11_shr = diff;
      tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp11_shr).k7(63));
      diff = tmp$ret$10;
      var tmp2 = i;
      i = tmp2 + 1 | 0;
    }
    while (i < largerStart) {
      ULongArray__set_impl_z19mvh(result, i, ULongArray__get_impl_pr71q9(largerData, i));
      var tmp3 = i;
      i = tmp3 + 1 | 0;
    }
    if (this.tw(result) === (_ULongArray___get_size__impl__ju6dtr(result) - 1 | 0) ? equals(ULongArray__get_impl_pr71q9(result, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false) {
      return this.us_1;
    }
    return this.lt(result);
  };
  BigInteger63Arithmetic.prototype.nt = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.tw(second) | 0;
    return this.hx(first, second, firstStart, secondStart);
  };
  BigInteger63Arithmetic.prototype.ut = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    var secondCorrectedSize = _ULongArray___get_size__impl__ju6dtr(second) - this.tw(second) | 0;
    return multiplyWithCorrectedSize(this, first, second, firstCorrectedSize, secondCorrectedSize);
  };
  BigInteger63Arithmetic.prototype.ix = function (original, numberOfWords, value) {
    var tmp$ret$3;
    // Inline function 'kotlin.ULongArray' call
    var tmp0_ULongArray = _ULongArray___get_size__impl__ju6dtr(original) + numberOfWords | 0;
    var tmp = 0;
    var tmp_0 = tmp0_ULongArray;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$2;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.extendULongArray.<anonymous>' call
      tmp$ret$0 = tmp_2 < _ULongArray___get_size__impl__ju6dtr(original) ? ULongArray__get_impl_pr71q9(original, tmp_2) : value;
      var tmp0_toLong = tmp$ret$0;
      tmp$ret$1 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
      tmp$ret$2 = tmp$ret$1;
      tmp_1[tmp_2] = tmp$ret$2;
      tmp = tmp + 1 | 0;
    }
    tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_1);
    return tmp$ret$3;
  };
  BigInteger63Arithmetic.prototype.gw = function (firstUnchecked, secondUnchecked) {
    var tmp;
    if (!((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) % 3 | 0) === 0)) {
      var tmp_0 = new ULongArray(firstUnchecked);
      var tmp$ret$4;
      // Inline function 'kotlin.collections.asIterable' call
      var tmp$ret$3;
      // Inline function 'kotlin.ULongArray' call
      var tmp0_ULongArray = imul((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(firstUnchecked) | 0;
      var tmp_1 = 0;
      var tmp_2 = tmp0_ULongArray;
      var tmp_3 = longArray(tmp_2);
      while (tmp_1 < tmp_2) {
        var tmp_4 = tmp_1;
        var tmp$ret$2;
        // Inline function 'kotlin.ULongArray.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'kotlin.ULong.toLong' call
        var tmp$ret$0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        tmp$ret$0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        var tmp0_toLong = tmp$ret$0;
        tmp$ret$1 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
        tmp$ret$2 = tmp$ret$1;
        tmp_3[tmp_4] = tmp$ret$2;
        tmp_1 = tmp_1 + 1 | 0;
      }
      tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_3);
      var tmp1_asIterable = tmp$ret$3;
      tmp$ret$4 = new ULongArray(tmp1_asIterable);
      tmp = plus(tmp_0, tmp$ret$4);
    } else {
      tmp = new ULongArray(firstUnchecked);
    }
    var first = toULongArray(tmp);
    var tmp_5;
    if (!((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) % 3 | 0) === 0)) {
      var tmp_6 = new ULongArray(secondUnchecked);
      var tmp$ret$9;
      // Inline function 'kotlin.collections.asIterable' call
      var tmp$ret$8;
      // Inline function 'kotlin.ULongArray' call
      var tmp2_ULongArray = imul((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(secondUnchecked) | 0;
      var tmp_7 = 0;
      var tmp_8 = tmp2_ULongArray;
      var tmp_9 = longArray(tmp_8);
      while (tmp_7 < tmp_8) {
        var tmp_10 = tmp_7;
        var tmp$ret$7;
        // Inline function 'kotlin.ULongArray.<anonymous>' call
        var tmp$ret$6;
        // Inline function 'kotlin.ULong.toLong' call
        var tmp$ret$5;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        tmp$ret$5 = _ULong___init__impl__c78o9k(new Long(0, 0));
        var tmp0_toLong_0 = tmp$ret$5;
        tmp$ret$6 = _ULong___get_data__impl__fggpzb(tmp0_toLong_0);
        tmp$ret$7 = tmp$ret$6;
        tmp_9[tmp_10] = tmp$ret$7;
        tmp_7 = tmp_7 + 1 | 0;
      }
      tmp$ret$8 = _ULongArray___init__impl__twm1l3(tmp_9);
      var tmp3_asIterable = tmp$ret$8;
      tmp$ret$9 = new ULongArray(tmp3_asIterable);
      tmp_5 = plus(tmp_6, tmp$ret$9);
    } else {
      tmp_5 = new ULongArray(secondUnchecked);
    }
    var second = toULongArray(tmp_5);
    var firstLength = _ULongArray___get_size__impl__ju6dtr(first);
    var secondLength = _ULongArray___get_size__impl__ju6dtr(second);
    var tmp_11;
    if (firstLength > secondLength) {
      var prepared = this.ix(second, firstLength - secondLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_11 = new Pair(new ULongArray(first), new ULongArray(prepared));
    } else if (firstLength < secondLength) {
      var prepared_0 = this.ix(first, secondLength - firstLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_11 = new Pair(new ULongArray(prepared_0), new ULongArray(second));
    } else {
      tmp_11 = new Pair(new ULongArray(first), new ULongArray(second));
    }
    var tmp0_container = tmp_11;
    var firstPrepared = tmp0_container.w3().q7_1;
    var secondPrepared = tmp0_container.x3().q7_1;
    var tmp$ret$10;
    // Inline function 'kotlin.math.max' call
    var tmp4_max = _ULongArray___get_size__impl__ju6dtr(first);
    var tmp5_max = _ULongArray___get_size__impl__ju6dtr(second);
    tmp$ret$10 = Math.max(tmp4_max, tmp5_max);
    var longestLength = tmp$ret$10;
    var extendedDigit = (longestLength + 2 | 0) / 3 | 0;
    var m0 = new SignedULongArray(toULongArray(slice(firstPrepared, until(0, extendedDigit))), true);
    var m1 = new SignedULongArray(toULongArray(slice(firstPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var m2 = new SignedULongArray(toULongArray(slice(firstPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var n0 = new SignedULongArray(toULongArray(slice(secondPrepared, until(0, extendedDigit))), true);
    var n1 = new SignedULongArray(toULongArray(slice(secondPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var n2 = new SignedULongArray(toULongArray(slice(secondPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var p0 = this.ow(m0, m2);
    var pe0 = m0;
    var pe1 = this.ow(p0, m1);
    var pem1 = this.qw(p0, m1);
    var doublePemM2 = this.nw(this.ow(pem1, m2), this.jt_1);
    var pem2 = this.qw(doublePemM2, m0);
    var pinf = m2;
    var q0 = this.ow(n0, n2);
    var qe0 = n0;
    var qe1 = this.ow(q0, n1);
    var qem1 = this.qw(q0, n1);
    var doubleQemN2 = this.nw(this.ow(qem1, n2), this.jt_1);
    var qem2 = this.qw(doubleQemN2, n0);
    var qinf = n2;
    var re0 = this.nw(pe0, qe0);
    var re1 = this.nw(pe1, qe1);
    var rem1 = this.nw(pem1, qem1);
    var rem2 = this.nw(pem2, qem2);
    var rinf = this.nw(pinf, qinf);
    var r0 = re0;
    var r4 = rinf;
    var rem2re1diff = this.qw(rem2, re1);
    var tmp$ret$11;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(3, 0))]));
    var r3 = this.jx(rem2re1diff, new SignedULongArray(tmp$ret$11, true));
    var r1 = this.mw(this.qw(re1, rem1), 1);
    var r2 = this.qw(rem1, r0);
    r3 = this.ow(this.mw(this.qw(r2, r3), 1), this.nw(this.jt_1, rinf));
    r2 = this.qw(this.ow(r2, r1), r4);
    r1 = this.qw(r1, r3);
    var bShiftAmount = imul(extendedDigit, 63);
    var rb0 = r0;
    var rb1 = this.pw(r1, bShiftAmount);
    var rb2 = this.pw(r2, imul(bShiftAmount, 2));
    var rb3 = this.pw(r3, imul(bShiftAmount, 3));
    var rb4 = this.pw(r4, imul(bShiftAmount, 4));
    var rb = this.ow(this.ow(this.ow(this.ow(rb0, rb1), rb2), rb3), rb4);
    return rb.rw_1;
  };
  BigInteger63Arithmetic.prototype.hw = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.tw(first) | 0;
    return this.kx(first, second, firstCorrectedSize);
  };
  BigInteger63Arithmetic.prototype.kx = function (first, second, firstCorrectedSize) {
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.and' call
    var tmp0_and = this.dt_1;
    tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).s6(_ULong___get_data__impl__fggpzb(tmp0_and)));
    var secondLow = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.ULong.shr' call
    tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).k7(32));
    var secondHigh = tmp$ret$1;
    var requiredBits = this.bu(first) + this.cx(second) | 0;
    var tmp;
    if (!((requiredBits % 63 | 0) === 0)) {
      tmp = (requiredBits / 63 | 0) + 1 | 0;
    } else {
      tmp = requiredBits / 63 | 0;
    }
    var requiredWords = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredWords);
    var carryIntoNextRound = _ULong___init__impl__c78o9k(new Long(0, 0));
    var i = 0;
    var j = 0;
    while (i < firstCorrectedSize) {
      var tmp$ret$2;
      // Inline function 'kotlin.ULong.and' call
      var tmp1_and = ULongArray__get_impl_pr71q9(first, i);
      var tmp2_and = this.dt_1;
      tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_and).s6(_ULong___get_data__impl__fggpzb(tmp2_and)));
      var firstLow = tmp$ret$2;
      var tmp$ret$3;
      // Inline function 'kotlin.ULong.shr' call
      var tmp3_shr = ULongArray__get_impl_pr71q9(first, i);
      tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3_shr).k7(32));
      var firstHigh = tmp$ret$3;
      var tmp0 = i;
      i = tmp0 + 1 | 0;
      var tmp$ret$4;
      // Inline function 'kotlin.ULong.times' call
      tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).w5(_ULong___get_data__impl__fggpzb(secondLow)));
      var lowerProduct = tmp$ret$4;
      var tmp$ret$5;
      // Inline function 'kotlin.ULong.shr' call
      tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).k7(63));
      var lowerCarry = tmp$ret$5;
      var tmp$ret$7;
      // Inline function 'kotlin.ULong.plus' call
      var tmp5_plus = carryIntoNextRound;
      var tmp$ret$6;
      // Inline function 'kotlin.ULong.and' call
      var tmp4_and = this.bt_1;
      tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).s6(_ULong___get_data__impl__fggpzb(tmp4_and)));
      var tmp6_plus = tmp$ret$6;
      tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5_plus).x5(_ULong___get_data__impl__fggpzb(tmp6_plus)));
      var lowResult = tmp$ret$7;
      var tmp$ret$9;
      // Inline function 'kotlin.ULong.plus' call
      var tmp8_plus = lowerCarry;
      var tmp$ret$8;
      // Inline function 'kotlin.ULong.shr' call
      var tmp7_shr = lowResult;
      tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_shr).k7(63));
      var tmp9_plus = tmp$ret$8;
      tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8_plus).x5(_ULong___get_data__impl__fggpzb(tmp9_plus)));
      lowerCarry = tmp$ret$9;
      var tmp$ret$10;
      // Inline function 'kotlin.ULong.and' call
      var tmp10_and = lowResult;
      var tmp11_and = this.bt_1;
      tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10_and).s6(_ULong___get_data__impl__fggpzb(tmp11_and)));
      lowResult = tmp$ret$10;
      var tmp$ret$13;
      // Inline function 'kotlin.ULong.plus' call
      var tmp$ret$11;
      // Inline function 'kotlin.ULong.times' call
      tmp$ret$11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).w5(_ULong___get_data__impl__fggpzb(secondHigh)));
      var tmp12_plus = tmp$ret$11;
      var tmp$ret$12;
      // Inline function 'kotlin.ULong.times' call
      tmp$ret$12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(secondLow).w5(_ULong___get_data__impl__fggpzb(firstHigh)));
      var tmp13_plus = tmp$ret$12;
      tmp$ret$13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12_plus).x5(_ULong___get_data__impl__fggpzb(tmp13_plus)));
      var middleProduct = tmp$ret$13;
      var middleCarry = lowerCarry;
      var tmp$ret$15;
      // Inline function 'kotlin.ULong.plus' call
      var tmp14_plus = middleCarry;
      var tmp$ret$14;
      // Inline function 'kotlin.ULong.shr' call
      tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).k7(31));
      var tmp15_plus = tmp$ret$14;
      tmp$ret$15 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp14_plus).x5(_ULong___get_data__impl__fggpzb(tmp15_plus)));
      middleCarry = tmp$ret$15;
      var tmp$ret$18;
      // Inline function 'kotlin.ULong.plus' call
      var tmp18_plus = lowResult;
      var tmp$ret$17;
      // Inline function 'kotlin.ULong.and' call
      var tmp$ret$16;
      // Inline function 'kotlin.ULong.shl' call
      tmp$ret$16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).j7(32));
      var tmp16_and = tmp$ret$16;
      var tmp17_and = this.bt_1;
      tmp$ret$17 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp16_and).s6(_ULong___get_data__impl__fggpzb(tmp17_and)));
      var tmp19_plus = tmp$ret$17;
      tmp$ret$18 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp18_plus).x5(_ULong___get_data__impl__fggpzb(tmp19_plus)));
      lowResult = tmp$ret$18;
      var tmp$ret$20;
      // Inline function 'kotlin.ULong.plus' call
      var tmp21_plus = middleCarry;
      var tmp$ret$19;
      // Inline function 'kotlin.ULong.shr' call
      var tmp20_shr = lowResult;
      tmp$ret$19 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20_shr).k7(63));
      var tmp22_plus = tmp$ret$19;
      tmp$ret$20 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp21_plus).x5(_ULong___get_data__impl__fggpzb(tmp22_plus)));
      middleCarry = tmp$ret$20;
      var tmp_0 = j;
      var tmp$ret$21;
      // Inline function 'kotlin.ULong.and' call
      var tmp23_and = lowResult;
      var tmp24_and = this.bt_1;
      tmp$ret$21 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp23_and).s6(_ULong___get_data__impl__fggpzb(tmp24_and)));
      ULongArray__set_impl_z19mvh(result, tmp_0, tmp$ret$21);
      var highResult = middleCarry;
      var tmp$ret$23;
      // Inline function 'kotlin.ULong.shl' call
      var tmp$ret$22;
      // Inline function 'kotlin.ULong.times' call
      tmp$ret$22 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstHigh).w5(_ULong___get_data__impl__fggpzb(secondHigh)));
      var tmp25_shl = tmp$ret$22;
      tmp$ret$23 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp25_shl).j7(1));
      var higherProduct = tmp$ret$23;
      var tmp$ret$24;
      // Inline function 'kotlin.ULong.plus' call
      var tmp26_plus = highResult;
      tmp$ret$24 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp26_plus).x5(_ULong___get_data__impl__fggpzb(higherProduct)));
      highResult = tmp$ret$24;
      carryIntoNextRound = highResult;
      var tmp1 = j;
      j = tmp1 + 1 | 0;
    }
    if (!equals(carryIntoNextRound, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      ULongArray__set_impl_z19mvh(result, j, carryIntoNextRound);
    }
    return result;
  };
  BigInteger63Arithmetic.prototype.zt = function (base, exponent) {
    if (exponent.equals(new Long(0, 0))) {
      return this.vs_1;
    }
    if (exponent.equals(new Long(1, 0))) {
      return base;
    }
    if ((_ULongArray___get_size__impl__ju6dtr(base) === 1 ? equals(ULongArray__get_impl_pr71q9(base, 0), _ULong___init__impl__c78o9k(new Long(10, 0))) : false) ? exponent.v5(toLong(this.kt_1.length)) < 0 : false) {
      return this.kt_1[exponent.z6()].q7_1;
    }
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(base) - this.tw(base) | 0;
    var helperVar = this.vs_1;
    var exponentVar = exponent;
    var baseVar = base;
    while (exponentVar.v5(new Long(1, 0)) > 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.Long.rem' call
      var tmp0_rem = exponentVar;
      tmp$ret$0 = tmp0_rem.s7(new Long(2, 0));
      if (tmp$ret$0.equals(new Long(0, 0))) {
        baseVar = this.yw(baseVar, baseVar);
        var tmp$ret$1;
        // Inline function 'kotlin.Long.div' call
        var tmp1_div = exponentVar;
        tmp$ret$1 = tmp1_div.u5(new Long(2, 0));
        exponentVar = tmp$ret$1;
      } else {
        helperVar = this.yw(baseVar, helperVar);
        baseVar = this.yw(baseVar, baseVar);
        var tmp$ret$3;
        // Inline function 'kotlin.Long.div' call
        var tmp$ret$2;
        // Inline function 'kotlin.Long.minus' call
        var tmp2_minus = exponentVar;
        tmp$ret$2 = tmp2_minus.y5(new Long(1, 0));
        var tmp3_div = tmp$ret$2;
        tmp$ret$3 = tmp3_div.u5(new Long(2, 0));
        exponentVar = tmp$ret$3;
      }
    }
    return this.yw(helperVar, baseVar);
  };
  BigInteger63Arithmetic.prototype.lx = function (dividend, divisor) {
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var normalizationShift = this.bx(ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.iw(divisor, normalizationShift);
    var dividendNormalized = this.iw(dividend, normalizationShift);
    return new Triple(new ULongArray(dividendNormalized), new ULongArray(divisorNormalized), normalizationShift);
  };
  BigInteger63Arithmetic.prototype.mx = function (remainderNormalized, normalizationShift) {
    var remainder = this.nx(remainderNormalized, normalizationShift);
    return remainder;
  };
  BigInteger63Arithmetic.prototype.ox = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.xw(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new ULongArray(this.us_1), new ULongArray(unnormalizedDividend));
    }
    if (_ULongArray___get_size__impl__ju6dtr(unnormalizedDivisor) === 1 ? _ULongArray___get_size__impl__ju6dtr(unnormalizedDividend) === 1 : false) {
      var tmp$ret$1;
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$0;
      // Inline function 'kotlin.ULong.div' call
      var tmp0_div = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      var tmp1_div = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      tmp$ret$0 = ulongDivide(tmp0_div, tmp1_div);
      var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
      tmp$ret$1 = tmp2_ulongArrayOf;
      var tmp = new ULongArray(this.lt(tmp$ret$1));
      var tmp$ret$3;
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$2;
      // Inline function 'kotlin.ULong.rem' call
      var tmp3_rem = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      var tmp4_rem = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      tmp$ret$2 = ulongRemainder(tmp3_rem, tmp4_rem);
      var tmp5_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$2]));
      tmp$ret$3 = tmp5_ulongArrayOf;
      return new Pair(tmp, new ULongArray(this.lt(tmp$ret$3)));
    }
    var bitPrecision = this.bu(unnormalizedDividend) - this.bu(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(new ULongArray(this.vs_1), new ULongArray(this.ww(unnormalizedDividend, unnormalizedDivisor)));
    }
    var tmp0_container = this.lx(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp0_container.w3().q7_1;
    var divisor = tmp0_container.x3().q7_1;
    var normalizationShift = tmp0_container.r6();
    var dividendSize = _ULongArray___get_size__impl__ju6dtr(dividend);
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var divisorCorrectedSize = _ULongArray___get_size__impl__ju6dtr(divisor) - this.tw(divisor) | 0;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.iw(divisor, imul(wordPrecision, this.zs_1));
    if (this.xw(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision + 1 | 0);
      ULongArray__set_impl_z19mvh(quotient, wordPrecision, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.ww(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _ULongArray___get_size__impl__ju6dtr(dividend)) {
          var tmp$ret$4;
          // Inline function 'kotlin.ulongArrayOf' call
          var tmp6_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, divisorSize + j | 0)]));
          tmp$ret$4 = tmp6_ulongArrayOf;
          tmp_0 = this.px(this.iw(tmp$ret$4, this.zs_1), ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0));
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _ULongArray___get_size__impl__ju6dtr(dividend)) {
            var tmp$ret$5;
            // Inline function 'kotlin.ulongArrayOf' call
            var tmp7_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0)]));
            tmp$ret$5 = tmp7_ulongArrayOf;
            tmp_1 = tmp$ret$5;
          } else {
            tmp_1 = this.us_1;
          }
          tmp_0 = tmp_1;
        }
        var twoDigit = tmp_0;
        var tmp_2 = BigInteger32Arithmetic_getInstance();
        var tmp_3 = this.qx(twoDigit);
        var tmp$ret$6;
        // Inline function 'kotlin.ulongArrayOf' call
        var tmp8_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0)]));
        tmp$ret$6 = tmp8_ulongArrayOf;
        var convertedResult = tmp_2.aw(tmp_3, this.qx(tmp$ret$6));
        qjhat = this.rx(convertedResult.v4_1.d7_1);
        var tmp_4 = quotient;
        var tmp_5;
        var tmp_6 = qjhat;
        var tmp$ret$7;
        // Inline function 'kotlin.ULong.minus' call
        var tmp9_minus = this.bt_1;
        tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9_minus).y5(_ULong___get_data__impl__fggpzb(_ULong___init__impl__c78o9k(new Long(1, 0)))));
        if (this.sx(tmp_6, tmp$ret$7) < 0) {
          tmp_5 = ULongArray__get_impl_pr71q9(qjhat, 0);
        } else {
          tmp_5 = this.bt_1;
        }
        ULongArray__set_impl_z19mvh(tmp_4, j, tmp_5);
        reconstructedQuotient = this.iw(this.kx(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.zs_1));
        while (this.xw(reconstructedQuotient, dividend) > 0) {
          var tmp_7 = quotient;
          var tmp$ret$10;
          // Inline function 'kotlin.ULong.minus' call
          var tmp10_minus = ULongArray__get_impl_pr71q9(quotient, j);
          var tmp$ret$9;
          // Inline function 'kotlin.ULong.minus' call
          var tmp$ret$8;
          // Inline function 'kotlin.UInt.toULong' call
          tmp$ret$8 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(_UInt___init__impl__l7qpdl(1))).s6(new Long(-1, 0)));
          var tmp0_minus = tmp$ret$8;
          tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10_minus).y5(_ULong___get_data__impl__fggpzb(tmp0_minus)));
          tmp$ret$10 = tmp$ret$9;
          ULongArray__set_impl_z19mvh(tmp_7, j, tmp$ret$10);
          reconstructedQuotient = this.iw(this.kx(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.zs_1));
        }
        dividend = this.ww(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.xw(dividend, divisor) >= 0) {
      quotient = this.px(quotient, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.ww(dividend, divisor);
    }
    var denormRemainder = this.mx(dividend, normalizationShift);
    return new Pair(new ULongArray(this.lt(quotient)), new ULongArray(denormRemainder));
  };
  BigInteger63Arithmetic.prototype.tx = function (operand) {
    if (isZero(operand, this))
      return this.us_1;
    var length = this.bu(operand);
    var tmp;
    if ((length % 64 | 0) === 0) {
      tmp = length / 64 | 0;
    } else {
      tmp = (length / 64 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var wordStep;
    var shiftAmount;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        wordStep = i / 63 | 0;
        shiftAmount = i % 63 | 0;
        if (((i + wordStep | 0) + 1 | 0) < _ULongArray___get_size__impl__ju6dtr(operand)) {
          var tmp$ret$2;
          // Inline function 'kotlin.ULong.or' call
          var tmp$ret$0;
          // Inline function 'kotlin.ULong.shr' call
          var tmp0_shr = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var tmp1_shr = shiftAmount;
          tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_shr).k7(tmp1_shr));
          var tmp4_or = tmp$ret$0;
          var tmp$ret$1;
          // Inline function 'kotlin.ULong.shl' call
          var tmp2_shl = ULongArray__get_impl_pr71q9(operand, (i + wordStep | 0) + 1 | 0);
          var tmp3_shl = 63 - shiftAmount | 0;
          tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2_shl).j7(tmp3_shl));
          var tmp5_or = tmp$ret$1;
          tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_or).l7(_ULong___get_data__impl__fggpzb(tmp5_or)));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$2);
        } else {
          var tmp$ret$3;
          // Inline function 'kotlin.ULong.shr' call
          var tmp6_shr = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var tmp7_shr = shiftAmount;
          tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6_shr).k7(tmp7_shr));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$3);
        }
      }
       while (inductionVariable < requiredLength);
    return this.lt(result);
  };
  BigInteger63Arithmetic.prototype.ux = function (operand) {
    var power64Representation = this.tx(operand);
    var result = _UIntArray___init__impl__ghjpc6(imul(_ULongArray___get_size__impl__ju6dtr(power64Representation), 2));
    var inductionVariable = 0;
    var last = _ULongArray___get_size__impl__ju6dtr(power64Representation);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = imul(2, i);
        var tmp$ret$3;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp$ret$1;
        // Inline function 'kotlin.ULong.and' call
        var tmp1_and = ULongArray__get_impl_pr71q9(power64Representation, i);
        var tmp$ret$0;
        // Inline function 'kotlin.UInt.toULong' call
        var tmp0_toULong = BigInteger32Arithmetic_getInstance().av_1;
        tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp0_toULong)).s6(new Long(-1, 0)));
        var tmp2_and = tmp$ret$0;
        tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_and).s6(_ULong___get_data__impl__fggpzb(tmp2_and)));
        var tmp3_toUInt = tmp$ret$1;
        var tmp$ret$2;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt = _ULong___get_data__impl__fggpzb(tmp3_toUInt);
        tmp$ret$2 = _UInt___init__impl__l7qpdl(tmp0_toUInt.z6());
        tmp$ret$3 = tmp$ret$2;
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$3);
        var tmp_0 = imul(2, i) + 1 | 0;
        var tmp$ret$6;
        // Inline function 'kotlin.ULong.toUInt' call
        var tmp$ret$4;
        // Inline function 'kotlin.ULong.shr' call
        var tmp4_shr = ULongArray__get_impl_pr71q9(power64Representation, i);
        tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_shr).k7(32));
        var tmp5_toUInt = tmp$ret$4;
        var tmp$ret$5;
        // Inline function 'kotlin.toUInt' call
        var tmp0_toUInt_0 = _ULong___get_data__impl__fggpzb(tmp5_toUInt);
        tmp$ret$5 = _UInt___init__impl__l7qpdl(tmp0_toUInt_0.z6());
        tmp$ret$6 = tmp$ret$5;
        UIntArray__set_impl_7f2zu2(result, tmp_0, tmp$ret$6);
      }
       while (inductionVariable < last);
    return BigInteger32Arithmetic_getInstance().ov(result);
  };
  BigInteger63Arithmetic.prototype.vx = function (operand) {
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 0) {
      return this.us_1;
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 1) {
      var tmp$ret$1;
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$0;
      // Inline function 'kotlin.UInt.toULong' call
      var tmp0_toULong = UIntArray__get_impl_gp5kza(operand, 0);
      tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp0_toULong)).s6(new Long(-1, 0)));
      var tmp1_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
      tmp$ret$1 = tmp1_ulongArrayOf;
      return tmp$ret$1;
    }
    var length = BigInteger32Arithmetic_getInstance().mv(operand);
    var tmp;
    if ((length % 63 | 0) === 0) {
      tmp = length / 63 | 0;
    } else {
      tmp = (length / 63 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var skipWordCount;
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        skipWordCount = i / 32 | 0;
        var shiftAmount = i % 32 | 0;
        var position = imul(i, 2) - skipWordCount | 0;
        if (requiredLength === 2) {
          var tmp$ret$6;
          // Inline function 'kotlin.ULong.or' call
          var tmp$ret$2;
          // Inline function 'kotlin.UInt.toULong' call
          var tmp2_toULong = UIntArray__get_impl_gp5kza(operand, 0);
          tmp$ret$2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp2_toULong)).s6(new Long(-1, 0)));
          var tmp7_or = tmp$ret$2;
          var tmp$ret$5;
          // Inline function 'kotlin.ULong.and' call
          var tmp$ret$4;
          // Inline function 'kotlin.ULong.shl' call
          var tmp$ret$3;
          // Inline function 'kotlin.UInt.toULong' call
          var tmp3_toULong = UIntArray__get_impl_gp5kza(operand, 1);
          tmp$ret$3 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp3_toULong)).s6(new Long(-1, 0)));
          var tmp4_shl = tmp$ret$3;
          tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4_shl).j7(32));
          var tmp5_and = tmp$ret$4;
          var tmp6_and = this.et_1;
          tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5_and).s6(_ULong___get_data__impl__fggpzb(tmp6_and)));
          var tmp8_or = tmp$ret$5;
          tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7_or).l7(_ULong___get_data__impl__fggpzb(tmp8_or)));
          ULongArray__set_impl_z19mvh(result, 0, tmp$ret$6);
          if (_UIntArray___get_size__impl__r6l8ci(operand) === 4) {
            var tmp$ret$14;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$11;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$8;
            // Inline function 'kotlin.ULong.shr' call
            var tmp$ret$7;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp9_toULong = UIntArray__get_impl_gp5kza(operand, 1);
            tmp$ret$7 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp9_toULong)).s6(new Long(-1, 0)));
            var tmp10_shr = tmp$ret$7;
            tmp$ret$8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10_shr).k7(31));
            var tmp13_or = tmp$ret$8;
            var tmp$ret$10;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$9;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp11_toULong = UIntArray__get_impl_gp5kza(operand, 2);
            tmp$ret$9 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp11_toULong)).s6(new Long(-1, 0)));
            var tmp12_shl = tmp$ret$9;
            tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12_shl).j7(1));
            var tmp14_or = tmp$ret$10;
            tmp$ret$11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp13_or).l7(_ULong___get_data__impl__fggpzb(tmp14_or)));
            var tmp17_or = tmp$ret$11;
            var tmp$ret$13;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$12;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp15_toULong = UIntArray__get_impl_gp5kza(operand, 3);
            tmp$ret$12 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp15_toULong)).s6(new Long(-1, 0)));
            var tmp16_shl = tmp$ret$12;
            tmp$ret$13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp16_shl).j7(33));
            var tmp18_or = tmp$ret$13;
            tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp17_or).l7(_ULong___get_data__impl__fggpzb(tmp18_or)));
            ULongArray__set_impl_z19mvh(result, 1, tmp$ret$14);
          } else {
            var tmp$ret$19;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$16;
            // Inline function 'kotlin.ULong.shr' call
            var tmp$ret$15;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp19_toULong = UIntArray__get_impl_gp5kza(operand, 1);
            tmp$ret$15 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp19_toULong)).s6(new Long(-1, 0)));
            var tmp20_shr = tmp$ret$15;
            tmp$ret$16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20_shr).k7(31));
            var tmp23_or = tmp$ret$16;
            var tmp$ret$18;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$17;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp21_toULong = UIntArray__get_impl_gp5kza(operand, 2);
            tmp$ret$17 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp21_toULong)).s6(new Long(-1, 0)));
            var tmp22_shl = tmp$ret$17;
            tmp$ret$18 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp22_shl).j7(1));
            var tmp24_or = tmp$ret$18;
            tmp$ret$19 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp23_or).l7(_ULong___get_data__impl__fggpzb(tmp24_or)));
            ULongArray__set_impl_z19mvh(result, 1, tmp$ret$19);
          }
        } else {
          var tmp1_subject = i;
          if (tmp1_subject === 0) {
            var tmp$ret$24;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$20;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp25_toULong = UIntArray__get_impl_gp5kza(operand, 0);
            tmp$ret$20 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp25_toULong)).s6(new Long(-1, 0)));
            var tmp30_or = tmp$ret$20;
            var tmp$ret$23;
            // Inline function 'kotlin.ULong.and' call
            var tmp$ret$22;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$21;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp26_toULong = UIntArray__get_impl_gp5kza(operand, 1);
            tmp$ret$21 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp26_toULong)).s6(new Long(-1, 0)));
            var tmp27_shl = tmp$ret$21;
            tmp$ret$22 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp27_shl).j7(32));
            var tmp28_and = tmp$ret$22;
            var tmp29_and = this.et_1;
            tmp$ret$23 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp28_and).s6(_ULong___get_data__impl__fggpzb(tmp29_and)));
            var tmp31_or = tmp$ret$23;
            tmp$ret$24 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp30_or).l7(_ULong___get_data__impl__fggpzb(tmp31_or)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$24);
          } else if (1 <= tmp1_subject ? tmp1_subject < (requiredLength - 1 | 0) : false) {
            var tmp$ret$33;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$29;
            // Inline function 'kotlin.ULong.or' call
            var tmp$ret$26;
            // Inline function 'kotlin.ULong.shr' call
            var tmp$ret$25;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp32_toULong = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
            tmp$ret$25 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp32_toULong)).s6(new Long(-1, 0)));
            var tmp33_shr = tmp$ret$25;
            var tmp34_shr = 32 - shiftAmount | 0;
            tmp$ret$26 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp33_shr).k7(tmp34_shr));
            var tmp37_or = tmp$ret$26;
            var tmp$ret$28;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$27;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp35_toULong = UIntArray__get_impl_gp5kza(operand, position);
            tmp$ret$27 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp35_toULong)).s6(new Long(-1, 0)));
            var tmp36_shl = tmp$ret$27;
            tmp$ret$28 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp36_shl).j7(shiftAmount));
            var tmp38_or = tmp$ret$28;
            tmp$ret$29 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp37_or).l7(_ULong___get_data__impl__fggpzb(tmp38_or)));
            var tmp44_or = tmp$ret$29;
            var tmp$ret$32;
            // Inline function 'kotlin.ULong.and' call
            var tmp$ret$31;
            // Inline function 'kotlin.ULong.shl' call
            var tmp$ret$30;
            // Inline function 'kotlin.UInt.toULong' call
            var tmp39_toULong = UIntArray__get_impl_gp5kza(operand, position + 1 | 0);
            tmp$ret$30 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp39_toULong)).s6(new Long(-1, 0)));
            var tmp40_shl = tmp$ret$30;
            var tmp41_shl = 32 + shiftAmount | 0;
            tmp$ret$31 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp40_shl).j7(tmp41_shl));
            var tmp42_and = tmp$ret$31;
            var tmp43_and = this.et_1;
            tmp$ret$32 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp42_and).s6(_ULong___get_data__impl__fggpzb(tmp43_and)));
            var tmp45_or = tmp$ret$32;
            tmp$ret$33 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp44_or).l7(_ULong___get_data__impl__fggpzb(tmp45_or)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$33);
          } else if (tmp1_subject === (requiredLength - 1 | 0)) {
            if (position < _UIntArray___get_size__impl__r6l8ci(operand)) {
              var tmp$ret$38;
              // Inline function 'kotlin.ULong.or' call
              var tmp$ret$35;
              // Inline function 'kotlin.ULong.shr' call
              var tmp$ret$34;
              // Inline function 'kotlin.UInt.toULong' call
              var tmp46_toULong = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              tmp$ret$34 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp46_toULong)).s6(new Long(-1, 0)));
              var tmp47_shr = tmp$ret$34;
              var tmp48_shr = 32 - shiftAmount | 0;
              tmp$ret$35 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp47_shr).k7(tmp48_shr));
              var tmp51_or = tmp$ret$35;
              var tmp$ret$37;
              // Inline function 'kotlin.ULong.shl' call
              var tmp$ret$36;
              // Inline function 'kotlin.UInt.toULong' call
              var tmp49_toULong = UIntArray__get_impl_gp5kza(operand, position);
              tmp$ret$36 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp49_toULong)).s6(new Long(-1, 0)));
              var tmp50_shl = tmp$ret$36;
              tmp$ret$37 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp50_shl).j7(shiftAmount));
              var tmp52_or = tmp$ret$37;
              tmp$ret$38 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp51_or).l7(_ULong___get_data__impl__fggpzb(tmp52_or)));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$38);
            } else {
              var tmp$ret$40;
              // Inline function 'kotlin.ULong.shr' call
              var tmp$ret$39;
              // Inline function 'kotlin.UInt.toULong' call
              var tmp53_toULong = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              tmp$ret$39 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(tmp53_toULong)).s6(new Long(-1, 0)));
              var tmp54_shr = tmp$ret$39;
              var tmp55_shr = 32 - shiftAmount | 0;
              tmp$ret$40 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp54_shr).k7(tmp55_shr));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$40);
            }
          }
        }
      }
       while (inductionVariable < requiredLength);
    return result;
  };
  BigInteger63Arithmetic.prototype.wt = function (first, second) {
    return this.ox(first, second);
  };
  BigInteger63Arithmetic.prototype.ow = function (_this__u8e3s4, other) {
    return signedAdd(this, _this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.qw = function (_this__u8e3s4, other) {
    return signedSubtract(this, _this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.nw = function (_this__u8e3s4, other) {
    return signedMultiply(this, _this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.jx = function (_this__u8e3s4, other) {
    return signedDivide(this, _this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.mw = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.nx(_this__u8e3s4.rw_1, places), _this__u8e3s4.sw_1);
  };
  BigInteger63Arithmetic.prototype.pw = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.iw(_this__u8e3s4.rw_1, places), _this__u8e3s4.sw_1);
  };
  BigInteger63Arithmetic.prototype.lw = function (_this__u8e3s4, operand) {
    return new SignedULongArray(this.wx(_this__u8e3s4.rw_1, operand), _this__u8e3s4.sw_1);
  };
  BigInteger63Arithmetic.prototype.is = function (number, base) {
    var parsed = this.us_1;
    // Inline function 'kotlin.text.forEach' call
    var tmp$ret$1;
    // Inline function 'kotlin.text.toLowerCase' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = number;
    tmp$ret$1 = tmp$ret$0.toLowerCase();
    var tmp0_forEach = tmp$ret$1;
    var indexedObject = tmp0_forEach;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.parseForBase.<anonymous>' call
      var tmp = BigInteger63Arithmetic_getInstance();
      var tmp_0 = BigInteger63Arithmetic_getInstance();
      var tmp_1 = parsed;
      var tmp$ret$2;
      // Inline function 'kotlin.toULong' call
      tmp$ret$2 = _ULong___init__impl__c78o9k(toLong(base));
      var tmp_2 = tmp_0.xx(tmp_1, tmp$ret$2);
      var tmp$ret$3;
      // Inline function 'kotlin.toULong' call
      var tmp0_toULong = toDigit(element, base);
      tmp$ret$3 = _ULong___init__impl__c78o9k(toLong(tmp0_toULong));
      parsed = tmp.px(tmp_2, tmp$ret$3);
    }
    return this.lt(parsed);
  };
  BigInteger63Arithmetic.prototype.fu = function (operand, base) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.copyOf' call
    tmp$ret$0 = _ULongArray___init__impl__twm1l3(copyOf(_ULongArray___get_storage__impl__28e64j(operand)));
    var copy = tmp$ret$0;
    var tmp$ret$2;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$1;
    // Inline function 'kotlin.toULong' call
    tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(base));
    var tmp0_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    tmp$ret$2 = tmp0_ulongArrayOf;
    var baseArray = tmp$ret$2;
    var stringBuilder = StringBuilder_init_$Create$();
    while (!equals(copy, this.us_1)) {
      var divremResult = this.yx(copy, baseArray);
      if (ULongArray__isEmpty_impl_c3yngu(divremResult.w4_1.q7_1)) {
        stringBuilder.td(0);
      } else {
        stringBuilder.ud(toString_0(ULongArray__get_impl_pr71q9(divremResult.w4_1.q7_1, 0), base));
      }
      copy = divremResult.v4_1.q7_1;
    }
    var tmp$ret$3;
    // Inline function 'kotlin.text.reversed' call
    var tmp1_reversed = stringBuilder.toString();
    tmp$ret$3 = toString(reversed(isCharSequence(tmp1_reversed) ? tmp1_reversed : THROW_CCE()));
    return tmp$ret$3;
  };
  BigInteger63Arithmetic.prototype.wx = function (operand, mask) {
    var tmp;
    if (_ULongArray___get_size__impl__ju6dtr(operand) > _ULongArray___get_size__impl__ju6dtr(mask)) {
      tmp = new Pair(new ULongArray(operand), new ULongArray(mask));
    } else {
      tmp = new Pair(new ULongArray(mask), new ULongArray(operand));
    }
    var tmp0_container = tmp;
    var bigger = tmp0_container.w3().q7_1;
    var smaller = tmp0_container.x3().q7_1;
    var tmp$ret$4;
    // Inline function 'kotlin.ULongArray' call
    var tmp0_ULongArray = _ULongArray___get_size__impl__ju6dtr(smaller);
    var tmp_0 = 0;
    var tmp_1 = tmp0_ULongArray;
    var tmp_2 = longArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$3;
      // Inline function 'kotlin.ULongArray.<anonymous>' call
      var tmp$ret$2;
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.and.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.ULong.and' call
      var tmp0_and = ULongArray__get_impl_pr71q9(operand, tmp_3);
      var tmp1_and = ULongArray__get_impl_pr71q9(mask, tmp_3);
      tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0_and).s6(_ULong___get_data__impl__fggpzb(tmp1_and)));
      tmp$ret$1 = tmp$ret$0;
      var tmp0_toLong = tmp$ret$1;
      tmp$ret$2 = _ULong___get_data__impl__fggpzb(tmp0_toLong);
      tmp$ret$3 = tmp$ret$2;
      tmp_2[tmp_3] = tmp$ret$3;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp$ret$4 = _ULongArray___init__impl__twm1l3(tmp_2);
    return tmp$ret$4;
  };
  BigInteger63Arithmetic.prototype.iw = function (_this__u8e3s4, places) {
    return this.dx(_this__u8e3s4, places);
  };
  BigInteger63Arithmetic.prototype.nx = function (_this__u8e3s4, places) {
    return this.ex(_this__u8e3s4, places);
  };
  BigInteger63Arithmetic.prototype.jw = function (_this__u8e3s4, other) {
    return this.ot(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.ww = function (_this__u8e3s4, other) {
    return this.nt(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.yw = function (_this__u8e3s4, other) {
    return this.ut(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.px = function (_this__u8e3s4, other) {
    var tmp$ret$0;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.ot(_this__u8e3s4, tmp$ret$0);
  };
  BigInteger63Arithmetic.prototype.kw = function (_this__u8e3s4, other) {
    var tmp$ret$0;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.nt(_this__u8e3s4, tmp$ret$0);
  };
  BigInteger63Arithmetic.prototype.xx = function (_this__u8e3s4, other) {
    return this.hw(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.zw = function (_this__u8e3s4, other) {
    return this.wt(_this__u8e3s4, other).v4_1.q7_1;
  };
  BigInteger63Arithmetic.prototype.yx = function (_this__u8e3s4, other) {
    return this.wt(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.xw = function (_this__u8e3s4, other) {
    return this.rs(_this__u8e3s4, other);
  };
  BigInteger63Arithmetic.prototype.sx = function (_this__u8e3s4, other) {
    var tmp$ret$0;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.rs(_this__u8e3s4, tmp$ret$0);
  };
  BigInteger63Arithmetic.prototype.qx = function (_this__u8e3s4) {
    return this.ux(_this__u8e3s4);
  };
  BigInteger63Arithmetic.prototype.rx = function (_this__u8e3s4) {
    return this.vx(_this__u8e3s4);
  };
  BigInteger63Arithmetic.prototype.ks = function (uLong) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.ULong.and' call
    var tmp0_and = this.ft_1;
    tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).s6(_ULong___get_data__impl__fggpzb(tmp0_and)));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      var tmp$ret$2;
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.ULong.and' call
      var tmp1_and = this.bt_1;
      tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).s6(_ULong___get_data__impl__fggpzb(tmp1_and)));
      var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1, _ULong___init__impl__c78o9k(new Long(1, 0))]));
      tmp$ret$2 = tmp2_ulongArrayOf;
      tmp = tmp$ret$2;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.ulongArrayOf' call
      tmp$ret$3 = _ULongArray___init__impl__twm1l3(longArrayOf([uLong]));
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  BigInteger63Arithmetic.prototype.ms = function (uInt) {
    var tmp$ret$1;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0;
    // Inline function 'kotlin.UInt.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(uInt)).s6(new Long(-1, 0)));
    var tmp0_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
    tmp$ret$1 = tmp0_ulongArrayOf;
    return tmp$ret$1;
  };
  BigInteger63Arithmetic.prototype.os = function (uShort) {
    var tmp$ret$1;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0;
    // Inline function 'kotlin.UShort.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UShort___get_data__impl__g0245(uShort)).s6(new Long(65535, 0)));
    var tmp0_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
    tmp$ret$1 = tmp0_ulongArrayOf;
    return tmp$ret$1;
  };
  BigInteger63Arithmetic.prototype.qs = function (uByte) {
    var tmp$ret$1;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0;
    // Inline function 'kotlin.UByte.toULong' call
    tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UByte___get_data__impl__jof9qr(uByte)).s6(new Long(255, 0)));
    var tmp0_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
    tmp$ret$1 = tmp0_ulongArrayOf;
    return tmp$ret$1;
  };
  BigInteger63Arithmetic.prototype.as = function (long) {
    Companion_getInstance();
    if (long.equals(new Long(0, -2147483648))) {
      var tmp$ret$0;
      // Inline function 'kotlin.ulongArrayOf' call
      tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
      return tmp$ret$0;
    }
    var tmp$ret$4;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$3;
    // Inline function 'kotlin.ULong.and' call
    var tmp$ret$2;
    // Inline function 'kotlin.toULong' call
    var tmp$ret$1;
    // Inline function 'kotlin.math.absoluteValue' call
    tmp$ret$1 = abs(long);
    var tmp0_toULong = tmp$ret$1;
    tmp$ret$2 = _ULong___init__impl__c78o9k(tmp0_toULong);
    var tmp1_and = tmp$ret$2;
    var tmp2_and = this.bt_1;
    tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1_and).s6(_ULong___get_data__impl__fggpzb(tmp2_and)));
    var tmp3_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$3]));
    tmp$ret$4 = tmp3_ulongArrayOf;
    return tmp$ret$4;
  };
  BigInteger63Arithmetic.prototype.bs = function (int) {
    var tmp$ret$2;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$1;
    // Inline function 'kotlin.toULong' call
    var tmp$ret$0;
    // Inline function 'kotlin.math.absoluteValue' call
    var tmp0__get_absoluteValue__nukmtt = toLong(int);
    tmp$ret$0 = abs(tmp0__get_absoluteValue__nukmtt);
    var tmp1_toULong = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(tmp1_toULong);
    var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    tmp$ret$2 = tmp2_ulongArrayOf;
    return tmp$ret$2;
  };
  BigInteger63Arithmetic.prototype.cs = function (short) {
    var tmp$ret$2;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$1;
    // Inline function 'kotlin.toULong' call
    var tmp$ret$0;
    // Inline function 'kotlin.math.absoluteValue' call
    var tmp0__get_absoluteValue__nukmtt = short;
    tmp$ret$0 = abs_0(tmp0__get_absoluteValue__nukmtt);
    var tmp1_toULong = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(tmp1_toULong));
    var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    tmp$ret$2 = tmp2_ulongArrayOf;
    return tmp$ret$2;
  };
  BigInteger63Arithmetic.prototype.ds = function (byte) {
    var tmp$ret$2;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$1;
    // Inline function 'kotlin.toULong' call
    var tmp$ret$0;
    // Inline function 'kotlin.math.absoluteValue' call
    var tmp0__get_absoluteValue__nukmtt = byte;
    tmp$ret$0 = abs_0(tmp0__get_absoluteValue__nukmtt);
    var tmp1_toULong = tmp$ret$0;
    tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(tmp1_toULong));
    var tmp2_ulongArrayOf = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    tmp$ret$2 = tmp2_ulongArrayOf;
    return tmp$ret$2;
  };
  BigInteger63Arithmetic.$metadata$ = objectMeta('BigInteger63Arithmetic', [BigIntegerArithmetic]);
  var BigInteger63Arithmetic_instance;
  function BigInteger63Arithmetic_getInstance() {
    if (BigInteger63Arithmetic_instance == null)
      new BigInteger63Arithmetic();
    return BigInteger63Arithmetic_instance;
  }
  function toDigit(_this__u8e3s4, base) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (_Char___init__impl__6a9atx(48) <= tmp0_subject ? tmp0_subject <= _Char___init__impl__6a9atx(57) : false) {
      tmp = Char__toInt_impl_vasixd(Char__minus_impl_a2frrh_0(_this__u8e3s4, 48));
    } else if (_Char___init__impl__6a9atx(97) <= tmp0_subject ? tmp0_subject <= _Char___init__impl__6a9atx(122) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(97)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65) <= tmp0_subject ? tmp0_subject <= _Char___init__impl__6a9atx(90) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65313) <= tmp0_subject ? tmp0_subject <= _Char___init__impl__6a9atx(65338) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65313)) - 10 | 0;
    } else if (_Char___init__impl__6a9atx(65345) <= tmp0_subject ? tmp0_subject <= _Char___init__impl__6a9atx(65370) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65345)) - 10 | 0;
    } else if (equals(new Char(tmp0_subject), new Char(_Char___init__impl__6a9atx(46)))) {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + new Char(_this__u8e3s4) + ' (Possibly a decimal value, which is not supported by BigInteger parser');
    } else {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + new Char(_this__u8e3s4));
    }
    var digit = tmp;
    if (digit < 0 ? true : digit >= base) {
      throw NumberFormatException_init_$Create$('' + new Char(_this__u8e3s4) + ' is not a valid digit for number system with base ' + base);
    }
    return digit;
  }
  function ComparisonWorkaround() {
    ComparisonWorkaround_instance = this;
  }
  ComparisonWorkaround.prototype.vr = function (number) {
    return true;
  };
  ComparisonWorkaround.$metadata$ = objectMeta('ComparisonWorkaround');
  var ComparisonWorkaround_instance;
  function ComparisonWorkaround_getInstance() {
    if (ComparisonWorkaround_instance == null)
      new ComparisonWorkaround();
    return ComparisonWorkaround_instance;
  }
  //region block: post-declaration
  Companion.prototype.bo = tryFromFloat$default;
  Companion.prototype.do = tryFromDouble$default;
  BigDecimal.prototype.lf = plus_1;
  BigDecimal.prototype.mf = minus_0;
  Companion_1.prototype.bo = tryFromFloat$default;
  Companion_1.prototype.do = tryFromDouble$default;
  BigInteger.prototype.ko = get_isNegative;
  BigInteger.prototype.lo = get_isPositive;
  BigInteger.prototype.oo = plus_0;
  BigInteger.prototype.po = minus;
  BigInteger.prototype.qo = times;
  BigInteger.prototype.ro = div;
  BigInteger.prototype.of = div_0;
  BigInteger.prototype.u5 = div_1;
  BigInteger.prototype.so = rem;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = BigInteger_init_$Create$_0;
  _.$_$.b = Companion_getInstance_2;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin_com_ionspin_kotlin_bignum.js.map


/***/ }),

/***/ 15:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var interfaceMeta = kotlin_kotlin.$_$.v5;
  var captureStack = kotlin_kotlin.$_$.i5;
  var classMeta = kotlin_kotlin.$_$.o5;
  var IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.c1;
  var IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.e1;
  var IllegalArgumentException = kotlin_kotlin.$_$.k7;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var Iterator = kotlin_kotlin.$_$.a3;
  var Iterable = kotlin_kotlin.$_$.z2;
  var objectMeta = kotlin_kotlin.$_$.g6;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var ensureNotNull = kotlin_kotlin.$_$.x7;
  var getStringHashCode = kotlin_kotlin.$_$.t5;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var toIntOrNull = kotlin_kotlin.$_$.z6;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var toString = kotlin_kotlin.$_$.i6;
  var equals = kotlin_kotlin.$_$.q5;
  var hashCode = kotlin_kotlin.$_$.u5;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.o;
  var ArrayList = kotlin_kotlin.$_$.w2;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.p;
  var List = kotlin_kotlin.$_$.b3;
  var isInterface = kotlin_kotlin.$_$.x5;
  var isObject = kotlin_kotlin.$_$.z5;
  var copyToArray = kotlin_kotlin.$_$.p3;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.r;
  var contentHashCode = kotlin_kotlin.$_$.k3;
  var HashMap_init_$Create$ = kotlin_kotlin.$_$.q;
  var ArrayList_init_$Create$_1 = kotlin_kotlin.$_$.n;
  var arrayIterator = kotlin_kotlin.$_$.g5;
  var fillArrayVal = kotlin_kotlin.$_$.r5;
  var booleanArray = kotlin_kotlin.$_$.h5;
  var lazy = kotlin_kotlin.$_$.y7;
  var contentEquals = kotlin_kotlin.$_$.h3;
  var joinToString$default = kotlin_kotlin.$_$.h;
  var KProperty1 = kotlin_kotlin.$_$.p6;
  var getPropertyCallableRef = kotlin_kotlin.$_$.s5;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f1;
  var charSequenceLength = kotlin_kotlin.$_$.m5;
  var lastOrNull = kotlin_kotlin.$_$.f4;
  var get_lastIndex = kotlin_kotlin.$_$.e4;
  var Map = kotlin_kotlin.$_$.c3;
  var emptyMap = kotlin_kotlin.$_$.v3;
  var Annotation = kotlin_kotlin.$_$.e7;
  var get_indices = kotlin_kotlin.$_$.c4;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.g1;
  //endregion
  //region block: pre-declaration
  SerializationException.prototype = Object.create(IllegalArgumentException.prototype);
  SerializationException.prototype.constructor = SerializationException;
  UnknownFieldException.prototype = Object.create(SerializationException.prototype);
  UnknownFieldException.prototype.constructor = UnknownFieldException;
  MissingFieldException.prototype = Object.create(SerializationException.prototype);
  MissingFieldException.prototype.constructor = MissingFieldException;
  function get_isNullable() {
    return false;
  }
  ENUM.prototype = Object.create(SerialKind.prototype);
  ENUM.prototype.constructor = ENUM;
  PrimitiveKind.prototype = Object.create(SerialKind.prototype);
  PrimitiveKind.prototype.constructor = PrimitiveKind;
  INT.prototype = Object.create(PrimitiveKind.prototype);
  INT.prototype.constructor = INT;
  STRING.prototype = Object.create(PrimitiveKind.prototype);
  STRING.prototype.constructor = STRING;
  StructureKind.prototype = Object.create(SerialKind.prototype);
  StructureKind.prototype.constructor = StructureKind;
  CLASS.prototype = Object.create(StructureKind.prototype);
  CLASS.prototype.constructor = CLASS;
  LIST.prototype = Object.create(StructureKind.prototype);
  LIST.prototype.constructor = LIST;
  MAP.prototype = Object.create(StructureKind.prototype);
  MAP.prototype.constructor = MAP;
  PolymorphicKind.prototype = Object.create(SerialKind.prototype);
  PolymorphicKind.prototype.constructor = PolymorphicKind;
  function decodeSerializableValue(deserializer) {
    return deserializer.dg(this);
  }
  function decodeSequentially() {
    return false;
  }
  function decodeCollectionSize(descriptor) {
    return -1;
  }
  function decodeSerializableElement$default(descriptor, index, deserializer, previousValue, $mask0, $handler) {
    if (!(($mask0 & 8) === 0))
      previousValue = null;
    return $handler == null ? this.xg(descriptor, index, deserializer, previousValue) : $handler(descriptor, index, deserializer, previousValue);
  }
  ArrayListClassDesc.prototype = Object.create(ListLikeDescriptor.prototype);
  ArrayListClassDesc.prototype.constructor = ArrayListClassDesc;
  ListLikeSerializer.prototype = Object.create(AbstractCollectionSerializer.prototype);
  ListLikeSerializer.prototype.constructor = ListLikeSerializer;
  ArrayListSerializer.prototype = Object.create(ListLikeSerializer.prototype);
  ArrayListSerializer.prototype.constructor = ArrayListSerializer;
  function typeParametersSerializers() {
    return get_EMPTY_SERIALIZER_ARRAY();
  }
  NamedValueDecoder.prototype = Object.create(TaggedDecoder.prototype);
  NamedValueDecoder.prototype.constructor = NamedValueDecoder;
  SerialModuleImpl.prototype = Object.create(SerializersModule.prototype);
  SerialModuleImpl.prototype.constructor = SerialModuleImpl;
  //endregion
  function KSerializer() {
  }
  KSerializer.$metadata$ = interfaceMeta('KSerializer', [SerializationStrategy, DeserializationStrategy]);
  function DeserializationStrategy() {
  }
  DeserializationStrategy.$metadata$ = interfaceMeta('DeserializationStrategy');
  function SerializationStrategy() {
  }
  SerializationStrategy.$metadata$ = interfaceMeta('SerializationStrategy');
  function StringFormat() {
  }
  StringFormat.$metadata$ = interfaceMeta('StringFormat', [SerialFormat]);
  function SerialFormat() {
  }
  SerialFormat.$metadata$ = interfaceMeta('SerialFormat');
  function UnknownFieldException_init_$Init$(index, $this) {
    UnknownFieldException.call($this, 'An unknown field for index ' + index);
    return $this;
  }
  function UnknownFieldException_init_$Create$(index) {
    var tmp = UnknownFieldException_init_$Init$(index, Object.create(UnknownFieldException.prototype));
    captureStack(tmp, UnknownFieldException_init_$Create$);
    return tmp;
  }
  function UnknownFieldException(message) {
    SerializationException_init_$Init$(message, this);
    captureStack(this, UnknownFieldException);
  }
  UnknownFieldException.$metadata$ = classMeta('UnknownFieldException', undefined, undefined, undefined, undefined, SerializationException.prototype);
  function SerializationException_init_$Init$(message, $this) {
    IllegalArgumentException_init_$Init$(message, $this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException_init_$Create$(message) {
    var tmp = SerializationException_init_$Init$(message, Object.create(SerializationException.prototype));
    captureStack(tmp, SerializationException_init_$Create$);
    return tmp;
  }
  function SerializationException_init_$Init$_0(message, cause, $this) {
    IllegalArgumentException_init_$Init$_0(message, cause, $this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException() {
    captureStack(this, SerializationException);
  }
  SerializationException.$metadata$ = classMeta('SerializationException', undefined, undefined, undefined, undefined, IllegalArgumentException.prototype);
  function MissingFieldException_init_$Init$(fieldNames, serialName, $this) {
    MissingFieldException.call($this, fieldNames.i() === 1 ? "Field '" + fieldNames.l(0) + "' is required for type with serial name '" + serialName + "', but it was missing" : 'Fields ' + fieldNames + " are required for type with serial name '" + serialName + "', but they were missing", null);
    return $this;
  }
  function MissingFieldException_init_$Create$(fieldNames, serialName) {
    var tmp = MissingFieldException_init_$Init$(fieldNames, serialName, Object.create(MissingFieldException.prototype));
    captureStack(tmp, MissingFieldException_init_$Create$);
    return tmp;
  }
  function MissingFieldException(message, cause) {
    SerializationException_init_$Init$_0(message, cause, this);
    captureStack(this, MissingFieldException);
  }
  MissingFieldException.$metadata$ = classMeta('MissingFieldException', undefined, undefined, undefined, undefined, SerializationException.prototype);
  function ListSerializer(elementSerializer) {
    return new ArrayListSerializer(elementSerializer);
  }
  function SerialDescriptor() {
  }
  SerialDescriptor.$metadata$ = interfaceMeta('SerialDescriptor');
  function get_elementDescriptors(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Iterable' call
    tmp$ret$0 = new _no_name_provided__qut3iv(_this__u8e3s4);
    return tmp$ret$0;
  }
  function elementDescriptors$1$1($this_elementDescriptors) {
    this.mg_1 = $this_elementDescriptors;
    this.lg_1 = $this_elementDescriptors.hg();
  }
  elementDescriptors$1$1.prototype.g = function () {
    return this.lg_1 > 0;
  };
  elementDescriptors$1$1.prototype.h = function () {
    var tmp = this.mg_1.hg();
    var tmp0_this = this;
    var tmp1 = tmp0_this.lg_1;
    tmp0_this.lg_1 = tmp1 - 1 | 0;
    return this.mg_1.kg(tmp - tmp1 | 0);
  };
  elementDescriptors$1$1.$metadata$ = classMeta(undefined, [Iterator]);
  function _no_name_provided__qut3iv($this_elementDescriptors) {
    this.ng_1 = $this_elementDescriptors;
  }
  _no_name_provided__qut3iv.prototype.f = function () {
    var tmp$ret$0;
    // Inline function 'kotlinx.serialization.descriptors.<get-elementDescriptors>.<anonymous>' call
    tmp$ret$0 = new elementDescriptors$1$1(this.ng_1);
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv.$metadata$ = classMeta(undefined, [Iterable]);
  function ENUM() {
    ENUM_instance = this;
    SerialKind.call(this);
  }
  ENUM.$metadata$ = objectMeta('ENUM', undefined, undefined, undefined, undefined, SerialKind.prototype);
  var ENUM_instance;
  function ENUM_getInstance() {
    if (ENUM_instance == null)
      new ENUM();
    return ENUM_instance;
  }
  function SerialKind() {
  }
  SerialKind.prototype.toString = function () {
    return ensureNotNull(getKClassFromExpression(this).pb());
  };
  SerialKind.prototype.hashCode = function () {
    return getStringHashCode(this.toString());
  };
  SerialKind.$metadata$ = classMeta('SerialKind');
  function INT() {
    INT_instance = this;
    PrimitiveKind.call(this);
  }
  INT.$metadata$ = objectMeta('INT', undefined, undefined, undefined, undefined, PrimitiveKind.prototype);
  var INT_instance;
  function INT_getInstance() {
    if (INT_instance == null)
      new INT();
    return INT_instance;
  }
  function STRING() {
    STRING_instance = this;
    PrimitiveKind.call(this);
  }
  STRING.$metadata$ = objectMeta('STRING', undefined, undefined, undefined, undefined, PrimitiveKind.prototype);
  var STRING_instance;
  function STRING_getInstance() {
    if (STRING_instance == null)
      new STRING();
    return STRING_instance;
  }
  function PrimitiveKind() {
    SerialKind.call(this);
  }
  PrimitiveKind.$metadata$ = classMeta('PrimitiveKind', undefined, undefined, undefined, undefined, SerialKind.prototype);
  function CLASS() {
    CLASS_instance = this;
    StructureKind.call(this);
  }
  CLASS.$metadata$ = objectMeta('CLASS', undefined, undefined, undefined, undefined, StructureKind.prototype);
  var CLASS_instance;
  function CLASS_getInstance() {
    if (CLASS_instance == null)
      new CLASS();
    return CLASS_instance;
  }
  function LIST() {
    LIST_instance = this;
    StructureKind.call(this);
  }
  LIST.$metadata$ = objectMeta('LIST', undefined, undefined, undefined, undefined, StructureKind.prototype);
  var LIST_instance;
  function LIST_getInstance() {
    if (LIST_instance == null)
      new LIST();
    return LIST_instance;
  }
  function MAP() {
    MAP_instance = this;
    StructureKind.call(this);
  }
  MAP.$metadata$ = objectMeta('MAP', undefined, undefined, undefined, undefined, StructureKind.prototype);
  var MAP_instance;
  function MAP_getInstance() {
    if (MAP_instance == null)
      new MAP();
    return MAP_instance;
  }
  function StructureKind() {
    SerialKind.call(this);
  }
  StructureKind.$metadata$ = classMeta('StructureKind', undefined, undefined, undefined, undefined, SerialKind.prototype);
  function PolymorphicKind() {
  }
  PolymorphicKind.$metadata$ = classMeta('PolymorphicKind', undefined, undefined, undefined, undefined, SerialKind.prototype);
  function AbstractDecoder() {
  }
  AbstractDecoder.prototype.og = function () {
    throw SerializationException_init_$Create$('' + getKClassFromExpression(this) + " can't retrieve untyped values");
  };
  AbstractDecoder.prototype.pg = function () {
    var tmp = this.og();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  AbstractDecoder.prototype.qg = function () {
    var tmp = this.og();
    return typeof tmp === 'string' ? tmp : THROW_CCE();
  };
  AbstractDecoder.prototype.rg = function (deserializer, previousValue) {
    return this.sg(deserializer);
  };
  AbstractDecoder.prototype.tg = function (descriptor) {
    return this;
  };
  AbstractDecoder.prototype.ug = function (descriptor) {
  };
  AbstractDecoder.prototype.vg = function (descriptor, index) {
    return this.pg();
  };
  AbstractDecoder.prototype.wg = function (descriptor, index) {
    return this.qg();
  };
  AbstractDecoder.prototype.xg = function (descriptor, index, deserializer, previousValue) {
    return this.rg(deserializer, previousValue);
  };
  AbstractDecoder.$metadata$ = classMeta('AbstractDecoder', [Decoder, CompositeDecoder]);
  function Decoder() {
  }
  Decoder.$metadata$ = interfaceMeta('Decoder');
  function Companion() {
    Companion_instance = this;
    this.dh_1 = -1;
    this.eh_1 = -3;
  }
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function CompositeDecoder() {
  }
  CompositeDecoder.$metadata$ = interfaceMeta('CompositeDecoder');
  function AbstractPolymorphicSerializer() {
  }
  AbstractPolymorphicSerializer.prototype.gh = function (decoder, klassName) {
    return decoder.zg().hh(this.fh(), klassName);
  };
  AbstractPolymorphicSerializer.$metadata$ = classMeta('AbstractPolymorphicSerializer', [KSerializer]);
  function CachedNames() {
  }
  CachedNames.$metadata$ = interfaceMeta('CachedNames');
  function ListLikeDescriptor(elementDescriptor) {
    this.jh_1 = elementDescriptor;
    this.kh_1 = 1;
  }
  ListLikeDescriptor.prototype.fg = function () {
    return LIST_getInstance();
  };
  ListLikeDescriptor.prototype.hg = function () {
    return this.kh_1;
  };
  ListLikeDescriptor.prototype.ig = function (index) {
    return index.toString();
  };
  ListLikeDescriptor.prototype.jg = function (name) {
    var tmp0_elvis_lhs = toIntOrNull(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$(name + ' is not a valid list index');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  ListLikeDescriptor.prototype.kg = function (index) {
    // Inline function 'kotlin.require' call
    var tmp0_require = index >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.internal.ListLikeDescriptor.getElementDescriptor.<anonymous>' call
      tmp$ret$0 = 'Illegal index ' + index + ', ' + this.eg() + ' expects only non-negative indices';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.jh_1;
  };
  ListLikeDescriptor.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ListLikeDescriptor))
      return false;
    if (equals(this.jh_1, other.jh_1) ? this.eg() === other.eg() : false)
      return true;
    return false;
  };
  ListLikeDescriptor.prototype.hashCode = function () {
    return imul(hashCode(this.jh_1), 31) + getStringHashCode(this.eg()) | 0;
  };
  ListLikeDescriptor.prototype.toString = function () {
    return this.eg() + '(' + this.jh_1 + ')';
  };
  ListLikeDescriptor.$metadata$ = classMeta('ListLikeDescriptor', [SerialDescriptor]);
  function ArrayListClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  ArrayListClassDesc.prototype.eg = function () {
    return 'kotlin.collections.ArrayList';
  };
  ArrayListClassDesc.$metadata$ = classMeta('ArrayListClassDesc', undefined, undefined, undefined, undefined, ListLikeDescriptor.prototype);
  function ListLikeSerializer(elementSerializer) {
    AbstractCollectionSerializer.call(this);
    this.nh_1 = elementSerializer;
  }
  ListLikeSerializer.prototype.ph = function (decoder, builder, startIndex, size) {
    // Inline function 'kotlin.require' call
    var tmp0_require = size >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.internal.ListLikeSerializer.readAll.<anonymous>' call
      tmp$ret$0 = 'Size must be known in advance when using READ_ALL';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.qh(decoder, startIndex + index | 0, builder, false);
      }
       while (inductionVariable < size);
  };
  ListLikeSerializer.prototype.qh = function (decoder, index, builder, checkIndex) {
    var tmp = this.cg();
    this.oh(builder, index, decoder.yg(tmp, index, this.nh_1, null, 8, null));
  };
  ListLikeSerializer.$metadata$ = classMeta('ListLikeSerializer', undefined, undefined, undefined, undefined, AbstractCollectionSerializer.prototype);
  function readSize($this, decoder, builder) {
    var size = decoder.ch($this.cg());
    $this.wh(builder, size);
    return size;
  }
  function AbstractCollectionSerializer() {
  }
  AbstractCollectionSerializer.prototype.xh = function (decoder, previous) {
    var tmp0_safe_receiver = previous;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : this.vh(tmp0_safe_receiver);
    var builder = tmp1_elvis_lhs == null ? this.sh() : tmp1_elvis_lhs;
    var startIndex = this.th(builder);
    var compositeDecoder = decoder.tg(this.cg());
    if (compositeDecoder.ah()) {
      this.ph(compositeDecoder, builder, startIndex, readSize(this, compositeDecoder, builder));
    } else {
      $l$loop: while (true) {
        var index = compositeDecoder.bh(this.cg());
        Companion_getInstance();
        if (index === -1)
          break $l$loop;
        var tmp = startIndex + index | 0;
        this.rh(compositeDecoder, tmp, builder, false, 8, null);
      }
    }
    compositeDecoder.ug(this.cg());
    return this.uh(builder);
  };
  AbstractCollectionSerializer.prototype.dg = function (decoder) {
    return this.xh(decoder, null);
  };
  AbstractCollectionSerializer.prototype.rh = function (decoder, index, builder, checkIndex, $mask0, $handler) {
    if (!(($mask0 & 8) === 0))
      checkIndex = true;
    var tmp;
    if ($handler == null) {
      this.qh(decoder, index, builder, checkIndex);
      tmp = Unit_getInstance();
    } else {
      tmp = $handler(decoder, index, builder, checkIndex);
    }
    return tmp;
  };
  AbstractCollectionSerializer.$metadata$ = classMeta('AbstractCollectionSerializer', [KSerializer]);
  function ArrayListSerializer(element) {
    ListLikeSerializer.call(this, element);
    this.zh_1 = new ArrayListClassDesc(element.cg());
  }
  ArrayListSerializer.prototype.cg = function () {
    return this.zh_1;
  };
  ArrayListSerializer.prototype.sh = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    return tmp$ret$0;
  };
  ArrayListSerializer.prototype.ai = function (_this__u8e3s4) {
    return _this__u8e3s4.i();
  };
  ArrayListSerializer.prototype.th = function (_this__u8e3s4) {
    return this.ai(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  ArrayListSerializer.prototype.bi = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  ArrayListSerializer.prototype.uh = function (_this__u8e3s4) {
    return this.bi(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  ArrayListSerializer.prototype.ci = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? ArrayList_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  ArrayListSerializer.prototype.vh = function (_this__u8e3s4) {
    return this.ci((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, List) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  ArrayListSerializer.prototype.di = function (_this__u8e3s4, size) {
    return _this__u8e3s4.v9(size);
  };
  ArrayListSerializer.prototype.wh = function (_this__u8e3s4, size) {
    return this.di(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE(), size);
  };
  ArrayListSerializer.prototype.ei = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.j9(index, element);
  };
  ArrayListSerializer.prototype.oh = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE();
    return this.ei(tmp, index, (element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  ArrayListSerializer.$metadata$ = classMeta('ArrayListSerializer', undefined, undefined, undefined, undefined, ListLikeSerializer.prototype);
  function jsonCachedSerialNames(_this__u8e3s4) {
    return cachedSerialNames(_this__u8e3s4);
  }
  function get_EMPTY_DESCRIPTOR_ARRAY() {
    init_properties_Platform_common_kt_9ujmfm();
    return EMPTY_DESCRIPTOR_ARRAY;
  }
  var EMPTY_DESCRIPTOR_ARRAY;
  function compactArray(_this__u8e3s4) {
    init_properties_Platform_common_kt_9ujmfm();
    var tmp$ret$2;
    // Inline function 'kotlin.takeUnless' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    var tmp$ret$1;
    // Inline function 'kotlinx.serialization.internal.compactArray.<anonymous>' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNullOrEmpty' call
    // Inline function 'kotlin.contracts.contract' call
    tmp$ret$0 = _this__u8e3s4 == null ? true : _this__u8e3s4.p();
    tmp$ret$1 = tmp$ret$0;
    if (!tmp$ret$1) {
      tmp = _this__u8e3s4;
    } else {
      tmp = null;
    }
    tmp$ret$2 = tmp;
    var tmp0_safe_receiver = tmp$ret$2;
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp$ret$3 = copyToArray(tmp0_safe_receiver);
      tmp_0 = tmp$ret$3;
    }
    var tmp1_elvis_lhs = tmp_0;
    return tmp1_elvis_lhs == null ? get_EMPTY_DESCRIPTOR_ARRAY() : tmp1_elvis_lhs;
  }
  function elementsHashCodeBy(_this__u8e3s4, selector) {
    init_properties_Platform_common_kt_9ujmfm();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.fold' call
    var accumulator = 1;
    var tmp0_iterator = _this__u8e3s4.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var tmp0__anonymous__q1qw7t = accumulator;
      var tmp = imul(31, tmp0__anonymous__q1qw7t);
      var tmp$ret$0;
      // Inline function 'kotlin.hashCode' call
      var tmp0_hashCode = selector(element);
      var tmp0_safe_receiver = tmp0_hashCode;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      tmp$ret$1 = tmp + tmp$ret$0 | 0;
      accumulator = tmp$ret$1;
    }
    tmp$ret$2 = accumulator;
    return tmp$ret$2;
  }
  function cachedSerialNames(_this__u8e3s4) {
    init_properties_Platform_common_kt_9ujmfm();
    if (isInterface(_this__u8e3s4, CachedNames))
      return _this__u8e3s4.ih();
    var result = HashSet_init_$Create$(_this__u8e3s4.hg());
    var inductionVariable = 0;
    var last = _this__u8e3s4.hg();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.plusAssign' call
        var tmp0_plusAssign = _this__u8e3s4.ig(i);
        result.a(tmp0_plusAssign);
      }
       while (inductionVariable < last);
    return result;
  }
  var properties_initialized_Platform_common_kt_i7q4ty;
  function init_properties_Platform_common_kt_9ujmfm() {
    if (properties_initialized_Platform_common_kt_i7q4ty) {
    } else {
      properties_initialized_Platform_common_kt_i7q4ty = true;
      var tmp$ret$2;
      // Inline function 'kotlin.arrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = [];
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      EMPTY_DESCRIPTOR_ARRAY = tmp$ret$2;
    }
  }
  function throwMissingFieldException(seen, goldenMask, descriptor) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var missingFields = tmp$ret$0;
    var missingFieldsBits = goldenMask & ~seen;
    var inductionVariable = 0;
    if (inductionVariable < 32)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!((missingFieldsBits & 1) === 0)) {
          // Inline function 'kotlin.collections.plusAssign' call
          var tmp0_plusAssign = descriptor.ig(i);
          missingFields.a(tmp0_plusAssign);
        }
        missingFieldsBits = missingFieldsBits >>> 1 | 0;
      }
       while (inductionVariable < 32);
    throw MissingFieldException_init_$Create$(missingFields, descriptor.eg());
  }
  function hashCodeImpl(_this__u8e3s4, typeParams) {
    var result = getStringHashCode(_this__u8e3s4.eg());
    result = imul(31, result) + contentHashCode(typeParams) | 0;
    var elementDescriptors = get_elementDescriptors(_this__u8e3s4);
    var tmp$ret$4;
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.fold' call
    var accumulator = 1;
    var tmp0_iterator = elementDescriptors.f();
    while (tmp0_iterator.g()) {
      var element = tmp0_iterator.h();
      var tmp$ret$2;
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var tmp0__anonymous__q1qw7t = accumulator;
      var tmp = imul(31, tmp0__anonymous__q1qw7t);
      var tmp$ret$1;
      // Inline function 'kotlin.hashCode' call
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      tmp$ret$0 = element.eg();
      var tmp0_hashCode = tmp$ret$0;
      var tmp0_safe_receiver = tmp0_hashCode;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      tmp$ret$1 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      tmp$ret$2 = tmp + tmp$ret$1 | 0;
      accumulator = tmp$ret$2;
    }
    tmp$ret$3 = accumulator;
    tmp$ret$4 = tmp$ret$3;
    var namesHash = tmp$ret$4;
    var tmp$ret$9;
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    var tmp$ret$8;
    // Inline function 'kotlin.collections.fold' call
    var accumulator_0 = 1;
    var tmp0_iterator_0 = elementDescriptors.f();
    while (tmp0_iterator_0.g()) {
      var element_0 = tmp0_iterator_0.h();
      var tmp$ret$7;
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var tmp0__anonymous__q1qw7t_0 = accumulator_0;
      var tmp_0 = imul(31, tmp0__anonymous__q1qw7t_0);
      var tmp$ret$6;
      // Inline function 'kotlin.hashCode' call
      var tmp$ret$5;
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      tmp$ret$5 = element_0.fg();
      var tmp0_hashCode_0 = tmp$ret$5;
      var tmp0_safe_receiver_0 = tmp0_hashCode_0;
      var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
      tmp$ret$6 = tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0;
      tmp$ret$7 = tmp_0 + tmp$ret$6 | 0;
      accumulator_0 = tmp$ret$7;
    }
    tmp$ret$8 = accumulator_0;
    tmp$ret$9 = tmp$ret$8;
    var kindHash = tmp$ret$9;
    result = imul(31, result) + namesHash | 0;
    result = imul(31, result) + kindHash | 0;
    return result;
  }
  function _get_indices__xyiwmu($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = indices$factory();
    tmp$ret$0 = $this.ni_1.f1();
    return tmp$ret$0;
  }
  function _get_childSerializers__7vnyfa($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = childSerializers$factory();
    tmp$ret$0 = $this.oi_1.f1();
    return tmp$ret$0;
  }
  function _get__hashCode__tgwhef($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = _hashCode$factory();
    tmp$ret$0 = $this.qi_1.f1();
    return tmp$ret$0;
  }
  function buildIndices($this) {
    var indices = HashMap_init_$Create$();
    var inductionVariable = 0;
    var last = $this.ji_1.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.set' call
        var tmp0_set = $this.ji_1[i];
        indices.u(tmp0_set, i);
      }
       while (inductionVariable <= last);
    return indices;
  }
  function PluginGeneratedSerialDescriptor$indices$delegate$lambda(this$0) {
    return function () {
      return buildIndices(this$0);
    };
  }
  function PluginGeneratedSerialDescriptor$childSerializers$delegate$lambda(this$0) {
    return function () {
      var tmp0_safe_receiver = this$0.gi_1;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.ri();
      var tmp;
      if (tmp1_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.emptyArray' call
        tmp$ret$0 = [];
        tmp = tmp$ret$0;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      return tmp;
    };
  }
  function PluginGeneratedSerialDescriptor$typeParameterDescriptors$delegate$lambda(this$0) {
    return function () {
      var tmp0_safe_receiver = this$0.gi_1;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.si();
      var tmp;
      if (tmp1_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp$ret$2;
        // Inline function 'kotlin.collections.map' call
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mapTo' call
        var tmp0_mapTo = ArrayList_init_$Create$_1(tmp1_safe_receiver.length);
        var tmp0_iterator = arrayIterator(tmp1_safe_receiver);
        while (tmp0_iterator.g()) {
          var item = tmp0_iterator.h();
          var tmp$ret$0;
          // Inline function 'kotlinx.serialization.internal.PluginGeneratedSerialDescriptor.typeParameterDescriptors$delegate.<anonymous>.<anonymous>' call
          tmp$ret$0 = item.cg();
          tmp0_mapTo.a(tmp$ret$0);
        }
        tmp$ret$1 = tmp0_mapTo;
        tmp$ret$2 = tmp$ret$1;
        tmp = tmp$ret$2;
      }
      return compactArray(tmp);
    };
  }
  function PluginGeneratedSerialDescriptor$_hashCode$delegate$lambda(this$0) {
    return function () {
      return hashCodeImpl(this$0, this$0.ti());
    };
  }
  function PluginGeneratedSerialDescriptor$toString$lambda(this$0) {
    return function (it) {
      return it.e1() + ': ' + this$0.kg(it.f1()).eg();
    };
  }
  function PluginGeneratedSerialDescriptor(serialName, generatedSerializer, elementsCount) {
    this.fi_1 = serialName;
    this.gi_1 = generatedSerializer;
    this.hi_1 = elementsCount;
    this.ii_1 = -1;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = this.hi_1;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_1), null);
    var tmp_2 = tmp$ret$0;
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.internal.PluginGeneratedSerialDescriptor.names.<anonymous>' call
      tmp$ret$1 = '[UNINITIALIZED]';
      tmp_2[tmp_3] = tmp$ret$1;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.ji_1 = tmp_2;
    var tmp_4 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = this.hi_1;
    tmp$ret$2 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    tmp_4.ki_1 = tmp$ret$2;
    this.li_1 = null;
    this.mi_1 = booleanArray(this.hi_1);
    var tmp_5 = this;
    tmp_5.ni_1 = lazy(PluginGeneratedSerialDescriptor$indices$delegate$lambda(this));
    var tmp_6 = this;
    tmp_6.oi_1 = lazy(PluginGeneratedSerialDescriptor$childSerializers$delegate$lambda(this));
    var tmp_7 = this;
    tmp_7.pi_1 = lazy(PluginGeneratedSerialDescriptor$typeParameterDescriptors$delegate$lambda(this));
    var tmp_8 = this;
    tmp_8.qi_1 = lazy(PluginGeneratedSerialDescriptor$_hashCode$delegate$lambda(this));
  }
  PluginGeneratedSerialDescriptor.prototype.eg = function () {
    return this.fi_1;
  };
  PluginGeneratedSerialDescriptor.prototype.hg = function () {
    return this.hi_1;
  };
  PluginGeneratedSerialDescriptor.prototype.fg = function () {
    return CLASS_getInstance();
  };
  PluginGeneratedSerialDescriptor.prototype.ih = function () {
    return _get_indices__xyiwmu(this).i3();
  };
  PluginGeneratedSerialDescriptor.prototype.ti = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = typeParameterDescriptors$factory();
    tmp$ret$0 = this.pi_1.f1();
    return tmp$ret$0;
  };
  PluginGeneratedSerialDescriptor.prototype.ui = function (name, isOptional) {
    var tmp0_this = this;
    tmp0_this.ii_1 = tmp0_this.ii_1 + 1 | 0;
    this.ji_1[tmp0_this.ii_1] = name;
    this.mi_1[this.ii_1] = isOptional;
    this.ki_1[this.ii_1] = null;
  };
  PluginGeneratedSerialDescriptor.prototype.kg = function (index) {
    return getChecked(_get_childSerializers__7vnyfa(this), index).cg();
  };
  PluginGeneratedSerialDescriptor.prototype.ig = function (index) {
    return getChecked(this.ji_1, index);
  };
  PluginGeneratedSerialDescriptor.prototype.jg = function (name) {
    var tmp0_elvis_lhs = _get_indices__xyiwmu(this).t(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      Companion_getInstance();
      tmp = -3;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  PluginGeneratedSerialDescriptor.prototype.equals = function (other) {
    var tmp$ret$0;
    $l$block_5: {
      // Inline function 'kotlinx.serialization.internal.equalsImpl' call
      if (this === other) {
        tmp$ret$0 = true;
        break $l$block_5;
      }
      if (!(other instanceof PluginGeneratedSerialDescriptor)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.eg() === other.eg())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.internal.PluginGeneratedSerialDescriptor.equals.<anonymous>' call
      var tmp0__anonymous__q1qw7t = other;
      tmp$ret$1 = contentEquals(this.ti(), tmp0__anonymous__q1qw7t.ti());
      if (!tmp$ret$1) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.hg() === other.hg())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var inductionVariable = 0;
      var last = this.hg();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(this.kg(index).eg() === other.kg(index).eg())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
          if (!equals(this.kg(index).fg(), other.kg(index).fg())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
        }
         while (inductionVariable < last);
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  PluginGeneratedSerialDescriptor.prototype.hashCode = function () {
    return _get__hashCode__tgwhef(this);
  };
  PluginGeneratedSerialDescriptor.prototype.toString = function () {
    var tmp = _get_indices__xyiwmu(this).d1();
    var tmp_0 = this.eg() + '(';
    return joinToString$default(tmp, ', ', tmp_0, ')', 0, null, PluginGeneratedSerialDescriptor$toString$lambda(this), 24, null);
  };
  PluginGeneratedSerialDescriptor.$metadata$ = classMeta('PluginGeneratedSerialDescriptor', [SerialDescriptor, CachedNames]);
  function indices$factory() {
    return getPropertyCallableRef('indices', 1, KProperty1, function (receiver) {
      return _get_indices__xyiwmu(receiver);
    }, null);
  }
  function childSerializers$factory() {
    return getPropertyCallableRef('childSerializers', 1, KProperty1, function (receiver) {
      return _get_childSerializers__7vnyfa(receiver);
    }, null);
  }
  function typeParameterDescriptors$factory() {
    return getPropertyCallableRef('typeParameterDescriptors', 1, KProperty1, function (receiver) {
      return receiver.ti();
    }, null);
  }
  function _hashCode$factory() {
    return getPropertyCallableRef('_hashCode', 1, KProperty1, function (receiver) {
      return _get__hashCode__tgwhef(receiver);
    }, null);
  }
  function get_EMPTY_SERIALIZER_ARRAY() {
    init_properties_PluginHelperInterfaces_kt_tblf27();
    return EMPTY_SERIALIZER_ARRAY;
  }
  var EMPTY_SERIALIZER_ARRAY;
  function GeneratedSerializer() {
  }
  GeneratedSerializer.$metadata$ = interfaceMeta('GeneratedSerializer', [KSerializer]);
  var properties_initialized_PluginHelperInterfaces_kt_ap8in1;
  function init_properties_PluginHelperInterfaces_kt_tblf27() {
    if (properties_initialized_PluginHelperInterfaces_kt_ap8in1) {
    } else {
      properties_initialized_PluginHelperInterfaces_kt_ap8in1 = true;
      var tmp$ret$2;
      // Inline function 'kotlin.arrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = [];
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      EMPTY_SERIALIZER_ARRAY = tmp$ret$2;
    }
  }
  function StringSerializer() {
    StringSerializer_instance = this;
    this.vi_1 = new PrimitiveSerialDescriptor('kotlin.String', STRING_getInstance());
  }
  StringSerializer.prototype.cg = function () {
    return this.vi_1;
  };
  StringSerializer.prototype.dg = function (decoder) {
    return decoder.qg();
  };
  StringSerializer.$metadata$ = objectMeta('StringSerializer', [KSerializer]);
  var StringSerializer_instance;
  function StringSerializer_getInstance() {
    if (StringSerializer_instance == null)
      new StringSerializer();
    return StringSerializer_instance;
  }
  function IntSerializer() {
    IntSerializer_instance = this;
    this.wi_1 = new PrimitiveSerialDescriptor('kotlin.Int', INT_getInstance());
  }
  IntSerializer.prototype.cg = function () {
    return this.wi_1;
  };
  IntSerializer.prototype.dg = function (decoder) {
    return decoder.pg();
  };
  IntSerializer.$metadata$ = objectMeta('IntSerializer', [KSerializer]);
  var IntSerializer_instance;
  function IntSerializer_getInstance() {
    if (IntSerializer_instance == null)
      new IntSerializer();
    return IntSerializer_instance;
  }
  function error($this) {
    throw IllegalStateException_init_$Create$('Primitive descriptor does not have elements');
  }
  function PrimitiveSerialDescriptor(serialName, kind) {
    this.xi_1 = serialName;
    this.yi_1 = kind;
  }
  PrimitiveSerialDescriptor.prototype.eg = function () {
    return this.xi_1;
  };
  PrimitiveSerialDescriptor.prototype.fg = function () {
    return this.yi_1;
  };
  PrimitiveSerialDescriptor.prototype.hg = function () {
    return 0;
  };
  PrimitiveSerialDescriptor.prototype.ig = function (index) {
    error(this);
  };
  PrimitiveSerialDescriptor.prototype.jg = function (name) {
    error(this);
  };
  PrimitiveSerialDescriptor.prototype.kg = function (index) {
    error(this);
  };
  PrimitiveSerialDescriptor.prototype.toString = function () {
    return 'PrimitiveDescriptor(' + this.xi_1 + ')';
  };
  PrimitiveSerialDescriptor.$metadata$ = classMeta('PrimitiveSerialDescriptor', [SerialDescriptor]);
  function NamedValueDecoder() {
    TaggedDecoder.call(this);
  }
  NamedValueDecoder.prototype.bj = function (_this__u8e3s4, index) {
    return this.dj(this.cj(_this__u8e3s4, index));
  };
  NamedValueDecoder.prototype.dj = function (nestedName) {
    var tmp0_elvis_lhs = this.gj();
    return this.hj(tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs, nestedName);
  };
  NamedValueDecoder.prototype.cj = function (desc, index) {
    return desc.ig(index);
  };
  NamedValueDecoder.prototype.hj = function (parentName, childName) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.text.isEmpty' call
    tmp$ret$0 = charSequenceLength(parentName) === 0;
    if (tmp$ret$0) {
      tmp = childName;
    } else {
      tmp = parentName + '.' + childName;
    }
    return tmp;
  };
  NamedValueDecoder.$metadata$ = classMeta('NamedValueDecoder', undefined, undefined, undefined, undefined, TaggedDecoder.prototype);
  function tagBlock($this, tag, block) {
    $this.lj(tag);
    var r = block();
    if (!$this.fj_1) {
      $this.mj();
    }
    $this.fj_1 = false;
    return r;
  }
  function TaggedDecoder$decodeSerializableElement$lambda(this$0, $deserializer, $previousValue) {
    return function () {
      return this$0.rg($deserializer, $previousValue);
    };
  }
  function TaggedDecoder() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.ej_1 = tmp$ret$0;
    this.fj_1 = false;
  }
  TaggedDecoder.prototype.zg = function () {
    return get_EmptySerializersModule();
  };
  TaggedDecoder.prototype.ij = function (tag) {
    throw SerializationException_init_$Create$('' + getKClassFromExpression(this) + " can't retrieve untyped values");
  };
  TaggedDecoder.prototype.jj = function (tag) {
    var tmp = this.ij(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  TaggedDecoder.prototype.kj = function (tag) {
    var tmp = this.ij(tag);
    return typeof tmp === 'string' ? tmp : THROW_CCE();
  };
  TaggedDecoder.prototype.rg = function (deserializer, previousValue) {
    return this.sg(deserializer);
  };
  TaggedDecoder.prototype.pg = function () {
    return this.jj(this.mj());
  };
  TaggedDecoder.prototype.qg = function () {
    return this.kj(this.mj());
  };
  TaggedDecoder.prototype.tg = function (descriptor) {
    return this;
  };
  TaggedDecoder.prototype.ug = function (descriptor) {
  };
  TaggedDecoder.prototype.vg = function (descriptor, index) {
    return this.jj(this.bj(descriptor, index));
  };
  TaggedDecoder.prototype.wg = function (descriptor, index) {
    return this.kj(this.bj(descriptor, index));
  };
  TaggedDecoder.prototype.xg = function (descriptor, index, deserializer, previousValue) {
    var tmp = this.bj(descriptor, index);
    return tagBlock(this, tmp, TaggedDecoder$decodeSerializableElement$lambda(this, deserializer, previousValue));
  };
  TaggedDecoder.prototype.gj = function () {
    return lastOrNull(this.ej_1);
  };
  TaggedDecoder.prototype.lj = function (name) {
    this.ej_1.a(name);
  };
  TaggedDecoder.prototype.mj = function () {
    var r = this.ej_1.a9(get_lastIndex(this.ej_1));
    this.fj_1 = true;
    return r;
  };
  TaggedDecoder.$metadata$ = classMeta('TaggedDecoder', [Decoder, CompositeDecoder]);
  function get_EmptySerializersModule() {
    init_properties_SerializersModule_kt_swldyf();
    return EmptySerializersModule;
  }
  var EmptySerializersModule;
  function SerializersModule() {
  }
  SerializersModule.$metadata$ = classMeta('SerializersModule');
  function SerialModuleImpl(class2Serializer, polyBase2Serializers, polyBase2NamedSerializers, polyBase2DefaultProvider) {
    SerializersModule.call(this);
    this.nj_1 = class2Serializer;
    this.oj_1 = polyBase2Serializers;
    this.pj_1 = polyBase2NamedSerializers;
    this.qj_1 = polyBase2DefaultProvider;
  }
  SerialModuleImpl.prototype.hh = function (baseClass, serializedClassName) {
    var tmp0_safe_receiver = this.pj_1.t(baseClass);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.get' call
      tmp$ret$0 = ((!(tmp0_safe_receiver == null) ? isInterface(tmp0_safe_receiver, Map) : false) ? tmp0_safe_receiver : THROW_CCE()).t(serializedClassName);
      tmp = tmp$ret$0;
    }
    var tmp_0 = tmp;
    var registered = (!(tmp_0 == null) ? isInterface(tmp_0, KSerializer) : false) ? tmp_0 : null;
    if (!(registered == null))
      return registered;
    var tmp_1 = this.qj_1.t(baseClass);
    var tmp1_safe_receiver = (!(tmp_1 == null) ? typeof tmp_1 === 'function' : false) ? tmp_1 : null;
    return tmp1_safe_receiver == null ? null : tmp1_safe_receiver(serializedClassName);
  };
  SerialModuleImpl.$metadata$ = classMeta('SerialModuleImpl', undefined, undefined, undefined, undefined, SerializersModule.prototype);
  var properties_initialized_SerializersModule_kt_fjigjn;
  function init_properties_SerializersModule_kt_swldyf() {
    if (properties_initialized_SerializersModule_kt_fjigjn) {
    } else {
      properties_initialized_SerializersModule_kt_fjigjn = true;
      EmptySerializersModule = new SerialModuleImpl(emptyMap(), emptyMap(), emptyMap(), emptyMap());
    }
  }
  function SerializableWith() {
  }
  SerializableWith.$metadata$ = classMeta('SerializableWith', [Annotation], 0);
  function getChecked(_this__u8e3s4, index) {
    if (!(0 <= index ? index <= (_this__u8e3s4.length - 1 | 0) : false))
      throw IndexOutOfBoundsException_init_$Create$('Index ' + index + ' out of bounds ' + get_indices(_this__u8e3s4));
    return _this__u8e3s4[index];
  }
  //region block: post-declaration
  AbstractDecoder.prototype.yg = decodeSerializableElement$default;
  AbstractDecoder.prototype.sg = decodeSerializableValue;
  AbstractDecoder.prototype.ah = decodeSequentially;
  AbstractDecoder.prototype.ch = decodeCollectionSize;
  ListLikeDescriptor.prototype.gg = get_isNullable;
  ArrayListClassDesc.prototype.gg = get_isNullable;
  PluginGeneratedSerialDescriptor.prototype.gg = get_isNullable;
  PrimitiveSerialDescriptor.prototype.gg = get_isNullable;
  TaggedDecoder.prototype.yg = decodeSerializableElement$default;
  TaggedDecoder.prototype.sg = decodeSerializableValue;
  TaggedDecoder.prototype.ah = decodeSequentially;
  TaggedDecoder.prototype.ch = decodeCollectionSize;
  NamedValueDecoder.prototype.sg = decodeSerializableValue;
  NamedValueDecoder.prototype.yg = decodeSerializableElement$default;
  NamedValueDecoder.prototype.ah = decodeSequentially;
  NamedValueDecoder.prototype.ch = decodeCollectionSize;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = decodeSerializableElement$default;
  _.$_$.b = SerializationException_init_$Init$;
  _.$_$.c = UnknownFieldException_init_$Create$;
  _.$_$.d = ENUM_getInstance;
  _.$_$.e = LIST_getInstance;
  _.$_$.f = MAP_getInstance;
  _.$_$.g = Companion_getInstance;
  _.$_$.h = IntSerializer_getInstance;
  _.$_$.i = StringSerializer_getInstance;
  _.$_$.j = ListSerializer;
  _.$_$.k = PolymorphicKind;
  _.$_$.l = PrimitiveKind;
  _.$_$.m = AbstractDecoder;
  _.$_$.n = decodeCollectionSize;
  _.$_$.o = decodeSequentially;
  _.$_$.p = CompositeDecoder;
  _.$_$.q = Decoder;
  _.$_$.r = AbstractPolymorphicSerializer;
  _.$_$.s = typeParametersSerializers;
  _.$_$.t = GeneratedSerializer;
  _.$_$.u = NamedValueDecoder;
  _.$_$.v = PluginGeneratedSerialDescriptor;
  _.$_$.w = jsonCachedSerialNames;
  _.$_$.x = throwMissingFieldException;
  _.$_$.y = get_EmptySerializersModule;
  _.$_$.z = DeserializationStrategy;
  _.$_$.a1 = KSerializer;
  _.$_$.b1 = SerializationException;
  _.$_$.c1 = StringFormat;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.js.map


/***/ }),

/***/ 683:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(72), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var objectMeta = kotlin_kotlin.$_$.g6;
  var toString = kotlin_kotlin.$_$.i6;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f1;
  var StringFormat = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c1;
  var classMeta = kotlin_kotlin.$_$.o5;
  var Decoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q;
  var CompositeDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p;
  var interfaceMeta = kotlin_kotlin.$_$.v5;
  var THROW_CCE = kotlin_kotlin.$_$.p7;
  var equals = kotlin_kotlin.$_$.q5;
  var hashCode = kotlin_kotlin.$_$.u5;
  var joinToString$default = kotlin_kotlin.$_$.h;
  var List = kotlin_kotlin.$_$.b3;
  var Unit_getInstance = kotlin_kotlin.$_$.u2;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.x;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;
  var Map = kotlin_kotlin.$_$.c3;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var getStringHashCode = kotlin_kotlin.$_$.t5;
  var toInt = kotlin_kotlin.$_$.a7;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var isInterface = kotlin_kotlin.$_$.x5;
  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1;
  var get_EmptySerializersModule = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.y;
  var captureStack = kotlin_kotlin.$_$.i5;
  var SerializationException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b1;
  var SerializationException_init_$Init$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b;
  var coerceAtLeast = kotlin_kotlin.$_$.l6;
  var coerceAtMost = kotlin_kotlin.$_$.m6;
  var numberToChar = kotlin_kotlin.$_$.c6;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.u;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.o;
  var concatToString = kotlin_kotlin.$_$.s6;
  var copyOf = kotlin_kotlin.$_$.o3;
  var charSequenceGet = kotlin_kotlin.$_$.l5;
  var Char = kotlin_kotlin.$_$.f7;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.q1;
  var charArray = kotlin_kotlin.$_$.k5;
  var last = kotlin_kotlin.$_$.g4;
  var AbstractPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r;
  var getKClass = kotlin_kotlin.$_$.b;
  var DeserializationStrategy = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z;
  var Companion_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g;
  var ENUM_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d;
  var AbstractDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m;
  var IllegalArgumentException = kotlin_kotlin.$_$.k7;
  var decodeSequentially = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o;
  var decodeCollectionSize = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n;
  var decodeSerializableElement$default = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a;
  var fillArrayVal = kotlin_kotlin.$_$.r5;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.z7;
  var NamedValueDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.u;
  var PolymorphicKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k;
  var LIST_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e;
  var PrimitiveKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l;
  var MAP_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f;
  var getValue = kotlin_kotlin.$_$.a4;
  var jsonCachedSerialNames = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.w;
  var toList = kotlin_kotlin.$_$.y4;
  var Enum = kotlin_kotlin.$_$.i7;
  //endregion
  //region block: pre-declaration
  Default.prototype = Object.create(Json.prototype);
  Default.prototype.constructor = Default;
  JsonArray.prototype = Object.create(JsonElement.prototype);
  JsonArray.prototype.constructor = JsonArray;
  JsonObject.prototype = Object.create(JsonElement.prototype);
  JsonObject.prototype.constructor = JsonObject;
  JsonPrimitive.prototype = Object.create(JsonElement.prototype);
  JsonPrimitive.prototype.constructor = JsonPrimitive;
  JsonNull.prototype = Object.create(JsonPrimitive.prototype);
  JsonNull.prototype.constructor = JsonNull;
  JsonLiteral.prototype = Object.create(JsonPrimitive.prototype);
  JsonLiteral.prototype.constructor = JsonLiteral;
  JsonException.prototype = Object.create(SerializationException.prototype);
  JsonException.prototype.constructor = JsonException;
  JsonDecodingException.prototype = Object.create(JsonException.prototype);
  JsonDecodingException.prototype.constructor = JsonDecodingException;
  JsonEncodingException.prototype = Object.create(JsonException.prototype);
  JsonEncodingException.prototype.constructor = JsonEncodingException;
  StreamingJsonDecoder.prototype = Object.create(AbstractDecoder.prototype);
  StreamingJsonDecoder.prototype.constructor = StreamingJsonDecoder;
  AbstractJsonTreeDecoder.prototype = Object.create(NamedValueDecoder.prototype);
  AbstractJsonTreeDecoder.prototype.constructor = AbstractJsonTreeDecoder;
  JsonTreeDecoder.prototype = Object.create(AbstractJsonTreeDecoder.prototype);
  JsonTreeDecoder.prototype.constructor = JsonTreeDecoder;
  JsonTreeListDecoder.prototype = Object.create(AbstractJsonTreeDecoder.prototype);
  JsonTreeListDecoder.prototype.constructor = JsonTreeListDecoder;
  JsonPrimitiveDecoder.prototype = Object.create(AbstractJsonTreeDecoder.prototype);
  JsonPrimitiveDecoder.prototype.constructor = JsonPrimitiveDecoder;
  JsonTreeMapDecoder.prototype = Object.create(JsonTreeDecoder.prototype);
  JsonTreeMapDecoder.prototype.constructor = JsonTreeMapDecoder;
  WriteMode.prototype = Object.create(Enum.prototype);
  WriteMode.prototype.constructor = WriteMode;
  //endregion
  function Default() {
    Default_instance = this;
    Json.call(this, JsonConf_init_$Create$(false, false, false, false, false, null, false, false, null, false, null, 2047, null));
  }
  Default.$metadata$ = objectMeta('Default', undefined, undefined, undefined, undefined, Json.prototype);
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Json(configuration) {
    Default_getInstance();
    this.rj_1 = configuration;
  }
  Json.prototype.zg = function () {
    return this.rj_1.ek_1;
  };
  Json.prototype.sj = function (deserializer, string) {
    var reader = new JsonReader(string);
    var input = new StreamingJsonDecoder(this, WriteMode_OBJ_getInstance(), reader);
    var result = input.sg(deserializer);
    if (!reader.sk()) {
      // Inline function 'kotlin.error' call
      var tmp0_error = 'Reader has not consumed the whole input: ' + reader;
      throw IllegalStateException_init_$Create$(toString(tmp0_error));
    }
    return result;
  };
  Json.prototype.tj = function (deserializer, element) {
    return readJson(this, element, deserializer);
  };
  Json.$metadata$ = classMeta('Json', [StringFormat]);
  function JsonDecoder() {
  }
  JsonDecoder.$metadata$ = interfaceMeta('JsonDecoder', [Decoder, CompositeDecoder]);
  function Companion() {
    Companion_instance = this;
  }
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance_0() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function JsonElement() {
    Companion_getInstance_0();
  }
  JsonElement.$metadata$ = classMeta('JsonElement');
  function Companion_0() {
    Companion_instance_0 = this;
  }
  Companion_0.$metadata$ = objectMeta('Companion');
  var Companion_instance_0;
  function Companion_getInstance_1() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function JsonArray(content) {
    Companion_getInstance_1();
    JsonElement.call(this);
    this.vk_1 = content;
  }
  JsonArray.prototype.wk = function (element) {
    return this.vk_1.u1(element);
  };
  JsonArray.prototype.u1 = function (element) {
    if (!(element instanceof JsonElement))
      return false;
    return this.wk(element instanceof JsonElement ? element : THROW_CCE());
  };
  JsonArray.prototype.xk = function (elements) {
    return this.vk_1.v1(elements);
  };
  JsonArray.prototype.v1 = function (elements) {
    return this.xk(elements);
  };
  JsonArray.prototype.l = function (index) {
    return this.vk_1.l(index);
  };
  JsonArray.prototype.yk = function (element) {
    return this.vk_1.j2(element);
  };
  JsonArray.prototype.j2 = function (element) {
    if (!(element instanceof JsonElement))
      return -1;
    return this.yk(element instanceof JsonElement ? element : THROW_CCE());
  };
  JsonArray.prototype.p = function () {
    return this.vk_1.p();
  };
  JsonArray.prototype.f = function () {
    return this.vk_1.f();
  };
  JsonArray.prototype.k = function (index) {
    return this.vk_1.k(index);
  };
  JsonArray.prototype.s = function (fromIndex, toIndex) {
    return this.vk_1.s(fromIndex, toIndex);
  };
  JsonArray.prototype.i = function () {
    return this.vk_1.i();
  };
  JsonArray.prototype.equals = function (other) {
    return equals(this.vk_1, other);
  };
  JsonArray.prototype.hashCode = function () {
    return hashCode(this.vk_1);
  };
  JsonArray.prototype.toString = function () {
    return joinToString$default(this.vk_1, ',', '[', ']', 0, null, null, 56, null);
  };
  JsonArray.$metadata$ = classMeta('JsonArray', [List], undefined, undefined, undefined, JsonElement.prototype);
  function Companion_1() {
    Companion_instance_1 = this;
  }
  Companion_1.$metadata$ = objectMeta('Companion');
  var Companion_instance_1;
  function Companion_getInstance_2() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function JsonObject$toString$lambda(_name_for_destructuring_parameter_0__wldtmu) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.component1' call
    tmp$ret$0 = _name_for_destructuring_parameter_0__wldtmu.e1();
    var k = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.component2' call
    tmp$ret$1 = _name_for_destructuring_parameter_0__wldtmu.f1();
    var v = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.serialization.json.JsonObject.toString.<anonymous>.<anonymous>' call
    printQuoted(tmp0_apply, k);
    tmp0_apply.q5(_Char___init__impl__6a9atx(58));
    tmp0_apply.td(v);
    tmp$ret$2 = tmp0_apply;
    tmp$ret$3 = tmp$ret$2.toString();
    return tmp$ret$3;
  }
  function JsonObject(content) {
    Companion_getInstance_2();
    JsonElement.call(this);
    this.zk_1 = content;
  }
  JsonObject.prototype.al = function (key) {
    return this.zk_1.c3(key);
  };
  JsonObject.prototype.c3 = function (key) {
    if (!(!(key == null) ? typeof key === 'string' : false))
      return false;
    return this.al((!(key == null) ? typeof key === 'string' : false) ? key : THROW_CCE());
  };
  JsonObject.prototype.bl = function (key) {
    return this.zk_1.t(key);
  };
  JsonObject.prototype.t = function (key) {
    if (!(!(key == null) ? typeof key === 'string' : false))
      return null;
    return this.bl((!(key == null) ? typeof key === 'string' : false) ? key : THROW_CCE());
  };
  JsonObject.prototype.p = function () {
    return this.zk_1.p();
  };
  JsonObject.prototype.d1 = function () {
    return this.zk_1.d1();
  };
  JsonObject.prototype.i3 = function () {
    return this.zk_1.i3();
  };
  JsonObject.prototype.i = function () {
    return this.zk_1.i();
  };
  JsonObject.prototype.j3 = function () {
    return this.zk_1.j3();
  };
  JsonObject.prototype.equals = function (other) {
    return equals(this.zk_1, other);
  };
  JsonObject.prototype.hashCode = function () {
    return hashCode(this.zk_1);
  };
  JsonObject.prototype.toString = function () {
    var tmp = this.zk_1.d1();
    return joinToString$default(tmp, ',', '{', '}', 0, null, JsonObject$toString$lambda, 24, null);
  };
  JsonObject.$metadata$ = classMeta('JsonObject', [Map], undefined, undefined, undefined, JsonElement.prototype);
  function Companion_2() {
    Companion_instance_2 = this;
  }
  Companion_2.$metadata$ = objectMeta('Companion');
  var Companion_instance_2;
  function Companion_getInstance_3() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function JsonPrimitive() {
    Companion_getInstance_3();
    JsonElement.call(this);
  }
  JsonPrimitive.prototype.toString = function () {
    return this.cl();
  };
  JsonPrimitive.$metadata$ = classMeta('JsonPrimitive', undefined, undefined, undefined, undefined, JsonElement.prototype);
  function JsonNull() {
    JsonNull_instance = this;
    JsonPrimitive.call(this);
    this.dl_1 = 'null';
  }
  JsonNull.prototype.cl = function () {
    return this.dl_1;
  };
  JsonNull.$metadata$ = objectMeta('JsonNull', undefined, undefined, undefined, undefined, JsonPrimitive.prototype);
  var JsonNull_instance;
  function JsonNull_getInstance() {
    if (JsonNull_instance == null)
      new JsonNull();
    return JsonNull_instance;
  }
  function JsonLiteral(body, isString) {
    JsonPrimitive.call(this);
    this.el_1 = isString;
    this.fl_1 = toString(body);
  }
  JsonLiteral.prototype.cl = function () {
    return this.fl_1;
  };
  JsonLiteral.prototype.toString = function () {
    var tmp;
    if (this.el_1) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.buildString' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.apply' call
      var tmp0_apply = StringBuilder_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.JsonLiteral.toString.<anonymous>' call
      printQuoted(tmp0_apply, this.fl_1);
      tmp$ret$0 = tmp0_apply;
      tmp$ret$1 = tmp$ret$0.toString();
      tmp = tmp$ret$1;
    } else {
      tmp = this.fl_1;
    }
    return tmp;
  };
  JsonLiteral.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (other instanceof JsonLiteral)
      other;
    else
      THROW_CCE();
    if (!(this.el_1 === other.el_1))
      return false;
    if (!(this.fl_1 === other.fl_1))
      return false;
    return true;
  };
  JsonLiteral.prototype.hashCode = function () {
    var result = this.el_1 | 0;
    result = imul(31, result) + getStringHashCode(this.fl_1) | 0;
    return result;
  };
  JsonLiteral.$metadata$ = classMeta('JsonLiteral', undefined, undefined, undefined, undefined, JsonPrimitive.prototype);
  function JsonPrimitive_0(value) {
    if (value == null)
      return JsonNull_getInstance();
    return new JsonLiteral(value, true);
  }
  function get_int(_this__u8e3s4) {
    return toInt(_this__u8e3s4.cl());
  }
  function get_contentOrNull(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 instanceof JsonNull) {
      tmp = null;
    } else {
      tmp = _this__u8e3s4.cl();
    }
    return tmp;
  }
  function get_jsonPrimitive(_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof JsonPrimitive ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      error(_this__u8e3s4, 'JsonPrimitive');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function error(_this__u8e3s4, element) {
    throw IllegalArgumentException_init_$Create$('Element ' + getKClassFromExpression(_this__u8e3s4) + ' is not a ' + element);
  }
  function asJsonDecoder(_this__u8e3s4) {
    var tmp0_elvis_lhs = isInterface(_this__u8e3s4, JsonDecoder) ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('This serializer can be used only with Json format.' + ('Expected Decoder to be JsonDecoder, got ' + getKClassFromExpression(_this__u8e3s4)));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function JsonTransformingSerializer(tSerializer) {
    this.gl_1 = tSerializer;
  }
  JsonTransformingSerializer.prototype.cg = function () {
    return this.gl_1.cg();
  };
  JsonTransformingSerializer.prototype.dg = function (decoder) {
    var input = asJsonDecoder(decoder);
    var element = input.uk();
    return input.tk().tj(this.gl_1, this.hl(element));
  };
  JsonTransformingSerializer.prototype.hl = function (element) {
    return element;
  };
  JsonTransformingSerializer.$metadata$ = classMeta('JsonTransformingSerializer', [KSerializer]);
  function JsonConf_init_$Init$(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, serializersModule, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      encodeDefaults = false;
    if (!(($mask0 & 2) === 0))
      ignoreUnknownKeys = false;
    if (!(($mask0 & 4) === 0))
      isLenient = false;
    if (!(($mask0 & 8) === 0))
      allowStructuredMapKeys = false;
    if (!(($mask0 & 16) === 0))
      prettyPrint = false;
    if (!(($mask0 & 32) === 0))
      prettyPrintIndent = '    ';
    if (!(($mask0 & 64) === 0))
      coerceInputValues = false;
    if (!(($mask0 & 128) === 0))
      useArrayPolymorphism = false;
    if (!(($mask0 & 256) === 0))
      classDiscriminator = 'type';
    if (!(($mask0 & 512) === 0))
      allowSpecialFloatingPointValues = false;
    if (!(($mask0 & 1024) === 0))
      serializersModule = get_EmptySerializersModule();
    JsonConf.call($this, encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, serializersModule);
    return $this;
  }
  function JsonConf_init_$Create$(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, serializersModule, $mask0, $marker) {
    return JsonConf_init_$Init$(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, serializersModule, $mask0, $marker, Object.create(JsonConf.prototype));
  }
  function JsonConf(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, serializersModule) {
    this.uj_1 = encodeDefaults;
    this.vj_1 = ignoreUnknownKeys;
    this.wj_1 = isLenient;
    this.xj_1 = allowStructuredMapKeys;
    this.yj_1 = prettyPrint;
    this.zj_1 = prettyPrintIndent;
    this.ak_1 = coerceInputValues;
    this.bk_1 = useArrayPolymorphism;
    this.ck_1 = classDiscriminator;
    this.dk_1 = allowSpecialFloatingPointValues;
    this.ek_1 = serializersModule;
  }
  JsonConf.prototype.toString = function () {
    return 'JsonConf(encodeDefaults=' + this.uj_1 + ', ignoreUnknownKeys=' + this.vj_1 + ', isLenient=' + this.wj_1 + ', allowStructuredMapKeys=' + this.xj_1 + ', prettyPrint=' + this.yj_1 + ', prettyPrintIndent=' + this.zj_1 + ', coerceInputValues=' + this.ak_1 + ', useArrayPolymorphism=' + this.bk_1 + ', classDiscriminator=' + this.ck_1 + ', allowSpecialFloatingPointValues=' + this.dk_1 + ', serializersModule=' + this.ek_1 + ')';
  };
  JsonConf.prototype.hashCode = function () {
    var result = this.uj_1 | 0;
    result = imul(result, 31) + (this.vj_1 | 0) | 0;
    result = imul(result, 31) + (this.wj_1 | 0) | 0;
    result = imul(result, 31) + (this.xj_1 | 0) | 0;
    result = imul(result, 31) + (this.yj_1 | 0) | 0;
    result = imul(result, 31) + getStringHashCode(this.zj_1) | 0;
    result = imul(result, 31) + (this.ak_1 | 0) | 0;
    result = imul(result, 31) + (this.bk_1 | 0) | 0;
    result = imul(result, 31) + getStringHashCode(this.ck_1) | 0;
    result = imul(result, 31) + (this.dk_1 | 0) | 0;
    result = imul(result, 31) + hashCode(this.ek_1) | 0;
    return result;
  };
  JsonConf.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof JsonConf))
      return false;
    var tmp0_other_with_cast = other instanceof JsonConf ? other : THROW_CCE();
    if (!(this.uj_1 === tmp0_other_with_cast.uj_1))
      return false;
    if (!(this.vj_1 === tmp0_other_with_cast.vj_1))
      return false;
    if (!(this.wj_1 === tmp0_other_with_cast.wj_1))
      return false;
    if (!(this.xj_1 === tmp0_other_with_cast.xj_1))
      return false;
    if (!(this.yj_1 === tmp0_other_with_cast.yj_1))
      return false;
    if (!(this.zj_1 === tmp0_other_with_cast.zj_1))
      return false;
    if (!(this.ak_1 === tmp0_other_with_cast.ak_1))
      return false;
    if (!(this.bk_1 === tmp0_other_with_cast.bk_1))
      return false;
    if (!(this.ck_1 === tmp0_other_with_cast.ck_1))
      return false;
    if (!(this.dk_1 === tmp0_other_with_cast.dk_1))
      return false;
    if (!equals(this.ek_1, tmp0_other_with_cast.ek_1))
      return false;
    return true;
  };
  JsonConf.$metadata$ = classMeta('JsonConf');
  function JsonDecodingException(message) {
    JsonException.call(this, message);
    captureStack(this, JsonDecodingException);
  }
  JsonDecodingException.$metadata$ = classMeta('JsonDecodingException', undefined, undefined, undefined, undefined, JsonException.prototype);
  function JsonDecodingException_0(offset, message, input) {
    return JsonDecodingException_1(offset, message + '\nJSON input: ' + minify(input, offset));
  }
  function JsonEncodingException(message) {
    JsonException.call(this, message);
    captureStack(this, JsonEncodingException);
  }
  JsonEncodingException.$metadata$ = classMeta('JsonEncodingException', undefined, undefined, undefined, undefined, JsonException.prototype);
  function InvalidKeyKindException(keyDescriptor) {
    return new JsonEncodingException("Value of type '" + keyDescriptor.eg() + "' can't be used in JSON as a key in the map. " + ("It should have either primitive or enum kind, but its kind is '" + keyDescriptor.fg() + "'.\n") + get_allowStructuredMapKeysHint());
  }
  function UnknownKeyException(key, input) {
    var tmp = "Encountered unknown key '" + key + "'.\n" + (get_ignoreUnknownKeysHint() + '\n');
    return JsonDecodingException_1(-1, tmp + ('Current input: ' + minify$default(input, 0, 1, null)));
  }
  function JsonException(message) {
    SerializationException_init_$Init$(message, this);
    captureStack(this, JsonException);
  }
  JsonException.$metadata$ = classMeta('JsonException', undefined, undefined, undefined, undefined, SerializationException.prototype);
  function JsonDecodingException_1(offset, message) {
    return new JsonDecodingException(offset >= 0 ? 'Unexpected JSON token at offset ' + offset + ': ' + message : message);
  }
  function minify(_this__u8e3s4, offset) {
    if (_this__u8e3s4.length < 200)
      return _this__u8e3s4;
    if (offset === -1) {
      var start = _this__u8e3s4.length - 60 | 0;
      if (start <= 0)
        return _this__u8e3s4;
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.substring(start);
      return '.....' + tmp$ret$1;
    }
    var start_0 = offset - 30 | 0;
    var end = offset + 30 | 0;
    var prefix = start_0 <= 0 ? '' : '.....';
    var suffix = end >= _this__u8e3s4.length ? '' : '.....';
    var tmp$ret$3;
    // Inline function 'kotlin.text.substring' call
    var tmp0_substring = coerceAtLeast(start_0, 0);
    var tmp1_substring = coerceAtMost(end, _this__u8e3s4.length);
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = _this__u8e3s4;
    tmp$ret$3 = tmp$ret$2.substring(tmp0_substring, tmp1_substring);
    return prefix + tmp$ret$3 + suffix;
  }
  function minify$default(_this__u8e3s4, offset, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      offset = -1;
    return minify(_this__u8e3s4, offset);
  }
  function readObject($this) {
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
    var tmp0_requireTokenClass = $this.il_1;
    var tmp1_requireTokenClass = get_TC_BEGIN_OBJ();
    if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readObject.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
      tmp$ret$0 = 'Expected start of the object';
      tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
    }
    $this.il_1.ll();
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp3_require = $this.il_1;
    var tmp4_require = !($this.il_1.nk_1 === get_TC_COMMA());
    var tmp5_require = $this.il_1.mk_1;
    if (!tmp4_require) {
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readObject.<anonymous>' call
      tmp$ret$1 = 'Unexpected leading comma';
      tmp3_require.kl(tmp$ret$1, tmp5_require);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.linkedMapOf' call
    tmp$ret$2 = LinkedHashMap_init_$Create$();
    var result = tmp$ret$2;
    var valueExpected = false;
    while ($this.il_1.ml()) {
      valueExpected = false;
      var key = $this.jl_1 ? $this.il_1.ol() : $this.il_1.nl();
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp6_requireTokenClass = $this.il_1;
      var tmp7_requireTokenClass = get_TC_COLON();
      if (!(tmp6_requireTokenClass.nk_1 === tmp7_requireTokenClass)) {
        var tmp$ret$3;
        // Inline function 'kotlinx.serialization.json.internal.JsonParser.readObject.<anonymous>' call
        var tmp8__anonymous__65w033 = numberToChar(tmp6_requireTokenClass.nk_1);
        tmp$ret$3 = "Expected ':'";
        tmp6_requireTokenClass.kl(tmp$ret$3, tmp6_requireTokenClass.ok_1);
      }
      $this.il_1.ll();
      var element = $this.pl();
      // Inline function 'kotlin.collections.set' call
      result.u(key, element);
      if (!($this.il_1.nk_1 === get_TC_COMMA())) {
        // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
        var tmp9_requireTokenClass = $this.il_1;
        var tmp10_requireTokenClass = get_TC_END_OBJ();
        if (!(tmp9_requireTokenClass.nk_1 === tmp10_requireTokenClass)) {
          var tmp$ret$4;
          // Inline function 'kotlinx.serialization.json.internal.JsonParser.readObject.<anonymous>' call
          var tmp11__anonymous__tkubxh = numberToChar(tmp9_requireTokenClass.nk_1);
          tmp$ret$4 = 'Expected end of the object or comma';
          tmp9_requireTokenClass.kl(tmp$ret$4, tmp9_requireTokenClass.ok_1);
        }
      } else {
        valueExpected = true;
        $this.il_1.ll();
      }
    }
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp12_require = $this.il_1;
    var tmp13_require = !valueExpected ? $this.il_1.nk_1 === get_TC_END_OBJ() : false;
    var tmp14_require = $this.il_1.mk_1;
    if (!tmp13_require) {
      var tmp$ret$5;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readObject.<anonymous>' call
      tmp$ret$5 = 'Expected end of the object';
      tmp12_require.kl(tmp$ret$5, tmp14_require);
    }
    $this.il_1.ll();
    return new JsonObject(result);
  }
  function readArray($this) {
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
    var tmp0_requireTokenClass = $this.il_1;
    var tmp1_requireTokenClass = get_TC_BEGIN_LIST();
    if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readArray.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
      tmp$ret$0 = 'Expected start of the array';
      tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
    }
    $this.il_1.ll();
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp3_require = $this.il_1;
    var tmp4_require = !($this.il_1.nk_1 === get_TC_COMMA());
    var tmp5_require = $this.il_1.mk_1;
    if (!tmp4_require) {
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readArray.<anonymous>' call
      tmp$ret$1 = 'Unexpected leading comma';
      tmp3_require.kl(tmp$ret$1, tmp5_require);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp$ret$2 = ArrayList_init_$Create$();
    var result = tmp$ret$2;
    var valueExpected = false;
    while ($this.il_1.ml()) {
      valueExpected = false;
      var element = $this.pl();
      result.a(element);
      if (!($this.il_1.nk_1 === get_TC_COMMA())) {
        // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
        var tmp6_requireTokenClass = $this.il_1;
        var tmp7_requireTokenClass = get_TC_END_LIST();
        if (!(tmp6_requireTokenClass.nk_1 === tmp7_requireTokenClass)) {
          var tmp$ret$3;
          // Inline function 'kotlinx.serialization.json.internal.JsonParser.readArray.<anonymous>' call
          var tmp8__anonymous__65w033 = numberToChar(tmp6_requireTokenClass.nk_1);
          tmp$ret$3 = 'Expected end of the array or comma';
          tmp6_requireTokenClass.kl(tmp$ret$3, tmp6_requireTokenClass.ok_1);
        }
      } else {
        valueExpected = true;
        $this.il_1.ll();
      }
    }
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp9_require = $this.il_1;
    var tmp10_require = !valueExpected;
    var tmp11_require = $this.il_1.mk_1;
    if (!tmp10_require) {
      var tmp$ret$4;
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.readArray.<anonymous>' call
      tmp$ret$4 = 'Unexpected trailing comma';
      tmp9_require.kl(tmp$ret$4, tmp11_require);
    }
    $this.il_1.ll();
    return new JsonArray(result);
  }
  function readValue($this, isString) {
    var tmp;
    if ($this.jl_1) {
      tmp = $this.il_1.ol();
    } else {
      tmp = isString ? $this.il_1.nl() : $this.il_1.ol();
    }
    var str = tmp;
    return new JsonLiteral(str, isString);
  }
  function JsonParser(configuration, reader) {
    this.il_1 = reader;
    this.jl_1 = configuration.wj_1;
  }
  JsonParser.prototype.pl = function () {
    if (!this.il_1.ml()) {
      this.il_1.ql("Can't begin reading value from here", 0, 2, null);
    }
    var tmp0_subject = this.il_1.nk_1;
    var tmp;
    if (tmp0_subject === get_TC_NULL()) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = JsonNull_getInstance();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.JsonParser.read.<anonymous>' call
      this.il_1.ll();
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else if (tmp0_subject === get_TC_STRING()) {
      tmp = readValue(this, true);
    } else if (tmp0_subject === get_TC_OTHER()) {
      tmp = readValue(this, false);
    } else if (tmp0_subject === get_TC_BEGIN_OBJ()) {
      tmp = readObject(this);
    } else if (tmp0_subject === get_TC_BEGIN_LIST()) {
      tmp = readArray(this);
    } else {
      this.il_1.ql("Can't begin reading element, unexpected token", 0, 2, null);
    }
    return tmp;
  };
  JsonParser.$metadata$ = classMeta('JsonParser');
  function takeStringInternal($this, advance) {
    var tmp;
    if ($this.pk_1 < 0) {
      tmp = concatToString($this.rk_1, 0, 0 + $this.qk_1 | 0);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = $this.lk_1;
      var tmp1_substring = $this.pk_1;
      var tmp2_substring = $this.pk_1 + $this.qk_1 | 0;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_substring;
      tmp$ret$1 = tmp$ret$0.substring(tmp1_substring, tmp2_substring);
      tmp = tmp$ret$1;
    }
    var prevStr = tmp;
    if (advance) {
      $this.ll();
    }
    return prevStr;
  }
  function takeStringInternal$default($this, advance, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      advance = true;
    return takeStringInternal($this, advance);
  }
  function append($this, ch) {
    if ($this.qk_1 >= $this.rk_1.length)
      $this.rk_1 = copyOf($this.rk_1, imul(2, $this.rk_1.length));
    var tmp = $this.rk_1;
    var tmp0_this = $this;
    var tmp1 = tmp0_this.qk_1;
    tmp0_this.qk_1 = tmp1 + 1 | 0;
    tmp[tmp1] = ch;
  }
  function appendRange($this, source, fromIndex, toIndex) {
    var addLen = toIndex - fromIndex | 0;
    var oldLen = $this.qk_1;
    var newLen = oldLen + addLen | 0;
    if (newLen > $this.rk_1.length)
      $this.rk_1 = copyOf($this.rk_1, coerceAtLeast(newLen, imul(2, $this.rk_1.length)));
    var inductionVariable = 0;
    if (inductionVariable < addLen)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        $this.rk_1[oldLen + i | 0] = charSequenceGet(source, fromIndex + i | 0);
      }
       while (inductionVariable < addLen);
    var tmp1_this = $this;
    tmp1_this.qk_1 = tmp1_this.qk_1 + addLen | 0;
  }
  function nextLiteral($this, source, startPos) {
    $this.ok_1 = startPos;
    $this.pk_1 = startPos;
    var currentPosition = startPos;
    while (currentPosition < source.length ? charToTokenClass(charSequenceGet(source, currentPosition)) === 0 : false) {
      var tmp0 = currentPosition;
      currentPosition = tmp0 + 1 | 0;
    }
    $this.mk_1 = currentPosition;
    $this.qk_1 = currentPosition - $this.pk_1 | 0;
    $this.nk_1 = rangeEquals(source, $this.pk_1, $this.qk_1, 'null') ? 10 : 0;
  }
  function nextString($this, source, startPosition) {
    $this.ok_1 = startPosition;
    $this.qk_1 = 0;
    var currentPosition = startPosition + 1 | 0;
    if (currentPosition >= source.length) {
      $this.kl('EOF', currentPosition);
    }
    var lastPosition = currentPosition;
    while (!equals(new Char(charSequenceGet(source, currentPosition)), new Char(_Char___init__impl__6a9atx(34)))) {
      if (equals(new Char(charSequenceGet(source, currentPosition)), new Char(_Char___init__impl__6a9atx(92)))) {
        appendRange($this, source, lastPosition, currentPosition);
        var newPosition = appendEsc($this, source, currentPosition + 1 | 0);
        currentPosition = newPosition;
        lastPosition = newPosition;
      } else {
        currentPosition = currentPosition + 1 | 0;
        if (currentPosition >= source.length) {
          $this.kl('EOF', currentPosition);
        }
      }
    }
    if (lastPosition === (startPosition + 1 | 0)) {
      $this.pk_1 = lastPosition;
      $this.qk_1 = currentPosition - lastPosition | 0;
    } else {
      appendRange($this, source, lastPosition, currentPosition);
      $this.pk_1 = -1;
    }
    $this.mk_1 = currentPosition + 1 | 0;
    $this.nk_1 = 1;
  }
  function appendEsc($this, source, startPosition) {
    var currentPosition = startPosition;
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp0_require = currentPosition < source.length;
    var tmp1_require = currentPosition;
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.appendEsc.<anonymous>' call
      tmp$ret$0 = 'Unexpected EOF after escape character';
      $this.kl(tmp$ret$0, tmp1_require);
    }
    var tmp0 = currentPosition;
    currentPosition = tmp0 + 1 | 0;
    var currentChar = charSequenceGet(source, tmp0);
    if (equals(new Char(currentChar), new Char(_Char___init__impl__6a9atx(117)))) {
      return appendHex($this, source, currentPosition);
    }
    var c = escapeToChar(Char__toInt_impl_vasixd(currentChar));
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp2_require = !equals(new Char(c), new Char(_Char___init__impl__6a9atx(0)));
    var tmp3_require = currentPosition;
    if (!tmp2_require) {
      var tmp$ret$1;
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.appendEsc.<anonymous>' call
      tmp$ret$1 = "Invalid escaped char '" + new Char(currentChar) + "'";
      $this.kl(tmp$ret$1, tmp3_require);
    }
    append($this, c);
    return currentPosition;
  }
  function appendHex($this, source, startPos) {
    var curPos = startPos;
    var tmp3 = curPos;
    curPos = tmp3 + 1 | 0;
    var tmp = fromHexChar($this, source, tmp3) << 12;
    var tmp2 = curPos;
    curPos = tmp2 + 1 | 0;
    var tmp_0 = tmp + (fromHexChar($this, source, tmp2) << 8) | 0;
    var tmp1 = curPos;
    curPos = tmp1 + 1 | 0;
    var tmp_1 = tmp_0 + (fromHexChar($this, source, tmp1) << 4) | 0;
    var tmp0 = curPos;
    curPos = tmp0 + 1 | 0;
    append($this, numberToChar(tmp_1 + fromHexChar($this, source, tmp0) | 0));
    return curPos;
  }
  function fromHexChar($this, source, currentPosition) {
    // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
    var tmp0_require = currentPosition < source.length;
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.fromHexChar.<anonymous>' call
      tmp$ret$0 = 'Unexpected EOF during unicode escape';
      $this.kl(tmp$ret$0, currentPosition);
    }
    var curChar = charSequenceGet(source, currentPosition);
    var tmp;
    if (_Char___init__impl__6a9atx(48) <= curChar ? curChar <= _Char___init__impl__6a9atx(57) : false) {
      tmp = Char__toInt_impl_vasixd(curChar) - 48 | 0;
    } else if (_Char___init__impl__6a9atx(97) <= curChar ? curChar <= _Char___init__impl__6a9atx(102) : false) {
      tmp = (Char__toInt_impl_vasixd(curChar) - 97 | 0) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65) <= curChar ? curChar <= _Char___init__impl__6a9atx(70) : false) {
      tmp = (Char__toInt_impl_vasixd(curChar) - 65 | 0) + 10 | 0;
    } else {
      var tmp_0 = "Invalid toHexChar char '" + new Char(curChar) + "' in unicode escape";
      $this.ql(tmp_0, 0, 2, null);
    }
    return tmp;
  }
  function JsonReader(source) {
    this.lk_1 = source;
    this.mk_1 = 0;
    this.nk_1 = 12;
    this.ok_1 = 0;
    this.pk_1 = -1;
    this.qk_1 = 0;
    this.rk_1 = charArray(16);
    this.ll();
  }
  JsonReader.prototype.sk = function () {
    return this.nk_1 === 12;
  };
  JsonReader.prototype.ml = function () {
    var tmp0_subject = this.nk_1;
    return ((((tmp0_subject === 8 ? true : tmp0_subject === 6) ? true : tmp0_subject === 0) ? true : tmp0_subject === 1) ? true : tmp0_subject === 10) ? true : false;
  };
  JsonReader.prototype.rl = function (expected, errorMessage) {
    if (!(this.nk_1 === expected)) {
      this.kl(errorMessage(new Char(numberToChar(this.nk_1))), this.ok_1);
    }
  };
  JsonReader.prototype.ol = function () {
    if (!(this.nk_1 === 0) ? !(this.nk_1 === 1) : false) {
      this.kl('Expected string or non-null literal', this.ok_1);
    }
    return takeStringInternal$default(this, false, 2, null);
  };
  JsonReader.prototype.sl = function (isLenient) {
    return (!(this.nk_1 === 1) ? !isLenient ? true : !(this.nk_1 === 0) : false) ? null : takeStringInternal(this, false);
  };
  JsonReader.prototype.nl = function () {
    var tmp0_subject = this.nk_1;
    if (tmp0_subject === 1) {
    } else if (tmp0_subject === 10) {
      this.kl("Expected string literal but 'null' literal was found.\nUse 'coerceInputValues = true' in 'Json {}` builder to coerce nulls to default values.", this.ok_1);
    } else {
      this.kl("Expected string literal with quotes.\nUse 'isLenient = true' in 'Json {}` builder to accept non-compliant JSON.", this.ok_1);
    }
    return takeStringInternal$default(this, false, 2, null);
  };
  JsonReader.prototype.ll = function () {
    var source = this.lk_1;
    var currentPosition = this.mk_1;
    while (currentPosition < source.length) {
      var ch = charSequenceGet(source, currentPosition);
      var tc = charToTokenClass(ch);
      if (tc === 3) {
        var tmp0 = currentPosition;
        currentPosition = tmp0 + 1 | 0;
      } else if (tc === 0) {
        nextLiteral(this, source, currentPosition);
        return Unit_getInstance();
      } else if (tc === 1) {
        nextString(this, source, currentPosition);
        return Unit_getInstance();
      } else {
        this.ok_1 = currentPosition;
        this.nk_1 = tc;
        this.mk_1 = currentPosition + 1 | 0;
        return Unit_getInstance();
      }
    }
    this.ok_1 = currentPosition;
    this.nk_1 = 12;
  };
  JsonReader.prototype.tl = function () {
    if (!(this.nk_1 === 6) ? !(this.nk_1 === 8) : false) {
      this.ll();
      return Unit_getInstance();
    }
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var tokenStack = tmp$ret$0;
    $l$1: do {
      $l$0: do {
        var tmp0_subject = this.nk_1;
        if (tmp0_subject === 8 ? true : tmp0_subject === 6) {
          tokenStack.a(this.nk_1);
        } else if (tmp0_subject === 9) {
          if (!(last(tokenStack) === 8))
            throw JsonDecodingException_0(this.mk_1, 'found ] instead of }', this.lk_1);
          tokenStack.a9(tokenStack.i() - 1 | 0);
        } else if (tmp0_subject === 7) {
          if (!(last(tokenStack) === 6))
            throw JsonDecodingException_0(this.mk_1, 'found } instead of ]', this.lk_1);
          tokenStack.a9(tokenStack.i() - 1 | 0);
        }
        this.ll();
      }
       while (false);
      var tmp$ret$1;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$1 = !tokenStack.p();
    }
     while (tmp$ret$1);
  };
  JsonReader.prototype.toString = function () {
    return "JsonReader(source='" + this.lk_1 + "', currentPosition=" + this.mk_1 + ', tokenClass=' + this.nk_1 + ', tokenPosition=' + this.ok_1 + ', offset=' + this.pk_1 + ')';
  };
  JsonReader.prototype.kl = function (message, position) {
    throw JsonDecodingException_0(position, message, this.lk_1);
  };
  JsonReader.prototype.ql = function (message, position, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      position = this.mk_1;
    return this.kl(message, position);
  };
  JsonReader.prototype.ul = function (condition, position, message) {
    if (!condition) {
      this.kl(message(), position);
    }
  };
  JsonReader.$metadata$ = classMeta('JsonReader');
  function get_STRING() {
    return STRING;
  }
  var STRING;
  function get_INVALID() {
    return INVALID;
  }
  var INVALID;
  function get_BEGIN_OBJ() {
    return BEGIN_OBJ;
  }
  var BEGIN_OBJ;
  function get_END_OBJ() {
    return END_OBJ;
  }
  var END_OBJ;
  function get_BEGIN_LIST() {
    return BEGIN_LIST;
  }
  var BEGIN_LIST;
  function get_END_LIST() {
    return END_LIST;
  }
  var END_LIST;
  function charToTokenClass(c) {
    return Char__toInt_impl_vasixd(c) < 126 ? CharMappings_getInstance().wl_1[Char__toInt_impl_vasixd(c)] : 0;
  }
  function get_TC_BEGIN_LIST() {
    return TC_BEGIN_LIST;
  }
  var TC_BEGIN_LIST;
  function get_TC_BEGIN_OBJ() {
    return TC_BEGIN_OBJ;
  }
  var TC_BEGIN_OBJ;
  function get_TC_OTHER() {
    return TC_OTHER;
  }
  var TC_OTHER;
  function get_TC_STRING() {
    return TC_STRING;
  }
  var TC_STRING;
  function get_TC_NULL() {
    return TC_NULL;
  }
  var TC_NULL;
  function get_lenientHint() {
    return lenientHint;
  }
  var lenientHint;
  function rangeEquals(source, start, length, str) {
    var n = str.length;
    if (!(length === n))
      return false;
    var inductionVariable = 0;
    if (inductionVariable < n)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(new Char(charSequenceGet(source, start + i | 0)), new Char(charSequenceGet(str, i))))
          return false;
      }
       while (inductionVariable < n);
    return true;
  }
  function escapeToChar(c) {
    return c < 117 ? CharMappings_getInstance().vl_1[c] : _Char___init__impl__6a9atx(0);
  }
  function get_TC_END_LIST() {
    return TC_END_LIST;
  }
  var TC_END_LIST;
  function get_TC_END_OBJ() {
    return TC_END_OBJ;
  }
  var TC_END_OBJ;
  function initEscape($this) {
    var inductionVariable = 0;
    if (inductionVariable <= 31)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        initC2ESC($this, i, _Char___init__impl__6a9atx(117));
      }
       while (inductionVariable <= 31);
    initC2ESC($this, 8, _Char___init__impl__6a9atx(98));
    initC2ESC($this, 9, _Char___init__impl__6a9atx(116));
    initC2ESC($this, 10, _Char___init__impl__6a9atx(110));
    initC2ESC($this, 12, _Char___init__impl__6a9atx(102));
    initC2ESC($this, 13, _Char___init__impl__6a9atx(114));
    initC2ESC_0($this, _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(47));
    initC2ESC_0($this, _Char___init__impl__6a9atx(34), _Char___init__impl__6a9atx(34));
    initC2ESC_0($this, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(92));
  }
  function initCharToToken($this) {
    var inductionVariable = 0;
    if (inductionVariable <= 32)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        initC2TC($this, i, 11);
      }
       while (inductionVariable <= 32);
    initC2TC($this, 9, 3);
    initC2TC($this, 10, 3);
    initC2TC($this, 13, 3);
    initC2TC($this, 32, 3);
    initC2TC_0($this, _Char___init__impl__6a9atx(44), 4);
    initC2TC_0($this, _Char___init__impl__6a9atx(58), 5);
    initC2TC_0($this, _Char___init__impl__6a9atx(123), 6);
    initC2TC_0($this, _Char___init__impl__6a9atx(125), 7);
    initC2TC_0($this, _Char___init__impl__6a9atx(91), 8);
    initC2TC_0($this, _Char___init__impl__6a9atx(93), 9);
    initC2TC_0($this, _Char___init__impl__6a9atx(34), 1);
    initC2TC_0($this, _Char___init__impl__6a9atx(92), 2);
  }
  function initC2ESC($this, c, esc) {
    if (!equals(new Char(esc), new Char(_Char___init__impl__6a9atx(117)))) {
      $this.vl_1[Char__toInt_impl_vasixd(esc)] = numberToChar(c);
    }
  }
  function initC2ESC_0($this, c, esc) {
    return initC2ESC($this, Char__toInt_impl_vasixd(c), esc);
  }
  function initC2TC($this, c, cl) {
    $this.wl_1[c] = cl;
  }
  function initC2TC_0($this, c, cl) {
    return initC2TC($this, Char__toInt_impl_vasixd(c), cl);
  }
  function CharMappings() {
    CharMappings_instance = this;
    this.vl_1 = charArray(117);
    this.wl_1 = new Int8Array(126);
    initEscape(this);
    initCharToToken(this);
  }
  CharMappings.$metadata$ = objectMeta('CharMappings');
  var CharMappings_instance;
  function CharMappings_getInstance() {
    if (CharMappings_instance == null)
      new CharMappings();
    return CharMappings_instance;
  }
  function get_TC_COMMA() {
    return TC_COMMA;
  }
  var TC_COMMA;
  function get_TC_COLON() {
    return TC_COLON;
  }
  var TC_COLON;
  function get_ignoreUnknownKeysHint() {
    return ignoreUnknownKeysHint;
  }
  var ignoreUnknownKeysHint;
  function get_allowStructuredMapKeysHint() {
    return allowStructuredMapKeysHint;
  }
  var allowStructuredMapKeysHint;
  function decodeSerializableValuePolymorphic(_this__u8e3s4, deserializer) {
    var tmp;
    if (!(deserializer instanceof AbstractPolymorphicSerializer)) {
      tmp = true;
    } else {
      tmp = _this__u8e3s4.tk().rj_1.bk_1;
    }
    if (tmp) {
      return deserializer.dg(_this__u8e3s4);
    }
    var tmp$ret$0;
    // Inline function 'kotlinx.serialization.json.internal.cast' call
    var tmp0_cast = _this__u8e3s4.uk();
    var tmp1_cast = deserializer.cg();
    if (!(tmp0_cast instanceof JsonObject)) {
      throw JsonDecodingException_1(-1, 'Expected ' + getKClass(JsonObject) + ' as the serialized body of ' + tmp1_cast.eg() + ', but had ' + getKClassFromExpression(tmp0_cast));
    }
    tmp$ret$0 = tmp0_cast;
    var jsonTree = tmp$ret$0;
    var discriminator = _this__u8e3s4.tk().rj_1.ck_1;
    var tmp0_safe_receiver = jsonTree.bl(discriminator);
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : get_jsonPrimitive(tmp0_safe_receiver);
    var type = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.cl();
    var tmp2_elvis_lhs = deserializer.gh(_this__u8e3s4, type);
    var tmp_0;
    if (tmp2_elvis_lhs == null) {
      throwSerializerNotFound(type, jsonTree);
    } else {
      tmp_0 = tmp2_elvis_lhs;
    }
    var actualSerializer = tmp_0;
    var tmp_1 = _this__u8e3s4.tk();
    return readPolymorphicJson(tmp_1, discriminator, jsonTree, isInterface(actualSerializer, DeserializationStrategy) ? actualSerializer : THROW_CCE());
  }
  function throwSerializerNotFound(type, jsonTree) {
    var suffix = type == null ? "missing class discriminator ('null')" : "class discriminator '" + type + "'";
    throw JsonDecodingException_0(-1, 'Polymorphic serializer was not found for ' + suffix, jsonTree.toString());
  }
  function decodeMapIndex($this, tokenClass) {
    if (!(tokenClass === get_TC_COMMA()) ? ($this.jk_1 % 2 | 0) === 1 : false) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp0_requireTokenClass = $this.hk_1;
      var tmp1_requireTokenClass = get_TC_END_OBJ();
      if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeMapIndex.<anonymous>' call
        var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
        tmp$ret$0 = 'Expected end of the object or comma';
        tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
      }
    }
    if (($this.jk_1 % 2 | 0) === 0) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp3_requireTokenClass = $this.hk_1;
      var tmp4_requireTokenClass = get_TC_COLON();
      if (!(tmp3_requireTokenClass.nk_1 === tmp4_requireTokenClass)) {
        var tmp$ret$1;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeMapIndex.<anonymous>' call
        var tmp5__anonymous__kpxxpo = numberToChar(tmp3_requireTokenClass.nk_1);
        tmp$ret$1 = "Expected ':' after the key";
        tmp3_requireTokenClass.kl(tmp$ret$1, tmp3_requireTokenClass.ok_1);
      }
      $this.hk_1.ll();
    }
    var tmp;
    if (!$this.hk_1.ml()) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
      var tmp6_require = $this.hk_1;
      var tmp7_require = !(tokenClass === get_TC_COMMA());
      var tmp8_require = tmp6_require.mk_1;
      if (!tmp7_require) {
        var tmp$ret$2;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeMapIndex.<anonymous>' call
        tmp$ret$2 = 'Unexpected trailing comma';
        tmp6_require.kl(tmp$ret$2, tmp8_require);
      }
      Companion_getInstance();
      tmp = -1;
    } else {
      var tmp0_this = $this;
      tmp0_this.jk_1 = tmp0_this.jk_1 + 1 | 0;
      tmp = tmp0_this.jk_1;
    }
    return tmp;
  }
  function coerceInputValue($this, descriptor, index) {
    var elementDescriptor = descriptor.kg(index);
    if ($this.hk_1.nk_1 === get_TC_NULL() ? !elementDescriptor.gg() : false)
      return true;
    if (equals(elementDescriptor.fg(), ENUM_getInstance())) {
      var tmp0_elvis_lhs = $this.hk_1.sl($this.kk_1.wj_1);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var enumValue = tmp;
      var enumIndex = elementDescriptor.jg(enumValue);
      Companion_getInstance();
      if (enumIndex === -3)
        return true;
    }
    return false;
  }
  function decodeObjectIndex($this, tokenClass, descriptor) {
    if (tokenClass === get_TC_COMMA() ? !$this.hk_1.ml() : false) {
      $this.hk_1.ql('Unexpected trailing comma', 0, 2, null);
    }
    while ($this.hk_1.ml()) {
      var tmp0_this = $this;
      tmp0_this.jk_1 = tmp0_this.jk_1 + 1 | 0;
      var key = $this.qg();
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp0_requireTokenClass = $this.hk_1;
      var tmp1_requireTokenClass = get_TC_COLON();
      if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeObjectIndex.<anonymous>' call
        var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
        tmp$ret$0 = "Expected ':'";
        tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
      }
      $this.hk_1.ll();
      var index = descriptor.jg(key);
      var tmp;
      Companion_getInstance();
      if (!(index === -3)) {
        var tmp_0;
        if ($this.kk_1.ak_1 ? coerceInputValue($this, descriptor, index) : false) {
          tmp_0 = false;
        } else {
          return index;
        }
        tmp = tmp_0;
      } else {
        tmp = true;
      }
      var isUnknown = tmp;
      if (isUnknown ? !$this.kk_1.vj_1 : false) {
        var tmp_1 = "Encountered an unknown key '" + key + "'.\n" + get_ignoreUnknownKeysHint();
        $this.hk_1.ql(tmp_1, 0, 2, null);
      } else {
        $this.hk_1.tl();
      }
      if ($this.hk_1.nk_1 === get_TC_COMMA()) {
        $this.hk_1.ll();
        // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
        var tmp3_require = $this.hk_1;
        var tmp4_require = $this.hk_1.ml();
        var tmp5_require = $this.hk_1.mk_1;
        if (!tmp4_require) {
          var tmp$ret$1;
          // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeObjectIndex.<anonymous>' call
          tmp$ret$1 = 'Unexpected trailing comma';
          tmp3_require.kl(tmp$ret$1, tmp5_require);
        }
      }
    }
    Companion_getInstance();
    return -1;
  }
  function decodeListIndex($this, tokenClass) {
    if (!(tokenClass === get_TC_COMMA()) ? !($this.jk_1 === -1) : false) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp0_requireTokenClass = $this.hk_1;
      var tmp1_requireTokenClass = get_TC_END_LIST();
      if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeListIndex.<anonymous>' call
        var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
        tmp$ret$0 = 'Expected end of the array or comma';
        tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
      }
    }
    var tmp;
    if (!$this.hk_1.ml()) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
      var tmp3_require = $this.hk_1;
      var tmp4_require = !(tokenClass === get_TC_COMMA());
      var tmp5_require = tmp3_require.mk_1;
      if (!tmp4_require) {
        var tmp$ret$1;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeListIndex.<anonymous>' call
        tmp$ret$1 = 'Unexpected trailing comma';
        tmp3_require.kl(tmp$ret$1, tmp5_require);
      }
      Companion_getInstance();
      tmp = -1;
    } else {
      var tmp0_this = $this;
      tmp0_this.jk_1 = tmp0_this.jk_1 + 1 | 0;
      tmp = tmp0_this.jk_1;
    }
    return tmp;
  }
  function StreamingJsonDecoder(json, mode, reader) {
    AbstractDecoder.call(this);
    this.fk_1 = json;
    this.gk_1 = mode;
    this.hk_1 = reader;
    this.ik_1 = this.tk().zg();
    this.jk_1 = -1;
    this.kk_1 = this.tk().rj_1;
  }
  StreamingJsonDecoder.prototype.tk = function () {
    return this.fk_1;
  };
  StreamingJsonDecoder.prototype.zg = function () {
    return this.ik_1;
  };
  StreamingJsonDecoder.prototype.uk = function () {
    return (new JsonParser(this.tk().rj_1, this.hk_1)).pl();
  };
  StreamingJsonDecoder.prototype.sg = function (deserializer) {
    return decodeSerializableValuePolymorphic(this, deserializer);
  };
  StreamingJsonDecoder.prototype.tg = function (descriptor) {
    var newMode = switchMode(this.tk(), descriptor);
    if (!equals(new Char(newMode.zl_1), new Char(get_INVALID()))) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp0_requireTokenClass = this.hk_1;
      var tmp1_requireTokenClass = newMode.bm_1;
      if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.beginStructure.<anonymous>' call
        var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
        tmp$ret$0 = "Expected '" + new Char(newMode.zl_1) + ', kind: ' + descriptor.fg() + "'";
        tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
      }
      this.hk_1.ll();
    }
    var tmp0_subject = newMode;
    var tmp0 = tmp0_subject.a2_1;
    switch (tmp0) {
      case 1:
      case 2:
      case 3:
        return new StreamingJsonDecoder(this.tk(), newMode, this.hk_1);
      default:
        return this.gk_1.equals(newMode) ? this : new StreamingJsonDecoder(this.tk(), newMode, this.hk_1);
    }
  };
  StreamingJsonDecoder.prototype.ug = function (descriptor) {
    if (!equals(new Char(this.gk_1.am_1), new Char(get_INVALID()))) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.requireTokenClass' call
      var tmp0_requireTokenClass = this.hk_1;
      var tmp1_requireTokenClass = this.gk_1.cm_1;
      if (!(tmp0_requireTokenClass.nk_1 === tmp1_requireTokenClass)) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.endStructure.<anonymous>' call
        var tmp2__anonymous__z9zvc9 = numberToChar(tmp0_requireTokenClass.nk_1);
        tmp$ret$0 = "Expected '" + new Char(this.gk_1.am_1) + "'";
        tmp0_requireTokenClass.kl(tmp$ret$0, tmp0_requireTokenClass.ok_1);
      }
      this.hk_1.ll();
    }
  };
  StreamingJsonDecoder.prototype.bh = function (descriptor) {
    var tokenClass = this.hk_1.nk_1;
    if (tokenClass === get_TC_COMMA()) {
      // Inline function 'kotlinx.serialization.json.internal.JsonReader.require' call
      var tmp0_require = this.hk_1;
      var tmp1_require = !(this.jk_1 === -1);
      var tmp2_require = this.hk_1.mk_1;
      if (!tmp1_require) {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeElementIndex.<anonymous>' call
        tmp$ret$0 = 'Unexpected leading comma';
        tmp0_require.kl(tmp$ret$0, tmp2_require);
      }
      this.hk_1.ll();
    }
    var tmp0_subject = this.gk_1;
    var tmp0 = tmp0_subject.a2_1;
    var tmp;
    switch (tmp0) {
      case 1:
        tmp = decodeListIndex(this, tokenClass);
        break;
      case 2:
        tmp = decodeMapIndex(this, tokenClass);
        break;
      case 3:
        var tmp1_this = this;
        tmp1_this.jk_1 = tmp1_this.jk_1 + 1 | 0;
        var tmp2_subject = tmp1_this.jk_1;
        var tmp_0;
        switch (tmp2_subject) {
          case 0:
            tmp_0 = 0;
            break;
          case 1:
            tmp_0 = 1;
            break;
          default:
            Companion_getInstance();
            tmp_0 = -1;
            break;
        }

        tmp = tmp_0;
        break;
      default:
        tmp = decodeObjectIndex(this, tokenClass, descriptor);
        break;
    }
    return tmp;
  };
  StreamingJsonDecoder.prototype.pg = function () {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var tmp0_parseString = this.hk_1;
      var input = tmp0_parseString.ol();
      try {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeInt.<anonymous>' call
        tmp$ret$0 = toInt(input);
        tmp$ret$1 = tmp$ret$0;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var tmp = "Failed to parse type 'int' for input '" + input + "'";
          tmp0_parseString.ql(tmp, 0, 2, null);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$1;
  };
  StreamingJsonDecoder.prototype.qg = function () {
    var tmp;
    if (this.kk_1.wj_1) {
      tmp = this.hk_1.ol();
    } else {
      tmp = this.hk_1.nl();
    }
    return tmp;
  };
  StreamingJsonDecoder.$metadata$ = classMeta('StreamingJsonDecoder', [JsonDecoder], undefined, undefined, undefined, AbstractDecoder.prototype);
  function parseString(_this__u8e3s4, expectedType, block) {
    var input = _this__u8e3s4.ol();
    try {
      return block(input);
    } catch ($p) {
      if ($p instanceof IllegalArgumentException) {
        var tmp = "Failed to parse type '" + expectedType + "' for input '" + input + "'";
        _this__u8e3s4.ql(tmp, 0, 2, null);
      } else {
        throw $p;
      }
    }
  }
  function get_ESCAPE_CHARS() {
    init_properties_StringOps_kt_g67jhv();
    return ESCAPE_CHARS;
  }
  var ESCAPE_CHARS;
  function toHexChar(i) {
    init_properties_StringOps_kt_g67jhv();
    var d = i & 15;
    return d < 10 ? numberToChar(d + 48 | 0) : numberToChar((d - 10 | 0) + 97 | 0);
  }
  function printQuoted(_this__u8e3s4, value) {
    init_properties_StringOps_kt_g67jhv();
    _this__u8e3s4.q5(get_STRING());
    var lastPos = 0;
    var length = value.length;
    var inductionVariable = 0;
    if (inductionVariable < length)
      $l$loop_0: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var c = Char__toInt_impl_vasixd(charSequenceGet(value, i));
        if (c >= get_ESCAPE_CHARS().length)
          continue $l$loop_0;
        var tmp1_elvis_lhs = get_ESCAPE_CHARS()[c];
        var tmp;
        if (tmp1_elvis_lhs == null) {
          continue $l$loop_0;
        } else {
          tmp = tmp1_elvis_lhs;
        }
        var esc = tmp;
        _this__u8e3s4.rd(value, lastPos, i);
        _this__u8e3s4.ud(esc);
        lastPos = i + 1 | 0;
      }
       while (inductionVariable < length);
    _this__u8e3s4.rd(value, lastPos, length);
    _this__u8e3s4.q5(get_STRING());
  }
  var properties_initialized_StringOps_kt_wzaea7;
  function init_properties_StringOps_kt_g67jhv() {
    if (properties_initialized_StringOps_kt_wzaea7) {
    } else {
      properties_initialized_StringOps_kt_wzaea7 = true;
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      tmp$ret$0 = fillArrayVal(Array(128), null);
      var tmp0_apply = tmp$ret$0;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.ESCAPE_CHARS.<anonymous>' call
      var inductionVariable = 0;
      if (inductionVariable <= 31)
        do {
          var c = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var c1 = toHexChar(c >> 12);
          var c2 = toHexChar(c >> 8);
          var c3 = toHexChar(c >> 4);
          var c4 = toHexChar(c);
          tmp0_apply[c] = '\\u' + new Char(c1) + new Char(c2) + new Char(c3) + new Char(c4);
        }
         while (inductionVariable <= 31);
      tmp0_apply[34] = '\\"';
      tmp0_apply[92] = '\\\\';
      tmp0_apply[9] = '\\t';
      tmp0_apply[8] = '\\b';
      tmp0_apply[10] = '\\n';
      tmp0_apply[13] = '\\r';
      tmp0_apply[12] = '\\f';
      tmp$ret$1 = tmp0_apply;
      ESCAPE_CHARS = tmp$ret$1;
    }
  }
  function readJson(_this__u8e3s4, element, deserializer) {
    var tmp0_subject = element;
    var tmp;
    if (tmp0_subject instanceof JsonObject) {
      tmp = JsonTreeDecoder_init_$Create$(_this__u8e3s4, element, null, null, 12, null);
    } else {
      if (tmp0_subject instanceof JsonArray) {
        tmp = new JsonTreeListDecoder(_this__u8e3s4, element);
      } else {
        var tmp_0;
        if (tmp0_subject instanceof JsonLiteral) {
          tmp_0 = true;
        } else {
          tmp_0 = equals(tmp0_subject, JsonNull_getInstance());
        }
        if (tmp_0) {
          tmp = new JsonPrimitiveDecoder(_this__u8e3s4, element instanceof JsonPrimitive ? element : THROW_CCE());
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    var input = tmp;
    return input.sg(deserializer);
  }
  function currentObject($this) {
    var tmp0_safe_receiver = $this.gj();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.currentObject.<anonymous>' call
      tmp$ret$0 = $this.im(tmp0_safe_receiver);
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? $this.f1() : tmp1_elvis_lhs;
  }
  function unparsedPrimitive($this, primitive) {
    throw JsonDecodingException_0(-1, "Failed to parse '" + primitive + "'", toString(currentObject($this)));
  }
  function AbstractJsonTreeDecoder(json, value) {
    NamedValueDecoder.call(this);
    this.fm_1 = json;
    this.gm_1 = value;
    this.hm_1 = this.tk().rj_1;
  }
  AbstractJsonTreeDecoder.prototype.tk = function () {
    return this.fm_1;
  };
  AbstractJsonTreeDecoder.prototype.f1 = function () {
    return this.gm_1;
  };
  AbstractJsonTreeDecoder.prototype.zg = function () {
    return this.tk().zg();
  };
  AbstractJsonTreeDecoder.prototype.uk = function () {
    return currentObject(this);
  };
  AbstractJsonTreeDecoder.prototype.sg = function (deserializer) {
    return decodeSerializableValuePolymorphic(this, deserializer);
  };
  AbstractJsonTreeDecoder.prototype.hj = function (parentName, childName) {
    return childName;
  };
  AbstractJsonTreeDecoder.prototype.tg = function (descriptor) {
    var currentObject_0 = currentObject(this);
    var tmp0_subject = descriptor.fg();
    var tmp;
    var tmp_0;
    if (equals(tmp0_subject, LIST_getInstance())) {
      tmp_0 = true;
    } else {
      tmp_0 = tmp0_subject instanceof PolymorphicKind;
    }
    if (tmp_0) {
      var tmp_1 = this.tk();
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      if (!(currentObject_0 instanceof JsonArray)) {
        throw JsonDecodingException_1(-1, 'Expected ' + getKClass(JsonArray) + ' as the serialized body of ' + descriptor.eg() + ', but had ' + getKClassFromExpression(currentObject_0));
      }
      tmp$ret$0 = currentObject_0;
      tmp = new JsonTreeListDecoder(tmp_1, tmp$ret$0);
    } else {
      if (equals(tmp0_subject, MAP_getInstance())) {
        var tmp$ret$5;
        // Inline function 'kotlinx.serialization.json.internal.selectMapMode' call
        var tmp0_selectMapMode = this.tk();
        var keyDescriptor = descriptor.kg(0);
        var keyKind = keyDescriptor.fg();
        var tmp_2;
        var tmp_3;
        if (keyKind instanceof PrimitiveKind) {
          tmp_3 = true;
        } else {
          tmp_3 = equals(keyKind, ENUM_getInstance());
        }
        if (tmp_3) {
          var tmp$ret$2;
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.beginStructure.<anonymous>' call
          var tmp_4 = this.tk();
          var tmp$ret$1;
          // Inline function 'kotlinx.serialization.json.internal.cast' call
          if (!(currentObject_0 instanceof JsonObject)) {
            throw JsonDecodingException_1(-1, 'Expected ' + getKClass(JsonObject) + ' as the serialized body of ' + descriptor.eg() + ', but had ' + getKClassFromExpression(currentObject_0));
          }
          tmp$ret$1 = currentObject_0;
          tmp$ret$2 = new JsonTreeMapDecoder(tmp_4, tmp$ret$1);
          tmp_2 = tmp$ret$2;
        } else {
          if (tmp0_selectMapMode.rj_1.xj_1) {
            var tmp$ret$4;
            // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.beginStructure.<anonymous>' call
            var tmp_5 = this.tk();
            var tmp$ret$3;
            // Inline function 'kotlinx.serialization.json.internal.cast' call
            if (!(currentObject_0 instanceof JsonArray)) {
              throw JsonDecodingException_1(-1, 'Expected ' + getKClass(JsonArray) + ' as the serialized body of ' + descriptor.eg() + ', but had ' + getKClassFromExpression(currentObject_0));
            }
            tmp$ret$3 = currentObject_0;
            tmp$ret$4 = new JsonTreeListDecoder(tmp_5, tmp$ret$3);
            tmp_2 = tmp$ret$4;
          } else {
            throw InvalidKeyKindException(keyDescriptor);
          }
        }
        tmp$ret$5 = tmp_2;
        tmp = tmp$ret$5;
      } else {
        var tmp_6 = this.tk();
        var tmp$ret$6;
        // Inline function 'kotlinx.serialization.json.internal.cast' call
        if (!(currentObject_0 instanceof JsonObject)) {
          throw JsonDecodingException_1(-1, 'Expected ' + getKClass(JsonObject) + ' as the serialized body of ' + descriptor.eg() + ', but had ' + getKClassFromExpression(currentObject_0));
        }
        tmp$ret$6 = currentObject_0;
        var tmp_7 = tmp$ret$6;
        tmp = JsonTreeDecoder_init_$Create$(tmp_6, tmp_7, null, null, 12, null);
      }
    }
    return tmp;
  };
  AbstractJsonTreeDecoder.prototype.ug = function (descriptor) {
  };
  AbstractJsonTreeDecoder.prototype.jm = function (tag) {
    var currentElement = this.im(tag);
    var tmp0_elvis_lhs = currentElement instanceof JsonPrimitive ? currentElement : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw JsonDecodingException_0(-1, 'Expected JsonPrimitive at ' + tag + ', found ' + currentElement, toString(currentObject(this)));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  AbstractJsonTreeDecoder.prototype.km = function (tag) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.primitive' call
      var tmp0_primitive = this.jm(tag);
      try {
        var tmp$ret$0;
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedInt.<anonymous>' call
        tmp$ret$0 = get_int(tmp0_primitive);
        var tmp0_elvis_lhs = tmp$ret$0;
        var tmp;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, 'int');
        } else {
          tmp = tmp0_elvis_lhs;
        }
        tmp$ret$1 = tmp;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          unparsedPrimitive(this, 'int');
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$1;
  };
  AbstractJsonTreeDecoder.prototype.jj = function (tag) {
    return this.km((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  AbstractJsonTreeDecoder.prototype.lm = function (tag) {
    var value = this.jm(tag);
    if (!this.tk().rj_1.wj_1) {
      var literal = value instanceof JsonLiteral ? value : THROW_CCE();
      if (!literal.el_1)
        throw JsonDecodingException_0(-1, "String literal for key '" + tag + "' should be quoted.\n" + get_lenientHint(), toString(currentObject(this)));
    }
    return value.cl();
  };
  AbstractJsonTreeDecoder.prototype.kj = function (tag) {
    return this.lm((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  AbstractJsonTreeDecoder.$metadata$ = classMeta('AbstractJsonTreeDecoder', [JsonDecoder], undefined, undefined, undefined, NamedValueDecoder.prototype);
  function JsonTreeDecoder_init_$Init$(json, value, polyDiscriminator, polyDescriptor, $mask0, $marker, $this) {
    if (!(($mask0 & 4) === 0))
      polyDiscriminator = null;
    if (!(($mask0 & 8) === 0))
      polyDescriptor = null;
    JsonTreeDecoder.call($this, json, value, polyDiscriminator, polyDescriptor);
    return $this;
  }
  function JsonTreeDecoder_init_$Create$(json, value, polyDiscriminator, polyDescriptor, $mask0, $marker) {
    return JsonTreeDecoder_init_$Init$(json, value, polyDiscriminator, polyDescriptor, $mask0, $marker, Object.create(JsonTreeDecoder.prototype));
  }
  function coerceInputValue_0($this, descriptor, index, tag) {
    var elementDescriptor = descriptor.kg(index);
    var tmp;
    var tmp_0 = $this.im(tag);
    if (tmp_0 instanceof JsonNull) {
      tmp = !elementDescriptor.gg();
    } else {
      tmp = false;
    }
    if (tmp)
      return true;
    if (equals(elementDescriptor.fg(), ENUM_getInstance())) {
      var tmp_1 = $this.im(tag);
      var tmp0_safe_receiver = tmp_1 instanceof JsonPrimitive ? tmp_1 : null;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : get_contentOrNull(tmp0_safe_receiver);
      var tmp_2;
      if (tmp1_elvis_lhs == null) {
        return false;
      } else {
        tmp_2 = tmp1_elvis_lhs;
      }
      var enumValue = tmp_2;
      var enumIndex = elementDescriptor.jg(enumValue);
      Companion_getInstance();
      if (enumIndex === -3)
        return true;
    }
    return false;
  }
  function JsonTreeDecoder(json, value, polyDiscriminator, polyDescriptor) {
    AbstractJsonTreeDecoder.call(this, json, value);
    this.rm_1 = value;
    this.sm_1 = polyDiscriminator;
    this.tm_1 = polyDescriptor;
    this.um_1 = 0;
  }
  JsonTreeDecoder.prototype.f1 = function () {
    return this.rm_1;
  };
  JsonTreeDecoder.prototype.bh = function (descriptor) {
    while (this.um_1 < descriptor.hg()) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.um_1;
      tmp0_this.um_1 = tmp1 + 1 | 0;
      var name = this.bj(descriptor, tmp1);
      var tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.contains' call
      var tmp0_contains = this.f1();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.containsKey' call
      tmp$ret$0 = (isInterface(tmp0_contains, Map) ? tmp0_contains : THROW_CCE()).c3(name);
      tmp$ret$1 = tmp$ret$0;
      if (tmp$ret$1) {
        tmp = !this.hm_1.ak_1 ? true : !coerceInputValue_0(this, descriptor, this.um_1 - 1 | 0, name);
      } else {
        tmp = false;
      }
      if (tmp) {
        return this.um_1 - 1 | 0;
      }
    }
    Companion_getInstance();
    return -1;
  };
  JsonTreeDecoder.prototype.im = function (tag) {
    return getValue(this.f1(), tag);
  };
  JsonTreeDecoder.prototype.tg = function (descriptor) {
    if (descriptor === this.tm_1)
      return this;
    return AbstractJsonTreeDecoder.prototype.tg.call(this, descriptor);
  };
  JsonTreeDecoder.prototype.ug = function (descriptor) {
    var tmp;
    if (this.hm_1.vj_1) {
      tmp = true;
    } else {
      var tmp_0 = descriptor.fg();
      tmp = tmp_0 instanceof PolymorphicKind;
    }
    if (tmp)
      return Unit_getInstance();
    var names = jsonCachedSerialNames(descriptor);
    var tmp0_iterator = this.f1().i3().f();
    while (tmp0_iterator.g()) {
      var key = tmp0_iterator.h();
      if (!names.u1(key) ? !(key === this.sm_1) : false) {
        throw UnknownKeyException(key, this.f1().toString());
      }
    }
  };
  JsonTreeDecoder.$metadata$ = classMeta('JsonTreeDecoder', undefined, undefined, undefined, undefined, AbstractJsonTreeDecoder.prototype);
  function JsonTreeListDecoder(json, value) {
    AbstractJsonTreeDecoder.call(this, json, value);
    this.an_1 = value;
    this.bn_1 = this.an_1.i();
    this.cn_1 = -1;
  }
  JsonTreeListDecoder.prototype.f1 = function () {
    return this.an_1;
  };
  JsonTreeListDecoder.prototype.cj = function (desc, index) {
    return index.toString();
  };
  JsonTreeListDecoder.prototype.im = function (tag) {
    return this.an_1.l(toInt(tag));
  };
  JsonTreeListDecoder.prototype.bh = function (descriptor) {
    while (this.cn_1 < (this.bn_1 - 1 | 0)) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.cn_1;
      tmp0_this.cn_1 = tmp1 + 1 | 0;
      return this.cn_1;
    }
    Companion_getInstance();
    return -1;
  };
  JsonTreeListDecoder.$metadata$ = classMeta('JsonTreeListDecoder', undefined, undefined, undefined, undefined, AbstractJsonTreeDecoder.prototype);
  function JsonPrimitiveDecoder(json, value) {
    AbstractJsonTreeDecoder.call(this, json, value);
    this.in_1 = value;
    this.lj(get_PRIMITIVE_TAG());
  }
  JsonPrimitiveDecoder.prototype.f1 = function () {
    return this.in_1;
  };
  JsonPrimitiveDecoder.prototype.bh = function (descriptor) {
    return 0;
  };
  JsonPrimitiveDecoder.prototype.im = function (tag) {
    // Inline function 'kotlin.require' call
    var tmp0_require = tag === get_PRIMITIVE_TAG();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlinx.serialization.json.internal.JsonPrimitiveDecoder.currentElement.<anonymous>' call
      tmp$ret$0 = "This input can only handle primitives with '" + get_PRIMITIVE_TAG() + "' tag";
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.in_1;
  };
  JsonPrimitiveDecoder.$metadata$ = classMeta('JsonPrimitiveDecoder', undefined, undefined, undefined, undefined, AbstractJsonTreeDecoder.prototype);
  function JsonTreeMapDecoder(json, value) {
    JsonTreeDecoder_init_$Init$(json, value, null, null, 12, null, this);
    this.sn_1 = value;
    this.tn_1 = toList(this.sn_1.i3());
    this.un_1 = imul(this.tn_1.i(), 2);
    this.vn_1 = -1;
  }
  JsonTreeMapDecoder.prototype.f1 = function () {
    return this.sn_1;
  };
  JsonTreeMapDecoder.prototype.cj = function (desc, index) {
    var i = index / 2 | 0;
    return this.tn_1.l(i);
  };
  JsonTreeMapDecoder.prototype.bh = function (descriptor) {
    while (this.vn_1 < (this.un_1 - 1 | 0)) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.vn_1;
      tmp0_this.vn_1 = tmp1 + 1 | 0;
      return this.vn_1;
    }
    Companion_getInstance();
    return -1;
  };
  JsonTreeMapDecoder.prototype.im = function (tag) {
    return (this.vn_1 % 2 | 0) === 0 ? JsonPrimitive_0(tag) : getValue(this.sn_1, tag);
  };
  JsonTreeMapDecoder.prototype.ug = function (descriptor) {
  };
  JsonTreeMapDecoder.$metadata$ = classMeta('JsonTreeMapDecoder', undefined, undefined, undefined, undefined, JsonTreeDecoder.prototype);
  function readPolymorphicJson(_this__u8e3s4, discriminator, element, deserializer) {
    return (new JsonTreeDecoder(_this__u8e3s4, element, discriminator, deserializer.cg())).sg(deserializer);
  }
  function get_PRIMITIVE_TAG() {
    return PRIMITIVE_TAG;
  }
  var PRIMITIVE_TAG;
  var WriteMode_OBJ_instance;
  var WriteMode_LIST_instance;
  var WriteMode_MAP_instance;
  var WriteMode_POLY_OBJ_instance;
  var WriteMode_entriesInitialized;
  function WriteMode_initEntries() {
    if (WriteMode_entriesInitialized)
      return Unit_getInstance();
    WriteMode_entriesInitialized = true;
    WriteMode_OBJ_instance = new WriteMode('OBJ', 0, get_BEGIN_OBJ(), get_END_OBJ());
    WriteMode_LIST_instance = new WriteMode('LIST', 1, get_BEGIN_LIST(), get_END_LIST());
    WriteMode_MAP_instance = new WriteMode('MAP', 2, get_BEGIN_OBJ(), get_END_OBJ());
    WriteMode_POLY_OBJ_instance = new WriteMode('POLY_OBJ', 3, get_BEGIN_LIST(), get_END_LIST());
  }
  function WriteMode(name, ordinal, begin, end) {
    Enum.call(this, name, ordinal);
    this.zl_1 = begin;
    this.am_1 = end;
    this.bm_1 = charToTokenClass(this.zl_1);
    this.cm_1 = charToTokenClass(this.am_1);
  }
  WriteMode.prototype.wn = function () {
    return this.zl_1;
  };
  WriteMode.prototype.xn = function () {
    return this.am_1;
  };
  WriteMode.$metadata$ = classMeta('WriteMode', undefined, undefined, undefined, undefined, Enum.prototype);
  function selectMapMode(_this__u8e3s4, mapDescriptor, ifMap, ifList) {
    var keyDescriptor = mapDescriptor.kg(0);
    var keyKind = keyDescriptor.fg();
    var tmp;
    var tmp_0;
    if (keyKind instanceof PrimitiveKind) {
      tmp_0 = true;
    } else {
      tmp_0 = equals(keyKind, ENUM_getInstance());
    }
    if (tmp_0) {
      tmp = ifMap();
    } else {
      if (_this__u8e3s4.rj_1.xj_1) {
        tmp = ifList();
      } else {
        throw InvalidKeyKindException(keyDescriptor);
      }
    }
    return tmp;
  }
  function switchMode(_this__u8e3s4, desc) {
    var tmp0_subject = desc.fg();
    var tmp;
    if (tmp0_subject instanceof PolymorphicKind) {
      tmp = WriteMode_POLY_OBJ_getInstance();
    } else {
      if (equals(tmp0_subject, LIST_getInstance())) {
        tmp = WriteMode_LIST_getInstance();
      } else {
        if (equals(tmp0_subject, MAP_getInstance())) {
          var tmp$ret$2;
          // Inline function 'kotlinx.serialization.json.internal.selectMapMode' call
          var keyDescriptor = desc.kg(0);
          var keyKind = keyDescriptor.fg();
          var tmp_0;
          var tmp_1;
          if (keyKind instanceof PrimitiveKind) {
            tmp_1 = true;
          } else {
            tmp_1 = equals(keyKind, ENUM_getInstance());
          }
          if (tmp_1) {
            var tmp$ret$0;
            // Inline function 'kotlinx.serialization.json.internal.switchMode.<anonymous>' call
            tmp$ret$0 = WriteMode_MAP_getInstance();
            tmp_0 = tmp$ret$0;
          } else {
            if (_this__u8e3s4.rj_1.xj_1) {
              var tmp$ret$1;
              // Inline function 'kotlinx.serialization.json.internal.switchMode.<anonymous>' call
              tmp$ret$1 = WriteMode_LIST_getInstance();
              tmp_0 = tmp$ret$1;
            } else {
              throw InvalidKeyKindException(keyDescriptor);
            }
          }
          tmp$ret$2 = tmp_0;
          tmp = tmp$ret$2;
        } else {
          tmp = WriteMode_OBJ_getInstance();
        }
      }
    }
    return tmp;
  }
  function WriteMode_OBJ_getInstance() {
    WriteMode_initEntries();
    return WriteMode_OBJ_instance;
  }
  function WriteMode_LIST_getInstance() {
    WriteMode_initEntries();
    return WriteMode_LIST_instance;
  }
  function WriteMode_MAP_getInstance() {
    WriteMode_initEntries();
    return WriteMode_MAP_instance;
  }
  function WriteMode_POLY_OBJ_getInstance() {
    WriteMode_initEntries();
    return WriteMode_POLY_OBJ_instance;
  }
  //region block: post-declaration
  StreamingJsonDecoder.prototype.ah = decodeSequentially;
  StreamingJsonDecoder.prototype.ch = decodeCollectionSize;
  StreamingJsonDecoder.prototype.yg = decodeSerializableElement$default;
  AbstractJsonTreeDecoder.prototype.yg = decodeSerializableElement$default;
  AbstractJsonTreeDecoder.prototype.ah = decodeSequentially;
  AbstractJsonTreeDecoder.prototype.ch = decodeCollectionSize;
  JsonTreeDecoder.prototype.yg = decodeSerializableElement$default;
  JsonTreeDecoder.prototype.ah = decodeSequentially;
  JsonTreeDecoder.prototype.ch = decodeCollectionSize;
  JsonTreeListDecoder.prototype.yg = decodeSerializableElement$default;
  JsonTreeListDecoder.prototype.ah = decodeSequentially;
  JsonTreeListDecoder.prototype.ch = decodeCollectionSize;
  JsonPrimitiveDecoder.prototype.yg = decodeSerializableElement$default;
  JsonPrimitiveDecoder.prototype.ah = decodeSequentially;
  JsonPrimitiveDecoder.prototype.ch = decodeCollectionSize;
  JsonTreeMapDecoder.prototype.yg = decodeSerializableElement$default;
  JsonTreeMapDecoder.prototype.ah = decodeSequentially;
  JsonTreeMapDecoder.prototype.ch = decodeCollectionSize;
  //endregion
  //region block: init
  STRING = _Char___init__impl__6a9atx(34);
  INVALID = _Char___init__impl__6a9atx(0);
  BEGIN_OBJ = _Char___init__impl__6a9atx(123);
  END_OBJ = _Char___init__impl__6a9atx(125);
  BEGIN_LIST = _Char___init__impl__6a9atx(91);
  END_LIST = _Char___init__impl__6a9atx(93);
  TC_BEGIN_LIST = 8;
  TC_BEGIN_OBJ = 6;
  TC_OTHER = 0;
  TC_STRING = 1;
  TC_NULL = 10;
  lenientHint = "Use 'isLenient = true' in 'Json {}` builder to accept non-compliant JSON.";
  TC_END_LIST = 9;
  TC_END_OBJ = 7;
  TC_COMMA = 4;
  TC_COLON = 5;
  ignoreUnknownKeysHint = "Use 'ignoreUnknownKeys = true' in 'Json {}' builder to ignore unknown keys.";
  allowStructuredMapKeysHint = "Use 'allowStructuredMapKeys = true' in 'Json {}' builder to convert such maps to [key1, value1, key2, value2,...] arrays.";
  PRIMITIVE_TAG = 'primitive';
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Default_getInstance;
  _.$_$.b = JsonArray;
  _.$_$.c = JsonObject;
  _.$_$.d = JsonTransformingSerializer;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

;// CONCATENATED MODULE: ./src/utils/ExhaustivityError.ts
class ExhaustivityError extends Error{// https://typescriptbook.jp/reference/statements/never#%E4%BE%8B%E5%A4%96%E3%81%AB%E3%82%88%E3%82%8B%E7%B6%B2%E7%BE%85%E6%80%A7%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF (例外による網羅性チェック)
constructor(value,message=`Unsupported type: ${value}`){super(message);}}
// EXTERNAL MODULE: ./node_modules/kohomology-js/kotlin/kohomology-js.js
var kohomology_js = __webpack_require__(617);
;// CONCATENATED MODULE: ./src/components/Calculator/styled/message.ts
const stringTypes=["text","math"];const messageTypes=["success","error"];function formatStyledMessage(styledMessage){return styledMessage.strings.map(styledString=>styledString.content).join("");}function fromString(messageType,str){const styledString={stringType:"text",content:str};return{messageType:messageType,strings:[styledString]};}
;// CONCATENATED MODULE: ./src/components/Calculator/worker/styled.ts
function toStyledString(styledStringKt){const stringType=styledStringKt.stringType;if(!stringTypes.includes(stringType)){throw new Error(`Invalid stringType: ${stringType}`);}return{stringType:stringType,content:styledStringKt.content};}function toStyledMessage(styledMessageKt){const messageType=styledMessageKt.messageType;if(!messageTypes.includes(messageType)){throw new Error(`Invalid messageType: ${messageType}`);}return{messageType:messageType,strings:styledMessageKt.strings.map(toStyledString)};}
;// CONCATENATED MODULE: ./src/components/Calculator/worker/KohomologyMessageHandler.ts
class KohomologyMessageHandler{dgaWrapper=null;constructor(postMessage,log,error){// this.onmessage = this.onmessage.bind(this)
this.log=log??((...messages)=>console.log(...messages));this.error=error??((...messages)=>console.error(...messages));this.postMessage=output=>{this.log("WorkerOutput",output);postMessage(output);};this.log("new KohomologyMessageHandler()");}onmessage(input){this.log("WorkerInput",input);this.notifyInfo({status:"computing",progress:null});try{switch(input.command){case"updateJson":this.updateJson(input.json);this.showDgaInfo();break;case"computeCohomology":this.computeCohomology(input.targetName,input.minDegree,input.maxDegree,input.showCohomology);break;case"computeCohomologyClass":this.computeCohomologyClass(input.targetName,input.cocycleString,input.showBasis);break;default:throw new ExhaustivityError(input,`Invalid command: ${input}`);}}catch(error){if(error instanceof Error){this.sendMessages(fromString("error",error.message));}this.error(error);}finally{this.notifyInfo({status:"idle"});}}updateJson(json){try{this.dgaWrapper=new kohomology_js.FreeDGAWrapper(json);const output={command:"updateState",key:"json",value:json};this.postMessage(output);}catch(error){this.dgaWrapper=null;throw error;}}sendMessages(messages){if(messages instanceof Array){const output={command:"printMessages",messages:messages};this.postMessage(output);}else{const output={command:"printMessages",messages:[messages]};this.postMessage(output);}}notifyInfo(workerInfo){const output={command:"updateState",key:"workerInfo",value:workerInfo};this.postMessage(output);}computeCohomology(targetName,minDegree,maxDegree,showCohomology){assertNotNull(this.dgaWrapper,"dgaWrapper is null");this.sendMessages(toStyledMessage(this.dgaWrapper.computationHeader(targetName,minDegree,maxDegree)));this.notifyInfo({status:"computing",progress:0});let styledMessages=[];let previousTime=new Date().getTime();// in millisecond
for(let degree=minDegree;degree<=maxDegree;degree++){switch(showCohomology){// Don't send message immediately for performance reason.
// If styledMessages.push(...) is replaced with this.sendMessages(...),
// then the Calculator significantly slows down.
// This is because this.sendMessages(...) causes re-render of the component Calculator.
case"basis":styledMessages.push(toStyledMessage(this.dgaWrapper.computeCohomology(targetName,degree)));break;case"dim":styledMessages.push(toStyledMessage(this.dgaWrapper.computeCohomologyDim(targetName,degree)));break;}const currentTime=new Date().getTime();// in millisecond
if(currentTime-previousTime>500){previousTime=currentTime;this.sendMessages(styledMessages);const progress=(degree-minDegree+1)/(maxDegree-minDegree+1);this.notifyInfo({status:"computing",progress});styledMessages=[];}}this.sendMessages(styledMessages);}computeCohomologyClass(targetName,cocycleString,showBasis){assertNotNull(this.dgaWrapper,"dgaWrapper is null");this.notifyInfo({status:"computing",progress:null});this.sendMessages(toStyledMessage(this.dgaWrapper.computeCohomologyClass(targetName,cocycleString,showBasis)));}showDgaInfo(){if(this.dgaWrapper===null){const message="[Error] Your DGA contains errors. Please fix them.";const output={command:"updateState",key:"dgaInfo",value:[fromString("error",message)]};this.postMessage(output);}else{const output={command:"updateState",key:"dgaInfo",value:this.dgaWrapper.dgaInfo().map(toStyledMessage)};this.postMessage(output);}}}function assertNotNull(value,errorMessage){if(value===null){throw new Error(errorMessage);}}
;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./src/components/Calculator/worker/kohomology.worker.ts
// eslint-disable-next-line no-restricted-globals
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const ctx=self;const messageHandler=new KohomologyMessageHandler(ctx.postMessage.bind(ctx));onmessage=e=>messageHandler.onmessage(e.data);
})();

/******/ })()
;