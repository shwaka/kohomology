/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.shwaka.kohomology

import com.github.shwaka.kohomology.field.BigRational
import com.github.shwaka.kohomology.field.BigRationalField
import com.github.shwaka.kohomology.field.Field
import com.github.shwaka.kohomology.field.Fp
import com.github.shwaka.kohomology.field.IntRational
import com.github.shwaka.kohomology.field.IntRationalField
import io.kotest.core.spec.style.StringSpec
import io.kotest.core.spec.style.stringSpec
import io.kotest.matchers.compilation.shouldCompile
import io.kotest.matchers.compilation.shouldNotCompile
import io.kotest.matchers.shouldBe

fun <S> fieldTest(field: Field<S>) = stringSpec {
    "1 + 2 should be 3" {
        (field.fromInt(1) + field.fromInt(2)) shouldBe field.fromInt(3)
    }
    "1 - 1 should be 0" {
        (field.fromInt(1) - field.fromInt(1)) shouldBe field.fromInt(0)
    }
}

class IntRationalTest : StringSpec({
    include(fieldTest(IntRationalField))
    "1/2 + 1/3 should be 5/6" {
        val a = IntRational(1, 2)
        val b = IntRational(1, 3)
        (a + b) shouldBe IntRational(5, 6)
    }
    "2/6 should be 1/3" {
        IntRational(2, 6) shouldBe IntRational(1, 3)
    }
    "1/(-2) should be (-1)/2" {
        IntRational(1, -2) shouldBe IntRational(-1, 2)
    }
    "0/2 should be 0/1" {
        IntRational(0, 2) shouldBe IntRational(0, 1)
    }
    "5/6 * 2/3 should be 5/9" {
        (IntRational(5, 6) * IntRational(2, 3)) shouldBe IntRational(5, 9)
    }
})

class BigRationalTest : StringSpec({
    include(fieldTest(BigRationalField))
    "1/2 + 1/3 should be 5/6" {
        val a = BigRational(1, 2)
        val b = BigRational(1, 3)
        (a + b) shouldBe BigRational(5, 6)
    }
})

class IntModpTest : StringSpec({
    val fp = Fp(5)
    include(fieldTest(fp))
})

class CompileTest : StringSpec({
    "IntRational + IntRational should compile" {
        val codeSnippet = """
            import com.github.shwaka.kohomology.field.IntRational
            val foo = IntRational(0, 1) + IntRational(1, 0)
        """ // compiles, but runtime error
        codeSnippet.shouldCompile()
    }
    "Rational + IntModp should not compile" {
        val codeSnippet = """
            import com.github.shwaka.kohomology.field.Rational
            import com.github.shwaka.kohomology.field.IntModp
            val foo = IntRational(0, 1) + IntModp(0, 7)
        """
        codeSnippet.shouldNotCompile()
    }
})
