#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")"
comparison_dir=$(pwd)
json_file=$comparison_dir/comparison_data.json
ts_dir=$comparison_dir/../webapp/src/components/ComparisonChart
output_file=$ts_dir/comparison.json
ts_file=$ts_dir/comparisonKeys.ts

tools_json=$(jq '. | keys' < "$json_file")
targets_json=$(jq '[.[] | keys] | add | unique' < "$json_file")

# Run benchmark and write it to $output_file
result="{}"
for tool in $(echo "$tools_json" | jq --raw-output '.[]'); do
    executable=$tool/main.sh
    version_string=$("$executable" version)
    result_tool_bench="{}"
    for target in $(jq --raw-output \
                       --arg tool "$tool" \
                       '.[$tool] | keys | .[]' \
                       < "$json_file"); do
        result_target="[]"
        # .[$tool].[$target].degrees' does not work. May be a bug of jq?
        degrees_json=$(jq --arg tool "$tool" \
                          --arg target "$target" \
                          '.[$tool] | .[$target].degrees' \
                          < "$json_file")
        degrees=$(echo "$degrees_json" | jq --raw-output '.[]')
        for degree in $degrees; do
            tempfile=$(mktemp)
            # Since bash-builtin time has no options, /usr/bin/time should be used.
            # /usr/bin/time can accept only external commands, not bash functions.
            /usr/bin/time --format "%e" --output "$tempfile" \
                          "$executable" compute "$target" "$degree"
            result_target=$(echo "$result_target" |
                                   jq --argjson time "$(cat "$tempfile")" \
                                      '. |= . + [$time]')
        done
        result_tool_bench=$(echo "$result_tool_bench" |
                                jq --arg target "$target" \
                                   --argjson degrees "$degrees_json" \
                                   --argjson result_target "$result_target" \
                                   '. |= . + { ($target): { "time": $result_target, "degrees": $degrees} }')
    done
    result_tool=$(jq --null-input \
                     --arg version_string "$version_string" \
                     --argjson result_tool_bench "$result_tool_bench" \
                     '{ "version": $version_string, "benchmark": $result_tool_bench }')
    result=$(echo "$result" |
                 jq --arg tool "$tool" \
                    --argjson result_tool "$result_tool" \
                    '.[$tool] = $result_tool')
done

# json=$(jq --null-input \
#           --argjson result "$result" \
#           '{ $result }')
echo "$result" > "$output_file"


# Write data to $ts_file
ts=$(cat <<EOS
// This file is auto-generated by $(basename "$0")
export const tools = $tools_json as const
export type Tool = (typeof tools)[number]

export const targets = $targets_json as const
export type Target = (typeof targets)[number]
EOS
)
echo "$ts" > "$ts_file"
