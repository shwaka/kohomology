import { ExhaustivityError } from "@site/src/utils/ExhaustivityError"
import { render, renderHook, act, screen, waitFor } from "@testing-library/react"
import userEvent, { UserEvent } from "@testing-library/user-event"
import React, { useState } from "react"
import { IdealEditor } from "./IdealEditor"
import { useIdealEditor, UseIdealEditorArgs } from "./useIdealEditor"

describe("IdealEditor", () => {
  test("empty text as generator", async () => {
    const closeDialog = jest.fn()
    const hookArgs: UseIdealEditorArgs = {
      idealJson: "[]",
      setIdealJson: jest.fn(),
      validateGenerator: jest.fn().mockResolvedValue(true),
      validateGeneratorArray: jest.fn().mockResolvedValue(true),
    }
    const { result } = renderHook(() => useIdealEditor(hookArgs))
    const { rerender } = render(
      <IdealEditor
        {...result.current.idealEditorPropsExceptOnSubmit}
        onSubmit={result.current.getOnSubmit(closeDialog)}
      />
    )

    act(() => {
      result.current.idealEditorPropsExceptOnSubmit.append({ text: "" })
    })
    rerender(
      <IdealEditor
        {...result.current.idealEditorPropsExceptOnSubmit}
        onSubmit={result.current.getOnSubmit(closeDialog)}
      />
    )
    await act(async () => {
      await result.current.getOnSubmit(jest.fn())()
    })
    rerender(
      <IdealEditor
        {...result.current.idealEditorPropsExceptOnSubmit}
        onSubmit={result.current.getOnSubmit(closeDialog)}
      />
    )

    expect(screen.getByRole("alert")).toContainHTML("Please enter the generator.")
  })
})

type TestContainerProps = {
  useIdealEditorArgs: Omit<UseIdealEditorArgs, "idealJson" | "setIdealJson">
  closeDialog: () => void
}
export function IdealEditorTestContainer(
  { useIdealEditorArgs, closeDialog }: TestContainerProps
): React.JSX.Element {
  const [idealJson, setIdealJson] = useState("[]")
  const { idealEditorPropsExceptOnSubmit, getOnSubmit } = useIdealEditor({
    ...useIdealEditorArgs,
    idealJson, setIdealJson
  })
  const onSubmit = getOnSubmit(closeDialog)

  return (
    <React.Fragment>
      <IdealEditor
        {...idealEditorPropsExceptOnSubmit}
        onSubmit={onSubmit}
      />
      <button onClick={onSubmit}>
        Apply
      </button>
    </React.Fragment>
  )
}

async function addGenerators(user: UserEvent, generators: string[]): Promise<void> {
  const addGeneratorButton = screen.getByText("Add a generator")
  for (const [index, generator] of generators.entries()) {
    await user.click(addGeneratorButton)
    if (generator !== "") {
      // user.type does not accept the empty string.
      const input = screen.getByTestId(`IdealEditorItem-input-${index}`)
      await user.type(input, generator)
    }
  }
}

export type ApplyMethod = "button" | "enter"

async function apply(user: UserEvent, applyMethod: ApplyMethod = "button", enterIndex: number = 0): Promise<void> {
  switch (applyMethod) {
    case "button": {
      const applyButton = screen.getByText("Apply")
      await user.click(applyButton)
      return
    }
    case "enter": {
      const input = screen.getByTestId(`IdealEditorItem-input-${enterIndex}`)
      await user.type(input, "{enter}")
      return
    }
    default:
      throw new ExhaustivityError(applyMethod)
  }
}

describe("IdealEditorTestContainer", () => {
  test("empty text as generator", async () => {
    const user = userEvent.setup()
    const testContainerProps: TestContainerProps = {
      useIdealEditorArgs: {
        validateGenerator: jest.fn().mockResolvedValue(true),
        validateGeneratorArray: jest.fn().mockResolvedValue(true),
      },
      closeDialog: jest.fn(),
    }
    render(<IdealEditorTestContainer {...testContainerProps}/>)

    await addGenerators(user, [""])
    await apply(user)

    expect(await screen.findByRole("alert")).toContainHTML("Please enter the generator.")
  })

  test("ideal generated by x", async () => {
    const user = userEvent.setup()
    const closeDialog = jest.fn()
    const testContainerProps: TestContainerProps = {
      useIdealEditorArgs: {
        validateGenerator: jest.fn().mockResolvedValue(true),
        validateGeneratorArray: jest.fn().mockResolvedValue(true),
      },
      closeDialog,
    }
    render(<IdealEditorTestContainer {...testContainerProps}/>)

    await addGenerators(user, ["x"])
    await apply(user, )

    await waitFor(() => {
      expect(closeDialog).toHaveBeenCalled()
    })
    expect(screen.queryByRole("alert")).not.toBeInTheDocument()
  })

  for (const count of [1, 2]) {
    test(`submit with enter at index ${count - 1}`, async () => {
      const user = userEvent.setup()
      const closeDialog = jest.fn()
      const testContainerProps: TestContainerProps = {
        useIdealEditorArgs: {
          validateGenerator: jest.fn().mockResolvedValue(true),
          validateGeneratorArray: jest.fn().mockResolvedValue(true),
        },
        closeDialog,
      }
      render(<IdealEditorTestContainer {...testContainerProps}/>)

      await addGenerators(user, [...Array(count).keys()].map((n) => `x${n}`))
      await apply(user, "enter", count - 1)

      await waitFor(() => {
        expect(closeDialog).toHaveBeenCalled()
      })
      expect(screen.queryByRole("alert")).not.toBeInTheDocument()
    })
  }

  test("parse error", async () => {
    const user = userEvent.setup()
    const errorMessage = "This is an error message for test."
    const testContainerProps: TestContainerProps = {
      useIdealEditorArgs: {
        validateGenerator: jest.fn().mockResolvedValue(errorMessage),
        validateGeneratorArray: jest.fn().mockResolvedValue(true),
      },
      closeDialog: jest.fn(),
    }
    render(<IdealEditorTestContainer {...testContainerProps}/>)

    await addGenerators(user, ["x"])
    await apply(user)

    await waitFor(() => {
      expect(screen.getByRole("alert")).toContainHTML(errorMessage)
    })
    expect(await screen.findByRole("alert")).toContainHTML(errorMessage)
  })

  test("global error", async () => {
    const user = userEvent.setup()
    const errorMessage = "This is an error message for test."
    const testContainerProps: TestContainerProps = {
      useIdealEditorArgs: {
        validateGenerator: jest.fn().mockResolvedValue(true),
        validateGeneratorArray: jest.fn().mockResolvedValue(errorMessage),
      },
      closeDialog: jest.fn(),
    }
    render(<IdealEditorTestContainer {...testContainerProps}/>)

    await addGenerators(user, ["x"])
    await apply(user)

    await waitFor(() => {
      expect(screen.getByRole("alert")).toContainHTML(errorMessage)
    })
    expect(await screen.findByRole("alert")).toContainHTML(errorMessage)
  })
})
