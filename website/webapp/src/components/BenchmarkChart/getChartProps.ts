// Copied from index.html generated by github-action-benchmark

import { ChartData } from "chart.js"
import { ChartProps } from "react-chartjs-2"

import { BenchmarkDataHandler, BenchWithCommit, CommitWithDate } from "./BenchmarkDataHandler"

// Colors from https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
const toolColors = {
  cargo: "#dea584",
  go: "#00add8",
  benchmarkjs: "#f1e05a",
  benchmarkluau: "#000080",
  pytest: "#3572a5",
  googlecpp: "#f34b7d",
  catch2: "#f34b7d",
  julia: "#a270ba",
  jmh: "#b07219",
  benchmarkdotnet: "#178600",
  customBiggerIsBetter: "#38ff38",
  customSmallerIsBetter: "#ff3838",
  _: "#333333",
}

function extractMethodName(name: string): string {
  return name.replace("com.github.shwaka.kohomology.profile.KohomologyBenchmark.", "")
}

type Value = { x: string, y: number }

type TooltipCallbacks<T> = {
  title: (data: T) => string
  afterTitle: (data: T) => string
  label: (data: T) => string
  afterLabel: (data: T) => string
}

function getChartPropsImpl<T, K>(
  { name, color, xTitle, yTitle, dataset, getValue, keys, getKey, filterKey, getLabel, labelToTick, tooltipCallbacks, getOnClickUrl }: {
    name: string
    color: string
    xTitle: string
    yTitle: string
    dataset: T[]
    getValue: (data: T) => Value
    keys: K[]
    getKey: (data: T) => K
    filterKey: (key: K) => boolean
    getLabel: (key: K) => string
    labelToTick: (label: string) => string
    tooltipCallbacks: TooltipCallbacks<T>
    getOnClickUrl: (data: T) => string
  }
): ChartProps<"line", Value[], string> {
  const filteredDataset = dataset.filter((data) => filterKey(getKey(data)))
  const data: ChartData<"line", Value[], string> = {
    labels: keys.filter(filterKey).map(getLabel),
    datasets: [
      {
        label: extractMethodName(name),
        data: filteredDataset.map(getValue),
        borderColor: color,
        backgroundColor: color + "60", // Add alpha for #rrggbbaa
        fill: true,
        tension: 0.2,
      }
    ],
  }
  const options: ChartProps<"line", Value[], string>["options"] = {
    scales: {
      x: {
        type: "category",
        title: {
          display: true,
          text: xTitle,
        },
        ticks: {
          callback: function (tickValue: string | number): string {
            if (typeof tickValue === "string") {
              throw new Error("This can't happen!")
            }
            const label: string = this.getLabelForValue(tickValue)
            return labelToTick(label)
          }
        }
      },
      y: {
        title: {
          display: true,
          text: yTitle,
        },
        suggestedMin: 0,
      },
    },
    plugins: {
      tooltip: {
        callbacks: {
          title: (items) => {
            const item = items[0]
            const data = filteredDataset[item.dataIndex]
            return tooltipCallbacks.title(data)
          },
          afterTitle: (items) => {
            const item = items[0]
            const data = filteredDataset[item.dataIndex]
            return tooltipCallbacks.afterTitle(data)
          },
          label: (item) => {
            const data = filteredDataset[item.dataIndex]
            return tooltipCallbacks.label(data)
          },
          afterLabel: (item) => {
            const data = filteredDataset[item.dataIndex]
            return tooltipCallbacks.afterLabel(data)
          }
        }
      }
    },
    onClick: (_mouseEvent, activeElems) => {
      if (activeElems.length === 0) {
        return
      }
      const index = activeElems[0].index
      const data = filteredDataset[index]
      const url = getOnClickUrl(data)
      window.open(url, "_blank")
    },
  }

  return {
    type: "line",
    data,
    options,
  }
}

export function getChartProps(
  { name, dataset, dataHandler, filterCommit }: {
    name: string
    dataset: BenchWithCommit[]
    dataHandler: BenchmarkDataHandler
    filterCommit: (commit: CommitWithDate) => boolean
  }
): ChartProps<"line", Value[], string> {
  const benchUnit: string = dataset.length > 0 ? dataset[0].bench.unit : ""
  const color = toolColors[dataset.length > 0 ? dataset[0].tool : "_"] // previously, filteredDataset.length was used for "color". Why?
  return getChartPropsImpl<BenchWithCommit, CommitWithDate>({
    name, color,
    xTitle: "commit date",
    yTitle: benchUnit,
    dataset,
    getValue: (benchWithCommit) => ({
      x: benchWithCommit.commit.id,
      y: benchWithCommit.bench.value,
    }),
    keys: dataHandler.commits,
    getKey: (benchWithCommit) => benchWithCommit.commit,
    filterKey: filterCommit,
    getLabel: (commitWithDate) => commitWithDate.id,
    labelToTick: (commitId) => {
      const timestamp: string = dataHandler.getCommitTimestamp(commitId)
      // 2022-01-01T11:23:45+09:00 -> 2022-01-01
      return timestamp.slice(0, 10)
    },
    tooltipCallbacks: {
      title: (data) => data.commit.id,
      afterTitle: (data) => {
        const commit = data.commit
        return "\n" + commit.message + "\n\n" + commit.timestamp + " committed by @" + commit.committer.username + "\n"
      },
      label: (data) => {
        const { range, unit, value } = data.bench
        let result = value.toString() + " " + unit
        if (typeof range === "string") {
          result += " (" + range + ")"
        } else if (range !== undefined) {
          // See https://github.com/benchmark-action/github-action-benchmark
          throw new Error("range must be a string, but was ${range}")
        }
        return result
      },
      afterLabel: (data) => {
        const { extra } = data.bench
        if (extra === undefined) {
          return ""
        }
        if (typeof extra !== "string") {
          // See https://github.com/benchmark-action/github-action-benchmark
          throw new Error("extra must be a string, but was ${extra}")
        }
        return "\n" + extra
      }
    },
    getOnClickUrl: (benchWithCommit) => benchWithCommit.commit.url,
  })
}
